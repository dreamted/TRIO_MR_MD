###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     18/May/2015  16:57:17 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\dev\adf411x\adf411x.c                             #
#    Command line =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\dev\adf411x\adf411x.c -lC                         #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\out\ -o D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm #
#                    207_20150327_20150518\out\ --endian=little               #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\include\ -I D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl #
#                    _stm207_20150327_20150518\STM32F2xx_StdPeriph_Driver_v12 #
#                    12\ -I D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_2015 #
#                    0327_20150518\STM32F2xx_StdPeriph_Driver_v1212\inc\ -I   #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\uC-CPU\ -I D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_ #
#                    stm207_20150327_20150518\uC-LIB\ -I                      #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\uCOS-II\Ports\ -I D:\Project\TRIO_MD\3.F_W\TRIO_M #
#                    D_appl_stm207_20150327_20150518\uCOS-II\Source\ -I       #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\uC-Probe\ -Oh --use_c++_inline                    #
#    List file    =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\out\adf411x.lst                                   #
#    Object file  =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20 #
#                    150518\out\adf411x.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20150327_20150518\dev\adf411x\adf411x.c
      1          /*******************************************************************************
      2           *
      3           * This module contains the function HMS39C7092 original source file, a function
      4           * whole things  initializations - global, include function and so on
      5           *
      6           *
      7           * Note that this function is called before the data segments are
      8           * initialized, this means that this function cannot rely on the
      9           * values of global or static variables.
     10           *
     11           *
     12           * Copyright 2006- bizistyle(bgyoon@hanafos.com) All rights reserved.
     13           * - used for LMX2306/LMX2316/LMX411x
     14           
     15           * $Revision: 0.1 $
     16           * $Revision date: 2006.08.__
     17           *
     18            ******************************************************************************/
     19          #define PLL_C
     20           
     21          #include "../include/main.h"

   \                                 In section .bss, align 4
   \   __absolute INT32U dReffreq[5]
   \                     dReffreq:
   \   00000000                      DS8 20
   \   __absolute INT32U dStep[5]
   \                     dStep:
   \   00000014                      DS8 20
   \   __absolute INT32U dPre[5]
   \                     dPre:
   \   00000028                      DS8 20
     22          
     23          #define	__PRE		32
     24          
     25          //#define	Pll232x_debug
     26          
     27          #define CLKDELAY	ForDelay(10)
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void SetPllClk(INT8U Path)
     30          {
     31          	     if(Path == 0)	PLL_CLK = SET;
   \                     SetPllClk:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2801             CMPNE    R0,#+1
     32          	else if(Path == 1)	PLL_CLK = SET;
   \   00000006   0xD004             BEQ.N    ??SetPllClk_0
     33          	else if(Path == 2)	PLL_CLK = SET;
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xBF1C             ITT      NE 
   \   0000000C   0x2803             CMPNE    R0,#+3
     34          	else if(Path == 3)	PLL_CLK = SET;
   \   0000000E   0x2804             CMPNE    R0,#+4
     35          	else if(Path == 4)	PLL_CLK = SET;
   \   00000010   0xD104             BNE.N    ??SetPllClk_1
   \                     ??SetPllClk_0:
   \   00000012   0x....             LDR.N    R0,??DataTable7  ;; 0x40020014
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     36          }
   \                     ??SetPllClk_1:
   \   0000001C   0x4770             BX       LR               ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void RstPllClk(INT8U Path)
     39          {
     40          	     if(Path == 0)	PLL_CLK = RESET;
   \                     RstPllClk:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2801             CMPNE    R0,#+1
     41          	else if(Path == 1)	PLL_CLK = RESET;
   \   00000006   0xD004             BEQ.N    ??RstPllClk_0
     42          	else if(Path == 2)	PLL_CLK = RESET;
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xBF1C             ITT      NE 
   \   0000000C   0x2803             CMPNE    R0,#+3
     43          	else if(Path == 3)	PLL_CLK = RESET;
   \   0000000E   0x2804             CMPNE    R0,#+4
     44          	else if(Path == 4)	PLL_CLK = RESET;
   \   00000010   0xD104             BNE.N    ??RstPllClk_1
   \                     ??RstPllClk_0:
   \   00000012   0x....             LDR.N    R0,??DataTable7  ;; 0x40020014
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF421 0x4100      BIC      R1,R1,#0x8000
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     45          }
   \                     ??RstPllClk_1:
   \   0000001C   0x4770             BX       LR               ;; return
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void SetPllData(INT8U Path)
     48          {
   \                     SetPllData:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     49          	CLKDELAY;	
   \   00000004   0x200A             MOVS     R0,#+10
   \   00000006   0x.... 0x....      BL       ForDelay
     50          	     if(Path == 0)	PLL_DATA = SET;
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2C01             CMPNE    R4,#+1
     51          	else if(Path == 1)	PLL_DATA = SET;
   \   00000010   0xD004             BEQ.N    ??SetPllData_0
     52          	else if(Path == 2)	PLL_DATA = SET;
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xBF1C             ITT      NE 
   \   00000016   0x2C03             CMPNE    R4,#+3
     53          	else if(Path == 3)	PLL_DATA = SET;
   \   00000018   0x2C04             CMPNE    R4,#+4
     54          	else if(Path == 4)	PLL_DATA = SET;
   \   0000001A   0xD104             BNE.N    ??SetPllData_1
   \                     ??SetPllData_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40020414
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000024   0x6001             STR      R1,[R0, #+0]
     55          	
     56          }
   \                     ??SetPllData_1:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void RstPllData(INT8U Path)
     59          {
   \                     RstPllData:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     60          	CLKDELAY;	
   \   00000004   0x200A             MOVS     R0,#+10
   \   00000006   0x.... 0x....      BL       ForDelay
     61          	     if(Path == 0) 	PLL_DATA = RESET;
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2C01             CMPNE    R4,#+1
     62          	else if(Path == 1)	PLL_DATA = RESET;
   \   00000010   0xD004             BEQ.N    ??RstPllData_0
     63          	else if(Path == 2)	PLL_DATA = RESET;
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xBF1C             ITT      NE 
   \   00000016   0x2C03             CMPNE    R4,#+3
     64          	else if(Path == 3)	PLL_DATA = RESET;
   \   00000018   0x2C04             CMPNE    R4,#+4
     65          	else if(Path == 4)	PLL_DATA = RESET;
   \   0000001A   0xD104             BNE.N    ??RstPllData_1
   \                     ??RstPllData_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40020414
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF021 0x0108      BIC      R1,R1,#0x8
   \   00000024   0x6001             STR      R1,[R0, #+0]
     66          }
   \                     ??RstPllData_1:
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     67          
     68          ////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     69          void SetPllEn(INT8U Path)
     70          {
     71          	     if(Path == 0)	PCA9555BitSet(Fwd_PLLEN_LTE,  &AttnCS1Val);
   \                     SetPllEn:
   \   00000000   0xB930             CBNZ.N   R0,??SetPllEn_0
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable7_2
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable7_3
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      B.W      pPCA9555BitSet
     72          	else if(Path == 1)	PCA9555BitSet(Rvs_PLLEN_LTE,  &AttnCS1Val);
   \                     ??SetPllEn_0:
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD106             BNE.N    ??SetPllEn_1
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x....             LDR.N    R0,??DataTable7_2
   \   00000018   0x6802             LDR      R2,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable7_3
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0x.... 0x....      B.W      pPCA9555BitSet
     73          	else if(Path == 2)	PCA9555BitSet(PLLEN_LTE_A,	  &AttnCS1Val);
   \                     ??SetPllEn_1:
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD106             BNE.N    ??SetPllEn_2
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x....             LDR.N    R0,??DataTable7_2
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable7_3
   \   0000002E   0x2011             MOVS     R0,#+17
   \   00000030   0x.... 0x....      B.W      pPCA9555BitSet
     74          	else if(Path == 3)	PCA9555BitSet(Fwd_PLLEN_WCDMA,&AttnCS1Val);
   \                     ??SetPllEn_2:
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD106             BNE.N    ??SetPllEn_3
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x....             LDR.N    R0,??DataTable7_2
   \   0000003C   0x6802             LDR      R2,[R0, #+0]
   \   0000003E   0x....             LDR.N    R1,??DataTable7_3
   \   00000040   0x2019             MOVS     R0,#+25
   \   00000042   0x.... 0x....      B.W      pPCA9555BitSet
     75          	else if(Path == 4)	PCA9555BitSet(RVS_PLLEN_WCDMA,&AttnCS1Val);
   \                     ??SetPllEn_3:
   \   00000046   0x2804             CMP      R0,#+4
   \   00000048   0xD106             BNE.N    ??SetPllEn_4
   \   0000004A   0x2300             MOVS     R3,#+0
   \   0000004C   0x....             LDR.N    R0,??DataTable7_2
   \   0000004E   0x6802             LDR      R2,[R0, #+0]
   \   00000050   0x....             LDR.N    R1,??DataTable7_3
   \   00000052   0x2021             MOVS     R0,#+33
   \   00000054   0x.... 0x....      B.W      pPCA9555BitSet
     76          }
   \                     ??SetPllEn_4:
   \   00000058   0x4770             BX       LR               ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void RstPllEn(INT8U Path)
     79          {
     80          	     if(Path == 0)	PCA9555BitRst(Fwd_PLLEN_LTE,  &AttnCS1Val);
   \                     RstPllEn:
   \   00000000   0xB930             CBNZ.N   R0,??RstPllEn_0
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable7_2
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable7_3
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      B.W      pPCA9555BitRst
     81          	else if(Path == 1)	PCA9555BitRst(Rvs_PLLEN_LTE,  &AttnCS1Val);
   \                     ??RstPllEn_0:
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD106             BNE.N    ??RstPllEn_1
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x....             LDR.N    R0,??DataTable7_2
   \   00000018   0x6802             LDR      R2,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable7_3
   \   0000001C   0x2009             MOVS     R0,#+9
   \   0000001E   0x.... 0x....      B.W      pPCA9555BitRst
     82          	else if(Path == 2)	PCA9555BitRst(PLLEN_LTE_A,	  &AttnCS1Val);
   \                     ??RstPllEn_1:
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD106             BNE.N    ??RstPllEn_2
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x....             LDR.N    R0,??DataTable7_2
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable7_3
   \   0000002E   0x2011             MOVS     R0,#+17
   \   00000030   0x.... 0x....      B.W      pPCA9555BitRst
     83          	else if(Path == 3)	PCA9555BitRst(Fwd_PLLEN_WCDMA,&AttnCS1Val);
   \                     ??RstPllEn_2:
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD106             BNE.N    ??RstPllEn_3
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x....             LDR.N    R0,??DataTable7_2
   \   0000003C   0x6802             LDR      R2,[R0, #+0]
   \   0000003E   0x....             LDR.N    R1,??DataTable7_3
   \   00000040   0x2019             MOVS     R0,#+25
   \   00000042   0x.... 0x....      B.W      pPCA9555BitRst
     84          	else if(Path == 4)	PCA9555BitRst(RVS_PLLEN_WCDMA,&AttnCS1Val);
   \                     ??RstPllEn_3:
   \   00000046   0x2804             CMP      R0,#+4
   \   00000048   0xD106             BNE.N    ??RstPllEn_4
   \   0000004A   0x2300             MOVS     R3,#+0
   \   0000004C   0x....             LDR.N    R0,??DataTable7_2
   \   0000004E   0x6802             LDR      R2,[R0, #+0]
   \   00000050   0x....             LDR.N    R1,??DataTable7_3
   \   00000052   0x2021             MOVS     R0,#+33
   \   00000054   0x.... 0x....      B.W      pPCA9555BitRst
     85          }
   \                     ??RstPllEn_4:
   \   00000058   0x4770             BX       LR               ;; return
     86          
     87          //rfrq: Reference Freq,  dRatio: dRatio, PR: Devide Prescaler

   \                                 In section .text, align 2, keep-with-next
     88          void Pll411xInit(INT32U rfrq, INT32U dRatio, INT8U Path)
     89          {
     90          	dReffreq[Path] = rfrq;
   \                     Pll411xInit:
   \   00000000   0x....             LDR.N    R3,??DataTable7_4
   \   00000002   0xF843 0x0022      STR      R0,[R3, R2, LSL #+2]
     91          	dStep[Path] = dRatio;
   \   00000006   0xEB03 0x0282      ADD      R2,R3,R2, LSL #+2
   \   0000000A   0x6151             STR      R1,[R2, #+20]
     92          	dPre[Path] = rfrq/dRatio;
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x6290             STR      R0,[R2, #+40]
     93          }
   \   00000012   0x4770             BX       LR               ;; return
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void Pll411x_Output(INT32U fvco, INT8U Path)
     96          {
   \                     Pll411x_Output:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4688             MOV      R8,R1
     97          	INT32U tMsb = (1 << 23);
     98          	INT32U i = 0;
     99          
    100           	SetpPCA9555SDAOutMode(0);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       SetpPCA9555SDAOutMode
   \   0000000E   0x....             LDR.N    R0,??DataTable7_4
   \   00000010   0xEB00 0x0088      ADD      R0,R0,R8, LSL #+2
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0xFBB5 0xF1F1      UDIV     R1,R5,R1
    101          
    102          //	Ser3Ptr->printf("fvco[%u], dStep[%d], dPre[%d]\n", fvco,dStep[Path],dPre[Path]);
    103          	
    104          	fvco = fvco/dStep[Path];	// 1.8Ghz = 18000 -> 1800000000
    105          	{
    106          		_RCounterReg RCounter;
    107          		_NCounterReg NCounter;
    108          		_FUNCReg Func;
    109          
    110          		RCounter.Data = 0;				// init
    111          		NCounter.Data = 0;				// init
    112          		Func.Data = 0;
    113          
    114          		// Reference Counter
    115          		RCounter.Bit.C = __RCounter;
    116          		RCounter.Bit.R = dPre[Path];	// RefFreq / FreqStep
    117          		RCounter.Bit.DLY = 0;			//RCounter.Bit.DLY = 1;
   \   0000001A   0x6A80             LDR      R0,[R0, #+40]
   \   0000001C   0xF64F 0x72FC      MOVW     R2,#+65532
   \   00000020   0xEA02 0x0580      AND      R5,R2,R0, LSL #+2
    118          
    119          		// AB Counter
    120          		NCounter.Bit.C = __NCounter;
    121          		NCounter.Bit.A = fvco%__PRE;
    122          		NCounter.Bit.B = fvco/__PRE;
    123          		NCounter.Bit.CPGAIN = 0;	// NCounter.Bit.CPGAIN = 1;
   \   00000024   0xF001 0x001F      AND      R0,R1,#0x1F
   \   00000028   0x....             LDR.N    R2,??DataTable7_5  ;; 0x1fff00
   \   0000002A   0xEA02 0x01C1      AND      R1,R2,R1, LSL #+3
   \   0000002E   0xEA41 0x0080      ORR      R0,R1,R0, LSL #+2
   \   00000032   0xF040 0x0701      ORR      R7,R0,#0x1
    124          
    125          		// Function
    126          		Func.Bit.C = __FUNCSet;
    127          		Func.Bit.LD = __LDDIG;
    128          		Func.Bit.POL = __POS;//__NEG;
    129          		Func.Bit.CUR1SET = 7;
    130          		Func.Bit.CUR2SET = 7;
    131          		Func.Bit.PLVALUE = PreScl;
   \   00000036   0x....             LDR.N    R6,??DataTable7_6  ;; 0x9f8092
    132          		
    133          		#ifdef Pll232x_debug
    134          		{
    135          			Ser3Ptr->printf("\nR Counter: %03x \n", RCounter.Grp.tot & 0xffffff);
    136          			Ser3Ptr->printf("N Counter: %03x \n", NCounter.Grp.tot & 0xffffff);
    137          			Ser3Ptr->printf("F Counter: %03x \n", Func.Grp.tot & 0xffffff);
    138          		}
    139          		#endif
    140          
    141          		// R Counter Program modes
    142          
    143          		SetPllEn(Path);
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0x.... 0x....      BL       SetPllEn
    144          		ForDelay(20);
   \   0000003E   0x2014             MOVS     R0,#+20
   \   00000040   0x.... 0x....      BL       ForDelay
    145          		RstPllEn(Path);
   \   00000044   0x4640             MOV      R0,R8
   \   00000046   0x.... 0x....      BL       RstPllEn
    146          		ForDelay(20);
   \   0000004A   0x2014             MOVS     R0,#+20
   \   0000004C   0x.... 0x....      BL       ForDelay
    147          
    148          		for(i = 0; i < 24; i++)			
   \   00000050   0x2418             MOVS     R4,#+24
    149          		{	
    150          			if(RCounter.Grp.tot & tMsb)	SetPllData(Path);
   \                     ??Pll411x_Output_0:
   \   00000052   0x0228             LSLS     R0,R5,#+8
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0xD502             BPL.N    ??Pll411x_Output_1
   \   00000058   0x.... 0x....      BL       SetPllData
   \   0000005C   0xE001             B.N      ??Pll411x_Output_2
    151          			else						RstPllData(Path);
   \                     ??Pll411x_Output_1:
   \   0000005E   0x.... 0x....      BL       RstPllData
    152          
    153          			RCounter.Grp.tot <<= 1;
   \                     ??Pll411x_Output_2:
   \   00000062   0x0068             LSLS     R0,R5,#+1
   \   00000064   0xF360 0x0517      BFI      R5,R0,#+0,#+24
    154          			SetPllClk(Path);
   \   00000068   0x4640             MOV      R0,R8
   \   0000006A   0x.... 0x....      BL       SetPllClk
    155          			
    156          //			ForDelay(20);
    157          			RstPllClk(Path);
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       RstPllClk
    158          			
    159          //			ForDelay(20);
    160          		}	
   \   00000074   0x1E64             SUBS     R4,R4,#+1
   \   00000076   0xD1EC             BNE.N    ??Pll411x_Output_0
    161          		
    162          		ForDelay(20);
   \   00000078   0x2014             MOVS     R0,#+20
   \   0000007A   0x.... 0x....      BL       ForDelay
    163          		SetPllEn(Path);
   \   0000007E   0x4640             MOV      R0,R8
   \   00000080   0x.... 0x....      BL       SetPllEn
    164          		ForDelay(20);///
   \   00000084   0x2014             MOVS     R0,#+20
   \   00000086   0x.... 0x....      BL       ForDelay
    165          
    166          		// AB Counter Program modes	(5bit)
    167          		RstPllEn(Path);
   \   0000008A   0x4640             MOV      R0,R8
   \   0000008C   0x.... 0x....      BL       RstPllEn
    168          	//	ForDelay(20);
    169          	
    170          		ForDelay(20);
   \   00000090   0x2014             MOVS     R0,#+20
   \   00000092   0x.... 0x....      BL       ForDelay
    171          		for(i = 0; i < 24; i++) 		
   \   00000096   0x2518             MOVS     R5,#+24
    172          		{	
    173          			if(NCounter.Grp.tot & tMsb)	SetPllData(Path);
   \                     ??Pll411x_Output_3:
   \   00000098   0x0238             LSLS     R0,R7,#+8
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0xD502             BPL.N    ??Pll411x_Output_4
   \   0000009E   0x.... 0x....      BL       SetPllData
   \   000000A2   0xE001             B.N      ??Pll411x_Output_5
    174          			else					 	RstPllData(Path);
   \                     ??Pll411x_Output_4:
   \   000000A4   0x.... 0x....      BL       RstPllData
    175          
    176          			NCounter.Grp.tot <<= 1; 
   \                     ??Pll411x_Output_5:
   \   000000A8   0x0078             LSLS     R0,R7,#+1
   \   000000AA   0xF360 0x0717      BFI      R7,R0,#+0,#+24
    177          			SetPllClk(Path);
   \   000000AE   0x4640             MOV      R0,R8
   \   000000B0   0x.... 0x....      BL       SetPllClk
    178          //			ForDelay(20);
    179          			RstPllClk(Path);
   \   000000B4   0x4640             MOV      R0,R8
   \   000000B6   0x.... 0x....      BL       RstPllClk
    180          //			ForDelay(20);
    181          		}		
   \   000000BA   0x1E6D             SUBS     R5,R5,#+1
   \   000000BC   0xD1EC             BNE.N    ??Pll411x_Output_3
    182          
    183          		ForDelay(20);////
   \   000000BE   0x2014             MOVS     R0,#+20
   \   000000C0   0x.... 0x....      BL       ForDelay
    184          		SetPllEn(Path);
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0x.... 0x....      BL       SetPllEn
    185          		
    186          		// Func Program modes	(5bit)
    187          		
    188          		ForDelay(20);///
   \   000000CA   0x2014             MOVS     R0,#+20
   \   000000CC   0x.... 0x....      BL       ForDelay
    189          		RstPllEn(Path);
   \   000000D0   0x4640             MOV      R0,R8
   \   000000D2   0x.... 0x....      BL       RstPllEn
    190          		ForDelay(20);///a
   \   000000D6   0x2014             MOVS     R0,#+20
   \   000000D8   0x.... 0x....      BL       ForDelay
    191          		for(i = 0; i < 24; i++) 		
   \   000000DC   0x2518             MOVS     R5,#+24
    192          		{	
    193          			if(Func.Grp.tot & tMsb) 	SetPllData(Path);
   \                     ??Pll411x_Output_6:
   \   000000DE   0x0230             LSLS     R0,R6,#+8
   \   000000E0   0x4640             MOV      R0,R8
   \   000000E2   0xD502             BPL.N    ??Pll411x_Output_7
   \   000000E4   0x.... 0x....      BL       SetPllData
   \   000000E8   0xE001             B.N      ??Pll411x_Output_8
    194          			else						RstPllData(Path);
   \                     ??Pll411x_Output_7:
   \   000000EA   0x.... 0x....      BL       RstPllData
    195          		
    196          			Func.Grp.tot <<= 1; 
   \                     ??Pll411x_Output_8:
   \   000000EE   0x0070             LSLS     R0,R6,#+1
   \   000000F0   0xF360 0x0617      BFI      R6,R0,#+0,#+24
    197          			SetPllClk(Path);
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0x.... 0x....      BL       SetPllClk
    198          			
    199          //			ForDelay(20);//
    200          			RstPllClk(Path);
   \   000000FA   0x4640             MOV      R0,R8
   \   000000FC   0x.... 0x....      BL       RstPllClk
    201          //			ForDelay(20);///
    202          		}		
   \   00000100   0x1E6D             SUBS     R5,R5,#+1
   \   00000102   0xD1EC             BNE.N    ??Pll411x_Output_6
    203          		
    204          		ForDelay(20);///
   \   00000104   0x2014             MOVS     R0,#+20
   \   00000106   0x.... 0x....      BL       ForDelay
    205          		SetPllEn(Path);
   \   0000010A   0x4640             MOV      R0,R8
   \   0000010C   0x.... 0x....      BL       SetPllEn
    206          		ForDelay(20); //
   \   00000110   0x2014             MOVS     R0,#+20
   \   00000112   0x.... 0x....      BL       ForDelay
    207          		RstPllEn(Path);
   \   00000116   0x4640             MOV      R0,R8
   \   00000118   0x.... 0x....      BL       RstPllEn
    208          		ForDelay(20);  //
   \   0000011C   0x2014             MOVS     R0,#+20
   \   0000011E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000122   0x.... 0x....      B.W      ForDelay
    209          	}
    210          	////////////////////////////////////////////////////////////	
    211          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40020014         DC32     0x40020014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40020414         DC32     0x40020414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     pPCA9555Str

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     AttnCS1Val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     dReffreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x001FFF00         DC32     0x1fff00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x009F8092         DC32     0x9f8092
    212          
    213          ////////////////////////////////////////////////////////////////////////////////
    214          // End of Source File
    215          /////////////////////
    216          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Pll411xInit
       24  Pll411x_Output
              0 -> ForDelay
             24 -> ForDelay
             24 -> RstPllClk
             24 -> RstPllData
             24 -> RstPllEn
             24 -> SetPllClk
             24 -> SetPllData
             24 -> SetPllEn
             24 -> SetpPCA9555SDAOutMode
        0  RstPllClk
        8  RstPllData
              8 -> ForDelay
        0  RstPllEn
              0 -> pPCA9555BitRst
        0  SetPllClk
        8  SetPllData
              8 -> ForDelay
        0  SetPllEn
              0 -> pPCA9555BitSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      20  Pll411xInit
     294  Pll411x_Output
      30  RstPllClk
      40  RstPllData
      90  RstPllEn
      30  SetPllClk
      40  SetPllData
      90  SetPllEn
      60  dReffreq
          dStep
          dPre

 
  60 bytes in section .bss
 662 bytes in section .text
 
 662 bytes of CODE memory
  60 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     30/Aug/2012  21:29:29 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Work\Project\2012\NL_INBUILD\FW\MU\code\aa_protocol.c #
#    Command line =  D:\Work\Project\2012\NL_INBUILD\FW\MU\code\aa_protocol.c #
#                     -D OS_INCLUDED -D APPL_SRC -lcN                         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\ -lB          #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\ -o           #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\              #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Programming\IAR Systems\Embedded       #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\include\ -I        #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\..\..\STM32F2xx_St #
#                    dPeriph_Driver\ -I D:\Work\Project\2012\NL_INBUILD\FW\MU #
#                    \..\..\STM32F2xx_StdPeriph_Driver\inc\ -I                #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-CPU\ -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-LIB\ -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uCOS-II\Ports\ -I  #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uCOS-II\Source\    #
#                    -I D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-Probe\ -Oh   #
#                    --use_c++_inline --require_prototypes                    #
#    List file    =  D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\aa_protocol.l #
#                    st                                                       #
#    Object file  =  D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\aa_protocol.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\Project\2012\NL_INBUILD\FW\MU\code\aa_protocol.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : fsmc_sram.h
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.2
      5          * Date               : 07/11/2008
      6          * Description        : Header for fsmc_sram.c file.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #define Protocol_C
     16          
     17          #include "../include/main.h"
     18          
     19          //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     20          
     21          
     22          void Initialize(void)
     23          {
     24          	StatusInitialize();	// buffer init
     25          	LoadBackupData();	// default setting!!
     26           	//LoadTable();		// eeprom을 사용하지 않으면 필요없다.
     27          
     28          ////////////////////////////////////////////////////////////////////////////////////
     29          	SerPtr->printf("NL SOFTBANK In-Building Ver[%02x].[%02x]\n", SystemVer, PROGRAMVER);
     30          	SerPtr->printf("SystemDate[%s]\n", SystemDate);
     31          	SerPtr->printf("SystemTime[%s]\n", SystemTime);
     32          }
     33          
     34          void StatusInitialize(void)
     35          {
     36          	INT16U	i;
     37          
     38          	for(i=0; i<sizeof(__MU_STS); i++)
     39          	{
     40          		*((INT8U*)MuStatus+i) = 0;
     41          	}
     42          	for(i=0; i<sizeof(__HU_STS); i++)
     43          	{
     44          		*((INT8U*)HuStatus+i) = 0;
     45          	}
     46          	for(i=0; i<sizeof(__RU_STS); i++)
     47          	{
     48          		*((INT8U*)RuStatus+i) = 0;
     49          	}
     50          
     51          	// Init Value
     52          	MuStatus->SystemIns.MakerID 		= 0x2C;
     53          	MuStatus->SystemIns.ProgramVer[0]	= SystemVer;
     54          	MuStatus->SystemIns.ProgramVer[1]	= PROGRAMVER;
     55          
     56          	//-----------------------------------------------------------------------//
     57          	// MU Install
     58          	MuStatus->SystemIns.Mu_Install = 1;
     59          	
     60          	// HU Install
     61          	MuStatus->SystemIns.Hu_Install[0] = 1;
     62          
     63          	// HU-RU Install
     64          	MuStatus->SystemIns.Hu1_Ru.Br1_Ru_Install[0] = 1;
     65          	
     66          	// MU-RU Install
     67          	for(i=0; i<MDTU_MAX; i++)
     68          	{
     69          		MuStatus->SystemIns.Mu_Ru_Install[i][0] = 0;
     70          		MuStatus->SystemIns.Mu_Ru_Install[i][1] = 0;
     71          		MuStatus->SystemIns.Mu_Ru_Install[i][2] = 0;
     72          		MuStatus->SystemIns.Mu_Ru_Install[i][3] = 0;
     73          		MuStatus->SystemIns.Mu_Ru_Install[i][4] = 0;
     74          		MuStatus->SystemIns.Mu_Ru_Install[i][5] = 0;
     75          		MuStatus->SystemIns.Mu_Ru_Install[i][6] = 0;
     76          		MuStatus->SystemIns.Mu_Ru_Install[i][7] = 0;
     77          	}
     78          			
     79          	// System
     80          	MuStatus->TempLimitH		= 50;
     81          	MuStatus->TempLimitL		= 0;
     82          
     83          	MuStatus->FanTemp			= 50;
     84          	MuStatus->FanMode			= _OFF;
     85          	MuStatus->FanOnOff			= _OFF;
     86          	MuStatus->TempCompOnOff 	= _OFF;
     87          
     88          	for(i=0; i<10; i++)
     89          		MuStatus->SystemIns.RepeaterID[i]		= 0x31+i;
     90          	
     91          	// MDTU
     92          	for(i=0; i<MDTU_MAX; i++)
     93          	{
     94          		MuStatus->MdtuSts[i].PD_LimitL			= 0;
     95          		MuStatus->MdtuSts[i].LD_LimitL			= 0;
     96          		MuStatus->MdtuSts[i].OpticSum			= _OFF;
     97          
     98          		MuStatus->MdtuSts[i].FaFilter_21G		= 0;
     99          		MuStatus->MdtuSts[i].FaOnOff_21G.Data	= 0;
    100          		MuStatus->MdtuSts[i].FaFilter_900M		= 0;
    101          		MuStatus->MdtuSts[i].FaOnOff_900M.Data	= 0;
    102          		MuStatus->MdtuSts[i].FaFilter_25G		= 0;
    103          		MuStatus->MdtuSts[i].FaOnOff_25G.Data	= 0;
    104          
    105          		MuStatus->MdtuSts[i].PD_Offset			= 0;
    106          		MuStatus->MdtuSts[i].LD_Offset			= 0;
    107          	}
    108          
    109          	for(i=0; i<RFU_MAX; i++)
    110          	{
    111          		MuStatus->MrfuSts[i].DL_OutLimitH	= 0;
    112          		MuStatus->MrfuSts[i].DL_Attn		= 30;
    113          
    114          		MuStatus->MrfuSts[i].UL_OutLimitH	= 0;
    115          		MuStatus->MrfuSts[i].UL_Attn		= 30;
    116          		MuStatus->MrfuSts[i].UL_ALC_High	= 0;
    117          		MuStatus->MrfuSts[i].UL_Alc_OnOffH	= _OFF;
    118          		MuStatus->MrfuSts[i].UL_Amp_OnOff	= _OFF;
    119          		
    120          		MuStatus->MrfuSts[i].DL_SD_Limit	= 0;
    121          		MuStatus->MrfuSts[i].DL_SD_OnOff	= _OFF;;
    122          
    123          		MuStatus->MrfuSts[i].UL_SD_Limit	= 0;
    124          		MuStatus->MrfuSts[i].UL_SD_OnOff	= _OFF;
    125          	}
    126          
    127          	MuStatus->Tsync_Auto		= _OFF;
    128          	MuStatus->Tsync_Manual		= _OFF;
    129          	MuStatus->Tsync_OnOff_S 	= _OFF;
    130          	MuStatus->Tsync_OnOff_M 	= _OFF;
    131          	MuStatus->Tsync_Offset_S	= 0;
    132          	MuStatus->Tsync_Offset_M	= 0;
    133          	
    134          	for(i=0; i<RFU_MAX; i++)
    135          	{
    136          		// CFR/TX 출력
    137          		MuStatus->CfrSts[i].Cfr_Enable.Data = _OFF;
    138          		MuStatus->CfrSts[i].Cfr_OnOff.Data	= _OFF;
    139          
    140          		MuStatus->CfrSts[i].Cfr_Select		= 0;
    141          		MuStatus->CfrSts[i].Limit_OnOff 	= _OFF;
    142          
    143          		// Offset
    144          		MuStatus->MrfuOffset[i].DL_Attn 	= 0;
    145          		MuStatus->MrfuOffset[i].UL_Attn 	= 0;
    146          
    147          		MuStatus->MrfuOffset[i].DL_Pwr_Offset	= 0;
    148          		MuStatus->MrfuOffset[i].UL_Pwr_Offset	= 0;
    149          	}
    150          }
    151          
    152          
    153          
    154          void LoadBackupData(void)
    155          {
    156          /*
    157          	INT16U	i;
    158          	INT32U cpu_sr;
    159          
    160          	RUNLEDSEL ^= 1;
    161          
    162          	OS_ENTER_CRITICAL();
    163          	{
    164          		EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr); // Load 1st Area
    165          
    166          		//-----------------------------------------------------------------------//	
    167          		// HU Install
    168          		MuStatus->SystemIns.Hu_Install[0] = (INT8U)tptr->BackUp.Hu_Install.Hu1_Bit;
    169          		MuStatus->SystemIns.Hu_Install[1] = (INT8U)tptr->BackUp.Hu_Install.Hu2_Bit;
    170          		MuStatus->SystemIns.Hu_Install[2] = (INT8U)tptr->BackUp.Hu_Install.Hu3_Bit;
    171          		MuStatus->SystemIns.Hu_Install[3] = (INT8U)tptr->BackUp.Hu_Install.Hu4_Bit;
    172          		MuStatus->SystemIns.Hu_Install[4] = (INT8U)tptr->BackUp.Hu_Install.Hu5_Bit;
    173          		MuStatus->SystemIns.Hu_Install[5] = (INT8U)tptr->BackUp.Hu_Install.Hu6_Bit;
    174          		MuStatus->SystemIns.Hu_Install[6] = (INT8U)tptr->BackUp.Hu_Install.Hu7_Bit;
    175          		MuStatus->SystemIns.Hu_Install[7] = (INT8U)tptr->BackUp.Hu_Install.Hu8_Bit;
    176          		
    177          		// MU-RU Install
    178          		for(i=0; i<MDTU_MAX; i++)
    179          		{
    180          			MuStatus->SystemIns.Mu_Ru_Install[i][0] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru1_Bit;
    181          			MuStatus->SystemIns.Mu_Ru_Install[i][1] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru2_Bit;
    182          			MuStatus->SystemIns.Mu_Ru_Install[i][2] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru3_Bit;
    183          			MuStatus->SystemIns.Mu_Ru_Install[i][3] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru4_Bit;
    184          			MuStatus->SystemIns.Mu_Ru_Install[i][4] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru5_Bit;
    185          			MuStatus->SystemIns.Mu_Ru_Install[i][5] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru6_Bit;
    186          			MuStatus->SystemIns.Mu_Ru_Install[i][6] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru7_Bit;
    187          			MuStatus->SystemIns.Mu_Ru_Install[i][7] = (INT8U)tptr->BackUp.MuRu_Install[i].Ru8_Bit;
    188          		}
    189          				
    190          		// System
    191          		MuStatus->TempLimitH		= tptr->BackUp.TempLimitH;
    192          		MuStatus->TempLimitL		= tptr->BackUp.TempLimitL;
    193          
    194          		MuStatus->FanTemp			= tptr->BackUp.FanTemp;
    195          		MuStatus->FanMode			= tptr->BackUp.FanMode;
    196          		MuStatus->FanOnOff			= tptr->BackUp.FanOnOff;
    197          		MuStatus->TempCompOnOff		= tptr->BackUp.TempCompOnOff;
    198          
    199          		for(i=0; i<10; i++)
    200          			MuStatus->SystemIns.RepeaterID[i]		= tptr->BackUp.RepeaterID[i];
    201          		
    202          		// MDTU
    203          		for(i=0; i<MDTU_MAX; i++)
    204          		{
    205          			MuStatus->MdtuSts[i].PD_LimitL			= tptr->BackUp.MdtuSts[i].PD_LimitL;
    206          			MuStatus->MdtuSts[i].LD_LimitL			= tptr->BackUp.MdtuSts[i].LD_LimitL;
    207          			MuStatus->MdtuSts[i].OpticSum			= tptr->BackUp.MdtuSts[i].OpticSum;
    208          
    209          			MuStatus->MdtuSts[i].FaFilter_21G		= tptr->BackUp.MdtuSts[i].FaFilter_21G;
    210          			MuStatus->MdtuSts[i].FaOnOff_21G.Data	= tptr->BackUp.MdtuSts[i].FaOnOff_21G.Data;
    211          			MuStatus->MdtuSts[i].FaFilter_900M		= tptr->BackUp.MdtuSts[i].FaFilter_900M;
    212          			MuStatus->MdtuSts[i].FaOnOff_900M.Data	= tptr->BackUp.MdtuSts[i].FaOnOff_900M.Data;
    213          			MuStatus->MdtuSts[i].FaFilter_25G		= tptr->BackUp.MdtuSts[i].FaFilter_25G;
    214          			MuStatus->MdtuSts[i].FaOnOff_25G.Data	= tptr->BackUp.MdtuSts[i].FaOnOff_25G.Data;
    215          
    216          			MuStatus->MdtuSts[i].PD_Offset			= tptr->BackUp.MdtuSts[i].PD_Offset;
    217          			MuStatus->MdtuSts[i].LD_Offset			= tptr->BackUp.MdtuSts[i].LD_Offset;
    218          		}
    219          
    220          		for(i=0; i<RFU_MAX; i++)
    221          		{
    222          			MuStatus->MrfuSts[i].DL_OutLimitH	= tptr->BackUp.MrfuSts[i].DL_OutLimitH;
    223          			MuStatus->MrfuSts[i].DL_Attn		= tptr->BackUp.MrfuSts[i].DL_Attn;
    224          
    225          			MuStatus->MrfuSts[i].UL_OutLimitH	= tptr->BackUp.MrfuSts[i].UL_OutLimitH;
    226          			MuStatus->MrfuSts[i].UL_Attn		= tptr->BackUp.MrfuSts[i].UL_Attn;
    227          			MuStatus->MrfuSts[i].UL_ALC_High	= tptr->BackUp.MrfuSts[i].UL_ALC_High;
    228          			MuStatus->MrfuSts[i].UL_Alc_OnOffH	= tptr->BackUp.MrfuSts[i].UL_Alc_OnOffH;
    229          			MuStatus->MrfuSts[i].UL_Amp_OnOff	= tptr->BackUp.MrfuSts[i].UL_Amp_OnOff;
    230          			
    231          			MuStatus->MrfuSts[i].DL_SD_Limit	= tptr->BackUp.MrfuSts[i].DL_SD_Limit;
    232          			MuStatus->MrfuSts[i].DL_SD_OnOff	= tptr->BackUp.MrfuSts[i].DL_SD_OnOff;
    233          
    234          			MuStatus->MrfuSts[i].UL_SD_Limit	= tptr->BackUp.MrfuSts[i].UL_SD_Limit;
    235          			MuStatus->MrfuSts[i].UL_SD_OnOff	= tptr->BackUp.MrfuSts[i].UL_SD_OnOff;
    236          		}
    237          
    238          		MuStatus->Tsync_Auto		= tptr->BackUp.Tsync_Auto;
    239          		MuStatus->Tsync_Manual		= tptr->BackUp.Tsync_Manual;
    240          		MuStatus->Tsync_OnOff_S		= tptr->BackUp.Tsync_OnOff_S;
    241          		MuStatus->Tsync_OnOff_M		= tptr->BackUp.Tsync_OnOff_M;
    242          		MuStatus->Tsync_Offset_S	= tptr->BackUp.Tsync_Offset_S;
    243          		MuStatus->Tsync_Offset_M	= tptr->BackUp.Tsync_Offset_M;
    244          		
    245          		for(i=0; i<RFU_MAX; i++)
    246          		{
    247          			// CFR/TX 출력
    248          			MuStatus->CfrSts[i].Cfr_Enable.Data	= tptr->BackUp.CfrSts[i].Cfr_Enable.Data;
    249          			MuStatus->CfrSts[i].Cfr_OnOff.Data	= tptr->BackUp.CfrSts[i].Cfr_OnOff.Data;
    250          
    251          			MuStatus->CfrSts[i].Cfr_Select		= tptr->BackUp.CfrSts[i].Cfr_Select;
    252          			MuStatus->CfrSts[i].Limit_OnOff		= tptr->BackUp.CfrSts[i].Limit_OnOff;
    253          
    254          			// Offset
    255          			MuStatus->MrfuOffset[i].DL_Attn 	= tptr->BackUp.MrfuOffset[i].DL_Attn;
    256          			MuStatus->MrfuOffset[i].UL_Attn 	= tptr->BackUp.MrfuOffset[i].UL_Attn;
    257          
    258          			MuStatus->MrfuOffset[i].DL_Pwr_Offset 	= tptr->BackUp.MrfuOffset[i].DL_Pwr_Offset;
    259          			MuStatus->MrfuOffset[i].UL_Pwr_Offset 	= tptr->BackUp.MrfuOffset[i].UL_Pwr_Offset;
    260          		}
    261          	}
    262          	OS_EXIT_CRITICAL();
    263          */
    264          }       
    265          
    266          void DefaultBackup(INT8U isRst)
    267          {
    268          /*
    269          
    270          	INT8U	i=0, j=0;
    271          	INT32U	cpu_sr;
    272          
    273          
    274          	OS_ENTER_CRITICAL();
    275          	{
    276          		EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr); // Load 1st Area
    277          
    278          		// default set!!
    279          //		tptr->BackUp.FwdAttn_4G = 30;
    280          
    281          		
    282          
    283          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
    284          	}
    285          	OS_EXIT_CRITICAL();
    286          
    287          	OS_ENTER_CRITICAL();
    288          	{
    289          		EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr); // Load 1st Area
    290          
    291          		for(j=0; j<12; j++)
    292          		{
    293          			tptr->AttnTable[i].limit = 0;
    294          			tptr->AttnTable[i].nsize = AttnTBL_Size;
    295          			
    296          			for(i=0; i<AttnTBL_Size; i++)
    297          				tptr->AttnTable[j].Data[i] = i*2;
    298          
    299          			if(j==6)	OSTimeDly(100);
    300          		}
    301          
    302          		for(j=0; j<12; j++)
    303          		{
    304          			tptr->TempTable[i].limit = -10;
    305          			tptr->TempTable[i].nsize = TempTBL_Size;
    306          			
    307          			for(i=0; i<TempTBL_Size; i++)
    308          				tptr->TempTable[j].Data[i] = 0;
    309          
    310          			if(j==6)	OSTimeDly(100);
    311          		}
    312          
    313          		WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
    314          	}
    315          	////////////////////////////////////////////////////////////////////////////////
    316          	while(isRst);
    317          */
    318          
    319          }
    320          
    321          
    322          INT8U SetDnrCtrlData(__MU_CTRL *ptr)
    323          {
    324          	INT8U	i = 0;
    325          
    326          	__MU_STS	*Sts = MuStatus;
    327          
    328          	//---------------------------------------------------------------------//
    329          	// Hu Install
    330          	if(ptr->CtrlFlag.Hu_Install.Hu1_Bit)
    331          	{
    332          		Sts->SystemIns.Hu_Install[0] = ptr->Hu_Install.Hu1_Bit;
    333          	}
    334          
    335          	if(ptr->CtrlFlag.Hu_Install.Hu2_Bit)
    336          	{
    337          		Sts->SystemIns.Hu_Install[1] = ptr->Hu_Install.Hu2_Bit;
    338          	}
    339          
    340          	if(ptr->CtrlFlag.Hu_Install.Hu3_Bit)
    341          	{
    342          		Sts->SystemIns.Hu_Install[2] = ptr->Hu_Install.Hu3_Bit;
    343          	}
    344          
    345          	if(ptr->CtrlFlag.Hu_Install.Hu4_Bit)
    346          	{
    347          		Sts->SystemIns.Hu_Install[3] = ptr->Hu_Install.Hu4_Bit;
    348          	}
    349          
    350          	if(ptr->CtrlFlag.Hu_Install.Hu5_Bit)
    351          	{
    352          		Sts->SystemIns.Hu_Install[4] = ptr->Hu_Install.Hu5_Bit;
    353          	}
    354          
    355          	if(ptr->CtrlFlag.Hu_Install.Hu6_Bit)
    356          	{
    357          		Sts->SystemIns.Hu_Install[5] = ptr->Hu_Install.Hu6_Bit;
    358          	}
    359          
    360          	if(ptr->CtrlFlag.Hu_Install.Hu7_Bit)
    361          	{
    362          		Sts->SystemIns.Hu_Install[6] = ptr->Hu_Install.Hu7_Bit;
    363          	}
    364          
    365          	if(ptr->CtrlFlag.Hu_Install.Hu8_Bit)
    366          	{
    367          		Sts->SystemIns.Hu_Install[7] = ptr->Hu_Install.Hu8_Bit;
    368          	}
    369          
    370          	//---------------------------------------------------------------------//
    371          	// Mu-Ru Install
    372          	for(i=0; i<MDTU_MAX; i++)
    373          	{
    374          		if(ptr->CtrlFlag.MuRu_Install[i].Ru1_Bit)
    375          		{
    376          			Sts->SystemIns.Mu_Ru_Install[i][0] = ptr->MuRu_Install[i].Ru1_Bit;
    377          		}
    378          		if(ptr->CtrlFlag.MuRu_Install[i].Ru2_Bit)
    379          		{
    380          			Sts->SystemIns.Mu_Ru_Install[i][1] = ptr->MuRu_Install[i].Ru2_Bit;
    381          		}
    382          		if(ptr->CtrlFlag.MuRu_Install[i].Ru3_Bit)
    383          		{
    384          			Sts->SystemIns.Mu_Ru_Install[i][2] = ptr->MuRu_Install[i].Ru3_Bit;
    385          		}
    386          		if(ptr->CtrlFlag.MuRu_Install[i].Ru4_Bit)
    387          		{
    388          			Sts->SystemIns.Mu_Ru_Install[i][3] = ptr->MuRu_Install[i].Ru4_Bit;
    389          		}
    390          		if(ptr->CtrlFlag.MuRu_Install[i].Ru5_Bit)
    391          		{
    392          			Sts->SystemIns.Mu_Ru_Install[i][4] = ptr->MuRu_Install[i].Ru5_Bit;
    393          		}
    394          		if(ptr->CtrlFlag.MuRu_Install[i].Ru6_Bit)
    395          		{
    396          			Sts->SystemIns.Mu_Ru_Install[i][5] = ptr->MuRu_Install[i].Ru6_Bit;
    397          		}
    398          		if(ptr->CtrlFlag.MuRu_Install[i].Ru7_Bit)
    399          		{
    400          			Sts->SystemIns.Mu_Ru_Install[i][6] = ptr->MuRu_Install[i].Ru7_Bit;
    401          		}
    402          		if(ptr->CtrlFlag.MuRu_Install[i].Ru8_Bit)
    403          		{
    404          			Sts->SystemIns.Mu_Ru_Install[i][7] = ptr->MuRu_Install[i].Ru8_Bit;
    405          		}
    406          	}
    407          
    408          	//---------------------------------------------------------------------//
    409          	// System
    410          	if(ptr->CtrlFlag.System.TempLimitH)
    411          	{
    412          		Sts->TempLimitH		= ptr->TempLimitH;
    413          	}
    414          	if(ptr->CtrlFlag.System.TempLimitL)
    415          	{
    416          		Sts->TempLimitL		= ptr->TempLimitL;
    417          	}
    418          	if(ptr->CtrlFlag.System.FanTemp)
    419          	{
    420          		Sts->FanTemp			= ptr->FanTemp;
    421          	}
    422          	if(ptr->CtrlFlag.System.FanMode)
    423          	{
    424          		Sts->FanMode			= ptr->FanMode;
    425          	}
    426          	if(ptr->CtrlFlag.System.FanOnOff)
    427          	{
    428          		Sts->FanOnOff			= ptr->FanOnOff;
    429          	}
    430          	if(ptr->CtrlFlag.System.TempCompOnOff)
    431          	{
    432          		Sts->TempCompOnOff		= ptr->TempCompOnOff;
    433          	}
    434          	if(ptr->CtrlFlag.System.RepeaterID)
    435          	{
    436          		for(i=0; i<10; i++)
    437          			Sts->SystemIns.RepeaterID[i]		= ptr->RepeaterID[i];
    438          	}
    439          
    440          	//---------------------------------------------------------------------//
    441          	// MDTU
    442          	for(i=0; i<MDTU_MAX; i++)
    443          	{
    444          		if(ptr->CtrlFlag.Mdtu[i].PD_LimitL)
    445          		{
    446          			Sts->MdtuSts[i].PD_LimitL			= ptr->MdtuSts[i].PD_LimitL;
    447          		}
    448          		if(ptr->CtrlFlag.Mdtu[i].LD_LimitL)
    449          		{
    450          			Sts->MdtuSts[i].LD_LimitL			= ptr->MdtuSts[i].LD_LimitL;
    451          		}
    452          		if(ptr->CtrlFlag.Mdtu[i].OpticSum)
    453          		{
    454          			Sts->MdtuSts[i].OpticSum			= ptr->MdtuSts[i].OpticSum;
    455          		}
    456          
    457          		if(ptr->CtrlFlag.Mdtu[i].FaFilter_21G)
    458          		{
    459          			Sts->MdtuSts[i].FaFilter_21G		= ptr->MdtuSts[i].FaFilter_21G;
    460          		}
    461          		if(ptr->CtrlFlag.Mdtu[i].Fa1_21G)
    462          		{
    463          			Sts->MdtuSts[i].FaOnOff_21G.Fa1_Bit = ptr->MdtuSts[i].FaOnOff_21G.Fa1_Bit;
    464          		}
    465          		if(ptr->CtrlFlag.Mdtu[i].Fa2_21G)
    466          		{
    467          			Sts->MdtuSts[i].FaOnOff_21G.Fa2_Bit = ptr->MdtuSts[i].FaOnOff_21G.Fa2_Bit;
    468          		}
    469          		if(ptr->CtrlFlag.Mdtu[i].Fa3_21G)
    470          		{
    471          			Sts->MdtuSts[i].FaOnOff_21G.Fa3_Bit = ptr->MdtuSts[i].FaOnOff_21G.Fa3_Bit;
    472          		}
    473          		if(ptr->CtrlFlag.Mdtu[i].Fa4_21G)
    474          		{
    475          			Sts->MdtuSts[i].FaOnOff_21G.Fa4_Bit = ptr->MdtuSts[i].FaOnOff_21G.Fa4_Bit;
    476          		}
    477          
    478          		if(ptr->CtrlFlag.Mdtu[i].FaFilter_900M)
    479          		{
    480          			Sts->MdtuSts[i].FaFilter_900M		= ptr->MdtuSts[i].FaFilter_900M;
    481          		}
    482          		if(ptr->CtrlFlag.Mdtu[i].Fa1_900M)
    483          		{
    484          			Sts->MdtuSts[i].FaOnOff_900M.Fa1_Bit = ptr->MdtuSts[i].FaOnOff_900M.Fa1_Bit;
    485          		}
    486          		if(ptr->CtrlFlag.Mdtu[i].Fa2_900M)
    487          		{
    488          			Sts->MdtuSts[i].FaOnOff_900M.Fa2_Bit = ptr->MdtuSts[i].FaOnOff_900M.Fa2_Bit;
    489          		}
    490          		if(ptr->CtrlFlag.Mdtu[i].Fa3_900M)
    491          		{
    492          			Sts->MdtuSts[i].FaOnOff_900M.Fa3_Bit = ptr->MdtuSts[i].FaOnOff_900M.Fa3_Bit;
    493          		}
    494          
    495          		if(ptr->CtrlFlag.Mdtu[i].FaFilter_25G)
    496          		{
    497          			Sts->MdtuSts[i].FaFilter_25G		= ptr->MdtuSts[i].FaFilter_25G;
    498          		}
    499          		if(ptr->CtrlFlag.Mdtu[i].Fa1_25G)
    500          		{
    501          			Sts->MdtuSts[i].FaOnOff_25G.Fa1_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa1_Bit;
    502          		}
    503          		if(ptr->CtrlFlag.Mdtu[i].Fa2_25G)
    504          		{
    505          			Sts->MdtuSts[i].FaOnOff_25G.Fa2_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa2_Bit;
    506          		}
    507          		if(ptr->CtrlFlag.Mdtu[i].Fa3_25G)
    508          		{
    509          			Sts->MdtuSts[i].FaOnOff_25G.Fa3_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa3_Bit;
    510          		}
    511          		if(ptr->CtrlFlag.Mdtu[i].Fa4_25G)
    512          		{
    513          			Sts->MdtuSts[i].FaOnOff_25G.Fa4_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa4_Bit;
    514          		}
    515          		if(ptr->CtrlFlag.Mdtu[i].Fa5_25G)
    516          		{
    517          			Sts->MdtuSts[i].FaOnOff_25G.Fa5_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa5_Bit;
    518          		}
    519          		if(ptr->CtrlFlag.Mdtu[i].Fa6_25G)
    520          		{
    521          			Sts->MdtuSts[i].FaOnOff_25G.Fa6_Bit = ptr->MdtuSts[i].FaOnOff_25G.Fa6_Bit;
    522          		}
    523          		
    524          		if(ptr->CtrlFlag.Mdtu[i].PD_Offset)
    525          		{	
    526          			Sts->MdtuSts[i].PD_Offset			= ptr->MdtuSts[i].PD_Offset;
    527          		}
    528          		if(ptr->CtrlFlag.Mdtu[i].LD_Offset)
    529          		{
    530          			Sts->MdtuSts[i].LD_Offset			= ptr->MdtuSts[i].LD_Offset;
    531          		}
    532          	}
    533          
    534          	//---------------------------------------------------------------------//
    535          	// MRUF
    536          	for(i=0; i<RFU_MAX; i++)
    537          	{
    538          		if(ptr->CtrlFlag.Mrfu[i].DL_OutLimitH)
    539          		{
    540          			Sts->MrfuSts[i].DL_OutLimitH	= ptr->MrfuSts[i].DL_OutLimitH;
    541          		}
    542          		if(ptr->CtrlFlag.Mrfu[i].DL_Attn)
    543          		{
    544          			Sts->MrfuSts[i].DL_Attn		= ptr->MrfuSts[i].DL_Attn;
    545          		}
    546          		if(ptr->CtrlFlag.Mrfu[i].UL_OutLimitH)
    547          		{
    548          			Sts->MrfuSts[i].UL_OutLimitH	= ptr->MrfuSts[i].UL_OutLimitH;
    549          		}
    550          		if(ptr->CtrlFlag.Mrfu[i].UL_Attn)
    551          		{
    552          			Sts->MrfuSts[i].UL_Attn		= ptr->MrfuSts[i].UL_Attn;
    553          		}
    554          		if(ptr->CtrlFlag.Mrfu[i].UL_ALC_High)
    555          		{
    556          			Sts->MrfuSts[i].UL_ALC_High	= ptr->MrfuSts[i].UL_ALC_High;
    557          		}
    558          		if(ptr->CtrlFlag.Mrfu[i].UL_Alc_OnOffH)
    559          		{
    560          			Sts->MrfuSts[i].UL_Alc_OnOffH	= ptr->MrfuSts[i].UL_Alc_OnOffH;
    561          		}
    562          		if(ptr->CtrlFlag.Mrfu[i].UL_Amp_OnOff)
    563          		{
    564          			Sts->MrfuSts[i].UL_Amp_OnOff	= ptr->MrfuSts[i].UL_Amp_OnOff;
    565          		}
    566          		
    567          		if(ptr->CtrlFlag.Mrfu[i].DL_SD_Limit)
    568          		{
    569          			Sts->MrfuSts[i].DL_SD_Limit	= ptr->MrfuSts[i].DL_SD_Limit;
    570          		}
    571          		if(ptr->CtrlFlag.Mrfu[i].DL_SD_OnOff)
    572          		{
    573          			Sts->MrfuSts[i].DL_SD_OnOff	= ptr->MrfuSts[i].DL_SD_OnOff;
    574          		}
    575          		if(ptr->CtrlFlag.Mrfu[i].UL_SD_Limit)
    576          		{
    577          			Sts->MrfuSts[i].UL_SD_Limit	= ptr->MrfuSts[i].UL_SD_Limit;
    578          		}
    579          		if(ptr->CtrlFlag.Mrfu[i].UL_SD_OnOff)
    580          		{
    581          			Sts->MrfuSts[i].UL_SD_OnOff	= ptr->MrfuSts[i].UL_SD_OnOff;
    582          		}
    583          	}
    584          
    585          	if(ptr->CtrlFlag.Mrfu25G.Tsync_Auto)
    586          	{
    587          		Sts->Tsync_Auto		= ptr->Tsync_Auto;
    588          	}
    589          	if(ptr->CtrlFlag.Mrfu25G.Tsync_Manual)
    590          	{
    591          		Sts->Tsync_Manual		= ptr->Tsync_Manual;
    592          	}
    593          	if(ptr->CtrlFlag.Mrfu25G.Tsync_OnOff_S)
    594          	{
    595          		Sts->Tsync_OnOff_S		= ptr->Tsync_OnOff_S;
    596          	}
    597          	if(ptr->CtrlFlag.Mrfu25G.Tsync_OnOff_M)
    598          	{
    599          		Sts->Tsync_OnOff_M		= ptr->Tsync_OnOff_M;
    600          	}
    601          	if(ptr->CtrlFlag.Mrfu25G.Tsync_Offset_S)
    602          	{
    603          		Sts->Tsync_Offset_S	= ptr->Tsync_Offset_S;
    604          	}
    605          	if(ptr->CtrlFlag.Mrfu25G.Tsync_Offset_M)
    606          	{
    607          		Sts->Tsync_Offset_M	= ptr->Tsync_Offset_M;
    608          	}
    609          
    610          	//---------------------------------------------------------------------//
    611          	for(i=0; i<RFU_MAX; i++)
    612          	{
    613          		// CFR/TX 출력
    614          		if(ptr->CtrlFlag.Crf[i].Fa1_En)
    615          		{
    616          			Sts->CfrSts[i].Cfr_Enable.Fa1_Bit = ptr->CfrSts[i].Cfr_Enable.Fa1_Bit;
    617          		}
    618          		if(ptr->CtrlFlag.Crf[i].Fa2_En)
    619          		{
    620          			Sts->CfrSts[i].Cfr_Enable.Fa2_Bit = ptr->CfrSts[i].Cfr_Enable.Fa2_Bit;
    621          		}
    622          		if(ptr->CtrlFlag.Crf[i].Fa3_En)
    623          		{
    624          			Sts->CfrSts[i].Cfr_Enable.Fa3_Bit = ptr->CfrSts[i].Cfr_Enable.Fa3_Bit;
    625          		}
    626          		if(ptr->CtrlFlag.Crf[i].Fa4_En)
    627          		{
    628          			Sts->CfrSts[i].Cfr_Enable.Fa4_Bit = ptr->CfrSts[i].Cfr_Enable.Fa4_Bit;
    629          		}
    630          		if(ptr->CtrlFlag.Crf[i].Fa5_En)
    631          		{
    632          			Sts->CfrSts[i].Cfr_Enable.Fa5_Bit = ptr->CfrSts[i].Cfr_Enable.Fa5_Bit;
    633          		}
    634          		if(ptr->CtrlFlag.Crf[i].Fa6_En)
    635          		{
    636          			Sts->CfrSts[i].Cfr_Enable.Fa6_Bit = ptr->CfrSts[i].Cfr_Enable.Fa6_Bit;
    637          		}
    638          
    639          		if(ptr->CtrlFlag.Crf[i].Fa1_OnOff)
    640          		{
    641          			Sts->CfrSts[i].Cfr_OnOff.Fa1_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa1_Bit;
    642          		}
    643          		if(ptr->CtrlFlag.Crf[i].Fa2_OnOff)
    644          		{
    645          			Sts->CfrSts[i].Cfr_OnOff.Fa2_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa2_Bit;
    646          		}
    647          		if(ptr->CtrlFlag.Crf[i].Fa3_OnOff)
    648          		{
    649          			Sts->CfrSts[i].Cfr_OnOff.Fa3_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa3_Bit;
    650          		}
    651          		if(ptr->CtrlFlag.Crf[i].Fa4_OnOff)
    652          		{
    653          			Sts->CfrSts[i].Cfr_OnOff.Fa4_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa4_Bit;
    654          		}
    655          		if(ptr->CtrlFlag.Crf[i].Fa5_OnOff)
    656          		{
    657          			Sts->CfrSts[i].Cfr_OnOff.Fa5_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa5_Bit;
    658          		}
    659          		if(ptr->CtrlFlag.Crf[i].Fa6_OnOff)
    660          		{
    661          			Sts->CfrSts[i].Cfr_OnOff.Fa6_Bit = ptr->CfrSts[i].Cfr_OnOff.Fa6_Bit;
    662          		}
    663          		
    664          		if(ptr->CtrlFlag.Crf[i].Cfr_Select)
    665          		{
    666          			Sts->CfrSts[i].Cfr_Select		= ptr->CfrSts[i].Cfr_Select;
    667          		}
    668          		if(ptr->CtrlFlag.Crf[i].Limit_OnOff)
    669          		{
    670          			Sts->CfrSts[i].Limit_OnOff		= ptr->CfrSts[i].Limit_OnOff;
    671          		}
    672          
    673          		// Offset
    674          		if(ptr->CtrlFlag.Offset[i].DL_Attn)
    675          		{
    676          			Sts->MrfuOffset[i].DL_Attn 	= ptr->MrfuOffset[i].DL_Attn;
    677          		}
    678          		if(ptr->CtrlFlag.Offset[i].UL_Attn)
    679          		{
    680          			Sts->MrfuOffset[i].UL_Attn 	= ptr->MrfuOffset[i].UL_Attn;
    681          		}
    682          		if(ptr->CtrlFlag.Offset[i].DL_Pwr_Offset)
    683          		{
    684          			Sts->MrfuOffset[i].DL_Pwr_Offset 	= ptr->MrfuOffset[i].DL_Pwr_Offset;
    685          		}
    686          		if(ptr->CtrlFlag.Offset[i].UL_Pwr_Offset)
    687          		{
    688          			Sts->MrfuOffset[i].UL_Pwr_Offset 	= ptr->MrfuOffset[i].UL_Pwr_Offset;
    689          		}
    690          	}
    691          
    692            	return 1;
    693          }
    694          
    695          
    696          ////////////////////////////////////////////////////////////////////////////////
    697          // End of Source File
    698          ////////////////////////
    699          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     DefaultBackup         0
     Initialize            8
     LoadBackupData        0
     SetDnrCtrlData       24
     StatusInitialize      8


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     rambackup                                 4
     NmsResetCase                              1
     Initialize                               56
     StatusInitialize                        540
     LoadBackupData                            2
     DefaultBackup                             2
     SetDnrCtrlData                         1862
     ??DataTable7                              4
     ??DataTable7_1                            4
     ??DataTable7_2                            4
     ??DataTable7_3                            4
     ?<Constant "NL SOFTBANK In-Buildi...">   44
     ?<Constant "SystemDate[%s]\n">           16
     ?<Constant "Aug 30 2012">                12
     ?<Constant "SystemTime[%s]\n">           16
     ?<Constant "21:29:28">                   12

 
     5 bytes in section .bss
 2 578 bytes in section .text
 
 2 578 bytes of CODE memory
     5 bytes of DATA memory

Errors: none
Warnings: none

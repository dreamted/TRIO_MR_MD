###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     23/Aug/2012  22:53:27 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\stm32\fw\stm207_appl_ssr_20120825\lib\ti #
#                    mer\timer_v0.1.c                                         #
#    Command line =  C:\user\project\stm32\fw\stm207_appl_ssr_20120825\lib\ti #
#                    mer\timer_v0.1.c -D NDEBUG -lcN                          #
#                    C:\user\project\stm32\fw\stm207_appl_ssr_20120825\sout\  #
#                    -o C:\user\project\stm32\fw\stm207_appl_ssr_20120825\sou #
#                    t\ --endian=little --cpu=Cortex-M3 -e                    #
#                    --warnings_are_errors --fpu=None --dlib_config           #
#                    "C:\compiler\ewarm 5.5\arm\INC\DLib_Config_Normal.h" -I  #
#                    C:\user\project\stm32\fw\stm207_appl_ssr_20120825\includ #
#                    e\ -I C:\user\project\stm32\fw\stm207_appl_ssr_20120825\ #
#                    lib_stm32\inc\ -I C:\user\project\stm32\fw\stm207_appl_s #
#                    sr_20120825\lib_stm32\src\ -I                            #
#                    C:\user\project\stm32\fw\stm207_appl_ssr_20120825\uC-CPU #
#                    \ -I C:\user\project\stm32\fw\stm207_appl_ssr_20120825\u #
#                    C-LIB\ -I C:\user\project\stm32\fw\stm207_appl_ssr_20120 #
#                    825\uCOS-II\Ports\ -I C:\user\project\stm32\fw\stm207_ap #
#                    pl_ssr_20120825\uCOS-II\Source\ -I                       #
#                    C:\user\project\stm32\fw\stm207_appl_ssr_20120825\uC-Pro #
#                    be\ -I "C:\compiler\ewarm 5.5\arm\INC\" -Oh              #
#    List file    =  C:\user\project\stm32\fw\stm207_appl_ssr_20120825\sout\t #
#                    imer_v0.1.lst                                            #
#    Object file  =  C:\user\project\stm32\fw\stm207_appl_ssr_20120825\sout\t #
#                    imer_v0.1.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\stm32\fw\stm207_appl_ssr_20120825\lib\timer\timer_v0.1.c
      1          
      2          /******************** (C) COPYRIGHT 2008 PILOG, NSINFO *************************
      3          * File Name          : timer_vx.x.c
      4          * Author             : Yoon Byong-Gyu(bgyoon@naver.com)
      5          * Date First Issued  : 01/17/2008
      6          * Description        : This file provides all the USART0 firmware functions.
      7          * $Revision: 0.1 $
      8          * $Revision date: 2008.01.__
      9          ********************************************************************************/
     10          #include "stm32f10x_conf.h"
     11          #include "../include/timerext.h"
     12          #include "timer_v0.1.h"
     13          
     14          
     15          void Tmr_TickInit(u32 ms)
     16          {
     17            	// Configure HCLK clock as SysTick clock source
     18           	SysTick->CTRL.Bit.CLKSOURCE = __EXTSRC;
     19            	// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
     20          	SysTick->LOAD.Data = ((unsigned long long )ms * SYSCLK)/(8L * 1000L);
     21          	SysTick->CTRL.Bit.TICKINT = __PENDINT;	// tick interrupt enable
     22            
     23          	// Enable the SysTick Counter
     24          	SysTick->CTRL.Bit.ENABLE = ENABLE;	// systick count enable
     25          }
     26          
     27          
     28          /*******************************************************************************
     29          * Function Name  : SysTickHandler
     30          * Description    : This function handles SysTick Handler.
     31          * Input          : None
     32          * Output         : None
     33          * Return         : None
     34          *******************************************************************************/
     35          	
     36          void  Tmr_TickISR_Handler (void)
     37          {
     38          	OS_CPU_SR  cpu_sr;
     39          
     40          
     41          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
     42          	OSIntNesting++;
     43          	OS_EXIT_CRITICAL();
     44          
     45          	OSTimeTick();												// Call uC/OS-II's OSTimeTick()
     46          	OSIntExit();												// Tell uC/OS-II that we are leaving the ISR
     47          }
     48          
     49          void TimerInit(void)
     50          {
     51          	INT8U i = 0;
     52          
     53          	for(i = 0; i < TIMERmax; i++)
     54          	{
     55          		LongTimer[i].TimerID = 0;
     56          		LongTimer[i].Count = 0;
     57          	}
     58          }
     59          void CheckSoftTimer(void)
     60          {
     61          	INT8U i = 0;
     62          
     63          	for(i = 0; i < TIMERmax; i++ )
     64          	{
     65          		if(LongTimer[i].Count != 0L ) LongTimer[i].Count--;
     66          	}
     67          }
     68          
     69          INT8U TimerRegist ( INT8U TimeId, INT32U TimeCnt)
     70          {
     71          
     72              INT8U i;
     73          
     74              for( i = 0; i < TIMERmax; i++ )
     75          		if ( LongTimer[i].TimerID == TimeId )
     76          		{	LongTimer[i].Count = TimeCnt;	// TimeCnt/2 Down Fail
     77          			return( TRUE );
     78          		}
     79              for( i = 0; i < TIMERmax; i++ )
     80          		if ( LongTimer[i].TimerID == 0 )
     81          		{	LongTimer[i].TimerID = TimeId;
     82          			LongTimer[i].Count = TimeCnt;	// TimeCnt/2 Down Fail
     83          			return( TRUE );
     84          		}
     85          	return( FALSE );
     86          }
     87          
     88          INT32U TimeRemainCheck(INT8U TimeId)
     89          {
     90          	INT32U i;
     91          
     92          	for( i = 0; i < TIMERmax; i++ )
     93          	{	if ( LongTimer[i].TimerID == TimeId )
     94          		{
     95          			i = LongTimer[i].Count;
     96          			return(i);
     97          		}
     98          	}
     99          	return( FALSE );
    100          }
    101          
    102          INT8U TimeOverCheck ( INT8U TimeId )
    103          {
    104              INT8U i;
    105          
    106              for( i = 0; i < TIMERmax; i++ )
    107          	{	if ( LongTimer[i].TimerID == TimeId )
    108          		{	if ( LongTimer[i].Count == 0 )
    109          			{	LongTimer[i].TimerID = 0;
    110          				return( TRUE );
    111          			}
    112          		}
    113          	}
    114          	return( FALSE );
    115          }
    116          INT8U TimerCancel ( INT16U TimeId )
    117          {
    118          	INT16U	i;
    119          
    120              for( i = 0; i < TIMERmax; i++ )
    121          		if ( LongTimer[i].TimerID == TimeId )
    122          		{	LongTimer[i].TimerID = 0;
    123          			LongTimer[i].Count = 0;
    124          			return( TRUE );
    125          		}
    126          	return( FALSE );
    127          }
    128          
    129          
    130          void ForDelay(unsigned long int count)
    131          {
    132              while(count--){WatchdogClear();}
    133          }
    134          
    135          ////////////////////////////////////////////////////////////////////////////////
    136          void WatchdogInit(void)
    137          {
    138          	// IWDG timeout equal to 280 ms (the timeout may varies due to LSI frequency dispersion)
    139          	// Enable write access to IWDG_PR and IWDG_RLR registers
    140          	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
    141          	
    142          	// IWDG counter clock: 40KHz(LSI) / 32 = 1.25 KHz
    143          	IWDG_SetPrescaler(IWDG_CLK64);
    144          	
    145          	// Set counter reload value to 349
    146          	IWDG_SetReload(1000L);
    147          	
    148          	// Reload IWDG counter
    149          	IWDG_ReloadCounter();
    150          	
    151          	// Enable IWDG (the LSI oscillator will be enabled by hardware)
    152          	IWDG_Enable();
    153          
    154          
    155          }
    156          
    157          void WatchdogClear(void)
    158          {
    159          	// Reload IWDG counter
    160          	IWDG_ReloadCounter();
    161          	GPIOB->ODR.B2 ^= 1;
    162          }
    163          ////////////////////////////////////////////////////////////////////////////////
    164          // End of Source File
    165          /////////////////////
    166          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     CheckSoftTimer           0
     ForDelay                 8
     TimeOverCheck            4
     TimeRemainCheck          4
     TimerCancel              4
     TimerInit                0
     TimerRegist              8
     Tmr_TickISR_Handler      8
     Tmr_TickInit             8
     WatchdogClear            8
     WatchdogInit             8


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     LongTimer            152
     Tmr_TickInit          48
     Tmr_TickISR_Handler   30
     TimerInit             60
     CheckSoftTimer        22
     TimerRegist           68
     TimeRemainCheck       40
     TimeOverCheck         48
     TimerCancel           46
     ForDelay              18
     WatchdogInit          36
     WatchdogClear         18
     ??DataTable8           4
     ??DataTable8_1         4
     ??DataTable8_2         4
     ??DataTable8_3         4
     ??DataTable8_4         4
     ??DataTable8_5         4

 
 152 bytes in section .bss
 458 bytes in section .text
 
 458 bytes of CODE memory
 152 bytes of DATA memory

Errors: none
Warnings: none

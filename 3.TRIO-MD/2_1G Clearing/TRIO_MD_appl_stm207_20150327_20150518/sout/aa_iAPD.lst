###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     23/Aug/2012  00:33:38 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\aa_iAPD #
#                    .c                                                       #
#    Command line =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\aa_iAPD #
#                    .c -lcN C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout #
#                    \ -lB C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\  #
#                    -o C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\     #
#                    --endian=little --cpu=Cortex-M3 -e --require_prototypes  #
#                    --fpu=None --dlib_config "C:\compiler\ewarm              #
#                    5.5\arm\INC\DLib_Config_Normal.h" -I                     #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\include\ -I  #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_stm32\in #
#                    c\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_st #
#                    m32\src\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\ #
#                    uC-CPU\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\u #
#                    C-LIB\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\uC #
#                    OS-II\Ports\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120 #
#                    717\uCOS-II\Source\ -I C:\user\project\FR-SSR\fw\appl_ss #
#                    r_20120717\uC-Probe\ -I "C:\compiler\ewarm               #
#                    5.5\arm\INC\" -Oh                                        #
#    List file    =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\aa_iAPD #
#                    .lst                                                     #
#    Object file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\aa_iAPD #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\aa_iAPD.c
      1          /*!
      2          *********************************************************************************************************
      3          *              	- iAPD CODE
      4          *
      5          *              	-(c) Copyright 2007-2012;
      6          *
      7          *              	-All rights reserved.  Protected by international copyright laws.
      8          *              	-Knowledge of the source code may NOT be used to develop a similar product.
      9          *              	-Please help us continue to provide the Embedded community with the finest
     10          *              	-software available.  Your honesty is greatly appreciated.
     11          *
     12          * 				-file 		: iapd.c
     13          * 				-author		: Yoon Byong-Gyu, bgyoon@naver.com
     14          * 				-date		: 2012.05.
     15          *********************************************************************************************************
     16          */
     17          
     18          #define APD_C
     19          //#define APD_DEBUG
     20          
     21          #include "../include/main.h"
     22          
     23          void iAPDInit(void)
     24          {
     25          	iFPGA_CS0_Init();		// SPI2
     26          	
     27          	OSTaskCreate(iAPDTask, (void *)NULL, (OS_STK *)&APD0TaskStk[APD_START_STK_SIZE - 1], APD0_TASK_PRIO);
     28          
     29          }
     30          
     31          void iAPDTask(void * pdata)
     32          {
     33          	OSTimeDly(100*APD0_TASK_PRIO);
     34          	
     35          	while(1)
     36          	{
     37          		while(!DownLoadGiveupTimerSet(NULL))
     38          		{
     39          			if(!IsItiFPGAInit())
     40          			{
     41          				iFPGA_INIT();
     42          			}
     43          			iFPGAGetStatus();
     44          			//else			Install_StatusUpdate();
     45          			//tmpSwFlag ^= TRUE;
     46          			
     47          			OSTimeDly(500L);
     48          		}
     49          		OSTimeDly(500L);
     50          	}
     51          }
     52          
     53          void iFPGA_INIT(void)
     54          {
     55          	INT8U tmpData[2];
     56          	
     57          	int i = 0, j = 0;
     58          
     59          	iFPAGResetOper();
     60          
     61          	for(i = 0; i < 4; i++)
     62          	{
     63          		iAD9362ResetOper(i);
     64          	}
     65          
     66          	OSTimeDly(500L);
     67          	AD9362InitSet(SPI_3G_TX_CH, LTE_20MHz);
     68          	AD9362InitSet(SPI_3G_RX_CH, LTE_20MHz);
     69          	AD9362InitSet(SPI_4G_TX_CH, MainStatus->TypeSel_4G%3);
     70          	AD9362InitSet(SPI_4G_RX_CH, MainStatus->TypeSel_4G%3);
     71          
     72          	// InitSet!!
     73          
     74          	// SPI_3G_TX_CH((Tx) In --> (Rx) Out)
     75          	AD9362RxEnable(SPI_3G_TX_CH, !(MainStatus->RFPathSelTx_3G & 0x01), (MainStatus->RFPathSelTx_3G & 0x01));	// 0: Main, 1: Sub
     76          	AD9362TxEnable(SPI_3G_RX_CH, (MainStatus->RFPathSelTx_3G & 0x01), !(MainStatus->RFPathSelTx_3G & 0x01));	// 0: Main, 1: Sub
     77          
     78          	// SPI_3G_RX_CH((Rx) In --> (Tx) Out)
     79          	AD9362RxEnable(SPI_3G_RX_CH, !(MainStatus->RFPathSelRx_3G & 0x01), (MainStatus->RFPathSelRx_3G & 0x01));	// 0: Main, 1: Sub
     80          	AD9362TxEnable(SPI_3G_TX_CH, (MainStatus->RFPathSelRx_3G & 0x01), !(MainStatus->RFPathSelRx_3G & 0x01));	// 0: Main, 1: Sub
     81          
     82          	// SPI_4G_TX_CH((Tx) In --> (Rx) Out)
     83          	AD9362RxEnable(SPI_4G_TX_CH, !(MainStatus->RFPathSelTx_4G & 0x01), (MainStatus->RFPathSelTx_4G & 0x01));	// 0: Main, 1: Sub
     84          	AD9362TxEnable(SPI_4G_RX_CH, (MainStatus->RFPathSelTx_4G & 0x01), !(MainStatus->RFPathSelTx_4G & 0x01));	// 0: Main, 1: Sub
     85          
     86          	// SPI_4G_RX_CH((Rx) In --> (Tx) Out)
     87          	AD9362RxEnable(SPI_4G_RX_CH, !(MainStatus->RFPathSelRx_4G & 0x01), (MainStatus->RFPathSelRx_4G & 0x01));	// 0: Main, 1: Sub
     88          	AD9362TxEnable(SPI_4G_TX_CH, (MainStatus->RFPathSelRx_4G & 0x01), !(MainStatus->RFPathSelRx_4G & 0x01));	// 0: Main, 1: Sub
     89          
     90          	
     91          	for(i = 0; i < 4; i++)
     92          	{
     93          		AD9362TxOn(i, SET);
     94          
     95          		// Tx ATTN (Tx Power Init)
     96          		AD9362Tx12AllSel(i, ENABLE);
     97          		AD9362TxAttnUpdateEn(i, ENABLE);
     98          		AD9362Tx1AttnSet(i, AD9362_GAIN_TXMAX*4);
     99          
    100          	}
    101          
    102          	OSTimeDly(1000L);
    103          	
    104          	FPGACfgFinish = TRUE;
    105          }
    106          
    107          INT8U IsItiFPGAInit(void)
    108          {
    109          	return(FPGACfgFinish);
    110          }
    111          
    112          void iFPGAInitialize(void)
    113          {
    114          	FPGACfgFinish = FALSE;
    115          }
    116          
    117          
    118          void iFPAGResetOper(void)
    119          {
    120          	INT8U tmpData;
    121          
    122          	tmpData = 0;
    123          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_RESET, &tmpData, 1);
    124          	OSTimeDly(1000);
    125          	tmpData = 1;
    126          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_RESET, &tmpData, 1);
    127          	OSTimeDly(1000);
    128          }
    129          
    130          void iAD9362ResetOper(INT8U ch)
    131          {
    132          	INT8U tmpData[2];
    133          
    134          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_RESET, tmpData, 2);
    135          
    136          	     if(ch == SPI_3G_TX_CH) BitRst(tmpData[0], 4);
    137          	else if(ch == SPI_3G_RX_CH) BitRst(tmpData[0], 0);
    138          	else if(ch == SPI_4G_TX_CH) BitRst(tmpData[1], 4);
    139          	else if(ch == SPI_4G_RX_CH) BitRst(tmpData[1], 0);
    140          
    141          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_RESET, tmpData, 2);
    142          	
    143          	OSTimeDly(100L);
    144          
    145          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_RESET, tmpData, 2);
    146          
    147          	     if(ch == SPI_3G_TX_CH) BitSet(tmpData[0], 4);
    148          	else if(ch == SPI_3G_RX_CH) BitSet(tmpData[0], 0);
    149          	else if(ch == SPI_4G_TX_CH) BitSet(tmpData[1], 4);
    150          	else if(ch == SPI_4G_RX_CH) BitSet(tmpData[1], 0);
    151          
    152          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_RESET, tmpData, 2);
    153          }
    154          
    155          
    156          void iFPGAEnableOper(INT8U ch, INT8U IsEn)
    157          {
    158          	INT8U tmpData[2];
    159          
    160          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_EN, tmpData, 2);
    161          
    162          	if(!IsEn)
    163          	{
    164          		     if(ch == SPI_3G_TX_CH) BitRst(tmpData[0], 4);
    165          		else if(ch == SPI_3G_RX_CH) BitRst(tmpData[0], 0);
    166          		else if(ch == SPI_4G_TX_CH) BitRst(tmpData[1], 4);
    167          		else if(ch == SPI_4G_RX_CH) BitRst(tmpData[1], 0);
    168          	}
    169          	else{
    170          			 if(ch == SPI_3G_TX_CH) BitSet(tmpData[0], 4);
    171          		else if(ch == SPI_3G_RX_CH) BitSet(tmpData[0], 0);
    172          		else if(ch == SPI_4G_TX_CH) BitSet(tmpData[1], 4);
    173          		else if(ch == SPI_4G_RX_CH) BitSet(tmpData[1], 0);
    174          	}
    175          
    176          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_EN, tmpData, 2);
    177          
    178          
    179          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_TXRX, tmpData, 2);
    180          
    181          	if(!IsEn)
    182          	{
    183          			 if(ch == SPI_3G_TX_CH) BitRst(tmpData[0], 4);
    184          		else if(ch == SPI_3G_RX_CH) BitRst(tmpData[0], 0);
    185          		else if(ch == SPI_4G_TX_CH) BitRst(tmpData[1], 4);
    186          		else if(ch == SPI_4G_RX_CH) BitRst(tmpData[1], 0);
    187          	}
    188          	else{
    189          			 if(ch == SPI_3G_TX_CH) BitSet(tmpData[0], 4);
    190          		else if(ch == SPI_3G_RX_CH) BitSet(tmpData[0], 0);
    191          		else if(ch == SPI_4G_TX_CH) BitSet(tmpData[1], 4);
    192          		else if(ch == SPI_4G_RX_CH) BitSet(tmpData[1], 0);
    193          	}
    194          
    195          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_AD9362_TXRX, tmpData, 2);
    196          
    197          
    198          
    199          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_TXEN, tmpData, 2);
    200          
    201          	if(!IsEn)
    202          	{
    203          		     if(ch == SPI_3G_TX_CH) BitRst(tmpData[0], 0);
    204          		else if(ch == SPI_3G_RX_CH) BitRst(tmpData[0], 4);
    205          		else if(ch == SPI_4G_TX_CH) BitRst(tmpData[1], 0);
    206          		else if(ch == SPI_4G_RX_CH) BitRst(tmpData[1], 4);
    207          	}
    208          	else{
    209          			 if(ch == SPI_3G_TX_CH) BitSet(tmpData[0], 0);
    210          		else if(ch == SPI_3G_RX_CH) BitSet(tmpData[0], 4);
    211          		else if(ch == SPI_4G_TX_CH) BitSet(tmpData[1], 0);
    212          		else if(ch == SPI_4G_RX_CH) BitSet(tmpData[1], 4);
    213          	}
    214          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_TXEN, tmpData, 2);
    215          
    216          
    217          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_RXEN, tmpData, 2);
    218          
    219          	if(!IsEn)
    220          	{
    221          		     if(ch == SPI_3G_TX_CH) BitRst(tmpData[0], 4);
    222          		else if(ch == SPI_3G_RX_CH) BitRst(tmpData[0], 0);
    223          		else if(ch == SPI_4G_TX_CH) BitRst(tmpData[1], 4);
    224          		else if(ch == SPI_4G_RX_CH) BitRst(tmpData[1], 0);
    225          	}
    226          	else{
    227          			 if(ch == SPI_3G_TX_CH) BitSet(tmpData[0], 4);
    228          		else if(ch == SPI_3G_RX_CH) BitSet(tmpData[0], 0);
    229          		else if(ch == SPI_4G_TX_CH) BitSet(tmpData[1], 4);
    230          		else if(ch == SPI_4G_RX_CH) BitSet(tmpData[1], 0);
    231          	}
    232          
    233          	WriteFPGAs(SPI_FPGA_CH, F_ADDR_RXEN, tmpData, 2);
    234          
    235          
    236          }
    237          
    238          
    239          void iFPGAGetStatus(void)
    240          {
    241          	INT8U tmpData[4];
    242          	
    243          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_CODE_VER, tmpData, 2);
    244          
    245          	MainStatus->FPGA_Ver[0] = tmpData[0];
    246          	MainStatus->FPGA_Ver[1] = tmpData[1];
    247          	
    248          	ReadFPGAs(SPI_FPGA_CH, F_ADDR_DATE, tmpData, 4);
    249          
    250          	MainStatus->FPGA_Date[0] = tmpData[0];
    251          	MainStatus->FPGA_Date[1] = tmpData[1];
    252          	MainStatus->FPGA_Date[2] = tmpData[2];
    253          	MainStatus->FPGA_Date[3] = tmpData[3];
    254          
    255          }
    256          
    257          INT8U iAD9352BPPLLSet(INT8U ch, INT8U type)
    258          {
    259          
    260          	INT32U fLo = 983040000L;
    261          	INT8U ADCDiv = 0;
    262          	INT8U DACDiv2En = FALSE;
    263          
    264          	if(type == LTE_10MHz)
    265          	{
    266          		ADCDiv = ADCDivd4;
    267          		DACDiv2En = FALSE;
    268          	}
    269          	else if(type == LTE_15MHz)
    270          	{
    271          		fLo = 737280000L;
    272          		ADCDiv = ADCDivd2;
    273          		DACDiv2En = TRUE;
    274          	}
    275          	else if(type == LTE_20MHz)
    276          	{
    277          		ADCDiv = ADCDivd2;
    278          		DACDiv2En = TRUE;
    279          	}
    280          	else// if(type == UMTS4x)
    281          	{
    282          		ADCDiv = ADCDivd8;
    283          		DACDiv2En = FALSE;
    284          	}
    285          
    286          	return AD8362BPPLLWrite(ch, fLo);
    287          
    288          /**
    289          
    290          	
    291          	AD9362BPPLLCtrl(ch, ADCDiv, DACDiv2En);
    292          	
    293          	AD9362DCXOSet(ch, 8, 4096);
    294          	
    295          	{
    296          		INT8U THB3En;
    297          		INT8U THB2En;
    298          		INT8U THB1En;
    299          		INT8U FIREn;
    300          
    301          		if(type == LTE_10MHz)
    302          		{
    303          			THB3En = THB3x2Enable;
    304          			THB2En = ENABLE;
    305          			THB1En = ENABLE;
    306          			FIREn = FIRx2Enable;
    307          		}
    308          		else if(type == LTE_15MHz)
    309          		{
    310          			THB3En = THB3x1Bypass;
    311          			THB2En = ENABLE;
    312          			THB1En = ENABLE;
    313          			FIREn = FIRx2Enable;
    314          		}
    315          		else if(type == LTE_20MHz)
    316          		{
    317          			THB3En = THB3x2Enable;
    318          			THB2En = ENABLE;
    319          			THB1En = ENABLE;
    320          			FIREn = FIRx1Enable;
    321          		}
    322          		else// if(type == UMTS4x)
    323          		{
    324          			THB3En = THB3x2Enable;
    325          			THB2En = ENABLE;
    326          			THB1En = ENABLE;
    327          			FIREn = FIRx1Enable;
    328          		}
    329          		AD9362TxFilterSet(ch, THB3En, THB2En, THB1En, FIREn);
    330          	}
    331          	AD9362TxFilterConf(ch, 0x07, 0);
    332          
    333          	{
    334          		INT8U RHB3En;
    335          		INT8U RHB2En;
    336          		INT8U RHB1En;
    337          		INT8U FIREn;
    338          
    339          		if(type == LTE_10MHz)
    340          		{
    341          			RHB3En = THB3x2Enable;
    342          			RHB2En = ENABLE;
    343          			RHB1En = ENABLE;
    344          			FIREn = FIRx2Enable;
    345          		}
    346          		else if(type == LTE_15MHz)
    347          		{
    348          			RHB3En = THB3x2Enable;
    349          			RHB2En = ENABLE;
    350          			RHB1En = ENABLE;
    351          			FIREn = FIRx2Enable;
    352          		}
    353          		else if(type == LTE_20MHz)
    354          		{
    355          			RHB3En = THB3x2Enable;
    356          			RHB2En = ENABLE;
    357          			RHB1En = ENABLE;
    358          			FIREn = FIRx2Enable;
    359          		}
    360          		else// if(type == UMTS4x)
    361          		{
    362          			RHB3En = THB3x2Enable;
    363          			RHB2En = ENABLE;
    364          			RHB1En = ENABLE;
    365          			FIREn = FIRx1Enable;
    366          		}
    367          		AD9362RxFilterSet(ch, RHB3En, RHB2En, RHB1En, FIREn);
    368          	}
    369          	AD9362RxFilterConf(ch, 0x07);
    370          	AD9362RxFilterGain(ch, 0x02);
    371          
    372          	**/
    373          }
    374          
    375          //TypeSel_4G
    376          
    377          
    378          /*!******************************************************************************
    379          * @fn		INT32U ReadFPGAs(INT8U OPCODE, INT16U ADDR, INT8U *DATA, INT32U nlen)
    380          * @brief	to read spi datas for each channel	
    381          * @return	length of Read
    382          * @param	OPCODE : ndev channel no
    383          * @param	ADDR   : spi Address
    384          * @param	DATA   : data point read
    385          * @param	nlen   : length read
    386          * @remarks	prototype is declared in ther iapd.h
    387          ********************************************************************************/
    388          
    389          INT32U ReadFPGAs(INT8U OPCODE, INT16U ADDR, INT8U *DATA, INT32U nlen)
    390          {
    391          	return (iFPGA_GetRegister(&iFPGASpi, OPCODE, (ADDR & 0x7fff), DATA, nlen));
    392          }
    393          
    394          /*!******************************************************************************
    395          * @fn		void WriteFPGAs(INT8U OPCODE, INT16U ADDR, INT8U *DATA, INT32U nlen)
    396          * @brief	to write spi datas for each channel	
    397          * @return	none
    398          * @param	OPCODE : ndev channel no
    399          * @param	ADDR   : spi Address
    400          * @param	DATA   : data point write
    401          * @param	nlen   : length of writing
    402          * @remarks	prototype is declared in ther iapd.h
    403          ********************************************************************************/
    404          
    405          void WriteFPGAs(INT8U OPCODE, INT16U ADDR, INT8U *DATA, INT32U nlen)
    406          {
    407          	iFPGA_SetRegister(&iFPGASpi, OPCODE, (ADDR | 0x8000), DATA, nlen);
    408          }
    409          
    410          /*!******************************************************************************
    411          * @fn		INT32S sFLASH_SetRegister(DevSPIxStr *Devptr, INT8U OPCODE, INT32U ADDR, INT8U *DATA, INT32U nlen)
    412          * @brief	to read/write spi datas for each channel	
    413          * @return	length of Read/writed
    414          * @param	Devptr : spi pointer
    415          * @param	OPCODE : ndev channel no
    416          * @param	ADDR   : spi Address
    417          * @param	DATA   : data point returned or write
    418          * @param	nlen   : length returned or write
    419          * @remarks	prototype is declared in ther iapd.h
    420          ********************************************************************************/
    421          
    422          INT32S iFPGA_SetRegister(DevSPIxStr *Devptr, INT8U OPCODE, INT32U ADDR, INT8U *DATA, INT32U nlen)
    423          {
    424          	INT32U i = 0;
    425          	INT8U err = 0;
    426          
    427          	OSSemPend(Devptr->OSSem, 0, &err);
    428          
    429          	Devptr->nDevNo = OPCODE;
    430          
    431          	ADDR |= ((nlen - 1) & 0x07) << 12;
    432          
    433          	iDev_SPIx_CS_RST(Devptr->nDevNo);
    434          		
    435          	SetSPIxCommand(Devptr->SPIx, (ADDR >>  8) & 0xFF);
    436          	SetSPIxCommand(Devptr->SPIx, (ADDR >>  0) & 0xFF);
    437          
    438          	for(i = 0; i < nlen && i < 4; i++)
    439          	{
    440          		SetSPIxCommand(Devptr->SPIx, DATA[i]);
    441          	}
    442          
    443          	iDev_SPIx_CS_SET(Devptr->nDevNo);
    444          
    445          	OSSemPost(Devptr->OSSem);
    446          	return i;
    447          }
    448          
    449          INT32S iFPGA_GetRegister(DevSPIxStr *Devptr, INT8U OPCODE, INT32U ADDR, INT8U *DATA, INT32U nlen)
    450          {
    451          	INT32U i = 0;
    452          	INT8U err = 0;
    453          
    454          	OSSemPend(Devptr->OSSem, 0, &err);
    455          
    456          	Devptr->nDevNo = OPCODE;
    457          
    458          	ADDR |= ((nlen - 1) & 0x07) << 12;
    459          
    460          	iDev_SPIx_CS_RST(Devptr->nDevNo);
    461          		
    462          	SetSPIxCommand(Devptr->SPIx, (ADDR >>  8) & 0xFF);
    463          	SetSPIxCommand(Devptr->SPIx, (ADDR >>  0) & 0xFF);
    464          
    465          	for(i = 0; i < nlen && i < 4; i++)
    466          	{
    467          		DATA[i] = SetSPIxCommand(Devptr->SPIx, DATA[i]);
    468          	}
    469          
    470          	iDev_SPIx_CS_SET(Devptr->nDevNo);
    471          
    472          	OSSemPost(Devptr->OSSem);
    473          	return i;
    474          }
    475          
    476          
    477          /////////////////////////////////////////////////////////////////////////////////
    478          void iSPIxInit(DevSPIxStr *Devptr)
    479          {
    480          	iDev_SPIxInit(Devptr->SPIx);
    481          	iDev_SPIx_CS_SET(Devptr->nDevNo);
    482          }
    483          
    484          
    485          void  iDev_SPIx_CS_SET(INT8U nDev)
    486          {
    487                   if(nDev == SPI_3G_TX_CH) 	_3G_SPI_TX_nCS = 1;
    488          	else if(nDev == SPI_3G_RX_CH) 	_3G_SPI_RX_nCS = 1;
    489          	else if(nDev == SPI_4G_TX_CH) 	_4G_SPI_TX_nCS = 1;
    490          	else if(nDev == SPI_4G_RX_CH) 	_4G_SPI_RX_nCS = 1;
    491          	else if(nDev == SPI_FPGA_CH) 	_FPGA_SPI_RX_nCS = 1;
    492          
    493          }
    494          
    495          void iDev_SPIx_CS_RST(INT8U nDev)
    496          {
    497                   if(nDev == SPI_3G_TX_CH) 	_3G_SPI_TX_nCS = 0;
    498          	else if(nDev == SPI_3G_RX_CH) 	_3G_SPI_RX_nCS = 0;
    499          	else if(nDev == SPI_4G_TX_CH) 	_4G_SPI_TX_nCS = 0;
    500          	else if(nDev == SPI_4G_RX_CH) 	_4G_SPI_RX_nCS = 0;
    501          	else if(nDev == SPI_FPGA_CH) 	_FPGA_SPI_RX_nCS = 0;
    502          }
    503          
    504          
    505          SPI_TypeDef *iDev_SPIx_BASE(INT8U SPIx)
    506          {
    507          	SPI_TypeDef *nBASE;
    508          	
    509          	     if(SPIx == USE_SPI2) 	nBASE = SPI2;
    510          	else if(SPIx == USE_SPI1) 	nBASE = SPI1;
    511          	else 						nBASE = SPI3;
    512          
    513          	return nBASE;
    514          }
    515          
    516          void iDev_SPIxInit(INT8U SPIx)
    517          {
    518          	if(SPIx == USE_SPI1) {
    519          		GPIOA->CNF.B5 = __SPI1_SCK;
    520          		GPIOA->CNF.B7 = __SPI1_MOSI;
    521          		GPIOA->CNF.B6 = __SPI1_MISO;
    522          		SPI1Init();
    523          	}
    524          	else if(SPIx == USE_SPI2) {
    525          		GPIOB->CNF.B13 = __SPI2_SCK; 
    526          		GPIOB->CNF.B15 = __SPI2_MOSI; 
    527          		GPIOB->CNF.B14 = __SPI2_MISO; 
    528          		SPI2Init();
    529          	}
    530          	else if(SPIx == USE_SPI3) {
    531          		GPIOB->CNF.B3 = __SPI3_SCK; 
    532          		GPIOB->CNF.B5 = __SPI3_MOSI; 
    533          		GPIOB->CNF.B4 = __SPI3_MISO; 
    534          		SPI3Init();
    535          	}
    536          }
    537          
    538          INT16U SetSPIxCommand(INT8U SPIx, INT16U Comm)
    539          {
    540          	SPI_TypeDef *nBASE = iDev_SPIx_BASE(SPIx);
    541          	
    542          	while(SPI_I2S_GetFlagStatus(nBASE, SPI_I2S_FLAG_TXE) == RESET); 	// Wait to Transfer a byte
    543          	SPI_I2S_SendData(nBASE, Comm);                                     	// Send SPI2 data
    544          	while(SPI_I2S_GetFlagStatus(nBASE, SPI_I2S_FLAG_RXNE) == RESET);    // Wait to receive a byte
    545          	return SPI_I2S_ReceiveData(nBASE);                                 	// Return the byte read from the SPI bus
    546          }
    547          
    548          
    549          
    550          
    551          
    552          ////////////////////////////////////////////////////////////////////////////////
    553          
    554          ////////////////////////////////////////////////////////////////////////////////
    555          // End of Source File
    556          /////////////////////
    557          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     IsItiFPGAInit          0
     ReadFPGAs              8
     SetSPIxCommand        16
     WriteFPGAs             8
     iAD9352BPPLLSet        8
     iAD9362ResetOper      24
     iAPDInit               8
     iAPDTask               8
     iDev_SPIxInit          8
     iDev_SPIx_BASE         0
     iDev_SPIx_CS_RST       0
     iDev_SPIx_CS_SET       0
     iFPAGResetOper        16
     iFPGAEnableOper       24
     iFPGAGetStatus        24
     iFPGAInitialize        0
     iFPGA_GetRegister     32
     iFPGA_INIT            16
     iFPGA_SetRegister     32
     iSPIxInit              8


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     iFPGASpi             8
     APD0TaskStk       1024
     FPGACfgFinish        1
     iAPDInit            86
     iAPDTask            48
     iFPGA_INIT         426
     IsItiFPGAInit        8
     iFPGAInitialize     10
     iFPAGResetOper      70
     iAD9362ResetOper   196
     ?Subroutine0         6
     iFPGAEnableOper    618
     iFPGAGetStatus      96
     iAD9352BPPLLSet     16
     ReadFPGAs           20
     WriteFPGAs          20
     iFPGA_SetRegister   96
     ?Subroutine1        20
     iFPGA_GetRegister   98
     iSPIxInit           16
     iDev_SPIx_CS_SET    72
     iDev_SPIx_CS_RST    70
     iDev_SPIx_BASE      18
     iDev_SPIxInit      148
     SetSPIxCommand      52
     ??DataTable14        4
     ??DataTable14_1      4
     ??DataTable14_2      4
     ??DataTable14_3      4
     ??DataTable14_4      4
     ??DataTable14_5      4
     ??DataTable14_6      4
     ??DataTable14_7      4
     ??DataTable14_8      4
     ??DataTable14_9      4
     ??DataTable14_10     4
     ??DataTable14_11     4
     ??DataTable14_12     4

 
     9 bytes in section .bss
 2 262 bytes in section .text
 1 024 bytes in section iram
 
 2 262 bytes of CODE memory
 1 033 bytes of DATA memory

Errors: none
Warnings: 4

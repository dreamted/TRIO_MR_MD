###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     03/Sep/2014  15:32:02 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\stm32f2xx_system.c        #
#    Command line =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\stm32f2xx_system.c -D     #
#                    NDEBUG -lC D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_ #
#                    20140821\STM32F2xx_StdPeriph_Driver_v1212\ewarm\sout\    #
#                    -o D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821 #
#                    \STM32F2xx_StdPeriph_Driver_v1212\ewarm\sout\            #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\..\ -I              #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\..\inc\ -I          #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\..\..\uC-CPU\ -I    #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\..\..\uC-LIB\ -I    #
#                    D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\..\..\uCOS-II\Ports #
#                    \ -I D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_201408 #
#                    21\STM32F2xx_StdPeriph_Driver_v1212\ewarm\..\..\uCOS-II\ #
#                    Source\ -Oh                                              #
#    List file    =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\sout\stm32f2xx_syst #
#                    em.lst                                                   #
#    Object file  =  D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\ST #
#                    M32F2xx_StdPeriph_Driver_v1212\ewarm\sout\stm32f2xx_syst #
#                    em.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO_MD\3.F_W\TRIO_MD_appl_stm207_20140821\STM32F2xx_StdPeriph_Driver_v1212\stm32f2xx_system.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f2xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F2xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          "STM32f2xx_Clock_Configuration_V1.0.0.xls"
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f2xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f2xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f2xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F2xx device revision    | Rev B and Y
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 120000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 120000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 25000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 25
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 240
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 5
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Flash Latency(WS)                      | 3
     78            *-----------------------------------------------------------------------------
     79            *        Prefetch Buffer                        | ON
     80            *-----------------------------------------------------------------------------
     81            *        Instruction cache                      | ON
     82            *-----------------------------------------------------------------------------
     83            *        Data cache                             | ON
     84            *-----------------------------------------------------------------------------
     85            *        Require 48MHz for USB OTG FS,          | Enabled
     86            *        SDIO and RNG clock                     |
     87            *-----------------------------------------------------------------------------
     88            *=============================================================================
     89            ****************************************************************************** 
     90            * @attention
     91            *
     92            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     93            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     94            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     95            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     96            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     97            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     98            *
     99            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
    100            ******************************************************************************  
    101            */
    102          
    103          /** @addtogroup CMSIS
    104            * @{
    105            */
    106          
    107          /** @addtogroup stm32f2xx_system
    108            * @{
    109            */  
    110            
    111          /** @addtogroup STM32F2xx_System_Private_Includes
    112            * @{
    113            */
    114          #include "stm32f2xx_1212.h"
    115          /**
    116            * @}
    117            */
    118          
    119          /** @addtogroup STM32F2xx_System_Private_TypesDefinitions
    120            * @{
    121            */
    122          
    123          /**
    124            * @}
    125            */
    126          
    127          /** @addtogroup STM32F2xx_System_Private_Defines
    128            * @{
    129            */
    130          
    131          /*!< Uncomment the following line if you need to use external SRAM mounted
    132               on STM322xG_EVAL board as data memory  */
    133          /* #define DATA_IN_ExtSRAM */
    134          
    135          /**
    136            * @}
    137            */
    138          
    139          /** @addtogroup STM32F2xx_System_Private_Macros
    140            * @{
    141            */
    142          
    143          /**
    144            * @}
    145            */
    146          
    147          /** @addtogroup STM32F2xx_System_Private_Variables
    148            * @{
    149            */
    150          

   \                                 In section .data, align 4
    151            uint32_t SystemCoreClock = 120000000;
    152          
    153            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09    
   \                     SystemCoreClock:
   \   00000010   0x07270E00         DC32 120000000
    154          
    155          /**
    156            * @}
    157            */
    158          
    159          
    160          
    161          /** @addtogroup STM32F2xx_System_Private_Functions
    162            * @{
    163            */
    164          
    165          /**
    166            * @brief  Setup the microcontroller system
    167            *         Initialize the Embedded Flash Interface, the PLL and update the 
    168            *         SystemFrequency variable.
    169            * @param  None
    170            * @retval None
    171            */
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void SystemInit(void)
    174          {
   \                     SystemInit:
   \   00000000   0xB580             PUSH     {R7,LR}
    175          	/* Reset the RCC clock configuration to the default reset state ------------*/
    176          	/* Set HSION bit */
    177          	/* Reset HSEON, CSSON and PLLON bits */
    178          	RCC->CR &= (uint32_t)0xFEF6FFFF;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0x40023800
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable4_1  ;; 0xfef6ffff
   \   0000000C   0x4011             ANDS     R1,R2,R1
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    179          
    180          	/* Reset PLLCFGR register */
    181          	RCC->PLLCFGR = 0x24003010;
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable4_2  ;; 0x24003010
   \   00000014   0x6041             STR      R1,[R0, #+4]
    182          
    183          	/* Reset HSEBYP bit */
    184          	RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0xF421 0x2180      BIC      R1,R1,#0x40000
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    185          
    186          	/* Disable all interrupts */
    187          	RCC->CIR = 0x00000000;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x60C1             STR      R1,[R0, #+12]
    188          
    189          #ifdef DATA_IN_ExtSRAM
    190            	SystemInit_ExtMemCtl(); 
    191          #endif /* DATA_IN_ExtSRAM */
    192          	/* Configure the System clock source, PLL Multiplier and Divider factors, 
    193              	AHB/APBx prescalers and Flash settings ----------------------------------*/
    194          #ifdef OS_INCLUDED
    195          	SetSysClock(TRUE);//SetSysClock(TRUE);
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       SetSysClock
    196          #else
    197          	SetSysClock(FALSE);
    198          #endif /* OS_INCLUDED */
    199            	/* Configure the Vector Table location add offset address ------------------*/
    200          #ifdef VECT_TAB_SRAM
    201          	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; 	/* Vector Table Relocation in Internal SRAM */
    202          #else
    203          	#ifndef OS_INCLUDED
    204          		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; 	/* Vector Table Relocation in Internal FLASH */
    205          	#else
    206          		__iar_program_start();
   \   00000028   0xE8BD 0x4001      POP      {R0,LR}
   \   0000002C   0x.... 0x....      B.W      __iar_program_start
    207          	#endif /* OS_INCLUDED */
    208          #endif /* VECT_TAB_SRAM */
    209          
    210          }
    211          
    212          /**
    213            * @brief  Update SystemCoreClock variable according to Clock Register Values.
    214            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    215            *         be used by the user application to setup the SysTick timer or configure
    216            *         other parameters.
    217            *           
    218            * @note   Each time the core clock (HCLK) changes, this function must be called
    219            *         to update SystemCoreClock variable value. Otherwise, any configuration
    220            *         based on this variable will be incorrect.         
    221            *     
    222            * @note   - The system frequency computed by this function is not the real 
    223            *           frequency in the chip. It is calculated based on the predefined 
    224            *           constant and the selected clock source:
    225            *             
    226            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    227            *                                              
    228            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    229            *                          
    230            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    231            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    232            *         
    233            *         (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
    234            *             16 MHz) but the real value may vary depending on the variations
    235            *             in voltage and temperature.   
    236            *    
    237            *         (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
    238            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    239            *              frequency of the crystal used. Otherwise, this function may
    240            *              have wrong result.
    241            *                
    242            *         - The result of this function could be not correct when using fractional
    243            *           value for HSE crystal.
    244            *     
    245            * @param  None
    246            * @retval None
    247            */

   \                                 In section .text, align 2, keep-with-next
    248          void SystemCoreClockUpdate(void)
    249          {
    250          	uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    251            
    252          	/* Get SYSCLK source -------------------------------------------------------*/
    253          	tmp = RCC->CFGR & RCC_CFGR_SWS;
   \                     SystemCoreClockUpdate:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x40023804
   \   00000004   0x6841             LDR      R1,[R0, #+4]
    254          
    255          	switch (tmp)
   \   00000006   0xF001 0x010C      AND      R1,R1,#0xC
   \   0000000A   0x2904             CMP      R1,#+4
   \   0000000C   0xD002             BEQ.N    ??SystemCoreClockUpdate_0
   \   0000000E   0x2908             CMP      R1,#+8
   \   00000010   0xD003             BEQ.N    ??SystemCoreClockUpdate_1
   \   00000012   0xE01A             B.N      ??SystemCoreClockUpdate_2
    256          	{
    257          		case 0x00:  /* HSI used as system clock source */
    258          		  SystemCoreClock = HSI_VALUE;
    259          		  break;
    260          		case 0x04:  /* HSE used as system clock source */
    261          		  SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_0:
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable4_4  ;; 0x17d7840
    262          		  break;
   \   00000018   0xE019             B.N      ??SystemCoreClockUpdate_3
    263          		case 0x08:  /* PLL used as system clock source */
    264          
    265          		  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    266          		     SYSCLK = PLL_VCO / PLL_P
    267          		     */    
    268          		  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
   \                     ??SystemCoreClockUpdate_1:
   \   0000001A   0x6801             LDR      R1,[R0, #+0]
    269          		  pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
   \   0000001C   0x6802             LDR      R2,[R0, #+0]
   \   0000001E   0xF002 0x023F      AND      R2,R2,#0x3F
    270          		  
    271          		  if (pllsource != 0)
   \   00000022   0x0249             LSLS     R1,R1,#+9
   \   00000024   0xBF4C             ITE      MI 
   \   00000026   0x.... 0x....      LDRMI.W  R1,??DataTable4_4  ;; 0x17d7840
   \   0000002A   0x.... 0x....      LDRPL.W  R1,??DataTable4_5  ;; 0xf42400
    272          		  {
    273          		    /* HSE used as PLL clock source */
    274          		    pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    275          		  }
    276          		  else
    277          		  {
    278          		    /* HSI used as PLL clock source */
    279          		    pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
   \   0000002E   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000032   0x6802             LDR      R2,[R0, #+0]
   \   00000034   0xF3C2 0x1288      UBFX     R2,R2,#+6,#+9
   \   00000038   0x4351             MULS     R1,R2,R1
    280          		  }
    281          
    282          		  pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
   \   0000003A   0x6802             LDR      R2,[R0, #+0]
    283          		  SystemCoreClock = pllvco/pllp;
   \   0000003C   0xF3C2 0x4201      UBFX     R2,R2,#+16,#+2
   \   00000040   0x1C52             ADDS     R2,R2,#+1
   \   00000042   0x0052             LSLS     R2,R2,#+1
   \   00000044   0xFBB1 0xF1F2      UDIV     R1,R1,R2
    284          		  break;
   \   00000048   0xE001             B.N      ??SystemCoreClockUpdate_3
    285          		default:
    286          		  SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_2:
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable4_5  ;; 0xf42400
    287          		  break;
   \                     ??SystemCoreClockUpdate_3:
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable4_6
   \   00000052   0x6111             STR      R1,[R2, #+16]
    288          	}
    289          	/* Compute HCLK frequency --------------------------------------------------*/
    290          	/* Get HCLK prescaler */
    291          	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    292          	/* HCLK frequency */
    293          	SystemCoreClock >>= tmp;
   \   00000054   0x6840             LDR      R0,[R0, #+4]
   \   00000056   0xF3C0 0x1003      UBFX     R0,R0,#+4,#+4
   \   0000005A   0x5C80             LDRB     R0,[R0, R2]
   \   0000005C   0xFA21 0xF000      LSR      R0,R1,R0
   \   00000060   0x6110             STR      R0,[R2, #+16]
    294          }
   \   00000062   0x4770             BX       LR               ;; return
    295          
    296          /**
    297            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    298            *         AHB/APBx prescalers and Flash settings
    299            * @Note   This function should be called only once the RCC clock configuration  
    300            *         is reset to the default reset state (done in SystemInit() function).   
    301            * @param  None
    302            * @retval None
    303            */

   \                                 In section .text, align 2, keep-with-next
    304          u8 SetSysClock(u8 IsItHSE)
    305          {
   \                     SetSysClock:
   \   00000000   0xB083             SUB      SP,SP,#+12
    306          /******************************************************************************/
    307          /*            PLL (clocked by HSE) used as System clock source                */
    308          /******************************************************************************/
    309          	__IO uint32_t StartUpCounter = 0, HSEStatus = 0x01;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9101             STR      R1,[SP, #+4]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x9102             STR      R1,[SP, #+8]
    310          
    311          	vu32 PLLM = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9100             STR      R1,[SP, #+0]
    312          	
    313            	/* Enable HSE */
    314          	if(IsItHSE)
   \   0000000E   0xB1C8             CBZ.N    R0,??SetSysClock_0
    315          	{
    316          		RCC->CR |= ((uint32_t)RCC_CR_HSEON);
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0x40023800
   \   00000014   0x6808             LDR      R0,[R1, #+0]
   \   00000016   0xF440 0x3080      ORR      R0,R0,#0x10000
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    317          
    318          		/* Wait till HSE is ready and if Time out is reached exit */
    319          		do
    320          		{
    321          			HSEStatus = RCC->CR & RCC_CR_HSERDY;
   \                     ??SetSysClock_1:
   \   0000001C   0x6808             LDR      R0,[R1, #+0]
   \   0000001E   0xF400 0x3000      AND      R0,R0,#0x20000
   \   00000022   0x9002             STR      R0,[SP, #+8]
    322          			StartUpCounter++;
   \   00000024   0x9801             LDR      R0,[SP, #+4]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x9001             STR      R0,[SP, #+4]
    323          		} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
   \   0000002A   0x9802             LDR      R0,[SP, #+8]
   \   0000002C   0xB918             CBNZ.N   R0,??SetSysClock_2
   \   0000002E   0x9801             LDR      R0,[SP, #+4]
   \   00000030   0xF5B0 0x6FA0      CMP      R0,#+1280
   \   00000034   0xD1F2             BNE.N    ??SetSysClock_1
    324          
    325          		if ((RCC->CR & RCC_CR_HSERDY) != RESET)	IsItHSE = SET;
   \                     ??SetSysClock_2:
   \   00000036   0x6808             LDR      R0,[R1, #+0]
    326          		else									IsItHSE = RESET;
   \   00000038   0x0C40             LSRS     R0,R0,#+17
   \   0000003A   0xF010 0x0001      ANDS     R0,R0,#0x1
    327          	}
    328          	else{
    329          
    330          	}
    331          
    332          	if(IsItHSE)
   \   0000003E   0xBF18             IT       NE 
   \   00000040   0x2119             MOVNE    R1,#+25
    333          	{
    334          		PLLM = HSE_VALUE/1000000;
   \   00000042   0xD100             BNE.N    ??SetSysClock_3
    335          
    336          	}
    337          	else
    338          	{
    339          		PLLM = HSI_VALUE/1000000;
   \                     ??SetSysClock_0:
   \   00000044   0x2110             MOVS     R1,#+16
   \                     ??SetSysClock_3:
   \   00000046   0x9100             STR      R1,[SP, #+0]
    340          	}
    341          
    342          	{
    343          	    /* HCLK = SYSCLK / 1*/
    344          	    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable4  ;; 0x40023800
   \   0000004C   0x688A             LDR      R2,[R1, #+8]
   \   0000004E   0x608A             STR      R2,[R1, #+8]
    345          	      
    346          	    /* PCLK2 = HCLK / 2*/
    347          	    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
   \   00000050   0x688A             LDR      R2,[R1, #+8]
   \   00000052   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   00000056   0x608A             STR      R2,[R1, #+8]
    348          	    
    349          	    /* PCLK1 = HCLK / 4*/
    350          	    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
   \   00000058   0x688A             LDR      R2,[R1, #+8]
   \   0000005A   0xF442 0x52A0      ORR      R2,R2,#0x1400
   \   0000005E   0x608A             STR      R2,[R1, #+8]
    351          
    352          	    /* Configure the main PLL */
    353          	    RCC->__B.PLLCFGR.PLLP = (PLL_P >> 1)-1;
   \   00000060   0x684A             LDR      R2,[R1, #+4]
   \   00000062   0xF422 0x32C0      BIC      R2,R2,#0x18000
   \   00000066   0x604A             STR      R2,[R1, #+4]
    354          	    RCC->__B.PLLCFGR.PLLM = PLLM;
   \   00000068   0x9A00             LDR      R2,[SP, #+0]
   \   0000006A   0x684B             LDR      R3,[R1, #+4]
   \   0000006C   0xF362 0x0305      BFI      R3,R2,#+0,#+6
   \   00000070   0x604B             STR      R3,[R1, #+4]
    355          	    RCC->__B.PLLCFGR.PLLN = PLL_N;
   \   00000072   0x684A             LDR      R2,[R1, #+4]
   \   00000074   0xF422 0x527F      BIC      R2,R2,#0x3FC0
   \   00000078   0xF442 0x5270      ORR      R2,R2,#0x3C00
   \   0000007C   0x604A             STR      R2,[R1, #+4]
    356          	    RCC->__B.PLLCFGR.PLLQ = PLL_Q;
   \   0000007E   0x684A             LDR      R2,[R1, #+4]
   \   00000080   0xF022 0x62F0      BIC      R2,R2,#0x7800000
   \   00000084   0xF042 0x7220      ORR      R2,R2,#0x2800000
   \   00000088   0x604A             STR      R2,[R1, #+4]
    357          	    RCC->__B.PLLCFGR.PLLSRC = IsItHSE;
   \   0000008A   0x684A             LDR      R2,[R1, #+4]
   \   0000008C   0xF360 0x5255      BFI      R2,R0,#+21,#+1
   \   00000090   0x604A             STR      R2,[R1, #+4]
    358          
    359          	    /* Enable the main PLL */
    360          	    RCC->CR |= RCC_CR_PLLON;
   \   00000092   0x680A             LDR      R2,[R1, #+0]
   \   00000094   0xF042 0x7280      ORR      R2,R2,#0x1000000
   \   00000098   0x600A             STR      R2,[R1, #+0]
    361          
    362          	    /* Wait till the main PLL is ready */
    363          	    while((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_4:
   \   0000009A   0x680A             LDR      R2,[R1, #+0]
   \   0000009C   0x0192             LSLS     R2,R2,#+6
   \   0000009E   0xD5FC             BPL.N    ??SetSysClock_4
    364          	    {
    365          	    }
    366          	   
    367          	    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    368          	    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable4_7  ;; 0x40023c00
   \   000000A4   0xF240 0x7303      MOVW     R3,#+1795
   \   000000A8   0x6013             STR      R3,[R2, #+0]
    369          
    370          	    /* Select the main PLL as system clock source */
    371          	    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \   000000AA   0x688A             LDR      R2,[R1, #+8]
   \   000000AC   0x0892             LSRS     R2,R2,#+2
   \   000000AE   0x0092             LSLS     R2,R2,#+2
   \   000000B0   0x608A             STR      R2,[R1, #+8]
    372          	    RCC->CFGR |= RCC_CFGR_SW_PLL;
   \   000000B2   0x688A             LDR      R2,[R1, #+8]
   \   000000B4   0xF042 0x0202      ORR      R2,R2,#0x2
   \   000000B8   0x608A             STR      R2,[R1, #+8]
    373          
    374          	    /* Wait till the main PLL is used as system clock source */
    375          	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
   \                     ??SetSysClock_5:
   \   000000BA   0x688A             LDR      R2,[R1, #+8]
   \   000000BC   0xF002 0x020C      AND      R2,R2,#0xC
   \   000000C0   0x2A08             CMP      R2,#+8
   \   000000C2   0xD1FA             BNE.N    ??SetSysClock_5
    376          	    {
    377          
    378          	    }
    379          	}
    380          	/* LSI ON to use watchdog */
    381          	RCC->__B.CSR.LSION = ENABLE;
   \   000000C4   0x6F4A             LDR      R2,[R1, #+116]
   \   000000C6   0xF042 0x0201      ORR      R2,R2,#0x1
   \   000000CA   0x674A             STR      R2,[R1, #+116]
    382          	/* Wait till LSI is ready */
    383          	while(!RCC->__B.CSR.LSIRDY){};
   \                     ??SetSysClock_6:
   \   000000CC   0x6F4A             LDR      R2,[R1, #+116]
   \   000000CE   0x0792             LSLS     R2,R2,#+30
   \   000000D0   0xD5FC             BPL.N    ??SetSysClock_6
    384          
    385              return IsItHSE;
   \   000000D2   0xB003             ADD      SP,SP,#+12
   \   000000D4   0x4770             BX       LR               ;; return
    386          }
    387          #if 0
    388          
    389          /**
    390            * @brief  Setup the external memory controller. Called in startup_stm32f2xx.s
    391            *         before jump to __main
    392            * @param  None
    393            * @retval None
    394            */
    395          #ifdef DATA_IN_ExtSRAM
    396          /**
    397            * @brief  Setup the external memory controller.
    398            *         Called in startup_stm32f2xx.s before jump to main.
    399            *         This function configures the external SRAM mounted on STM322xG_EVAL board
    400            *         This SRAM will be used as program data memory (including heap and stack).
    401            * @param  None
    402            * @retval None
    403            */
    404          void SystemInit_ExtMemCtl(void)
    405          {
    406          /*-- GPIOs Configuration -----------------------------------------------------*/
    407          /*
    408           +-------------------+--------------------+------------------+------------------+
    409           +                       SRAM pins assignment                                  +
    410           +-------------------+--------------------+------------------+------------------+
    411           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    412           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    413           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    414           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    415           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    416           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    417           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    418           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    419           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    420           | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    421           | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    422           +-------------------+--------------------+
    423          */
    424             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    425            RCC->AHB1ENR   = 0x00000078;
    426            
    427            /* Connect PDx pins to FSMC Alternate function */
    428            GPIOD->AFR[0]  = 0x00cc00cc;
    429            GPIOD->AFR[1]  = 0xcc0ccccc;
    430            /* Configure PDx pins in Alternate function mode */  
    431            GPIOD->MODER   = 0xa2aa0a0a;
    432            /* Configure PDx pins speed to 100 MHz */  
    433            GPIOD->OSPEEDR = 0xf3ff0f0f;
    434            /* Configure PDx pins Output type to push-pull */  
    435            GPIOD->OTYPER  = 0x00000000;
    436            /* No pull-up, pull-down for PDx pins */ 
    437            GPIOD->PUPDR   = 0x00000000;
    438          
    439            /* Connect PEx pins to FSMC Alternate function */
    440            GPIOE->AFR[0]  = 0xc00000cc;
    441            GPIOE->AFR[1]  = 0xcccccccc;
    442            /* Configure PEx pins in Alternate function mode */ 
    443            GPIOE->MODER   = 0xaaaa800a;
    444            /* Configure PEx pins speed to 100 MHz */ 
    445            GPIOE->OSPEEDR = 0xffffc00f;
    446            /* Configure PEx pins Output type to push-pull */  
    447            GPIOE->OTYPER  = 0x00000000;
    448            /* No pull-up, pull-down for PEx pins */ 
    449            GPIOE->PUPDR   = 0x00000000;
    450          
    451            /* Connect PFx pins to FSMC Alternate function */
    452            GPIOF->AFR[0]  = 0x00cccccc;
    453            GPIOF->AFR[1]  = 0xcccc0000;
    454            /* Configure PFx pins in Alternate function mode */   
    455            GPIOF->MODER   = 0xaa000aaa;
    456            /* Configure PFx pins speed to 100 MHz */ 
    457            GPIOF->OSPEEDR = 0xff000fff;
    458            /* Configure PFx pins Output type to push-pull */  
    459            GPIOF->OTYPER  = 0x00000000;
    460            /* No pull-up, pull-down for PFx pins */ 
    461            GPIOF->PUPDR   = 0x00000000;
    462          
    463            /* Connect PGx pins to FSMC Alternate function */
    464            GPIOG->AFR[0]  = 0x00cccccc;
    465            GPIOG->AFR[1]  = 0x000000c0;
    466            /* Configure PGx pins in Alternate function mode */ 
    467            GPIOG->MODER   = 0x00080aaa;
    468            /* Configure PGx pins speed to 100 MHz */ 
    469            GPIOG->OSPEEDR = 0x000c0fff;
    470            /* Configure PGx pins Output type to push-pull */  
    471            GPIOG->OTYPER  = 0x00000000;
    472            /* No pull-up, pull-down for PGx pins */ 
    473            GPIOG->PUPDR   = 0x00000000;
    474            
    475          /*-- FSMC Configuration ------------------------------------------------------*/
    476            /* Enable the FSMC interface clock */
    477            RCC->AHB3ENR         = 0x00000001;
    478          
    479            /* Configure and enable Bank1_SRAM2 */
    480            FSMC_Bank1->BTCR[2]  = 0x00001015;
    481            FSMC_Bank1->BTCR[3]  = 0x00010400;
    482            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    483          /*
    484            Bank1_SRAM2 is configured as follow:
    485          
    486            p.FSMC_AddressSetupTime = 0;
    487            p.FSMC_AddressHoldTime = 0;
    488            p.FSMC_DataSetupTime = 4;
    489            p.FSMC_BusTurnAroundDuration = 1;
    490            p.FSMC_CLKDivision = 0;
    491            p.FSMC_DataLatency = 0;
    492            p.FSMC_AccessMode = FSMC_AccessMode_A;
    493          
    494            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    495            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    496            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
    497            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    498            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    499            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    500            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    501            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    502            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    503            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    504            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    505            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    506            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    507            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    508            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    509          */
    510            
    511          }
    512          #endif /* DATA_IN_ExtSRAM */
    513          
    514          #endif
    515          
    516          //#ifdef DATA_IN_ExtSRAM
    517          /**
    518            * @brief  Setup the external memory controller.
    519            *         Called in startup_stm32f2xx.s before jump to main.
    520            *         This function configures the external SRAM mounted on STM322xG_EVAL board
    521            *         This SRAM will be used as program data memory (including heap and stack).
    522            * @param  None
    523            * @retval None
    524            */

   \                                 In section .text, align 2, keep-with-next
    525          void SystemInit_ExtMemCtl(void)
    526          {
   \                     SystemInit_ExtMemCtl:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB096             SUB      SP,SP,#+88
    527          	RCC_TypeDef *pRCC = RCC;
    528          	
    529          	/*-- GPIOs Configuration -----------------------------------------------------*/
    530          	/*
    531          	 +-------------------+--------------------+------------------+------------------+
    532          	 +                       SRAM pins assignment                                  +
    533          	 +-------------------+--------------------+------------------+------------------+
    534          	 | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    535          	 | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    536          	 | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    537          	 | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    538          	 | PD7  <-> FSMC_NE1
    539          	 | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    540          	 | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    541          	 | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    542          	 | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    543          	 | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    544          	 | PD13 <-> FSMC_A18
    545          	 | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    546          	 | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    547          	 +-------------------+--------------------+
    548          	*/
    549           	/* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    550          	//RCC->AHB1ENR   = 0x00000078;
    551          	pRCC->__B.AHB1ENR.IOPDEN = SET;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable4_8  ;; 0x40023830
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0xF040 0x0008      ORR      R0,R0,#0x8
   \   0000000E   0x6020             STR      R0,[R4, #+0]
    552          	pRCC->__B.AHB1ENR.IOPEEN = SET;
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000016   0x6020             STR      R0,[R4, #+0]
    553          	pRCC->__B.AHB1ENR.IOPFEN = SET;
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001E   0x6020             STR      R0,[R4, #+0]
    554          	pRCC->__B.AHB1ENR.IOPGEN = SET;
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000026   0x6020             STR      R0,[R4, #+0]
    555          
    556          	// DATA BUS DEFINITION
    557          	__PD14_FSMC_D0();
   \   00000028   0x.... 0x....      LDR.W    R5,??DataTable4_9  ;; 0x40020c00
   \   0000002C   0x230E             MOVS     R3,#+14
   \   0000002E   0x462A             MOV      R2,R5
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x2022             MOVS     R0,#+34
   \   00000034   0x.... 0x....      BL       GPIOPortInit
    558          	__PD15_FSMC_D1();
   \   00000038   0x230F             MOVS     R3,#+15
   \   0000003A   0x462A             MOV      R2,R5
   \   0000003C   0x210C             MOVS     R1,#+12
   \   0000003E   0x2022             MOVS     R0,#+34
   \   00000040   0x.... 0x....      BL       GPIOPortInit
    559          	__PD0_FSMC_D2();
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x462A             MOV      R2,R5
   \   00000048   0x210C             MOVS     R1,#+12
   \   0000004A   0x2022             MOVS     R0,#+34
   \   0000004C   0x.... 0x....      BL       GPIOPortInit
    560          	__PD1_FSMC_D3();
   \   00000050   0x2301             MOVS     R3,#+1
   \   00000052   0x462A             MOV      R2,R5
   \   00000054   0x210C             MOVS     R1,#+12
   \   00000056   0x2022             MOVS     R0,#+34
   \   00000058   0x.... 0x....      BL       GPIOPortInit
    561          
    562          	__PE7_FSMC_D4();
   \   0000005C   0x.... 0x....      LDR.W    R6,??DataTable4_10  ;; 0x40021000
   \   00000060   0x2307             MOVS     R3,#+7
   \   00000062   0x4632             MOV      R2,R6
   \   00000064   0x210C             MOVS     R1,#+12
   \   00000066   0x2022             MOVS     R0,#+34
   \   00000068   0x.... 0x....      BL       GPIOPortInit
    563          	__PE8_FSMC_D5();
   \   0000006C   0x2308             MOVS     R3,#+8
   \   0000006E   0x4632             MOV      R2,R6
   \   00000070   0x210C             MOVS     R1,#+12
   \   00000072   0x2022             MOVS     R0,#+34
   \   00000074   0x.... 0x....      BL       GPIOPortInit
    564          	__PE9_FSMC_D6();
   \   00000078   0x2309             MOVS     R3,#+9
   \   0000007A   0x4632             MOV      R2,R6
   \   0000007C   0x210C             MOVS     R1,#+12
   \   0000007E   0x2022             MOVS     R0,#+34
   \   00000080   0x.... 0x....      BL       GPIOPortInit
    565          	__PE10_FSMC_D7();
   \   00000084   0x230A             MOVS     R3,#+10
   \   00000086   0x4632             MOV      R2,R6
   \   00000088   0x210C             MOVS     R1,#+12
   \   0000008A   0x2022             MOVS     R0,#+34
   \   0000008C   0x.... 0x....      BL       GPIOPortInit
    566          
    567            	// NOE/NWE DEFINITION
    568            	__PD4_FSMC_nOE();
   \   00000090   0x2304             MOVS     R3,#+4
   \   00000092   0x462A             MOV      R2,R5
   \   00000094   0x210C             MOVS     R1,#+12
   \   00000096   0x2022             MOVS     R0,#+34
   \   00000098   0x.... 0x....      BL       GPIOPortInit
    569          	__PD5_FSMC_nWE();
   \   0000009C   0x2305             MOVS     R3,#+5
   \   0000009E   0x462A             MOV      R2,R5
   \   000000A0   0x210C             MOVS     R1,#+12
   \   000000A2   0x2022             MOVS     R0,#+34
   \   000000A4   0x.... 0x....      BL       GPIOPortInit
    570          
    571          
    572          	// ADDRESS DEFINITON
    573          	__PF0_FSMC_A0();
   \   000000A8   0x.... 0x....      LDR.W    R6,??DataTable4_11  ;; 0x40021400
   \   000000AC   0x2300             MOVS     R3,#+0
   \   000000AE   0x4632             MOV      R2,R6
   \   000000B0   0x210C             MOVS     R1,#+12
   \   000000B2   0x2022             MOVS     R0,#+34
   \   000000B4   0x.... 0x....      BL       GPIOPortInit
    574          	__PF1_FSMC_A1();
   \   000000B8   0x2301             MOVS     R3,#+1
   \   000000BA   0x4632             MOV      R2,R6
   \   000000BC   0x210C             MOVS     R1,#+12
   \   000000BE   0x2022             MOVS     R0,#+34
   \   000000C0   0x.... 0x....      BL       GPIOPortInit
    575          	__PF2_FSMC_A2();
   \   000000C4   0x2302             MOVS     R3,#+2
   \   000000C6   0x4632             MOV      R2,R6
   \   000000C8   0x210C             MOVS     R1,#+12
   \   000000CA   0x2022             MOVS     R0,#+34
   \   000000CC   0x.... 0x....      BL       GPIOPortInit
    576          	__PF3_FSMC_A3();
   \   000000D0   0x2303             MOVS     R3,#+3
   \   000000D2   0x4632             MOV      R2,R6
   \   000000D4   0x210C             MOVS     R1,#+12
   \   000000D6   0x2022             MOVS     R0,#+34
   \   000000D8   0x.... 0x....      BL       GPIOPortInit
    577          
    578          	__PF4_FSMC_A4();
   \   000000DC   0x2304             MOVS     R3,#+4
   \   000000DE   0x4632             MOV      R2,R6
   \   000000E0   0x210C             MOVS     R1,#+12
   \   000000E2   0x2022             MOVS     R0,#+34
   \   000000E4   0x.... 0x....      BL       GPIOPortInit
    579          	__PF5_FSMC_A5();
   \   000000E8   0x2305             MOVS     R3,#+5
   \   000000EA   0x4632             MOV      R2,R6
   \   000000EC   0x210C             MOVS     R1,#+12
   \   000000EE   0x2022             MOVS     R0,#+34
   \   000000F0   0x.... 0x....      BL       GPIOPortInit
    580          	__PF12_FSMC_A6();
   \   000000F4   0x230C             MOVS     R3,#+12
   \   000000F6   0x4632             MOV      R2,R6
   \   000000F8   0x210C             MOVS     R1,#+12
   \   000000FA   0x2022             MOVS     R0,#+34
   \   000000FC   0x.... 0x....      BL       GPIOPortInit
    581          	__PF13_FSMC_A7();
   \   00000100   0x230D             MOVS     R3,#+13
   \   00000102   0x4632             MOV      R2,R6
   \   00000104   0x210C             MOVS     R1,#+12
   \   00000106   0x2022             MOVS     R0,#+34
   \   00000108   0x.... 0x....      BL       GPIOPortInit
    582          	
    583          	__PF14_FSMC_A8();
   \   0000010C   0x230E             MOVS     R3,#+14
   \   0000010E   0x4632             MOV      R2,R6
   \   00000110   0x210C             MOVS     R1,#+12
   \   00000112   0x2022             MOVS     R0,#+34
   \   00000114   0x.... 0x....      BL       GPIOPortInit
    584          	__PF15_FSMC_A9();
   \   00000118   0x230F             MOVS     R3,#+15
   \   0000011A   0x4632             MOV      R2,R6
   \   0000011C   0x210C             MOVS     R1,#+12
   \   0000011E   0x2022             MOVS     R0,#+34
   \   00000120   0x.... 0x....      BL       GPIOPortInit
    585          	__PG0_FSMC_A10();
   \   00000124   0x....             LDR.N    R6,??DataTable4_12  ;; 0x40021800
   \   00000126   0x2300             MOVS     R3,#+0
   \   00000128   0x4632             MOV      R2,R6
   \   0000012A   0x210C             MOVS     R1,#+12
   \   0000012C   0x2022             MOVS     R0,#+34
   \   0000012E   0x.... 0x....      BL       GPIOPortInit
    586          	__PG1_FSMC_A11();
   \   00000132   0x2301             MOVS     R3,#+1
   \   00000134   0x4632             MOV      R2,R6
   \   00000136   0x210C             MOVS     R1,#+12
   \   00000138   0x2022             MOVS     R0,#+34
   \   0000013A   0x.... 0x....      BL       GPIOPortInit
    587          
    588          	__PG2_FSMC_A12();
   \   0000013E   0x2302             MOVS     R3,#+2
   \   00000140   0x4632             MOV      R2,R6
   \   00000142   0x210C             MOVS     R1,#+12
   \   00000144   0x2022             MOVS     R0,#+34
   \   00000146   0x.... 0x....      BL       GPIOPortInit
    589          	__PG3_FSMC_A13();
   \   0000014A   0x2303             MOVS     R3,#+3
   \   0000014C   0x4632             MOV      R2,R6
   \   0000014E   0x210C             MOVS     R1,#+12
   \   00000150   0x2022             MOVS     R0,#+34
   \   00000152   0x.... 0x....      BL       GPIOPortInit
    590          	__PG4_FSMC_A14();
   \   00000156   0x2304             MOVS     R3,#+4
   \   00000158   0x4632             MOV      R2,R6
   \   0000015A   0x210C             MOVS     R1,#+12
   \   0000015C   0x2022             MOVS     R0,#+34
   \   0000015E   0x.... 0x....      BL       GPIOPortInit
    591          	__PG5_FSMC_A15();
   \   00000162   0x2305             MOVS     R3,#+5
   \   00000164   0x4632             MOV      R2,R6
   \   00000166   0x210C             MOVS     R1,#+12
   \   00000168   0x2022             MOVS     R0,#+34
   \   0000016A   0x.... 0x....      BL       GPIOPortInit
    592          
    593          	__PD11_FSMC_A16();
   \   0000016E   0x230B             MOVS     R3,#+11
   \   00000170   0x462A             MOV      R2,R5
   \   00000172   0x210C             MOVS     R1,#+12
   \   00000174   0x2022             MOVS     R0,#+34
   \   00000176   0x.... 0x....      BL       GPIOPortInit
    594          	__PD12_FSMC_A17();
   \   0000017A   0x230C             MOVS     R3,#+12
   \   0000017C   0x462A             MOV      R2,R5
   \   0000017E   0x4619             MOV      R1,R3
   \   00000180   0x2022             MOVS     R0,#+34
   \   00000182   0x.... 0x....      BL       GPIOPortInit
    595          	__PD13_FSMC_A18();
   \   00000186   0x230D             MOVS     R3,#+13
   \   00000188   0x462A             MOV      R2,R5
   \   0000018A   0x210C             MOVS     R1,#+12
   \   0000018C   0x2022             MOVS     R0,#+34
   \   0000018E   0x.... 0x....      BL       GPIOPortInit
    596          
    597          	__PG9_IN_PU();	// NE2
   \   00000192   0x2309             MOVS     R3,#+9
   \   00000194   0x4632             MOV      R2,R6
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x2040             MOVS     R0,#+64
   \   0000019A   0x.... 0x....      BL       GPIOPortInit
    598          	__PG12_IN_PU(); // NE4
   \   0000019E   0x230C             MOVS     R3,#+12
   \   000001A0   0x4632             MOV      R2,R6
   \   000001A2   0x2100             MOVS     R1,#+0
   \   000001A4   0x2040             MOVS     R0,#+64
   \   000001A6   0x.... 0x....      BL       GPIOPortInit
    599          	//RAM CE
    600          	__PD7_FSMC_NE1();
   \   000001AA   0x2307             MOVS     R3,#+7
   \   000001AC   0x462A             MOV      R2,R5
   \   000001AE   0x210C             MOVS     R1,#+12
   \   000001B0   0x2022             MOVS     R0,#+34
   \   000001B2   0x.... 0x....      BL       GPIOPortInit
    601          	
    602          #ifdef DATA_IN_ExtSRAM2
    603          		__PG10_FSMC_NE3();
    604          #else
    605          		__PG10_IN_PU(); // NE3;
   \   000001B6   0x230A             MOVS     R3,#+10
   \   000001B8   0x4632             MOV      R2,R6
   \   000001BA   0x2100             MOVS     R1,#+0
   \   000001BC   0x2040             MOVS     R0,#+64
   \   000001BE   0x.... 0x....      BL       GPIOPortInit
    606          #endif
    607            	/* Connect PDx pins to FSMC Alternate function */
    608          	//GPIOD->AFR[0]  = 0x00cc00cc;
    609            	//GPIOD->AFR[1]  = 0xcc0ccccc;
    610          	/* Configure PDx pins in Alternate function mode */  
    611          	//GPIOD->MODER   = 0xa2aa0a0a;
    612          	/* Configure PDx pins speed to 100 MHz */  
    613          	//GPIOD->OSPEEDR = 0xf3ff0f0f;
    614          	/* Configure PDx pins Output type to push-pull */  
    615          	//GPIOD->OTYPER  = 0x00000000;
    616          	/* No pull-up, pull-down for PDx pins */ 
    617          	//GPIOD->PUPDR   = 0x00000000;
    618          
    619          	/* Connect PEx pins to FSMC Alternate function */
    620          	//GPIOE->AFR[0]  = 0xc00000cc;
    621          	//GPIOE->AFR[1]  = 0xcccccccc;
    622          	/* Configure PEx pins in Alternate function mode */ 
    623          	//GPIOE->MODER   = 0xaaaa800a;
    624          	/* Configure PEx pins speed to 100 MHz */ 
    625          	//GPIOE->OSPEEDR = 0xffffc00f;
    626          	/* Configure PEx pins Output type to push-pull */  
    627          	//GPIOE->OTYPER  = 0x00000000;
    628          	/* No pull-up, pull-down for PEx pins */ 
    629          	//GPIOE->PUPDR   = 0x00000000;
    630          
    631          	/* Connect PFx pins to FSMC Alternate function */
    632          	//GPIOF->AFR[0]  = 0x00cccccc;
    633          	//GPIOF->AFR[1]  = 0xcccc0000;
    634          	/* Configure PFx pins in Alternate function mode */   
    635          	//GPIOF->MODER   = 0xaa000aaa;
    636          	/* Configure PFx pins speed to 100 MHz */ 
    637          	//GPIOF->OSPEEDR = 0xff000fff;
    638          	/* Configure PFx pins Output type to push-pull */  
    639          	//GPIOF->OTYPER  = 0x00000000;
    640          	/* No pull-up, pull-down for PFx pins */ 
    641          	//GPIOF->PUPDR   = 0x00000000;
    642          
    643          	/* Connect PGx pins to FSMC Alternate function */
    644          	//GPIOG->AFR[0]  = 0x00cccccc;
    645          	//GPIOG->AFR[1]  = 0x000000c0;
    646          	/* Configure PGx pins in Alternate function mode */ 
    647          	//GPIOG->MODER   = 0x00080aaa;
    648          	/* Configure PGx pins speed to 100 MHz */ 
    649          	//GPIOG->OSPEEDR = 0x000c0fff;
    650          	/* Configure PGx pins Output type to push-pull */  
    651          	//GPIOG->OTYPER  = 0x00000000;
    652          	/* No pull-up, pull-down for PGx pins */ 
    653          	//GPIOG->PUPDR   = 0x00000000;
    654            
    655          	/*-- FSMC Configuration ------------------------------------------------------*/
    656          	/* Enable the FSMC interface clock */
    657          	//RCC->AHB3ENR         = 0x00000001;
    658          	pRCC->__B.AHB3ENR.FSMCEN = SET;
   \   000001C2   0x68A0             LDR      R0,[R4, #+8]
   \   000001C4   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000001C8   0x60A0             STR      R0,[R4, #+8]
    659          
    660          	/* Configure and enable Bank1_SRAM2 */
    661          	//FSMC_Bank1->BTCR[2]  = 0x00001015;
    662          	//FSMC_Bank1->BTCR[3]  = 0x00010400;
    663          	//FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    664          
    665          	/* Bank1_SRAM1 is configured as follow: */
    666          	{
    667          		FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
    668          		FSMC_NORSRAMTimingInitTypeDef p; 
    669          
    670          
    671          		p.FSMC_AddressSetupTime = 3;		// 0~15, 1 ~= 16ns
   \   000001CA   0x2003             MOVS     R0,#+3
   \   000001CC   0x9000             STR      R0,[SP, #+0]
    672          		p.FSMC_AddressHoldTime = 1;			// 1~15,
   \   000001CE   0x2001             MOVS     R0,#+1
   \   000001D0   0x9001             STR      R0,[SP, #+4]
    673          		p.FSMC_DataSetupTime = 7;			// 1~255
   \   000001D2   0x2007             MOVS     R0,#+7
   \   000001D4   0x9002             STR      R0,[SP, #+8]
    674          		p.FSMC_BusTurnAroundDuration = 1; 	// 0~15
   \   000001D6   0x2001             MOVS     R0,#+1
   \   000001D8   0x9003             STR      R0,[SP, #+12]
    675          		p.FSMC_CLKDivision = 2;				// 64MHz
   \   000001DA   0x2002             MOVS     R0,#+2
   \   000001DC   0x9004             STR      R0,[SP, #+16]
    676          		p.FSMC_DataLatency = 2;
   \   000001DE   0x9005             STR      R0,[SP, #+20]
    677          		p.FSMC_AccessMode = FSMC_AccessMode_A;
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x9006             STR      R0,[SP, #+24]
    678          
    679          		FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
   \   000001E4   0x9007             STR      R0,[SP, #+28]
    680          		FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   000001E6   0x9008             STR      R0,[SP, #+32]
    681          		FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
   \   000001E8   0x9009             STR      R0,[SP, #+36]
    682          		FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
   \   000001EA   0x900A             STR      R0,[SP, #+40]
    683          		FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   000001EC   0x900B             STR      R0,[SP, #+44]
    684          		FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
   \   000001EE   0x900C             STR      R0,[SP, #+48]
    685          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   000001F0   0x900D             STR      R0,[SP, #+52]
    686          		FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   000001F2   0x900E             STR      R0,[SP, #+56]
    687          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   000001F4   0x900F             STR      R0,[SP, #+60]
    688          		FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   000001F6   0xF44F 0x5080      MOV      R0,#+4096
   \   000001FA   0x9010             STR      R0,[SP, #+64]
    689          		FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0x9011             STR      R0,[SP, #+68]
    690          		FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000200   0x9012             STR      R0,[SP, #+72]
    691          		FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   00000202   0x9013             STR      R0,[SP, #+76]
    692          		FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   00000204   0xA800             ADD      R0,SP,#+0
   \   00000206   0x9014             STR      R0,[SP, #+80]
    693          		FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   00000208   0x9015             STR      R0,[SP, #+84]
    694          
    695          
    696          		FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
   \   0000020A   0xA807             ADD      R0,SP,#+28
   \   0000020C   0x.... 0x....      BL       FSMC_NORSRAMInit
    697          		/*!< Enable FSMC Bank1_SRAM2 Bank */
    698          		FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE); 
   \   00000210   0x2101             MOVS     R1,#+1
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x.... 0x....      BL       FSMC_NORSRAMCmd
    699          #ifdef DATA_IN_ExtSRAM2
    700          		FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
    701          		FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
    702          		/*!< Enable FSMC Bank1_SRAM3 Bank */
    703          		FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE); 
    704          #endif
    705            	}
    706            
    707          }
   \   00000218   0xB016             ADD      SP,SP,#+88
   \   0000021A   0xBD70             POP      {R4-R6,PC}       ;; return
    708          

   \                                 In section .text, align 2, keep-with-next
    709          void SystemInit_PSRAM0Ctl(void)
    710          {
   \                     SystemInit_PSRAM0Ctl:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
    711          	RCC_TypeDef *pRCC = RCC;
    712          	
    713          	/*-- GPIOs Configuration -----------------------------------------------------*/
    714          	/*
    715          	 +-------------------+--------------------+------------------+------------------+
    716          	 +                       SRAM pins assignment                                  +
    717          	 +-------------------+--------------------+------------------+------------------+
    718          	 | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    719          	 | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    720          	 | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    721          	 | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    722          	 | PD7  <-> FSMC_NE1
    723          	 | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    724          	 | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    725          	 | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    726          	 | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    727          	 | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    728          	 | PD13 <-> FSMC_A18
    729          	 | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    730          	 | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    731          	 +-------------------+--------------------+
    732          	*/
    733           	/* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    734          	//RCC->AHB1ENR   = 0x00000078;
    735          	pRCC->__B.AHB1ENR.IOPDEN = SET;
   \   00000004   0x....             LDR.N    R4,??DataTable4_8  ;; 0x40023830
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xF040 0x0008      ORR      R0,R0,#0x8
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    736          	pRCC->__B.AHB1ENR.IOPEEN = SET;
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000014   0x6020             STR      R0,[R4, #+0]
    737          	pRCC->__B.AHB1ENR.IOPFEN = SET;
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001C   0x6020             STR      R0,[R4, #+0]
    738          	pRCC->__B.AHB1ENR.IOPGEN = SET;
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000024   0x6020             STR      R0,[R4, #+0]
    739          
    740          	// DATA BUS DEFINITION
    741          	__PD14_FSMC_D0();
   \   00000026   0x....             LDR.N    R5,??DataTable4_9  ;; 0x40020c00
   \   00000028   0x230E             MOVS     R3,#+14
   \   0000002A   0x462A             MOV      R2,R5
   \   0000002C   0x210C             MOVS     R1,#+12
   \   0000002E   0x2022             MOVS     R0,#+34
   \   00000030   0x.... 0x....      BL       GPIOPortInit
    742          	__PD15_FSMC_D1();
   \   00000034   0x230F             MOVS     R3,#+15
   \   00000036   0x462A             MOV      R2,R5
   \   00000038   0x210C             MOVS     R1,#+12
   \   0000003A   0x2022             MOVS     R0,#+34
   \   0000003C   0x.... 0x....      BL       GPIOPortInit
    743          	__PD0_FSMC_D2();
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0x462A             MOV      R2,R5
   \   00000044   0x210C             MOVS     R1,#+12
   \   00000046   0x2022             MOVS     R0,#+34
   \   00000048   0x.... 0x....      BL       GPIOPortInit
    744          	__PD1_FSMC_D3();
   \   0000004C   0x2301             MOVS     R3,#+1
   \   0000004E   0x462A             MOV      R2,R5
   \   00000050   0x210C             MOVS     R1,#+12
   \   00000052   0x2022             MOVS     R0,#+34
   \   00000054   0x.... 0x....      BL       GPIOPortInit
    745          
    746          	__PE7_FSMC_D4();
   \   00000058   0x....             LDR.N    R6,??DataTable4_10  ;; 0x40021000
   \   0000005A   0x2307             MOVS     R3,#+7
   \   0000005C   0x4632             MOV      R2,R6
   \   0000005E   0x210C             MOVS     R1,#+12
   \   00000060   0x2022             MOVS     R0,#+34
   \   00000062   0x.... 0x....      BL       GPIOPortInit
    747          	__PE8_FSMC_D5();
   \   00000066   0x2308             MOVS     R3,#+8
   \   00000068   0x4632             MOV      R2,R6
   \   0000006A   0x210C             MOVS     R1,#+12
   \   0000006C   0x2022             MOVS     R0,#+34
   \   0000006E   0x.... 0x....      BL       GPIOPortInit
    748          	__PE9_FSMC_D6();
   \   00000072   0x2309             MOVS     R3,#+9
   \   00000074   0x4632             MOV      R2,R6
   \   00000076   0x210C             MOVS     R1,#+12
   \   00000078   0x2022             MOVS     R0,#+34
   \   0000007A   0x.... 0x....      BL       GPIOPortInit
    749          	__PE10_FSMC_D7();
   \   0000007E   0x230A             MOVS     R3,#+10
   \   00000080   0x4632             MOV      R2,R6
   \   00000082   0x210C             MOVS     R1,#+12
   \   00000084   0x2022             MOVS     R0,#+34
   \   00000086   0x.... 0x....      BL       GPIOPortInit
    750          	__PE11_FSMC_D8();
   \   0000008A   0x230B             MOVS     R3,#+11
   \   0000008C   0x4632             MOV      R2,R6
   \   0000008E   0x210C             MOVS     R1,#+12
   \   00000090   0x2022             MOVS     R0,#+34
   \   00000092   0x.... 0x....      BL       GPIOPortInit
    751          	__PE12_FSMC_D9();
   \   00000096   0x230C             MOVS     R3,#+12
   \   00000098   0x4632             MOV      R2,R6
   \   0000009A   0x210C             MOVS     R1,#+12
   \   0000009C   0x2022             MOVS     R0,#+34
   \   0000009E   0x.... 0x....      BL       GPIOPortInit
    752          	__PE13_FSMC_D10();
   \   000000A2   0x230D             MOVS     R3,#+13
   \   000000A4   0x4632             MOV      R2,R6
   \   000000A6   0x210C             MOVS     R1,#+12
   \   000000A8   0x2022             MOVS     R0,#+34
   \   000000AA   0x.... 0x....      BL       GPIOPortInit
    753          	__PE14_FSMC_D11();
   \   000000AE   0x230E             MOVS     R3,#+14
   \   000000B0   0x4632             MOV      R2,R6
   \   000000B2   0x210C             MOVS     R1,#+12
   \   000000B4   0x2022             MOVS     R0,#+34
   \   000000B6   0x.... 0x....      BL       GPIOPortInit
    754          	__PE15_FSMC_D12();
   \   000000BA   0x230F             MOVS     R3,#+15
   \   000000BC   0x4632             MOV      R2,R6
   \   000000BE   0x210C             MOVS     R1,#+12
   \   000000C0   0x2022             MOVS     R0,#+34
   \   000000C2   0x.... 0x....      BL       GPIOPortInit
    755          
    756          	__PD8_FSMC_D13();
   \   000000C6   0x2308             MOVS     R3,#+8
   \   000000C8   0x462A             MOV      R2,R5
   \   000000CA   0x210C             MOVS     R1,#+12
   \   000000CC   0x2022             MOVS     R0,#+34
   \   000000CE   0x.... 0x....      BL       GPIOPortInit
    757          	__PD9_FSMC_D14();
   \   000000D2   0x2309             MOVS     R3,#+9
   \   000000D4   0x462A             MOV      R2,R5
   \   000000D6   0x210C             MOVS     R1,#+12
   \   000000D8   0x2022             MOVS     R0,#+34
   \   000000DA   0x.... 0x....      BL       GPIOPortInit
    758          	__PD10_FSMC_D15();
   \   000000DE   0x230A             MOVS     R3,#+10
   \   000000E0   0x462A             MOV      R2,R5
   \   000000E2   0x210C             MOVS     R1,#+12
   \   000000E4   0x2022             MOVS     R0,#+34
   \   000000E6   0x.... 0x....      BL       GPIOPortInit
    759          
    760            	// NOE/NWE DEFINITION
    761            	__PD4_FSMC_nOE();
   \   000000EA   0x2304             MOVS     R3,#+4
   \   000000EC   0x462A             MOV      R2,R5
   \   000000EE   0x210C             MOVS     R1,#+12
   \   000000F0   0x2022             MOVS     R0,#+34
   \   000000F2   0x.... 0x....      BL       GPIOPortInit
    762          	__PD5_FSMC_nWE();
   \   000000F6   0x2305             MOVS     R3,#+5
   \   000000F8   0x462A             MOV      R2,R5
   \   000000FA   0x210C             MOVS     R1,#+12
   \   000000FC   0x2022             MOVS     R0,#+34
   \   000000FE   0x.... 0x....      BL       GPIOPortInit
    763          
    764          
    765          	// ADDRESS DEFINITON
    766          	__PF0_FSMC_A0();
   \   00000102   0x....             LDR.N    R7,??DataTable4_11  ;; 0x40021400
   \   00000104   0x2300             MOVS     R3,#+0
   \   00000106   0x463A             MOV      R2,R7
   \   00000108   0x210C             MOVS     R1,#+12
   \   0000010A   0x2022             MOVS     R0,#+34
   \   0000010C   0x.... 0x....      BL       GPIOPortInit
    767          	__PF1_FSMC_A1();
   \   00000110   0x2301             MOVS     R3,#+1
   \   00000112   0x463A             MOV      R2,R7
   \   00000114   0x210C             MOVS     R1,#+12
   \   00000116   0x2022             MOVS     R0,#+34
   \   00000118   0x.... 0x....      BL       GPIOPortInit
    768          	__PF2_FSMC_A2();
   \   0000011C   0x2302             MOVS     R3,#+2
   \   0000011E   0x463A             MOV      R2,R7
   \   00000120   0x210C             MOVS     R1,#+12
   \   00000122   0x2022             MOVS     R0,#+34
   \   00000124   0x.... 0x....      BL       GPIOPortInit
    769          	__PF3_FSMC_A3();
   \   00000128   0x2303             MOVS     R3,#+3
   \   0000012A   0x463A             MOV      R2,R7
   \   0000012C   0x210C             MOVS     R1,#+12
   \   0000012E   0x2022             MOVS     R0,#+34
   \   00000130   0x.... 0x....      BL       GPIOPortInit
    770          
    771          	__PF4_FSMC_A4();
   \   00000134   0x2304             MOVS     R3,#+4
   \   00000136   0x463A             MOV      R2,R7
   \   00000138   0x210C             MOVS     R1,#+12
   \   0000013A   0x2022             MOVS     R0,#+34
   \   0000013C   0x.... 0x....      BL       GPIOPortInit
    772          	__PF5_FSMC_A5();
   \   00000140   0x2305             MOVS     R3,#+5
   \   00000142   0x463A             MOV      R2,R7
   \   00000144   0x210C             MOVS     R1,#+12
   \   00000146   0x2022             MOVS     R0,#+34
   \   00000148   0x.... 0x....      BL       GPIOPortInit
    773          	__PF12_FSMC_A6();
   \   0000014C   0x230C             MOVS     R3,#+12
   \   0000014E   0x463A             MOV      R2,R7
   \   00000150   0x4619             MOV      R1,R3
   \   00000152   0x2022             MOVS     R0,#+34
   \   00000154   0x.... 0x....      BL       GPIOPortInit
    774          	__PF13_FSMC_A7();
   \   00000158   0x230D             MOVS     R3,#+13
   \   0000015A   0x463A             MOV      R2,R7
   \   0000015C   0x210C             MOVS     R1,#+12
   \   0000015E   0x2022             MOVS     R0,#+34
   \   00000160   0x.... 0x....      BL       GPIOPortInit
    775          	
    776          	__PF14_FSMC_A8();
   \   00000164   0x230E             MOVS     R3,#+14
   \   00000166   0x463A             MOV      R2,R7
   \   00000168   0x210C             MOVS     R1,#+12
   \   0000016A   0x2022             MOVS     R0,#+34
   \   0000016C   0x.... 0x....      BL       GPIOPortInit
    777          	__PF15_FSMC_A9();
   \   00000170   0x230F             MOVS     R3,#+15
   \   00000172   0x463A             MOV      R2,R7
   \   00000174   0x210C             MOVS     R1,#+12
   \   00000176   0x2022             MOVS     R0,#+34
   \   00000178   0x.... 0x....      BL       GPIOPortInit
    778          	__PG0_FSMC_A10();
   \   0000017C   0x....             LDR.N    R7,??DataTable4_12  ;; 0x40021800
   \   0000017E   0x2300             MOVS     R3,#+0
   \   00000180   0x463A             MOV      R2,R7
   \   00000182   0x210C             MOVS     R1,#+12
   \   00000184   0x2022             MOVS     R0,#+34
   \   00000186   0x.... 0x....      BL       GPIOPortInit
    779          	__PG1_FSMC_A11();
   \   0000018A   0x2301             MOVS     R3,#+1
   \   0000018C   0x463A             MOV      R2,R7
   \   0000018E   0x210C             MOVS     R1,#+12
   \   00000190   0x2022             MOVS     R0,#+34
   \   00000192   0x.... 0x....      BL       GPIOPortInit
    780          
    781          	__PG2_FSMC_A12();
   \   00000196   0x2302             MOVS     R3,#+2
   \   00000198   0x463A             MOV      R2,R7
   \   0000019A   0x210C             MOVS     R1,#+12
   \   0000019C   0x2022             MOVS     R0,#+34
   \   0000019E   0x.... 0x....      BL       GPIOPortInit
    782          	__PG3_FSMC_A13();
   \   000001A2   0x2303             MOVS     R3,#+3
   \   000001A4   0x463A             MOV      R2,R7
   \   000001A6   0x210C             MOVS     R1,#+12
   \   000001A8   0x2022             MOVS     R0,#+34
   \   000001AA   0x.... 0x....      BL       GPIOPortInit
    783          	__PG4_FSMC_A14();
   \   000001AE   0x2304             MOVS     R3,#+4
   \   000001B0   0x463A             MOV      R2,R7
   \   000001B2   0x210C             MOVS     R1,#+12
   \   000001B4   0x2022             MOVS     R0,#+34
   \   000001B6   0x.... 0x....      BL       GPIOPortInit
    784          	__PG5_FSMC_A15();
   \   000001BA   0x2305             MOVS     R3,#+5
   \   000001BC   0x463A             MOV      R2,R7
   \   000001BE   0x210C             MOVS     R1,#+12
   \   000001C0   0x2022             MOVS     R0,#+34
   \   000001C2   0x.... 0x....      BL       GPIOPortInit
    785          
    786          	__PD11_FSMC_A16();
   \   000001C6   0x230B             MOVS     R3,#+11
   \   000001C8   0x462A             MOV      R2,R5
   \   000001CA   0x210C             MOVS     R1,#+12
   \   000001CC   0x2022             MOVS     R0,#+34
   \   000001CE   0x.... 0x....      BL       GPIOPortInit
    787          	__PD12_FSMC_A17();
   \   000001D2   0x230C             MOVS     R3,#+12
   \   000001D4   0x462A             MOV      R2,R5
   \   000001D6   0x4619             MOV      R1,R3
   \   000001D8   0x2022             MOVS     R0,#+34
   \   000001DA   0x.... 0x....      BL       GPIOPortInit
    788          	__PD13_FSMC_A18();
   \   000001DE   0x230D             MOVS     R3,#+13
   \   000001E0   0x462A             MOV      R2,R5
   \   000001E2   0x210C             MOVS     R1,#+12
   \   000001E4   0x2022             MOVS     R0,#+34
   \   000001E6   0x.... 0x....      BL       GPIOPortInit
    789          
    790          	__PE3_FSMC_A19();
   \   000001EA   0x2303             MOVS     R3,#+3
   \   000001EC   0x4632             MOV      R2,R6
   \   000001EE   0x210C             MOVS     R1,#+12
   \   000001F0   0x2022             MOVS     R0,#+34
   \   000001F2   0x.... 0x....      BL       GPIOPortInit
    791          	__PE4_FSMC_A20();
   \   000001F6   0x2304             MOVS     R3,#+4
   \   000001F8   0x4632             MOV      R2,R6
   \   000001FA   0x210C             MOVS     R1,#+12
   \   000001FC   0x2022             MOVS     R0,#+34
   \   000001FE   0x.... 0x....      BL       GPIOPortInit
    792          	__PE5_FSMC_A21();
   \   00000202   0x2305             MOVS     R3,#+5
   \   00000204   0x4632             MOV      R2,R6
   \   00000206   0x210C             MOVS     R1,#+12
   \   00000208   0x2022             MOVS     R0,#+34
   \   0000020A   0x.... 0x....      BL       GPIOPortInit
    793          
    794          
    795          
    796          
    797          //	__PG9_IN_PU();	// NE2
    798          	__PG12_IN_PU(); // NE4
   \   0000020E   0x230C             MOVS     R3,#+12
   \   00000210   0x463A             MOV      R2,R7
   \   00000212   0x2100             MOVS     R1,#+0
   \   00000214   0x2040             MOVS     R0,#+64
   \   00000216   0x.... 0x....      BL       GPIOPortInit
    799          	//RAM CE
    800          	__PG9_FSMC_NE2();
   \   0000021A   0x2309             MOVS     R3,#+9
   \   0000021C   0x463A             MOV      R2,R7
   \   0000021E   0x210C             MOVS     R1,#+12
   \   00000220   0x2022             MOVS     R0,#+34
   \   00000222   0x.... 0x....      BL       GPIOPortInit
    801          
    802            	/* Connect PDx pins to FSMC Alternate function */
    803          	//GPIOD->AFR[0]  = 0x00cc00cc;
    804            	//GPIOD->AFR[1]  = 0xcc0ccccc;
    805          	/* Configure PDx pins in Alternate function mode */  
    806          	//GPIOD->MODER   = 0xa2aa0a0a;
    807          	/* Configure PDx pins speed to 100 MHz */  
    808          	//GPIOD->OSPEEDR = 0xf3ff0f0f;
    809          	/* Configure PDx pins Output type to push-pull */  
    810          	//GPIOD->OTYPER  = 0x00000000;
    811          	/* No pull-up, pull-down for PDx pins */ 
    812          	//GPIOD->PUPDR   = 0x00000000;
    813          
    814          	/* Connect PEx pins to FSMC Alternate function */
    815          	//GPIOE->AFR[0]  = 0xc00000cc;
    816          	//GPIOE->AFR[1]  = 0xcccccccc;
    817          	/* Configure PEx pins in Alternate function mode */ 
    818          	//GPIOE->MODER   = 0xaaaa800a;
    819          	/* Configure PEx pins speed to 100 MHz */ 
    820          	//GPIOE->OSPEEDR = 0xffffc00f;
    821          	/* Configure PEx pins Output type to push-pull */  
    822          	//GPIOE->OTYPER  = 0x00000000;
    823          	/* No pull-up, pull-down for PEx pins */ 
    824          	//GPIOE->PUPDR   = 0x00000000;
    825          
    826          	/* Connect PFx pins to FSMC Alternate function */
    827          	//GPIOF->AFR[0]  = 0x00cccccc;
    828          	//GPIOF->AFR[1]  = 0xcccc0000;
    829          	/* Configure PFx pins in Alternate function mode */   
    830          	//GPIOF->MODER   = 0xaa000aaa;
    831          	/* Configure PFx pins speed to 100 MHz */ 
    832          	//GPIOF->OSPEEDR = 0xff000fff;
    833          	/* Configure PFx pins Output type to push-pull */  
    834          	//GPIOF->OTYPER  = 0x00000000;
    835          	/* No pull-up, pull-down for PFx pins */ 
    836          	//GPIOF->PUPDR   = 0x00000000;
    837          
    838          	/* Connect PGx pins to FSMC Alternate function */
    839          	//GPIOG->AFR[0]  = 0x00cccccc;
    840          	//GPIOG->AFR[1]  = 0x000000c0;
    841          	/* Configure PGx pins in Alternate function mode */ 
    842          	//GPIOG->MODER   = 0x00080aaa;
    843          	/* Configure PGx pins speed to 100 MHz */ 
    844          	//GPIOG->OSPEEDR = 0x000c0fff;
    845          	/* Configure PGx pins Output type to push-pull */  
    846          	//GPIOG->OTYPER  = 0x00000000;
    847          	/* No pull-up, pull-down for PGx pins */ 
    848          	//GPIOG->PUPDR   = 0x00000000;
    849            
    850          	/*-- FSMC Configuration ------------------------------------------------------*/
    851          	/* Enable the FSMC interface clock */
    852          	//RCC->AHB3ENR         = 0x00000001;
    853          	pRCC->__B.AHB3ENR.FSMCEN = SET;
   \   00000226   0x68A0             LDR      R0,[R4, #+8]
   \   00000228   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000022C   0x60A0             STR      R0,[R4, #+8]
    854          
    855          	/* Configure and enable Bank1_SRAM2 */
    856          	//FSMC_Bank1->BTCR[2]  = 0x00001015;
    857          	//FSMC_Bank1->BTCR[3]  = 0x00010400;
    858          	//FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    859          
    860          	/* Bank1_SRAM1 is configured as follow: */
    861          	{
    862          		FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
    863          		FSMC_NORSRAMTimingInitTypeDef p; 
    864          
    865          
    866          		p.FSMC_AddressSetupTime 		= 3;		// 0~15, 1 ~= 16ns
   \   0000022E   0x2003             MOVS     R0,#+3
   \   00000230   0x9000             STR      R0,[SP, #+0]
    867          		p.FSMC_AddressHoldTime 			= 1;			// 1~15,
   \   00000232   0x2001             MOVS     R0,#+1
   \   00000234   0x9001             STR      R0,[SP, #+4]
    868          		p.FSMC_DataSetupTime 			= 7;			// 1~255
   \   00000236   0x2007             MOVS     R0,#+7
   \   00000238   0x9002             STR      R0,[SP, #+8]
    869          		p.FSMC_BusTurnAroundDuration 	= 1; 	// 0~15
   \   0000023A   0x2001             MOVS     R0,#+1
   \   0000023C   0x9003             STR      R0,[SP, #+12]
    870          		p.FSMC_CLKDivision 				= 2;				// 64MHz
   \   0000023E   0x2002             MOVS     R0,#+2
   \   00000240   0x9004             STR      R0,[SP, #+16]
    871          		p.FSMC_DataLatency 				= 2;
   \   00000242   0x9005             STR      R0,[SP, #+20]
    872          		p.FSMC_AccessMode 				= FSMC_AccessMode_A;
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0x9006             STR      R0,[SP, #+24]
    873          
    874          		FSMC_NORSRAMInitStructure.FSMC_Bank 			= FSMC_Bank1_NORSRAM2;
   \   00000248   0x2002             MOVS     R0,#+2
   \   0000024A   0x9007             STR      R0,[SP, #+28]
    875          		FSMC_NORSRAMInitStructure.FSMC_DataAddressMux 	= FSMC_DataAddressMux_Disable;
   \   0000024C   0x2000             MOVS     R0,#+0
   \   0000024E   0x9008             STR      R0,[SP, #+32]
    876          		FSMC_NORSRAMInitStructure.FSMC_MemoryType 		= FSMC_MemoryType_PSRAM;
   \   00000250   0x2004             MOVS     R0,#+4
   \   00000252   0x9009             STR      R0,[SP, #+36]
    877          		FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth 	= FSMC_MemoryDataWidth_16b;
   \   00000254   0x2010             MOVS     R0,#+16
   \   00000256   0x900A             STR      R0,[SP, #+40]
    878          		FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode 	= FSMC_BurstAccessMode_Disable;
   \   00000258   0x2000             MOVS     R0,#+0
   \   0000025A   0x900B             STR      R0,[SP, #+44]
    879          		FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
   \   0000025C   0x900C             STR      R0,[SP, #+48]
    880          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity 	= FSMC_WaitSignalPolarity_Low;
   \   0000025E   0x900D             STR      R0,[SP, #+52]
    881          		FSMC_NORSRAMInitStructure.FSMC_WrapMode 			= FSMC_WrapMode_Disable;
   \   00000260   0x900E             STR      R0,[SP, #+56]
    882          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive 	= FSMC_WaitSignalActive_BeforeWaitState;
   \   00000262   0x900F             STR      R0,[SP, #+60]
    883          		FSMC_NORSRAMInitStructure.FSMC_WriteOperation 		= FSMC_WriteOperation_Enable;
   \   00000264   0xF44F 0x5080      MOV      R0,#+4096
   \   00000268   0x9010             STR      R0,[SP, #+64]
    884          		FSMC_NORSRAMInitStructure.FSMC_WaitSignal 			= FSMC_WaitSignal_Disable;
   \   0000026A   0x2000             MOVS     R0,#+0
   \   0000026C   0x9011             STR      R0,[SP, #+68]
    885          		FSMC_NORSRAMInitStructure.FSMC_ExtendedMode 		= FSMC_ExtendedMode_Disable;
   \   0000026E   0x9012             STR      R0,[SP, #+72]
    886          		FSMC_NORSRAMInitStructure.FSMC_WriteBurst 			= FSMC_WriteBurst_Disable;
   \   00000270   0x9013             STR      R0,[SP, #+76]
    887          		FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   00000272   0xA800             ADD      R0,SP,#+0
   \   00000274   0x9014             STR      R0,[SP, #+80]
    888          		FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct 	= &p;
   \   00000276   0x9015             STR      R0,[SP, #+84]
    889          
    890          
    891          
    892          		FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
   \   00000278   0x2002             MOVS     R0,#+2
   \   0000027A   0x9007             STR      R0,[SP, #+28]
    893          		FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
   \   0000027C   0xA807             ADD      R0,SP,#+28
   \   0000027E   0x.... 0x....      BL       FSMC_NORSRAMInit
    894          		/*!< Enable FSMC Bank1_SRAM3 Bank */
    895          		FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE); 
   \   00000282   0x2101             MOVS     R1,#+1
   \   00000284   0x2002             MOVS     R0,#+2
   \   00000286   0x....             B.N      ?Subroutine0
    896            	}
    897            
    898          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       FSMC_NORSRAMCmd
   \   00000004   0xB017             ADD      SP,SP,#+92
   \   00000006   0xBDF0             POP      {R4-R7,PC}       ;; return
    899          
    900          
    901          

   \                                 In section .text, align 4, keep-with-next
    902          void SystemInit_PSRAM1Ctl(void)
    903          {
   \                     SystemInit_PSRAM1Ctl:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
    904          	RCC_TypeDef *pRCC = RCC;
    905          	
    906          	/*-- GPIOs Configuration -----------------------------------------------------*/
    907          	/*
    908          	 +-------------------+--------------------+------------------+------------------+
    909          	 +                       SRAM pins assignment                                  +
    910          	 +-------------------+--------------------+------------------+------------------+
    911          	 | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    912          	 | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    913          	 | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    914          	 | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    915          	 | PD7  <-> FSMC_NE1
    916          	 | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    917          	 | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    918          	 | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    919          	 | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    920          	 | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    921          	 | PD13 <-> FSMC_A18
    922          	 | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    923          	 | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    924          	 +-------------------+--------------------+
    925          	*/
    926           	/* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    927          	//RCC->AHB1ENR   = 0x00000078;
    928          	pRCC->__B.AHB1ENR.IOPDEN = SET;
   \   00000004   0x4C5E             LDR.N    R4,??SystemInit_PSRAM1Ctl_0  ;; 0x40023830
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xF040 0x0008      ORR      R0,R0,#0x8
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    929          	pRCC->__B.AHB1ENR.IOPEEN = SET;
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000014   0x6020             STR      R0,[R4, #+0]
    930          	pRCC->__B.AHB1ENR.IOPFEN = SET;
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001C   0x6020             STR      R0,[R4, #+0]
    931          	pRCC->__B.AHB1ENR.IOPGEN = SET;
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000024   0x6020             STR      R0,[R4, #+0]
    932          
    933          	// DATA BUS DEFINITION
    934          	__PD14_FSMC_D0();
   \   00000026   0x4D57             LDR.N    R5,??SystemInit_PSRAM1Ctl_0+0x4  ;; 0x40020c00
   \   00000028   0x230E             MOVS     R3,#+14
   \   0000002A   0x462A             MOV      R2,R5
   \   0000002C   0x210C             MOVS     R1,#+12
   \   0000002E   0x2022             MOVS     R0,#+34
   \   00000030   0x.... 0x....      BL       GPIOPortInit
    935          	__PD15_FSMC_D1();
   \   00000034   0x230F             MOVS     R3,#+15
   \   00000036   0x462A             MOV      R2,R5
   \   00000038   0x210C             MOVS     R1,#+12
   \   0000003A   0x2022             MOVS     R0,#+34
   \   0000003C   0x.... 0x....      BL       GPIOPortInit
    936          	__PD0_FSMC_D2();
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0x462A             MOV      R2,R5
   \   00000044   0x210C             MOVS     R1,#+12
   \   00000046   0x2022             MOVS     R0,#+34
   \   00000048   0x.... 0x....      BL       GPIOPortInit
    937          	__PD1_FSMC_D3();
   \   0000004C   0x2301             MOVS     R3,#+1
   \   0000004E   0x462A             MOV      R2,R5
   \   00000050   0x210C             MOVS     R1,#+12
   \   00000052   0x2022             MOVS     R0,#+34
   \   00000054   0x.... 0x....      BL       GPIOPortInit
    938          
    939          	__PE7_FSMC_D4();
   \   00000058   0x4E4B             LDR.N    R6,??SystemInit_PSRAM1Ctl_0+0x8  ;; 0x40021000
   \   0000005A   0x2307             MOVS     R3,#+7
   \   0000005C   0x4632             MOV      R2,R6
   \   0000005E   0x210C             MOVS     R1,#+12
   \   00000060   0x2022             MOVS     R0,#+34
   \   00000062   0x.... 0x....      BL       GPIOPortInit
    940          	__PE8_FSMC_D5();
   \   00000066   0x2308             MOVS     R3,#+8
   \   00000068   0x4632             MOV      R2,R6
   \   0000006A   0x210C             MOVS     R1,#+12
   \   0000006C   0x2022             MOVS     R0,#+34
   \   0000006E   0x.... 0x....      BL       GPIOPortInit
    941          	__PE9_FSMC_D6();
   \   00000072   0x2309             MOVS     R3,#+9
   \   00000074   0x4632             MOV      R2,R6
   \   00000076   0x210C             MOVS     R1,#+12
   \   00000078   0x2022             MOVS     R0,#+34
   \   0000007A   0x.... 0x....      BL       GPIOPortInit
    942          	__PE10_FSMC_D7();
   \   0000007E   0x230A             MOVS     R3,#+10
   \   00000080   0x4632             MOV      R2,R6
   \   00000082   0x210C             MOVS     R1,#+12
   \   00000084   0x2022             MOVS     R0,#+34
   \   00000086   0x.... 0x....      BL       GPIOPortInit
    943          	__PE11_FSMC_D8();
   \   0000008A   0x230B             MOVS     R3,#+11
   \   0000008C   0x4632             MOV      R2,R6
   \   0000008E   0x210C             MOVS     R1,#+12
   \   00000090   0x2022             MOVS     R0,#+34
   \   00000092   0x.... 0x....      BL       GPIOPortInit
    944          	__PE12_FSMC_D9();
   \   00000096   0x230C             MOVS     R3,#+12
   \   00000098   0x4632             MOV      R2,R6
   \   0000009A   0x210C             MOVS     R1,#+12
   \   0000009C   0x2022             MOVS     R0,#+34
   \   0000009E   0x.... 0x....      BL       GPIOPortInit
    945          	__PE13_FSMC_D10();
   \   000000A2   0x230D             MOVS     R3,#+13
   \   000000A4   0x4632             MOV      R2,R6
   \   000000A6   0x210C             MOVS     R1,#+12
   \   000000A8   0x2022             MOVS     R0,#+34
   \   000000AA   0x.... 0x....      BL       GPIOPortInit
    946          	__PE14_FSMC_D11();
   \   000000AE   0x230E             MOVS     R3,#+14
   \   000000B0   0x4632             MOV      R2,R6
   \   000000B2   0x210C             MOVS     R1,#+12
   \   000000B4   0x2022             MOVS     R0,#+34
   \   000000B6   0x.... 0x....      BL       GPIOPortInit
    947          	__PE15_FSMC_D12();
   \   000000BA   0x230F             MOVS     R3,#+15
   \   000000BC   0x4632             MOV      R2,R6
   \   000000BE   0x210C             MOVS     R1,#+12
   \   000000C0   0x2022             MOVS     R0,#+34
   \   000000C2   0x.... 0x....      BL       GPIOPortInit
    948          
    949          	__PD8_FSMC_D13();
   \   000000C6   0x2308             MOVS     R3,#+8
   \   000000C8   0x462A             MOV      R2,R5
   \   000000CA   0x210C             MOVS     R1,#+12
   \   000000CC   0x2022             MOVS     R0,#+34
   \   000000CE   0x.... 0x....      BL       GPIOPortInit
    950          	__PD9_FSMC_D14();
   \   000000D2   0x2309             MOVS     R3,#+9
   \   000000D4   0x462A             MOV      R2,R5
   \   000000D6   0x210C             MOVS     R1,#+12
   \   000000D8   0x2022             MOVS     R0,#+34
   \   000000DA   0x.... 0x....      BL       GPIOPortInit
    951          	__PD10_FSMC_D15();
   \   000000DE   0x230A             MOVS     R3,#+10
   \   000000E0   0x462A             MOV      R2,R5
   \   000000E2   0x210C             MOVS     R1,#+12
   \   000000E4   0x2022             MOVS     R0,#+34
   \   000000E6   0x.... 0x....      BL       GPIOPortInit
    952          
    953            	// NOE/NWE DEFINITION
    954            	__PD4_FSMC_nOE();
   \   000000EA   0x2304             MOVS     R3,#+4
   \   000000EC   0x462A             MOV      R2,R5
   \   000000EE   0x210C             MOVS     R1,#+12
   \   000000F0   0x2022             MOVS     R0,#+34
   \   000000F2   0x.... 0x....      BL       GPIOPortInit
    955          	__PD5_FSMC_nWE();
   \   000000F6   0x2305             MOVS     R3,#+5
   \   000000F8   0x462A             MOV      R2,R5
   \   000000FA   0x210C             MOVS     R1,#+12
   \   000000FC   0x2022             MOVS     R0,#+34
   \   000000FE   0x.... 0x....      BL       GPIOPortInit
    956          
    957          
    958          	// ADDRESS DEFINITON
    959          	__PF0_FSMC_A0();
   \   00000102   0x4F22             LDR.N    R7,??SystemInit_PSRAM1Ctl_0+0xC  ;; 0x40021400
   \   00000104   0x2300             MOVS     R3,#+0
   \   00000106   0x463A             MOV      R2,R7
   \   00000108   0x210C             MOVS     R1,#+12
   \   0000010A   0x2022             MOVS     R0,#+34
   \   0000010C   0x.... 0x....      BL       GPIOPortInit
    960          	__PF1_FSMC_A1();
   \   00000110   0x2301             MOVS     R3,#+1
   \   00000112   0x463A             MOV      R2,R7
   \   00000114   0x210C             MOVS     R1,#+12
   \   00000116   0x2022             MOVS     R0,#+34
   \   00000118   0x.... 0x....      BL       GPIOPortInit
    961          	__PF2_FSMC_A2();
   \   0000011C   0x2302             MOVS     R3,#+2
   \   0000011E   0x463A             MOV      R2,R7
   \   00000120   0x210C             MOVS     R1,#+12
   \   00000122   0x2022             MOVS     R0,#+34
   \   00000124   0x.... 0x....      BL       GPIOPortInit
    962          	__PF3_FSMC_A3();
   \   00000128   0x2303             MOVS     R3,#+3
   \   0000012A   0x463A             MOV      R2,R7
   \   0000012C   0x210C             MOVS     R1,#+12
   \   0000012E   0x2022             MOVS     R0,#+34
   \   00000130   0x.... 0x....      BL       GPIOPortInit
    963          
    964          	__PF4_FSMC_A4();
   \   00000134   0x2304             MOVS     R3,#+4
   \   00000136   0x463A             MOV      R2,R7
   \   00000138   0x210C             MOVS     R1,#+12
   \   0000013A   0x2022             MOVS     R0,#+34
   \   0000013C   0x.... 0x....      BL       GPIOPortInit
    965          	__PF5_FSMC_A5();
   \   00000140   0x2305             MOVS     R3,#+5
   \   00000142   0x463A             MOV      R2,R7
   \   00000144   0x210C             MOVS     R1,#+12
   \   00000146   0x2022             MOVS     R0,#+34
   \   00000148   0x.... 0x....      BL       GPIOPortInit
    966          	__PF12_FSMC_A6();
   \   0000014C   0x230C             MOVS     R3,#+12
   \   0000014E   0x463A             MOV      R2,R7
   \   00000150   0x4619             MOV      R1,R3
   \   00000152   0x2022             MOVS     R0,#+34
   \   00000154   0x.... 0x....      BL       GPIOPortInit
    967          	__PF13_FSMC_A7();
   \   00000158   0x230D             MOVS     R3,#+13
   \   0000015A   0x463A             MOV      R2,R7
   \   0000015C   0x210C             MOVS     R1,#+12
   \   0000015E   0x2022             MOVS     R0,#+34
   \   00000160   0x.... 0x....      BL       GPIOPortInit
    968          	
    969          	__PF14_FSMC_A8();
   \   00000164   0x230E             MOVS     R3,#+14
   \   00000166   0x463A             MOV      R2,R7
   \   00000168   0x210C             MOVS     R1,#+12
   \   0000016A   0x2022             MOVS     R0,#+34
   \   0000016C   0x.... 0x....      BL       GPIOPortInit
    970          	__PF15_FSMC_A9();
   \   00000170   0x230F             MOVS     R3,#+15
   \   00000172   0x463A             MOV      R2,R7
   \   00000174   0x210C             MOVS     R1,#+12
   \   00000176   0x2022             MOVS     R0,#+34
   \   00000178   0x.... 0x....      BL       GPIOPortInit
    971          	__PG0_FSMC_A10();
   \   0000017C   0x4F04             LDR.N    R7,??SystemInit_PSRAM1Ctl_0+0x10  ;; 0x40021800
   \   0000017E   0xE009             B.N      ??SystemInit_PSRAM1Ctl_1
   \                     ??SystemInit_PSRAM1Ctl_0:
   \   00000180   0x40023830         DC32     0x40023830
   \   00000184   0x40020C00         DC32     0x40020c00
   \   00000188   0x40021000         DC32     0x40021000
   \   0000018C   0x40021400         DC32     0x40021400
   \   00000190   0x40021800         DC32     0x40021800
   \                     ??SystemInit_PSRAM1Ctl_1:
   \   00000194   0x2300             MOVS     R3,#+0
   \   00000196   0x463A             MOV      R2,R7
   \   00000198   0x210C             MOVS     R1,#+12
   \   0000019A   0x2022             MOVS     R0,#+34
   \   0000019C   0x.... 0x....      BL       GPIOPortInit
    972          	__PG1_FSMC_A11();
   \   000001A0   0x2301             MOVS     R3,#+1
   \   000001A2   0x463A             MOV      R2,R7
   \   000001A4   0x210C             MOVS     R1,#+12
   \   000001A6   0x2022             MOVS     R0,#+34
   \   000001A8   0x.... 0x....      BL       GPIOPortInit
    973          
    974          	__PG2_FSMC_A12();
   \   000001AC   0x2302             MOVS     R3,#+2
   \   000001AE   0x463A             MOV      R2,R7
   \   000001B0   0x210C             MOVS     R1,#+12
   \   000001B2   0x2022             MOVS     R0,#+34
   \   000001B4   0x.... 0x....      BL       GPIOPortInit
    975          	__PG3_FSMC_A13();
   \   000001B8   0x2303             MOVS     R3,#+3
   \   000001BA   0x463A             MOV      R2,R7
   \   000001BC   0x210C             MOVS     R1,#+12
   \   000001BE   0x2022             MOVS     R0,#+34
   \   000001C0   0x.... 0x....      BL       GPIOPortInit
    976          	__PG4_FSMC_A14();
   \   000001C4   0x2304             MOVS     R3,#+4
   \   000001C6   0x463A             MOV      R2,R7
   \   000001C8   0x210C             MOVS     R1,#+12
   \   000001CA   0x2022             MOVS     R0,#+34
   \   000001CC   0x.... 0x....      BL       GPIOPortInit
    977          	__PG5_FSMC_A15();
   \   000001D0   0x2305             MOVS     R3,#+5
   \   000001D2   0x463A             MOV      R2,R7
   \   000001D4   0x210C             MOVS     R1,#+12
   \   000001D6   0x2022             MOVS     R0,#+34
   \   000001D8   0x.... 0x....      BL       GPIOPortInit
    978          
    979          	__PD11_FSMC_A16();
   \   000001DC   0x230B             MOVS     R3,#+11
   \   000001DE   0x462A             MOV      R2,R5
   \   000001E0   0x210C             MOVS     R1,#+12
   \   000001E2   0x2022             MOVS     R0,#+34
   \   000001E4   0x.... 0x....      BL       GPIOPortInit
    980          	__PD12_FSMC_A17();
   \   000001E8   0x230C             MOVS     R3,#+12
   \   000001EA   0x462A             MOV      R2,R5
   \   000001EC   0x4619             MOV      R1,R3
   \   000001EE   0x2022             MOVS     R0,#+34
   \   000001F0   0x.... 0x....      BL       GPIOPortInit
    981          	__PD13_FSMC_A18();
   \   000001F4   0x230D             MOVS     R3,#+13
   \   000001F6   0x462A             MOV      R2,R5
   \   000001F8   0x210C             MOVS     R1,#+12
   \   000001FA   0x2022             MOVS     R0,#+34
   \   000001FC   0x.... 0x....      BL       GPIOPortInit
    982          
    983          	__PE3_FSMC_A19();
   \   00000200   0x2303             MOVS     R3,#+3
   \   00000202   0x4632             MOV      R2,R6
   \   00000204   0x210C             MOVS     R1,#+12
   \   00000206   0x2022             MOVS     R0,#+34
   \   00000208   0x.... 0x....      BL       GPIOPortInit
    984          	__PE4_FSMC_A20();
   \   0000020C   0x2304             MOVS     R3,#+4
   \   0000020E   0x4632             MOV      R2,R6
   \   00000210   0x210C             MOVS     R1,#+12
   \   00000212   0x2022             MOVS     R0,#+34
   \   00000214   0x.... 0x....      BL       GPIOPortInit
    985          	__PE5_FSMC_A21();
   \   00000218   0x2305             MOVS     R3,#+5
   \   0000021A   0x4632             MOV      R2,R6
   \   0000021C   0x210C             MOVS     R1,#+12
   \   0000021E   0x2022             MOVS     R0,#+34
   \   00000220   0x.... 0x....      BL       GPIOPortInit
    986          
    987          
    988          
    989          
    990          //	__PG9_IN_PU();	// NE2
    991          	__PG12_IN_PU(); // NE4
   \   00000224   0x230C             MOVS     R3,#+12
   \   00000226   0x463A             MOV      R2,R7
   \   00000228   0x2100             MOVS     R1,#+0
   \   0000022A   0x2040             MOVS     R0,#+64
   \   0000022C   0x.... 0x....      BL       GPIOPortInit
    992          	//RAM CE
    993          	__PG9_FSMC_NE2();
   \   00000230   0x2309             MOVS     R3,#+9
   \   00000232   0x463A             MOV      R2,R7
   \   00000234   0x210C             MOVS     R1,#+12
   \   00000236   0x2022             MOVS     R0,#+34
   \   00000238   0x.... 0x....      BL       GPIOPortInit
    994          
    995            	/* Connect PDx pins to FSMC Alternate function */
    996          	//GPIOD->AFR[0]  = 0x00cc00cc;
    997            	//GPIOD->AFR[1]  = 0xcc0ccccc;
    998          	/* Configure PDx pins in Alternate function mode */  
    999          	//GPIOD->MODER   = 0xa2aa0a0a;
   1000          	/* Configure PDx pins speed to 100 MHz */  
   1001          	//GPIOD->OSPEEDR = 0xf3ff0f0f;
   1002          	/* Configure PDx pins Output type to push-pull */  
   1003          	//GPIOD->OTYPER  = 0x00000000;
   1004          	/* No pull-up, pull-down for PDx pins */ 
   1005          	//GPIOD->PUPDR   = 0x00000000;
   1006          
   1007          	/* Connect PEx pins to FSMC Alternate function */
   1008          	//GPIOE->AFR[0]  = 0xc00000cc;
   1009          	//GPIOE->AFR[1]  = 0xcccccccc;
   1010          	/* Configure PEx pins in Alternate function mode */ 
   1011          	//GPIOE->MODER   = 0xaaaa800a;
   1012          	/* Configure PEx pins speed to 100 MHz */ 
   1013          	//GPIOE->OSPEEDR = 0xffffc00f;
   1014          	/* Configure PEx pins Output type to push-pull */  
   1015          	//GPIOE->OTYPER  = 0x00000000;
   1016          	/* No pull-up, pull-down for PEx pins */ 
   1017          	//GPIOE->PUPDR   = 0x00000000;
   1018          
   1019          	/* Connect PFx pins to FSMC Alternate function */
   1020          	//GPIOF->AFR[0]  = 0x00cccccc;
   1021          	//GPIOF->AFR[1]  = 0xcccc0000;
   1022          	/* Configure PFx pins in Alternate function mode */   
   1023          	//GPIOF->MODER   = 0xaa000aaa;
   1024          	/* Configure PFx pins speed to 100 MHz */ 
   1025          	//GPIOF->OSPEEDR = 0xff000fff;
   1026          	/* Configure PFx pins Output type to push-pull */  
   1027          	//GPIOF->OTYPER  = 0x00000000;
   1028          	/* No pull-up, pull-down for PFx pins */ 
   1029          	//GPIOF->PUPDR   = 0x00000000;
   1030          
   1031          	/* Connect PGx pins to FSMC Alternate function */
   1032          	//GPIOG->AFR[0]  = 0x00cccccc;
   1033          	//GPIOG->AFR[1]  = 0x000000c0;
   1034          	/* Configure PGx pins in Alternate function mode */ 
   1035          	//GPIOG->MODER   = 0x00080aaa;
   1036          	/* Configure PGx pins speed to 100 MHz */ 
   1037          	//GPIOG->OSPEEDR = 0x000c0fff;
   1038          	/* Configure PGx pins Output type to push-pull */  
   1039          	//GPIOG->OTYPER  = 0x00000000;
   1040          	/* No pull-up, pull-down for PGx pins */ 
   1041          	//GPIOG->PUPDR   = 0x00000000;
   1042            
   1043          	/*-- FSMC Configuration ------------------------------------------------------*/
   1044          	/* Enable the FSMC interface clock */
   1045          	//RCC->AHB3ENR         = 0x00000001;
   1046          	pRCC->__B.AHB3ENR.FSMCEN = SET;
   \   0000023C   0x68A0             LDR      R0,[R4, #+8]
   \   0000023E   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000242   0x60A0             STR      R0,[R4, #+8]
   1047          
   1048          	/* Configure and enable Bank1_SRAM2 */
   1049          	//FSMC_Bank1->BTCR[2]  = 0x00001015;
   1050          	//FSMC_Bank1->BTCR[3]  = 0x00010400;
   1051          	//FSMC_Bank1E->BWTR[2] = 0x0fffffff;
   1052          
   1053          	/* Bank1_SRAM1 is configured as follow: */
   1054          	{
   1055          		FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
   1056          		FSMC_NORSRAMTimingInitTypeDef p; 
   1057          
   1058          
   1059          		p.FSMC_AddressSetupTime 		= 3;		// 0~15, 1 ~= 16ns
   \   00000244   0x2003             MOVS     R0,#+3
   \   00000246   0x9000             STR      R0,[SP, #+0]
   1060          		p.FSMC_AddressHoldTime 			= 1;			// 1~15,
   \   00000248   0x2001             MOVS     R0,#+1
   \   0000024A   0x9001             STR      R0,[SP, #+4]
   1061          		p.FSMC_DataSetupTime 			= 7;			// 1~255
   \   0000024C   0x2007             MOVS     R0,#+7
   \   0000024E   0x9002             STR      R0,[SP, #+8]
   1062          		p.FSMC_BusTurnAroundDuration 	= 1; 	// 0~15
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0x9003             STR      R0,[SP, #+12]
   1063          		p.FSMC_CLKDivision 				= 2;				// 64MHz
   \   00000254   0x2002             MOVS     R0,#+2
   \   00000256   0x9004             STR      R0,[SP, #+16]
   1064          		p.FSMC_DataLatency 				= 2;
   \   00000258   0x9005             STR      R0,[SP, #+20]
   1065          		p.FSMC_AccessMode 				= FSMC_AccessMode_A;
   \   0000025A   0x2000             MOVS     R0,#+0
   \   0000025C   0x9006             STR      R0,[SP, #+24]
   1066          
   1067          		FSMC_NORSRAMInitStructure.FSMC_Bank 			= FSMC_Bank1_NORSRAM3;
   \   0000025E   0x2004             MOVS     R0,#+4
   \   00000260   0x9007             STR      R0,[SP, #+28]
   1068          		FSMC_NORSRAMInitStructure.FSMC_DataAddressMux 	= FSMC_DataAddressMux_Disable;
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x9008             STR      R0,[SP, #+32]
   1069          		FSMC_NORSRAMInitStructure.FSMC_MemoryType 		= FSMC_MemoryType_PSRAM;
   \   00000266   0x2004             MOVS     R0,#+4
   \   00000268   0x9009             STR      R0,[SP, #+36]
   1070          		FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth 	= FSMC_MemoryDataWidth_16b;
   \   0000026A   0x2010             MOVS     R0,#+16
   \   0000026C   0x900A             STR      R0,[SP, #+40]
   1071          		FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode 	= FSMC_BurstAccessMode_Disable;
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x900B             STR      R0,[SP, #+44]
   1072          		FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
   \   00000272   0x900C             STR      R0,[SP, #+48]
   1073          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity 	= FSMC_WaitSignalPolarity_Low;
   \   00000274   0x900D             STR      R0,[SP, #+52]
   1074          		FSMC_NORSRAMInitStructure.FSMC_WrapMode 			= FSMC_WrapMode_Disable;
   \   00000276   0x900E             STR      R0,[SP, #+56]
   1075          		FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive 	= FSMC_WaitSignalActive_BeforeWaitState;
   \   00000278   0x900F             STR      R0,[SP, #+60]
   1076          		FSMC_NORSRAMInitStructure.FSMC_WriteOperation 		= FSMC_WriteOperation_Enable;
   \   0000027A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000027E   0x9010             STR      R0,[SP, #+64]
   1077          		FSMC_NORSRAMInitStructure.FSMC_WaitSignal 			= FSMC_WaitSignal_Disable;
   \   00000280   0x2000             MOVS     R0,#+0
   \   00000282   0x9011             STR      R0,[SP, #+68]
   1078          		FSMC_NORSRAMInitStructure.FSMC_ExtendedMode 		= FSMC_ExtendedMode_Disable;
   \   00000284   0x9012             STR      R0,[SP, #+72]
   1079          		FSMC_NORSRAMInitStructure.FSMC_WriteBurst 			= FSMC_WriteBurst_Disable;
   \   00000286   0x9013             STR      R0,[SP, #+76]
   1080          		FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   00000288   0xA800             ADD      R0,SP,#+0
   \   0000028A   0x9014             STR      R0,[SP, #+80]
   1081          		FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct 	= &p;
   \   0000028C   0x9015             STR      R0,[SP, #+84]
   1082          
   1083          
   1084          
   1085          		FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
   \   0000028E   0x2004             MOVS     R0,#+4
   \   00000290   0x9007             STR      R0,[SP, #+28]
   1086          		FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
   \   00000292   0xA807             ADD      R0,SP,#+28
   \   00000294   0x.... 0x....      BL       FSMC_NORSRAMInit
   1087          		/*!< Enable FSMC Bank1_SRAM3 Bank */
   1088          		FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE); 
   \   00000298   0x2101             MOVS     R1,#+1
   \   0000029A   0x2004             MOVS     R0,#+4
   \   0000029C                      REQUIRE ?Subroutine0
   \   0000029C                      ;; // Fall through to label ?Subroutine0
   1089            	}
   1090            
   1091          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xFEF6FFFF         DC32     0xfef6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x24003010         DC32     0x24003010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x017D7840         DC32     0x17d7840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     AHBPrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40023C00         DC32     0x40023c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x40021400         DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x40021800         DC32     0x40021800
   1092          
   1093          
   1094          //#endif /* DATA_IN_ExtSRAM */
   1095          
   1096          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  SetSysClock
        0  SystemCoreClockUpdate
        8  SystemInit
               8 -> SetSysClock
               0 -> __iar_program_start
      104  SystemInit_ExtMemCtl
             104 -> FSMC_NORSRAMCmd
             104 -> FSMC_NORSRAMInit
             104 -> GPIOPortInit
      112  SystemInit_PSRAM0Ctl
             112 -> FSMC_NORSRAMCmd
             112 -> FSMC_NORSRAMInit
             112 -> GPIOPortInit
      112  SystemInit_PSRAM1Ctl
             112 -> FSMC_NORSRAMCmd
             112 -> FSMC_NORSRAMInit
             112 -> GPIOPortInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       8  ?Subroutine0
      20  AHBPrescTable
          SystemCoreClock
     214  SetSysClock
     100  SystemCoreClockUpdate
      48  SystemInit
     540  SystemInit_ExtMemCtl
     648  SystemInit_PSRAM0Ctl
     668  SystemInit_PSRAM1Ctl

 
    20 bytes in section .data
 2 278 bytes in section .text
 
 2 278 bytes of CODE memory
    20 bytes of DATA memory

Errors: none
Warnings: none

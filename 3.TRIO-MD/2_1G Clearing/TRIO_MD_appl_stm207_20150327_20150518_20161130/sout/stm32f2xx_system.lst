###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     30/Aug/2012  21:21:15 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Work\Project\2012\NL_INBUILD\STM32F2xx_StdPeriph_Driv #
#                    er\stm32f2xx_system.c                                    #
#    Command line =  D:\Work\Project\2012\NL_INBUILD\STM32F2xx_StdPeriph_Driv #
#                    er\stm32f2xx_system.c -D OS_INCLUDED -D APPL_SRC -lcN    #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\ -o           #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\              #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Programming\IAR Systems\Embedded       #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Normal.h" -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\include\ -I        #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\..\..\STM32F2xx_St #
#                    dPeriph_Driver\ -I D:\Work\Project\2012\NL_INBUILD\FW\MU #
#                    \..\..\STM32F2xx_StdPeriph_Driver\inc\ -I                #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-CPU\ -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-LIB\ -I         #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uCOS-II\Ports\ -I  #
#                    D:\Work\Project\2012\NL_INBUILD\FW\MU\uCOS-II\Source\    #
#                    -I D:\Work\Project\2012\NL_INBUILD\FW\MU\uC-Probe\ -Oh   #
#                    --use_c++_inline                                         #
#    List file    =  D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\stm32f2xx_sys #
#                    tem.lst                                                  #
#    Object file  =  D:\Work\Project\2012\NL_INBUILD\FW\MU\sout\stm32f2xx_sys #
#                    tem.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Work\Project\2012\NL_INBUILD\STM32F2xx_StdPeriph_Driver\stm32f2xx_system.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f2xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    18-April-2011
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F2xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          "STM32f2xx_Clock_Configuration_V1.0.0.xls"
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f2xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f2xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f2xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F2xx device revision    | Rev B and Y
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 120000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 120000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 25000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 25
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 240
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 5
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Flash Latency(WS)                      | 3
     78            *-----------------------------------------------------------------------------
     79            *        Prefetch Buffer                        | ON
     80            *-----------------------------------------------------------------------------
     81            *        Instruction cache                      | ON
     82            *-----------------------------------------------------------------------------
     83            *        Data cache                             | ON
     84            *-----------------------------------------------------------------------------
     85            *        Require 48MHz for USB OTG FS,          | Enabled
     86            *        SDIO and RNG clock                     |
     87            *-----------------------------------------------------------------------------
     88            *=============================================================================
     89            ****************************************************************************** 
     90            * @attention
     91            *
     92            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     93            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     94            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     95            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     96            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     97            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     98            *
     99            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
    100            ******************************************************************************  
    101            */
    102          
    103          /** @addtogroup CMSIS
    104            * @{
    105            */
    106          
    107          /** @addtogroup stm32f2xx_system
    108            * @{
    109            */  
    110            
    111          /** @addtogroup STM32F2xx_System_Private_Includes
    112            * @{
    113            */
    114          
    115          #include "stm32f2xx_system.h"
    116          
    117          /**
    118            * @}
    119            */
    120          
    121          /** @addtogroup STM32F2xx_System_Private_TypesDefinitions
    122            * @{
    123            */
    124          
    125          /**
    126            * @}
    127            */
    128          
    129          /** @addtogroup STM32F2xx_System_Private_Defines
    130            * @{
    131            */
    132          
    133          /*!< Uncomment the following line if you need to use external SRAM mounted
    134               on STM322xG_EVAL board as data memory  */
    135          /* #define DATA_IN_ExtSRAM */
    136          
    137          /**
    138            * @}
    139            */
    140          
    141          /** @addtogroup STM32F2xx_System_Private_Macros
    142            * @{
    143            */
    144          
    145          /**
    146            * @}
    147            */
    148          
    149          /** @addtogroup STM32F2xx_System_Private_Variables
    150            * @{
    151            */
    152          
    153            uint32_t SystemCoreClock = 120000000;
    154          
    155            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    156          
    157          /**
    158            * @}
    159            */
    160          
    161          
    162          
    163          /** @addtogroup STM32F2xx_System_Private_Functions
    164            * @{
    165            */
    166          
    167          /**
    168            * @brief  Setup the microcontroller system
    169            *         Initialize the Embedded Flash Interface, the PLL and update the 
    170            *         SystemFrequency variable.
    171            * @param  None
    172            * @retval None
    173            */
    174          
    175          void SystemInit(void)
    176          {
    177          	/* Reset the RCC clock configuration to the default reset state ------------*/
    178          	/* Set HSION bit */
    179          	/* Reset HSEON, CSSON and PLLON bits */
    180          	RCC->CR &= (uint32_t)0xFEF6FFFF;
    181          
    182          	/* Reset PLLCFGR register */
    183          	RCC->PLLCFGR = 0x24003010;
    184          
    185          	/* Reset HSEBYP bit */
    186          	RCC->CR &= (uint32_t)0xFFFBFFFF;
    187          
    188          	/* Disable all interrupts */
    189          	RCC->CIR = 0x00000000;
    190          
    191          #ifdef DATA_IN_ExtSRAM
    192            	SystemInit_ExtMemCtl(); 
    193          #endif /* DATA_IN_ExtSRAM */
    194                   
    195          	/* Configure the System clock source, PLL Multiplier and Divider factors, 
    196              	AHB/APBx prescalers and Flash settings ----------------------------------*/
    197          #if !defined (APPL_SRC)
    198          	SetSysClock(TRUE);
    199          #else
    200          	SetSysClock(0);
    201          #endif
    202            	/* Configure the Vector Table location add offset address ------------------*/
    203          #ifdef VECT_TAB_SRAM
    204          	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; 	/* Vector Table Relocation in Internal SRAM */
    205          #else
    206          	#if !defined (APPL_SRC)
    207          		SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; 	/* Vector Table Relocation in Internal FLASH */
    208          	#endif /* APPL_SRC */
    209          #endif /* VECT_TAB_SRAM */
    210          
    211          #if defined (APPL_SRC)
    212          	__iar_program_start();
    213          #endif
    214          }
    215          
    216          /**
    217            * @brief  Update SystemCoreClock variable according to Clock Register Values.
    218            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    219            *         be used by the user application to setup the SysTick timer or configure
    220            *         other parameters.
    221            *           
    222            * @note   Each time the core clock (HCLK) changes, this function must be called
    223            *         to update SystemCoreClock variable value. Otherwise, any configuration
    224            *         based on this variable will be incorrect.         
    225            *     
    226            * @note   - The system frequency computed by this function is not the real 
    227            *           frequency in the chip. It is calculated based on the predefined 
    228            *           constant and the selected clock source:
    229            *             
    230            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    231            *                                              
    232            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    233            *                          
    234            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    235            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    236            *         
    237            *         (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
    238            *             16 MHz) but the real value may vary depending on the variations
    239            *             in voltage and temperature.   
    240            *    
    241            *         (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
    242            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    243            *              frequency of the crystal used. Otherwise, this function may
    244            *              have wrong result.
    245            *                
    246            *         - The result of this function could be not correct when using fractional
    247            *           value for HSE crystal.
    248            *     
    249            * @param  None
    250            * @retval None
    251            */
    252          void SystemCoreClockUpdate(void)
    253          {
    254            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    255            
    256            /* Get SYSCLK source -------------------------------------------------------*/
    257            tmp = RCC->CFGR & RCC_CFGR_SWS;
    258          
    259            switch (tmp)
    260            {
    261              case 0x00:  /* HSI used as system clock source */
    262                SystemCoreClock = HSI_VALUE;
    263                break;
    264              case 0x04:  /* HSE used as system clock source */
    265                SystemCoreClock = HSE_VALUE;
    266                break;
    267              case 0x08:  /* PLL used as system clock source */
    268          
    269                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    270                   SYSCLK = PLL_VCO / PLL_P
    271                   */    
    272                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    273                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    274                
    275                if (pllsource != 0)
    276                {
    277                  /* HSE used as PLL clock source */
    278                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    279                }
    280                else
    281                {
    282                  /* HSI used as PLL clock source */
    283                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    284                }
    285          
    286                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    287                SystemCoreClock = pllvco/pllp;
    288                break;
    289              default:
    290                SystemCoreClock = HSI_VALUE;
    291                break;
    292            }
    293            /* Compute HCLK frequency --------------------------------------------------*/
    294            /* Get HCLK prescaler */
    295            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    296            /* HCLK frequency */
    297            SystemCoreClock >>= tmp;
    298          }
    299          
    300          /**
    301            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    302            *         AHB/APBx prescalers and Flash settings
    303            * @Note   This function should be called only once the RCC clock configuration  
    304            *         is reset to the default reset state (done in SystemInit() function).   
    305            * @param  None
    306            * @retval None
    307            */
    308          static void SetSysClock(u8 IsItHSE)
    309          {
    310          /******************************************************************************/
    311          /*            PLL (clocked by HSE) used as System clock source                */
    312          /******************************************************************************/
    313          	__IO uint32_t StartUpCounter = 0, HSEStatus = 0x01;
    314          
    315          	vu32 PLLM = 0;
    316          	
    317            	/* Enable HSE */
    318          	if(IsItHSE)
    319          	{
    320          		RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    321          
    322          		/* Wait till HSE is ready and if Time out is reached exit */
    323          		do
    324          		{
    325          			HSEStatus = RCC->CR & RCC_CR_HSERDY;
    326          			StartUpCounter++;
    327          		} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    328          
    329          		if ((RCC->CR & RCC_CR_HSERDY) != RESET)	IsItHSE = SET;
    330          		else									IsItHSE = RESET;
    331          	}
    332          	else{
    333          		//RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    334          	}
    335          
    336          	if(IsItHSE)
    337          	{
    338          		PLLM = HSE_VALUE/1000000;
    339          
    340          	}
    341          	else
    342          	{
    343          		PLLM = HSI_VALUE/1000000;
    344          	}
    345          
    346          	{
    347          	    /* HCLK = SYSCLK / 1*/
    348          	    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    349          	      
    350          	    /* PCLK2 = HCLK / 2*/
    351          	    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    352          	    
    353          	    /* PCLK1 = HCLK / 4*/
    354          	    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
    355          
    356          	    /* Configure the main PLL */
    357          	    RCC->__B.PLLCFGR.PLLP = (PLL_P >> 1)-1;
    358          	    RCC->__B.PLLCFGR.PLLM = PLLM;
    359          	    RCC->__B.PLLCFGR.PLLN = PLL_N;
    360          	    RCC->__B.PLLCFGR.PLLQ = PLL_Q;
    361          	    RCC->__B.PLLCFGR.PLLSRC = IsItHSE;
    362          
    363          	    /* Enable the main PLL */
    364          	    RCC->CR |= RCC_CR_PLLON;
    365          
    366          	    /* Wait till the main PLL is ready */
    367          	    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    368          	    {
    369          	    }
    370          	   
    371          	    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    372          	    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
    373          
    374          	    /* Select the main PLL as system clock source */
    375          	    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    376          	    RCC->CFGR |= RCC_CFGR_SW_PLL;
    377          
    378          	    /* Wait till the main PLL is used as system clock source */
    379          	    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
    380          	    {
    381          	    }
    382          	 }	
    383          }
    384          
    385          /**
    386            * @brief  Setup the external memory controller. Called in startup_stm32f2xx.s
    387            *         before jump to __main
    388            * @param  None
    389            * @retval None
    390            */
    391          #ifdef DATA_IN_ExtSRAM
    392          /**
    393            * @brief  Setup the external memory controller.
    394            *         Called in startup_stm32f2xx.s before jump to main.
    395            *         This function configures the external SRAM mounted on STM322xG_EVAL board
    396            *         This SRAM will be used as program data memory (including heap and stack).
    397            * @param  None
    398            * @retval None
    399            */
    400          void SystemInit_ExtMemCtl(void)
    401          {
    402          /*-- GPIOs Configuration -----------------------------------------------------*/
    403          /*
    404           +-------------------+--------------------+------------------+------------------+
    405           +                       SRAM pins assignment                                  +
    406           +-------------------+--------------------+------------------+------------------+
    407           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    408           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    409           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    410           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    411           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    412           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    413           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    414           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    415           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    416           | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    417           | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    418           +-------------------+--------------------+
    419          */
    420             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    421            RCC->AHB1ENR   = 0x00000078;
    422            
    423            /* Connect PDx pins to FSMC Alternate function */
    424            GPIOD->AFR[0]  = 0x00cc00cc;
    425            GPIOD->AFR[1]  = 0xcc0ccccc;
    426            /* Configure PDx pins in Alternate function mode */  
    427            GPIOD->MODER   = 0xa2aa0a0a;
    428            /* Configure PDx pins speed to 100 MHz */  
    429            GPIOD->OSPEEDR = 0xf3ff0f0f;
    430            /* Configure PDx pins Output type to push-pull */  
    431            GPIOD->OTYPER  = 0x00000000;
    432            /* No pull-up, pull-down for PDx pins */ 
    433            GPIOD->PUPDR   = 0x00000000;
    434          
    435            /* Connect PEx pins to FSMC Alternate function */
    436            GPIOE->AFR[0]  = 0xc00000cc;
    437            GPIOE->AFR[1]  = 0xcccccccc;
    438            /* Configure PEx pins in Alternate function mode */ 
    439            GPIOE->MODER   = 0xaaaa800a;
    440            /* Configure PEx pins speed to 100 MHz */ 
    441            GPIOE->OSPEEDR = 0xffffc00f;
    442            /* Configure PEx pins Output type to push-pull */  
    443            GPIOE->OTYPER  = 0x00000000;
    444            /* No pull-up, pull-down for PEx pins */ 
    445            GPIOE->PUPDR   = 0x00000000;
    446          
    447            /* Connect PFx pins to FSMC Alternate function */
    448            GPIOF->AFR[0]  = 0x00cccccc;
    449            GPIOF->AFR[1]  = 0xcccc0000;
    450            /* Configure PFx pins in Alternate function mode */   
    451            GPIOF->MODER   = 0xaa000aaa;
    452            /* Configure PFx pins speed to 100 MHz */ 
    453            GPIOF->OSPEEDR = 0xff000fff;
    454            /* Configure PFx pins Output type to push-pull */  
    455            GPIOF->OTYPER  = 0x00000000;
    456            /* No pull-up, pull-down for PFx pins */ 
    457            GPIOF->PUPDR   = 0x00000000;
    458          
    459            /* Connect PGx pins to FSMC Alternate function */
    460            GPIOG->AFR[0]  = 0x00cccccc;
    461            GPIOG->AFR[1]  = 0x000000c0;
    462            /* Configure PGx pins in Alternate function mode */ 
    463            GPIOG->MODER   = 0x00080aaa;
    464            /* Configure PGx pins speed to 100 MHz */ 
    465            GPIOG->OSPEEDR = 0x000c0fff;
    466            /* Configure PGx pins Output type to push-pull */  
    467            GPIOG->OTYPER  = 0x00000000;
    468            /* No pull-up, pull-down for PGx pins */ 
    469            GPIOG->PUPDR   = 0x00000000;
    470            
    471          /*-- FSMC Configuration ------------------------------------------------------*/
    472            /* Enable the FSMC interface clock */
    473            RCC->AHB3ENR         = 0x00000001;
    474          
    475            /* Configure and enable Bank1_SRAM2 */
    476            FSMC_Bank1->BTCR[2]  = 0x00001015;
    477            FSMC_Bank1->BTCR[3]  = 0x00010400;
    478            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    479          /*
    480            Bank1_SRAM2 is configured as follow:
    481          
    482            p.FSMC_AddressSetupTime = 0;
    483            p.FSMC_AddressHoldTime = 0;
    484            p.FSMC_DataSetupTime = 4;
    485            p.FSMC_BusTurnAroundDuration = 1;
    486            p.FSMC_CLKDivision = 0;
    487            p.FSMC_DataLatency = 0;
    488            p.FSMC_AccessMode = FSMC_AccessMode_A;
    489          
    490            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    491            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    492            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
    493            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    494            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    495            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    496            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    497            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    498            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    499            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    500            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    501            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    502            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    503            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    504            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    505          */
    506            
    507          }
    508          #endif /* DATA_IN_ExtSRAM */
    509          
    510          
    511          /**
    512            * @}
    513            */
    514          
    515          /**
    516            * @}
    517            */
    518            
    519          /**
    520            * @}
    521            */
    522          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     SetSysClock               12
     SystemCoreClockUpdate      0
     SystemInit                 8


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     AHBPrescTable           20
     SystemCoreClock
     SystemInit              42
     SystemCoreClockUpdate   86
     SetSysClock            194
     ??DataTable2             4
     ??DataTable2_1           4
     ??DataTable2_2           4
     ??DataTable2_3           4
     ??DataTable2_4           4
     ??DataTable2_5           4
     ??DataTable2_6           4
     ??DataTable2_7           4

 
  20 bytes in section .data
 354 bytes in section .text
 
 354 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none

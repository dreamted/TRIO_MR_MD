###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     26/Aug/2012  04:04:36 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\stm32\fw\stm207_ucos_20120825\uCOS-II\So #
#                    urce\os_mutex.c                                          #
#    Command line =  C:\user\project\stm32\fw\stm207_ucos_20120825\uCOS-II\So #
#                    urce\os_mutex.c -D OS_INCLUDED -D APPL_SRC -lcN          #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\sout\ -lB  #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\sout\ -o   #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\sout\      #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\compiler\ewarm                         #
#                    6.2\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\include\   #
#                    -I C:\user\project\stm32\fw\stm207_ucos_20120825\..\..\. #
#                    .\stm32\STM32F2xx_StdPeriph_Driver\ -I                   #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\..\..\..\s #
#                    tm32\STM32F2xx_StdPeriph_Driver\inc\ -I                  #
#                    C:\user\project\stm32\fw\stm207_ucos_20120825\uC-CPU\    #
#                    -I C:\user\project\stm32\fw\stm207_ucos_20120825\uC-LIB\ #
#                     -I C:\user\project\stm32\fw\stm207_ucos_20120825\uCOS-I #
#                    I\Ports\ -I C:\user\project\stm32\fw\stm207_ucos_2012082 #
#                    5\uCOS-II\Source\ -I C:\user\project\stm32\fw\stm207_uco #
#                    s_20120825\uC-Probe\ -Oh --use_c++_inline                #
#                    --require_prototypes                                     #
#    List file    =  C:\user\project\stm32\fw\stm207_ucos_20120825\sout\os_mu #
#                    tex.lst                                                  #
#    Object file  =  C:\user\project\stm32\fw\stm207_ucos_20120825\sout\os_mu #
#                    tex.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\stm32\fw\stm207_ucos_20120825\uCOS-II\Source\os_mutex.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                  MUTUAL EXCLUSION SEMAPHORE MANAGEMENT
      6          *
      7          *                          (c) Copyright 1992-2007, Jean J. Labrosse, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MUTEX.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.85
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          
     26          #include <ucos_ii.h>
     27          #endif
     28          
     29          
     30          #if OS_MUTEX_EN > 0
     31          /*
     32          *********************************************************************************************************
     33          *                                            LOCAL CONSTANTS
     34          *********************************************************************************************************
     35          */
     36          
     37          #define  OS_MUTEX_KEEP_LOWER_8   (INT16U)0x00FFu
     38          #define  OS_MUTEX_KEEP_UPPER_8   (INT16U)0xFF00u
     39          
     40          #define  OS_MUTEX_AVAILABLE      (INT16U)0x00FFu
     41          
     42          /*
     43          *********************************************************************************************************
     44          *                                            LOCAL CONSTANTS
     45          *********************************************************************************************************
     46          */
     47          
     48          static  void  OSMutex_RdyAtPrio(OS_TCB *ptcb, INT8U prio);
     49          
     50          /*$PAGE*/
     51          /*
     52          *********************************************************************************************************
     53          *                                   ACCEPT MUTUAL EXCLUSION SEMAPHORE
     54          *
     55          * Description: This  function checks the mutual exclusion semaphore to see if a resource is available.
     56          *              Unlike OSMutexPend(), OSMutexAccept() does not suspend the calling task if the resource is
     57          *              not available or the event did not occur.
     58          *
     59          * Arguments  : pevent     is a pointer to the event control block
     60          *
     61          *              perr       is a pointer to an error code which will be returned to your application:
     62          *                            OS_ERR_NONE         if the call was successful.
     63          *                            OS_ERR_EVENT_TYPE   if 'pevent' is not a pointer to a mutex
     64          *                            OS_ERR_PEVENT_NULL  'pevent' is a NULL pointer
     65          *                            OS_ERR_PEND_ISR     if you called this function from an ISR
     66          *                            OS_ERR_PIP_LOWER    If the priority of the task that owns the Mutex is
     67          *                                                HIGHER (i.e. a lower number) than the PIP.  This error
     68          *                                                indicates that you did not set the PIP higher (lower
     69          *                                                number) than ALL the tasks that compete for the Mutex.
     70          *                                                Unfortunately, this is something that could not be
     71          *                                                detected when the Mutex is created because we don't know
     72          *                                                what tasks will be using the Mutex.
     73          *
     74          * Returns    : == OS_TRUE    if the resource is available, the mutual exclusion semaphore is acquired
     75          *              == OS_FALSE   a) if the resource is not available
     76          *                            b) you didn't pass a pointer to a mutual exclusion semaphore
     77          *                            c) you called this function from an ISR
     78          *
     79          * Warning(s) : This function CANNOT be called from an ISR because mutual exclusion semaphores are
     80          *              intended to be used by tasks only.
     81          *********************************************************************************************************
     82          */
     83          
     84          #if OS_MUTEX_ACCEPT_EN > 0
     85          BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
     86          {
     87              INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
     88          #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
     89              OS_CPU_SR  cpu_sr = 0;
     90          #endif
     91          
     92          
     93          
     94          #if OS_ARG_CHK_EN > 0
     95              if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
     96                  return (OS_FALSE);
     97              }
     98              if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
     99                  *perr = OS_ERR_PEVENT_NULL;
    100                  return (OS_FALSE);
    101              }
    102          #endif
    103              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
    104                  *perr = OS_ERR_EVENT_TYPE;
    105                  return (OS_FALSE);
    106              }
    107              if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
    108                  *perr = OS_ERR_PEND_ISR;
    109                  return (OS_FALSE);
    110              }
    111              OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
    112              pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
    113              if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    114                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
    115                  pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
    116                  pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
    117                  if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
    118                      OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
    119                      *perr = OS_ERR_PIP_LOWER;
    120                  } else {
    121                      OS_EXIT_CRITICAL();
    122                      *perr = OS_ERR_NONE;
    123                  }
    124                  return (OS_TRUE);
    125              }
    126              OS_EXIT_CRITICAL();
    127              *perr = OS_ERR_NONE;
    128              return (OS_FALSE);
    129          }
    130          #endif
    131          
    132          /*$PAGE*/
    133          /*
    134          *********************************************************************************************************
    135          *                                  CREATE A MUTUAL EXCLUSION SEMAPHORE
    136          *
    137          * Description: This function creates a mutual exclusion semaphore.
    138          *
    139          * Arguments  : prio          is the priority to use when accessing the mutual exclusion semaphore.  In
    140          *                            other words, when the semaphore is acquired and a higher priority task
    141          *                            attempts to obtain the semaphore then the priority of the task owning the
    142          *                            semaphore is raised to this priority.  It is assumed that you will specify
    143          *                            a priority that is LOWER in value than ANY of the tasks competing for the
    144          *                            mutex.
    145          *
    146          *              perr          is a pointer to an error code which will be returned to your application:
    147          *                               OS_ERR_NONE         if the call was successful.
    148          *                               OS_ERR_CREATE_ISR   if you attempted to create a MUTEX from an ISR
    149          *                               OS_ERR_PRIO_EXIST   if a task at the priority inheritance priority
    150          *                                                   already exist.
    151          *                               OS_ERR_PEVENT_NULL  No more event control blocks available.
    152          *                               OS_ERR_PRIO_INVALID if the priority you specify is higher that the
    153          *                                                   maximum allowed (i.e. > OS_LOWEST_PRIO)
    154          *
    155          * Returns    : != (void *)0  is a pointer to the event control clock (OS_EVENT) associated with the
    156          *                            created mutex.
    157          *              == (void *)0  if an error is detected.
    158          *
    159          * Note(s)    : 1) The LEAST significant 8 bits of '.OSEventCnt' are used to hold the priority number
    160          *                 of the task owning the mutex or 0xFF if no task owns the mutex.
    161          *
    162          *              2) The MOST  significant 8 bits of '.OSEventCnt' are used to hold the priority number
    163          *                 to use to reduce priority inversion.
    164          *********************************************************************************************************
    165          */
    166          
    167          OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
    168          {
    169              OS_EVENT  *pevent;
    170          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    171              OS_CPU_SR  cpu_sr = 0;
    172          #endif
    173          
    174          
    175          
    176          #if OS_ARG_CHK_EN > 0
    177              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    178                  return ((OS_EVENT *)0);
    179              }
    180              if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
    181                  *perr = OS_ERR_PRIO_INVALID;
    182                  return ((OS_EVENT *)0);
    183              }
    184          #endif
    185              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    186                  *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
    187                  return ((OS_EVENT *)0);
    188              }
    189              OS_ENTER_CRITICAL();
    190              if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
    191                  OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
    192                  *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
    193                  return ((OS_EVENT *)0);
    194              }
    195              OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
    196              pevent             = OSEventFreeList;                  /* Get next free event control block        */
    197              if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
    198                  OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
    199                  OS_EXIT_CRITICAL();
    200                  *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
    201                  return (pevent);
    202              }
    203              OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
    204              OS_EXIT_CRITICAL();
    205              pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
    206              pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
    207              pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
    208          #if OS_EVENT_NAME_SIZE > 1
    209              pevent->OSEventName[0] = '?';
    210              pevent->OSEventName[1] = OS_ASCII_NUL;
    211          #endif
    212              OS_EventWaitListInit(pevent);
    213              *perr                  = OS_ERR_NONE;
    214              return (pevent);
    215          }
    216          
    217          /*$PAGE*/
    218          /*
    219          *********************************************************************************************************
    220          *                                          DELETE A MUTEX
    221          *
    222          * Description: This function deletes a mutual exclusion semaphore and readies all tasks pending on the it.
    223          *
    224          * Arguments  : pevent        is a pointer to the event control block associated with the desired mutex.
    225          *
    226          *              opt           determines delete options as follows:
    227          *                            opt == OS_DEL_NO_PEND   Delete mutex ONLY if no task pending
    228          *                            opt == OS_DEL_ALWAYS    Deletes the mutex even if tasks are waiting.
    229          *                                                    In this case, all the tasks pending will be readied.
    230          *
    231          *              perr          is a pointer to an error code that can contain one of the following values:
    232          *                            OS_ERR_NONE             The call was successful and the mutex was deleted
    233          *                            OS_ERR_DEL_ISR          If you attempted to delete the MUTEX from an ISR
    234          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    235          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mutex
    236          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
    237          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    238          *
    239          * Returns    : pevent        upon error
    240          *              (OS_EVENT *)0 if the mutex was successfully deleted.
    241          *
    242          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    243          *                 the mutex MUST check the return code of OSMutexPend().
    244          *
    245          *              2) This call can potentially disable interrupts for a long time.  The interrupt disable
    246          *                 time is directly proportional to the number of tasks waiting on the mutex.
    247          *
    248          *              3) Because ALL tasks pending on the mutex will be readied, you MUST be careful because the
    249          *                 resource(s) will no longer be guarded by the mutex.
    250          *
    251          *              4) IMPORTANT: In the 'OS_DEL_ALWAYS' case, we assume that the owner of the Mutex (if there
    252          *                            is one) is ready-to-run and is thus NOT pending on another kernel object or
    253          *                            has delayed itself.  In other words, if a task owns the mutex being deleted,
    254          *                            that task will be made ready-to-run at its original priority.
    255          *********************************************************************************************************
    256          */
    257          
    258          #if OS_MUTEX_DEL_EN
    259          OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
    260          {
    261              BOOLEAN    tasks_waiting;
    262              OS_EVENT  *pevent_return;
    263              INT8U      pip;                                        /* Priority inheritance priority            */
    264              INT8U      prio;
    265              OS_TCB    *ptcb;
    266          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    267              OS_CPU_SR  cpu_sr = 0;
    268          #endif
    269          
    270          
    271          
    272          #if OS_ARG_CHK_EN > 0
    273              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    274                  return (pevent);
    275              }
    276              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    277                  *perr = OS_ERR_PEVENT_NULL;
    278                  return (pevent);
    279              }
    280          #endif
    281              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    282                  *perr = OS_ERR_EVENT_TYPE;
    283                  return (pevent);
    284              }
    285              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    286                  *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    287                  return (pevent);
    288              }
    289              OS_ENTER_CRITICAL();
    290              if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
    291                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
    292              } else {
    293                  tasks_waiting = OS_FALSE;                          /* No                                       */
    294              }
    295              switch (opt) {
    296                  case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
    297                       if (tasks_waiting == OS_FALSE) {
    298          #if OS_EVENT_NAME_SIZE > 1
    299                           pevent->OSEventName[0] = '?';             /* Unknown name                             */
    300                           pevent->OSEventName[1] = OS_ASCII_NUL;
    301          #endif
    302                           pip                 = (INT8U)(pevent->OSEventCnt >> 8);
    303                           OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
    304                           pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    305                           pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    306                           pevent->OSEventCnt  = 0;
    307                           OSEventFreeList     = pevent;
    308                           OS_EXIT_CRITICAL();
    309                           *perr               = OS_ERR_NONE;
    310                           pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
    311                       } else {
    312                           OS_EXIT_CRITICAL();
    313                           *perr               = OS_ERR_TASK_WAITING;
    314                           pevent_return       = pevent;
    315                       }
    316                       break;
    317          
    318                  case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
    319                       pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
    320                       prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
    321                       ptcb = (OS_TCB *)pevent->OSEventPtr;
    322                       if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
    323                           if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
    324                               OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
    325                           }
    326                       }
    327                       while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
    328                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
    329                       }
    330          #if OS_EVENT_NAME_SIZE > 1
    331                       pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    332                       pevent->OSEventName[1] = OS_ASCII_NUL;
    333          #endif
    334                       pip                 = (INT8U)(pevent->OSEventCnt >> 8);
    335                       OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
    336                       pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    337                       pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
    338                       pevent->OSEventCnt  = 0;
    339                       OSEventFreeList     = pevent;                 /* Get next free event control block        */
    340                       OS_EXIT_CRITICAL();
    341                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    342                           OS_Sched();                               /* Find highest priority task ready to run  */
    343                       }
    344                       *perr         = OS_ERR_NONE;
    345                       pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
    346                       break;
    347          
    348                  default:
    349                       OS_EXIT_CRITICAL();
    350                       *perr         = OS_ERR_INVALID_OPT;
    351                       pevent_return = pevent;
    352                       break;
    353              }
    354              return (pevent_return);
    355          }
    356          #endif
    357          
    358          /*$PAGE*/
    359          /*
    360          *********************************************************************************************************
    361          *                                  PEND ON MUTUAL EXCLUSION SEMAPHORE
    362          *
    363          * Description: This function waits for a mutual exclusion semaphore.
    364          *
    365          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    366          *                            mutex.
    367          *
    368          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    369          *                            wait for the resource up to the amount of time specified by this argument.
    370          *                            If you specify 0, however, your task will wait forever at the specified
    371          *                            mutex or, until the resource becomes available.
    372          *
    373          *              perr          is a pointer to where an error message will be deposited.  Possible error
    374          *                            messages are:
    375          *                               OS_ERR_NONE        The call was successful and your task owns the mutex
    376          *                               OS_ERR_TIMEOUT     The mutex was not available within the specified 'timeout'.
    377          *                               OS_ERR_PEND_ABORT  The wait on the mutex was aborted.
    378          *                               OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a mutex
    379          *                               OS_ERR_PEVENT_NULL 'pevent' is a NULL pointer
    380          *                               OS_ERR_PEND_ISR    If you called this function from an ISR and the result
    381          *                                                  would lead to a suspension.
    382          *                               OS_ERR_PIP_LOWER   If the priority of the task that owns the Mutex is
    383          *                                                  HIGHER (i.e. a lower number) than the PIP.  This error
    384          *                                                  indicates that you did not set the PIP higher (lower
    385          *                                                  number) than ALL the tasks that compete for the Mutex.
    386          *                                                  Unfortunately, this is something that could not be
    387          *                                                  detected when the Mutex is created because we don't know
    388          *                                                  what tasks will be using the Mutex.
    389          *                               OS_ERR_PEND_LOCKED If you called this function when the scheduler is locked
    390          *
    391          * Returns    : none
    392          *
    393          * Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.
    394          *
    395          *              2) You MUST NOT change the priority of the task that owns the mutex
    396          *********************************************************************************************************
    397          */
    398          void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
    399          {
    400              INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
    401              INT8U      mprio;                                      /* Mutex owner priority                     */
    402              BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    403              OS_TCB    *ptcb;
    404              OS_EVENT  *pevent2;
    405              INT8U      y;
    406              INT8U      pend_stat;
    407          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    408              OS_CPU_SR  cpu_sr = 0;
    409          #endif
    410          
    411          
    412          
    413          #if OS_ARG_CHK_EN > 0
    414              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    415                  return;
    416              }
    417              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    418                  *perr = OS_ERR_PEVENT_NULL;
    419                  return;
    420              }
    421          #endif
    422              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    423                  *perr = OS_ERR_EVENT_TYPE;
    424                  return;
    425              }
    426              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    427                  *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    428                  return;
    429              }
    430              if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    431                  *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    432                  return;
    433              }
    434              OS_ENTER_CRITICAL();                                
    435              pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
    436                                                                     /* Is Mutex available?                      */
    437              if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    438                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
    439                  pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
    440                  pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
    441                  if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
    442                      OS_EXIT_CRITICAL();                            /*      ... than current task!              */
    443                      *perr = OS_ERR_PIP_LOWER;
    444                  } else {
    445                      OS_EXIT_CRITICAL();
    446                      *perr = OS_ERR_NONE;
    447                  }
    448                  return;
    449              }
    450              mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
    451              ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
    452              if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
    453                  if (mprio > OSTCBCur->OSTCBPrio) {
    454                      y = ptcb->OSTCBY;
    455                      if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
    456                          OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
    457                          if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
    458                              OSRdyGrp &= ~ptcb->OSTCBBitY;
    459                          }
    460                          rdy = OS_TRUE;
    461                      } else {
    462                          pevent2 = ptcb->OSTCBEventPtr;
    463                          if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
    464                              if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
    465                                  pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
    466                              }
    467                          }
    468                          rdy = OS_FALSE;                            /* No                                       */
    469                      }
    470                      ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
    471          #if OS_LOWEST_PRIO <= 63
    472                      ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
    473                      ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
    474                      ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
    475                      ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
    476          #else
    477                      ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
    478                      ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
    479                      ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
    480                      ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
    481          #endif
    482                      if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
    483                          OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
    484                          OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    485                      } else {
    486                          pevent2 = ptcb->OSTCBEventPtr;
    487                          if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
    488                              pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
    489                              pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    490                          }
    491                      }
    492                      OSTCBPrioTbl[pip] = ptcb;
    493                  }
    494              }
    495              OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
    496              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    497              OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
    498              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    499              OS_EXIT_CRITICAL();
    500              OS_Sched();                                       /* Find next highest priority task ready         */
    501              OS_ENTER_CRITICAL();
    502              if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) { /* See if we timed out during the pend           */
    503                  pend_stat = OSTCBCur->OSTCBStatPend;
    504                  OS_EventTOAbort(pevent);
    505                  OS_EXIT_CRITICAL();
    506                  switch (pend_stat) {
    507                      case OS_STAT_PEND_TO:
    508                      default:
    509                           *perr = OS_ERR_TIMEOUT;              /* Indicate that we didn't get mutex within TO   */
    510                           break;
    511          
    512                      case OS_STAT_PEND_ABORT:
    513                           *perr = OS_ERR_PEND_ABORT;           /* Indicate that we aborted getting mutex        */
    514                           break;
    515                  }
    516                  return;
    517              }
    518              OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
    519              OS_EXIT_CRITICAL();
    520              *perr = OS_ERR_NONE;
    521          }
    522          /*$PAGE*/
    523          /*
    524          *********************************************************************************************************
    525          *                                  POST TO A MUTUAL EXCLUSION SEMAPHORE
    526          *
    527          * Description: This function signals a mutual exclusion semaphore
    528          *
    529          * Arguments  : pevent              is a pointer to the event control block associated with the desired
    530          *                                  mutex.
    531          *
    532          * Returns    : OS_ERR_NONE             The call was successful and the mutex was signaled.
    533          *              OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
    534          *              OS_ERR_PEVENT_NULL      'pevent' is a NULL pointer
    535          *              OS_ERR_POST_ISR         Attempted to post from an ISR (not valid for MUTEXes)
    536          *              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.
    537          *              OS_ERR_PIP_LOWER        If the priority of the new task that owns the Mutex is
    538          *                                      HIGHER (i.e. a lower number) than the PIP.  This error
    539          *                                      indicates that you did not set the PIP higher (lower
    540          *                                      number) than ALL the tasks that compete for the Mutex.
    541          *                                      Unfortunately, this is something that could not be
    542          *                                      detected when the Mutex is created because we don't know
    543          *                                      what tasks will be using the Mutex.
    544          *********************************************************************************************************
    545          */
    546          
    547          INT8U  OSMutexPost (OS_EVENT *pevent)
    548          {
    549              INT8U      pip;                                   /* Priority inheritance priority                 */
    550              INT8U      prio;
    551          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    552              OS_CPU_SR  cpu_sr = 0;
    553          #endif
    554          
    555          
    556          
    557              if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    558                  return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
    559              }
    560          #if OS_ARG_CHK_EN > 0
    561              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    562                  return (OS_ERR_PEVENT_NULL);
    563              }
    564          #endif
    565              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
    566                  return (OS_ERR_EVENT_TYPE);
    567              }
    568              OS_ENTER_CRITICAL();
    569              pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
    570              prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
    571              if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
    572                  OS_EXIT_CRITICAL();
    573                  return (OS_ERR_NOT_MUTEX_OWNER);
    574              }
    575              if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
    576                  OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
    577              }
    578              OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
    579              if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
    580                                                                /* Yes, Make HPT waiting for mutex ready         */
    581                  prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
    582                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
    583                  pevent->OSEventCnt |= prio;
    584                  pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
    585                  if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
    586                      OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
    587                      OS_Sched();                               /*      Find highest priority task ready to run  */
    588                      return (OS_ERR_PIP_LOWER);
    589                  } else {
    590                      OS_EXIT_CRITICAL();
    591                      OS_Sched();                               /*      Find highest priority task ready to run  */
    592                      return (OS_ERR_NONE);
    593                  }
    594              }
    595              pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
    596              pevent->OSEventPtr  = (void *)0;
    597              OS_EXIT_CRITICAL();
    598              return (OS_ERR_NONE);
    599          }
    600          /*$PAGE*/
    601          /*
    602          *********************************************************************************************************
    603          *                                     QUERY A MUTUAL EXCLUSION SEMAPHORE
    604          *
    605          * Description: This function obtains information about a mutex
    606          *
    607          * Arguments  : pevent          is a pointer to the event control block associated with the desired mutex
    608          *
    609          *              p_mutex_data    is a pointer to a structure that will contain information about the mutex
    610          *
    611          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    612          *              OS_ERR_QUERY_ISR     If you called this function from an ISR
    613          *              OS_ERR_PEVENT_NULL   If 'pevent'       is a NULL pointer
    614          *              OS_ERR_PDATA_NULL    If 'p_mutex_data' is a NULL pointer
    615          *              OS_ERR_EVENT_TYPE    If you are attempting to obtain data from a non mutex.
    616          *********************************************************************************************************
    617          */
    618          
    619          #if OS_MUTEX_QUERY_EN > 0
    620          INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
    621          {
    622              INT8U      i;
    623          #if OS_LOWEST_PRIO <= 63
    624              INT8U     *psrc;
    625              INT8U     *pdest;
    626          #else
    627              INT16U    *psrc;
    628              INT16U    *pdest;
    629          #endif
    630          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    631              OS_CPU_SR  cpu_sr = 0;
    632          #endif
    633          
    634          
    635          
    636              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    637                  return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
    638              }
    639          #if OS_ARG_CHK_EN > 0
    640              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    641                  return (OS_ERR_PEVENT_NULL);
    642              }
    643              if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
    644                  return (OS_ERR_PDATA_NULL);
    645              }
    646          #endif
    647              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    648                  return (OS_ERR_EVENT_TYPE);
    649              }
    650              OS_ENTER_CRITICAL();
    651              p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
    652              p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
    653              if (p_mutex_data->OSOwnerPrio == 0xFF) {
    654                  p_mutex_data->OSValue = OS_TRUE;
    655              } else {
    656                  p_mutex_data->OSValue = OS_FALSE;
    657              }
    658              p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    659              psrc                      = &pevent->OSEventTbl[0];
    660              pdest                     = &p_mutex_data->OSEventTbl[0];
    661              for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    662                  *pdest++ = *psrc++;
    663              }
    664              OS_EXIT_CRITICAL();
    665              return (OS_ERR_NONE);
    666          }
    667          #endif                                                     /* OS_MUTEX_QUERY_EN                        */
    668          
    669          /*$PAGE*/
    670          /*
    671          *********************************************************************************************************
    672          *                                RESTORE A TASK BACK TO ITS ORIGINAL PRIORITY
    673          *
    674          * Description: This function makes a task ready at the specified priority
    675          *
    676          * Arguments  : ptcb            is a pointer to OS_TCB of the task to make ready
    677          *
    678          *              prio            is the desired priority
    679          *
    680          * Returns    : none
    681          *********************************************************************************************************
    682          */
    683          
    684          static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
    685          {
    686              INT8U   y;
    687          
    688          
    689              y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
    690              OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
    691              if (OSRdyTbl[y] == 0) {
    692                  OSRdyGrp &= ~ptcb->OSTCBBitY;
    693              }
    694              ptcb->OSTCBPrio         = prio;
    695          #if OS_LOWEST_PRIO <= 63
    696              ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
    697              ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
    698              ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
    699              ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
    700          #else
    701              ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    702              ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    703              ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    704              ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
    705          #endif
    706              OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
    707              OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    708              OSTCBPrioTbl[prio]      = ptcb;
    709          }
    710          
    711          
    712          #endif                                                     /* OS_MUTEX_EN                              */

   Maximum stack usage in bytes:

     Function      .cstack
     --------      -------
     OSMutexAccept     16
     OSMutexCreate     24
     OSMutexDel        24
     OSMutexPend       32
     OSMutexPost       24
     OSMutexQuery      16


   Section sizes:

     Function/Label Bytes
     -------------- -----
     OSMutexAccept   106
     OSMutexCreate   112
     ?Subroutine0      6
     OSMutexDel      324
     OSMutexPend     424
     OSMutexPost     252
     OSMutexQuery     98
     ??DataTable5      4
     ??DataTable5_1    4
     ??DataTable5_2    4
     ??DataTable5_3    4
     ??DataTable5_4    4
     ??DataTable5_5    4
     ??DataTable5_6    4

 
 1 350 bytes in section .text
 
 1 350 bytes of CODE memory

Errors: none
Warnings: none

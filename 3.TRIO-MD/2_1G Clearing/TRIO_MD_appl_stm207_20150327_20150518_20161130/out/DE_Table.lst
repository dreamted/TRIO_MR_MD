###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     19/Oct/2013  12:18:48 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\ #
#                    DE_Table.C                                               #
#    Command line =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\ #
#                    DE_Table.C -lC C:\Project\TRIO\2차버전\3.F_W\appl_stm207 #
#                    _20131019\out\ -o C:\Project\TRIO\2차버전\3.F_W\appl_stm #
#                    207_20131019\out\ --endian=little --cpu=Cortex-M3 -e     #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_2013 #
#                    1019\include\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm2 #
#                    07_20131019\STM32F2xx_StdPeriph_Driver_v1212\ -I         #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\STM32 #
#                    F2xx_StdPeriph_Driver_v1212\inc\ -I                      #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\uC-CP #
#                    U\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019 #
#                    \uC-LIB\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20 #
#                    131019\uCOS-II\Ports\ -I C:\Project\TRIO\2차버전\3.F_W\a #
#                    ppl_stm207_20131019\uCOS-II\Source\ -I                   #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\uC-Pr #
#                    obe\ -Oh --use_c++_inline                                #
#    List file    =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\out\D #
#                    E_Table.lst                                              #
#    Object file  =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\out\D #
#                    E_Table.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\DE_Table.C
      1          /*********************************************
      2          * File Name          : DE_Table.c
      3          * Author             :
      4          * Date First Issued  : 10/20/2010
      5          * Description        : This file provides all the port/input/update firmware functions.
      6          * $Revision: 0.1 $
      7          * $Revision date: 2010.10.__
      8          ********************************************************************************/
      9          
     10          #define DE_Table_C
     11          
     12          #include "../include/main.h"
     13          
     14          
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void DefaultValueSet(void)
     17          {
   \                     DefaultValueSet:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
     18          //	__Dnr_Sts *Sts = tDnrSts;
     19          	
     20          	INT8U err = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   8DF80000           STRB     R0,[SP, #+0]
     21          	INT32U i = 0;
   \   0000000A   0024               MOVS     R4,#+0
     22          
     23          	OSSemPend(pBackupSem, 0, &err);
   \   0000000C   ....               LDR.N    R5,??DataTable0
   \   0000000E   00AA               ADD      R2,SP,#+0
   \   00000010   0146               MOV      R1,R0
   \   00000012   2868               LDR      R0,[R5, #+0]
   \   00000014   ........           BL       OSSemPend
     24          	{
     25          		EE_BACK1 *tptr = (EE_BACK1 *)&gEE_BACK1; // Load 1st Area
     26          
     27          		tptr->BackUp.FwdOutUpperLmt_3G[0]		= FwdHighLmt_3G; 
   \   00000018   ....               LDR.N    R6,??DataTable0_1
   \   0000001A   1520               MOVS     R0,#+21
   \   0000001C   F070               STRB     R0,[R6, #+3]
     28          		tptr->BackUp.FwdOutUpperLmt_3G[1]		= 0; 
   \   0000001E   06F20300           ADDW     R0,R6,#+3
   \   00000022   4470               STRB     R4,[R0, #+1]
     29          		tptr->BackUp.FwdOutLowerLmt_3G[0]		= FwdHighLmt_3G - 10; 
   \   00000024   0B21               MOVS     R1,#+11
   \   00000026   8170               STRB     R1,[R0, #+2]
     30          		tptr->BackUp.FwdOutLowerLmt_3G[1]		= 0; 
   \   00000028   C470               STRB     R4,[R0, #+3]
     31          		tptr->BackUp.FwdGainSet_3G				= DefaultGain_3G; 
   \   0000002A   5621               MOVS     R1,#+86
   \   0000002C   0171               STRB     R1,[R0, #+4]
     32          		tptr->BackUp.Rvs0GainSet_3G 			= DefaultGain_3G;
   \   0000002E   8175               STRB     R1,[R0, #+22]
     33          		tptr->BackUp.RvsGainBalance_3G			= DefaultGainBalance;
   \   00000030   0521               MOVS     R1,#+5
   \   00000032   C175               STRB     R1,[R0, #+23]
     34          
     35          //		tptr->BackUp.OverInAlarmLmt_3G			= FwdOverInSDAlmLmt_3G; 
     36          
     37          		tptr->BackUp.FwdOutUpperLmt_2G[0]		= FwdHighLmt_2G; 
   \   00000034   1121               MOVS     R1,#+17
   \   00000036   4171               STRB     R1,[R0, #+5]
     38          		tptr->BackUp.FwdOutUpperLmt_2G[1]		= 0; 
   \   00000038   8471               STRB     R4,[R0, #+6]
     39          		tptr->BackUp.FwdOutLowerLmt_2G[0]		= FwdHighLmt_2G - 10; 
   \   0000003A   0721               MOVS     R1,#+7
   \   0000003C   C171               STRB     R1,[R0, #+7]
     40          		tptr->BackUp.FwdOutLowerLmt_2G[1]		= 0; 
   \   0000003E   0472               STRB     R4,[R0, #+8]
     41          		tptr->BackUp.FwdGainSet_2G				= DefaultGain_2G;
   \   00000040   3E21               MOVS     R1,#+62
   \   00000042   4172               STRB     R1,[R0, #+9]
     42          		tptr->BackUp.Rvs0GainSet_2G 			= DefaultGain_2G;
   \   00000044   0176               STRB     R1,[R0, #+24]
     43          		tptr->BackUp.RvsGainBalance_2G			= DefaultGainBalance;
   \   00000046   0521               MOVS     R1,#+5
   \   00000048   4176               STRB     R1,[R0, #+25]
     44          
     45          //		tptr->BackUp.OverInAlarmLmt_2G			= FwdOverInSDAlmLmt_2G; 
     46          
     47          		tptr->BackUp.FwdOutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
   \   0000004A   1421               MOVS     R1,#+20
   \   0000004C   8172               STRB     R1,[R0, #+10]
     48          		tptr->BackUp.FwdOutUpperLmt_LTE[1]		= 0;
   \   0000004E   C472               STRB     R4,[R0, #+11]
     49          		tptr->BackUp.FwdOutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
   \   00000050   0A21               MOVS     R1,#+10
   \   00000052   0173               STRB     R1,[R0, #+12]
     50          		tptr->BackUp.FwdOutLowerLmt_LTE[1]		= 0;
   \   00000054   4473               STRB     R4,[R0, #+13]
     51          		tptr->BackUp.FwdGainSet_LTE 			= DefaultGain_LTE;
   \   00000056   3E21               MOVS     R1,#+62
   \   00000058   8173               STRB     R1,[R0, #+14]
     52          		tptr->BackUp.Rvs0GainSet_LTE			= DefaultGain_LTE; 
   \   0000005A   8176               STRB     R1,[R0, #+26]
     53          		tptr->BackUp.RvsGainBalance_LTE 		= DefaultGainBalance; 
   \   0000005C   0521               MOVS     R1,#+5
   \   0000005E   C176               STRB     R1,[R0, #+27]
     54          
     55          //		tptr->BackUp.OverInAlarmLmt_LTE 		= FwdOverInSDAlmLmt_LTE; 
     56          
     57          //		tptr->BackUp.OverInAlarmLmt_LTE_A1		= FwdOverInSDAlmLmt_LTE_A1; 
     58          
     59          		tptr->BackUp.FwdOutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2;
   \   00000060   1721               MOVS     R1,#+23
   \   00000062   4174               STRB     R1,[R0, #+17]
     60          		tptr->BackUp.FwdOutUpperLmt_LTE_A2[1]	= 0;
   \   00000064   8474               STRB     R4,[R0, #+18]
     61          		tptr->BackUp.FwdOutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2 -10;
   \   00000066   0D21               MOVS     R1,#+13
   \   00000068   C174               STRB     R1,[R0, #+19]
     62          		tptr->BackUp.FwdOutLowerLmt_LTE_A2[1]	= 0;
   \   0000006A   0475               STRB     R4,[R0, #+20]
     63          		tptr->BackUp.FwdGainSet_LTE_A2			= DefaultGain_LTE_A;
   \   0000006C   5221               MOVS     R1,#+82
   \   0000006E   4175               STRB     R1,[R0, #+21]
     64          		tptr->BackUp.Rvs0GainSet_LTE_A2			= DefaultGain_LTE_A;
   \   00000070   0177               STRB     R1,[R0, #+28]
     65          		tptr->BackUp.RvsGainBalance_LTE_A2		= DefaultGainBalance; 
   \   00000072   0521               MOVS     R1,#+5
   \   00000074   4177               STRB     R1,[R0, #+29]
     66          
     67          //		tptr->BackUp.OverInAlarmLmt_LTE_A2		= FwdOverInSDAlmLmt_LTE_A2; 
     68          
     69          
     70          #if 0
     71          		tptr->BackUp.AmpOffCase_2G				= Enable; 
     72          		tptr->BackUp.AmpOffCase_LTE				= Enable; 
     73          		tptr->BackUp.AmpOffCase_3G				= Enable; 
     74          		tptr->BackUp.AmpOffCase_LTE_A1			= Enable; 
     75          		tptr->BackUp.AmpOffCase_LTE_A2			= Enable; 
     76          #endif
     77          		tptr->BackUp.LTE15MUse 					= __NOTUSE; 
   \   00000076   8477               STRB     R4,[R0, #+30]
     78          
     79          		tptr->BackUp.AGCOnOff_3G				= Enable; 
   \   00000078   06F22301           ADDW     R1,R6,#+35
   \   0000007C   8C74               STRB     R4,[R1, #+18]
     80          		tptr->BackUp.AGCOnOff_CDMALTE			= Enable; 
   \   0000007E   CC74               STRB     R4,[R1, #+19]
     81          		tptr->BackUp.AGCOnOff_LTE_A_0 			= Enable;
   \   00000080   8C82               STRH     R4,[R1, #+20]
     82          		
     83          		tptr->BackUp.AGCMode_3G 				= _AGCAvgMode;
     84          		tptr->BackUp.AGCMode_2G 				= _AGCAvgMode;
   \   00000082   8C75               STRB     R4,[R1, #+22]
     85          		tptr->BackUp.AGCMode_LTE				= _AGCPeakMode;
   \   00000084   0122               MOVS     R2,#+1
   \   00000086   CA75               STRB     R2,[R1, #+23]
     86          		tptr->BackUp.AGCMode_LTE_A2				= _AGCPeakMode;
   \   00000088   0A76               STRB     R2,[R1, #+24]
     87          		
     88          		tptr->BackUp.AutoReportPriod			= 0;
   \   0000008A   CC73               STRB     R4,[R1, #+15]
     89          		tptr->BackUp.AutoReportBasePer[0]		= 0;
   \   0000008C   0C82               STRH     R4,[R1, #+16]
     90          		tptr->BackUp.AutoReportBasePer[1]		= 0;
     91          		tptr->BackUp.TPTL_OnOff 				= Disable;
   \   0000008E   4A76               STRB     R2,[R1, #+25]
     92          		tptr->BackUp.TempOffset 				= 0;
   \   00000090   8C76               STRB     R4,[R1, #+26]
     93          		tptr->BackUp.AlarmMask					= Enable;
   \   00000092   CC76               STRB     R4,[R1, #+27]
     94          		tptr->BackUp.VccDet_Lmt.Data			= 4200; 
   \   00000094   41F26802           MOVW     R2,#+4200
   \   00000098   8A83               STRH     R2,[R1, #+28]
     95          		tptr->BackUp.FwdInPwrOffset_2G			= 0; 
   \   0000009A   86F84340           STRB     R4,[R6, #+67]
     96          		tptr->BackUp.FwdInPwrOffset_3G			= 0; 
   \   0000009E   06F24302           ADDW     R2,R6,#+67
   \   000000A2   5470               STRB     R4,[R2, #+1]
     97          		tptr->BackUp.Rvs0OutPwrOffset_2G		= 0; 
   \   000000A4   5480               STRH     R4,[R2, #+2]
     98          		tptr->BackUp.Rvs0OutPwrOffset_3G		= 0; 
     99          		tptr->BackUp.FwdOutPwrOffset_2G 		= 0; 
   \   000000A6   9480               STRH     R4,[R2, #+4]
    100          		tptr->BackUp.FwdOutPwrOffset_3G 		= 0; 
    101          #if 0
    102          		tptr->BackUp.ResetPeriodCountSet[0] 	= 1; 
    103          		tptr->BackUp.ResetPeriodCountSet[1] 	= 0; 
    104          		tptr->BackUp.ResetPeriodCountSet[2] 	= 0; 
    105          #endif
    106          		tptr->BackUp.FwdInPwrOffset_LTE 		= 0;
   \   000000A8   D480               STRH     R4,[R2, #+6]
    107          		tptr->BackUp.FwdOutPwrOffset_LTE		= 0;
    108          		tptr->BackUp.RvsOutPwrOffset_LTE		= 0;
   \   000000AA   1472               STRB     R4,[R2, #+8]
    109          		{
    110          			INT8U i;
    111          
    112          			for(i = 0; i < (sizeof(__DET)); i++)	 *((INT8U *)&(tptr->BackUp.DetOffset.FwdOutAvgPwr_2G) + i) = 0;
   \   000000AC   3246               MOV      R2,R6
   \   000000AE   2323               MOVS     R3,#+35
   \                     ??DefaultValueSet_0:
   \   000000B0   82F85040           STRB     R4,[R2, #+80]
   \   000000B4   521C               ADDS     R2,R2,#+1
   \   000000B6   5B1E               SUBS     R3,R3,#+1
   \   000000B8   FAD1               BNE.N    ??DefaultValueSet_0
    113          		}
    114          		tptr->BackUp.FwdInPwrOffset_LTE_A2		= 0; 
   \   000000BA   86F87540           STRB     R4,[R6, #+117]
    115          		tptr->BackUp.FwdOutPwrOffset_LTE_A2		= 0; 
   \   000000BE   06F27502           ADDW     R2,R6,#+117
   \   000000C2   5470               STRB     R4,[R2, #+1]
    116          		tptr->BackUp.RvsOutPwrOffset_LTE_A2		= 0; 
   \   000000C4   9470               STRB     R4,[R2, #+2]
    117          		tptr->BackUp.RxMaxVal[0]				= 0x30;
   \   000000C6   3023               MOVS     R3,#+48
   \   000000C8   5371               STRB     R3,[R2, #+5]
    118          		tptr->BackUp.RxMaxVal[1]				= 0x61;
   \   000000CA   6123               MOVS     R3,#+97
   \   000000CC   9371               STRB     R3,[R2, #+6]
    119          		tptr->BackUp.RxMinVal[0]				= 0x39;
   \   000000CE   3923               MOVS     R3,#+57
   \   000000D0   D371               STRB     R3,[R2, #+7]
    120          		tptr->BackUp.RxMinVal[1]				= 0x63;
   \   000000D2   6323               MOVS     R3,#+99
   \   000000D4   1372               STRB     R3,[R2, #+8]
    121          		tptr->BackUp.TxMaxVal[0]				= 0x33;
   \   000000D6   3323               MOVS     R3,#+51
   \   000000D8   5372               STRB     R3,[R2, #+9]
    122          		tptr->BackUp.TxMaxVal[1]				= 0x63;
   \   000000DA   6323               MOVS     R3,#+99
   \   000000DC   9372               STRB     R3,[R2, #+10]
    123          		tptr->BackUp.TxMinVal[0]				= 0x62;
   \   000000DE   6223               MOVS     R3,#+98
   \   000000E0   D372               STRB     R3,[R2, #+11]
    124          		tptr->BackUp.TxMinVal[1]				= 0x30;
   \   000000E2   3023               MOVS     R3,#+48
   \   000000E4   1373               STRB     R3,[R2, #+12]
    125          		tptr->BackUp.EcIo						= 0x10;	//-10
   \   000000E6   1023               MOVS     R3,#+16
   \   000000E8   5373               STRB     R3,[R2, #+13]
    126          		tptr->BackUp.Radio_ReportTime[0]		= 0;
   \   000000EA   1474               STRB     R4,[R2, #+16]
    127          		tptr->BackUp.Radio_ReportTime[1]		= 0;
   \   000000EC   5474               STRB     R4,[R2, #+17]
    128          //		tptr->BackUp.Amp1OffCase_LTE			= Enable;
    129          //		tptr->BackUp.Amp1OffCase_LTE_A1			= Enable;
    130          //		tptr->BackUp.Amp1OffCase_LTE_A2			= Enable;
    131          		tptr->BackUp.Band_Select_LTE_A2[0]     = __USE;
   \   000000EE   0123               MOVS     R3,#+1
   \   000000F0   C377               STRB     R3,[R0, #+31]
    132          		tptr->BackUp.Band_Select_LTE_A2[1]     = 1;
   \   000000F2   86F82330           STRB     R3,[R6, #+35]
    133          		tptr->BackUp.Band_Select_LTE_A2[2]     = 0x70;
   \   000000F6   7020               MOVS     R0,#+112
   \   000000F8   4870               STRB     R0,[R1, #+1]
    134          
    135          
    136          		tptr->BackUp.RvsALCLvl_2G 		= RvsHighLmt_2G; 
   \   000000FA   1520               MOVS     R0,#+21
   \   000000FC   86F89800           STRB     R0,[R6, #+152]
    137          		tptr->BackUp.RvsALCLvl_3G 		= RvsHighLmt_2G; 
   \   00000100   06F29800           ADDW     R0,R6,#+152
   \   00000104   1523               MOVS     R3,#+21
   \   00000106   C370               STRB     R3,[R0, #+3]
    138          		tptr->BackUp.RvsALCLvl_LTE 		= RvsHighLmt_2G; 
   \   00000108   4370               STRB     R3,[R0, #+1]
    139          		tptr->BackUp.RvsALCLvl_LTE_A2 	= RvsHighLmt_2G; 
   \   0000010A   8370               STRB     R3,[R0, #+2]
    140          	
    141          		if(iRepeaterType == _TRIO_M)
   \   0000010C   ....               LDR.N    R3,??DataTable0_2
   \   0000010E   1B78               LDRB     R3,[R3, #+0]
   \   00000110   002B               CMP      R3,#+0
   \   00000112   0CBF               ITE      EQ 
   \   00000114   40F28A73           MOVWEQ   R3,#+1930
   \   00000118   40F2C673           MOVWNE   R3,#+1990
    142          		{
    143          			tptr->BackUp.DCOffSet = 1930;
    144          		}
    145          		else
    146          		{
    147          
    148          			tptr->BackUp.DCOffSet = 1990;
   \   0000011C   0381               STRH     R3,[R0, #+8]
    149          		}
    150          
    151          #if 0
    152          		tptr->BackUp.FemtocellUseOnOff.LTE = __NOTUSE;
    153          		tptr->BackUp.FemtocellUseOnOff.LTE_A1 = __NOTUSE;
    154          		tptr->BackUp.FemtocellUseOnOff.LTE_A2 = __NOTUSE;
    155          
    156          		tptr->BackUp.FemtocellUseOnOff.LTE_1= __NOTUSE;
    157          		tptr->BackUp.FemtocellUseOnOff.LTE_A1_1 = __NOTUSE;
    158          		tptr->BackUp.FemtocellUseOnOff.LTE_A2_1 = __NOTUSE;
    159          #endif
    160          		tptr->BackUp.FemtocellUseOnOff	= 0x00;
   \   0000011E   8C70               STRB     R4,[R1, #+2]
    161          
    162          		tptr->BackUp.AutoReportPriod = 0x05;
   \   00000120   0520               MOVS     R0,#+5
   \   00000122   C873               STRB     R0,[R1, #+15]
    163          
    164          		tptr->BackUp.Radio_ReportPeriod[0] = 0x09;
   \   00000124   0920               MOVS     R0,#+9
   \   00000126   9074               STRB     R0,[R2, #+18]
    165          		tptr->BackUp.Radio_ReportPeriod[1] = 0x10;
   \   00000128   1020               MOVS     R0,#+16
   \   0000012A   D074               STRB     R0,[R2, #+19]
    166          
    167          		tptr->BackUp.AR_Mode[0] = 0x03;
   \   0000012C   0320               MOVS     R0,#+3
   \   0000012E   9073               STRB     R0,[R2, #+14]
    168          		tptr->BackUp.AR_Mode[1] = 0x03;
   \   00000130   D073               STRB     R0,[R2, #+15]
    169          
    170          		for(i = 0; i < sizeof(EE_BACK1); i++)
   \   00000132   ....               B.N      ?Subroutine0
    171          		{
    172          			WriteEEprom(At24cDevID, vEE_BACK1Addr + i, *((INT8U *)tptr + i), 0);
    173          		}
    174          	}
    175          	OSSemPost(pBackupSem);
    176          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0023               MOVS     R3,#+0
   \   00000002   16F8012B           LDRB     R2,[R6], #+1
   \   00000006   04F10B01           ADD      R1,R4,#+11
   \   0000000A   89B2               UXTH     R1,R1
   \   0000000C   A020               MOVS     R0,#+160
   \   0000000E   ........           BL       WriteEEprom
   \   00000012   641C               ADDS     R4,R4,#+1
   \   00000014   4FF4FA70           MOV      R0,#+500
   \   00000018   8442               CMP      R4,R0
   \   0000001A   F1D3               BCC.N    ?Subroutine0
   \   0000001C   2868               LDR      R0,[R5, #+0]
   \   0000001E   ........           BL       OSSemPost
   \   00000022   73BD               POP      {R0,R1,R4-R6,PC}  ;; return
    177          

   \                                 In section .text, align 4, keep-with-next
    178          void DefaultTableSet(void)
    179          {
   \                     DefaultTableSet:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    180          	INT8U err = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   8DF80000           STRB     R0,[SP, #+0]
    181          	INT32U i = 0;
   \   0000000A   0024               MOVS     R4,#+0
    182          
    183          	OSSemPend(pBackupSem, 0, &err);
   \   0000000C   034D               LDR.N    R5,??DefaultTableSet_0
   \   0000000E   00AA               ADD      R2,SP,#+0
   \   00000010   0146               MOV      R1,R0
   \   00000012   2868               LDR      R0,[R5, #+0]
   \   00000014   ........           BL       OSSemPend
    184          	
    185          	{
    186          		EE_BACK1 *tptr = (EE_BACK1 *)&gEE_BACK1; // Load 1st Area
    187          
    188          		// default set!!
    189          		tptr->BackUp.FwdOutUpperLmt_3G[0]		= FwdHighLmt_3G; 
   \   00000018   014E               LDR.N    R6,??DefaultTableSet_0+0x4
   \   0000001A   03E0               B.N      ??DefaultTableSet_1
   \                     ??DefaultTableSet_0:
   \   0000001C   ........           DC32     pBackupSem
   \   00000020   ........           DC32     gEE_BACK1
   \                     ??DefaultTableSet_1:
   \   00000024   1520               MOVS     R0,#+21
   \   00000026   F070               STRB     R0,[R6, #+3]
    190          		tptr->BackUp.FwdOutUpperLmt_3G[1]		= 0; 
   \   00000028   3471               STRB     R4,[R6, #+4]
    191          		tptr->BackUp.FwdOutLowerLmt_3G[0]		= FwdHighLmt_3G - 10; 
   \   0000002A   0B20               MOVS     R0,#+11
   \   0000002C   7071               STRB     R0,[R6, #+5]
    192          		tptr->BackUp.FwdOutLowerLmt_3G[1]		= 0; 
   \   0000002E   B471               STRB     R4,[R6, #+6]
    193          		tptr->BackUp.FwdGainSet_3G				= DefaultGain_3G; 
   \   00000030   5620               MOVS     R0,#+86
   \   00000032   F071               STRB     R0,[R6, #+7]
    194          		tptr->BackUp.Rvs0GainSet_3G 			= DefaultGain_3G;
   \   00000034   7076               STRB     R0,[R6, #+25]
    195          		tptr->BackUp.RvsGainBalance_3G			= DefaultGainBalance;
   \   00000036   0520               MOVS     R0,#+5
   \   00000038   B076               STRB     R0,[R6, #+26]
    196          		
    197          //		tptr->BackUp.OverInAlarmLmt_3G			= FwdOverInSDAlmLmt_3G; 
    198          		
    199          		tptr->BackUp.FwdOutUpperLmt_2G[0]		= FwdHighLmt_2G; 
   \   0000003A   1120               MOVS     R0,#+17
   \   0000003C   3072               STRB     R0,[R6, #+8]
    200          		tptr->BackUp.FwdOutUpperLmt_2G[1]		= 0; 
   \   0000003E   7472               STRB     R4,[R6, #+9]
    201          		tptr->BackUp.FwdOutLowerLmt_2G[0]		= FwdHighLmt_2G - 10; 
   \   00000040   0720               MOVS     R0,#+7
   \   00000042   B072               STRB     R0,[R6, #+10]
    202          		tptr->BackUp.FwdOutLowerLmt_2G[1]		= 0; 
   \   00000044   F472               STRB     R4,[R6, #+11]
    203          		tptr->BackUp.FwdGainSet_2G				= DefaultGain_2G;
   \   00000046   3E20               MOVS     R0,#+62
   \   00000048   3073               STRB     R0,[R6, #+12]
    204          		tptr->BackUp.Rvs0GainSet_2G 			= DefaultGain_2G;
   \   0000004A   F076               STRB     R0,[R6, #+27]
    205          		tptr->BackUp.RvsGainBalance_2G			= DefaultGainBalance;
   \   0000004C   0520               MOVS     R0,#+5
   \   0000004E   3077               STRB     R0,[R6, #+28]
    206          		
    207          //		tptr->BackUp.OverInAlarmLmt_2G			= FwdOverInSDAlmLmt_2G; 
    208          		
    209          		tptr->BackUp.FwdOutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
   \   00000050   1420               MOVS     R0,#+20
   \   00000052   7073               STRB     R0,[R6, #+13]
    210          		tptr->BackUp.FwdOutUpperLmt_LTE[1]		= 0;
   \   00000054   B473               STRB     R4,[R6, #+14]
    211          		tptr->BackUp.FwdOutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
   \   00000056   0A20               MOVS     R0,#+10
   \   00000058   F073               STRB     R0,[R6, #+15]
    212          		tptr->BackUp.FwdOutLowerLmt_LTE[1]		= 0;
   \   0000005A   3474               STRB     R4,[R6, #+16]
    213          		tptr->BackUp.FwdGainSet_LTE 			= DefaultGain_LTE;
   \   0000005C   3E20               MOVS     R0,#+62
   \   0000005E   7074               STRB     R0,[R6, #+17]
    214          		tptr->BackUp.Rvs0GainSet_LTE			= DefaultGain_LTE; 
   \   00000060   7077               STRB     R0,[R6, #+29]
    215          		tptr->BackUp.RvsGainBalance_LTE 		= DefaultGainBalance; 
   \   00000062   0520               MOVS     R0,#+5
   \   00000064   B077               STRB     R0,[R6, #+30]
    216          		
    217          //		tptr->BackUp.OverInAlarmLmt_LTE 		= FwdOverInSDAlmLmt_LTE; 
    218          		
    219          	
    220          //		tptr->BackUp.OverInAlarmLmt_LTE_A1		= FwdOverInSDAlmLmt_LTE_A1; 
    221          		
    222          		tptr->BackUp.FwdOutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2;
   \   00000066   1720               MOVS     R0,#+23
   \   00000068   3075               STRB     R0,[R6, #+20]
    223          		tptr->BackUp.FwdOutUpperLmt_LTE_A2[1]	= 0;
   \   0000006A   7475               STRB     R4,[R6, #+21]
    224          		tptr->BackUp.FwdOutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2 -10;
   \   0000006C   0D20               MOVS     R0,#+13
   \   0000006E   B075               STRB     R0,[R6, #+22]
    225          		tptr->BackUp.FwdOutLowerLmt_LTE_A2[1]	= 0;
   \   00000070   F475               STRB     R4,[R6, #+23]
    226          		tptr->BackUp.FwdGainSet_LTE_A2			= DefaultGain_LTE_A;
   \   00000072   5220               MOVS     R0,#+82
   \   00000074   3076               STRB     R0,[R6, #+24]
    227          		tptr->BackUp.Rvs0GainSet_LTE_A2 		= DefaultGain_LTE_A;
   \   00000076   F077               STRB     R0,[R6, #+31]
    228          		tptr->BackUp.RvsGainBalance_LTE_A2		= DefaultGainBalance; 
   \   00000078   0520               MOVS     R0,#+5
   \   0000007A   86F82000           STRB     R0,[R6, #+32]
    229          		
    230          //		tptr->BackUp.OverInAlarmLmt_LTE_A2		= FwdOverInSDAlmLmt_LTE_A2; 
    231          		
    232          	
    233          #if 0		
    234          		tptr->BackUp.AmpOffCase_2G				= Enable; 
    235          		tptr->BackUp.AmpOffCase_LTE 			= Enable; 
    236          		tptr->BackUp.AmpOffCase_3G				= Enable; 
    237          		tptr->BackUp.AmpOffCase_LTE_A1			= Disable; 
    238          		tptr->BackUp.AmpOffCase_LTE_A2			= Disable; 
    239          #endif		
    240          		tptr->BackUp.LTE15MUse					= __NOTUSE; 
   \   0000007E   86F82140           STRB     R4,[R6, #+33]
    241          		
    242          		tptr->BackUp.AGCOnOff_3G				= Enable; 
   \   00000082   86F83540           STRB     R4,[R6, #+53]
    243          		tptr->BackUp.AGCOnOff_CDMALTE			= Enable; 
   \   00000086   F486               STRH     R4,[R6, #+54]
    244          		tptr->BackUp.AGCOnOff_LTE_A_0			= Enable;
    245          		
    246          		tptr->BackUp.AGCMode_3G 				= _AGCAvgMode;
   \   00000088   3487               STRH     R4,[R6, #+56]
    247          		tptr->BackUp.AGCMode_2G 				= _AGCAvgMode;
    248          		tptr->BackUp.AGCMode_LTE				= _AGCPeakMode;
   \   0000008A   0120               MOVS     R0,#+1
   \   0000008C   86F83A00           STRB     R0,[R6, #+58]
    249          		tptr->BackUp.AGCMode_LTE_A2 			= _AGCPeakMode;
   \   00000090   86F83B00           STRB     R0,[R6, #+59]
    250          		
    251          		tptr->BackUp.AutoReportPriod			= 0;
   \   00000094   7486               STRH     R4,[R6, #+50]
    252          		tptr->BackUp.AutoReportBasePer[0]		= 0;
    253          		tptr->BackUp.AutoReportBasePer[1]		= 0;
   \   00000096   86F83440           STRB     R4,[R6, #+52]
    254          		tptr->BackUp.TPTL_OnOff 				= Disable;
   \   0000009A   86F83C00           STRB     R0,[R6, #+60]
    255          		tptr->BackUp.AlarmMask					= Enable;
   \   0000009E   86F83E40           STRB     R4,[R6, #+62]
    256          		tptr->BackUp.VccDet_Lmt.Data			= 4200; 
   \   000000A2   41F26800           MOVW     R0,#+4200
   \   000000A6   A6F83F00           STRH     R0,[R6, #+63]
    257          #if 0
    258          		tptr->BackUp.ResetPeriodCountSet[0] 	= 1; 
    259          		tptr->BackUp.ResetPeriodCountSet[1] 	= 0; 
    260          		tptr->BackUp.ResetPeriodCountSet[2] 	= 0; 
    261          #endif
    262          
    263          #if 1
    264          		tptr->BackUp.RxMaxVal[0]				= 0x30;
   \   000000AA   3020               MOVS     R0,#+48
   \   000000AC   86F87A00           STRB     R0,[R6, #+122]
    265          		tptr->BackUp.RxMaxVal[1]				= 0x61;
   \   000000B0   6120               MOVS     R0,#+97
   \   000000B2   86F87B00           STRB     R0,[R6, #+123]
    266          		tptr->BackUp.RxMinVal[0]				= 0x39;
   \   000000B6   3920               MOVS     R0,#+57
   \   000000B8   86F87C00           STRB     R0,[R6, #+124]
    267          		tptr->BackUp.RxMinVal[1]				= 0x63;
   \   000000BC   6320               MOVS     R0,#+99
   \   000000BE   86F87D00           STRB     R0,[R6, #+125]
    268          		tptr->BackUp.TxMaxVal[0]				= 0x33;
   \   000000C2   3320               MOVS     R0,#+51
   \   000000C4   86F87E00           STRB     R0,[R6, #+126]
    269          		tptr->BackUp.TxMaxVal[1]				= 0x63;
   \   000000C8   6320               MOVS     R0,#+99
   \   000000CA   86F87F00           STRB     R0,[R6, #+127]
    270          		tptr->BackUp.TxMinVal[0]				= 0x62;
   \   000000CE   6220               MOVS     R0,#+98
   \   000000D0   86F88000           STRB     R0,[R6, #+128]
    271          		tptr->BackUp.TxMinVal[1]				= 0x30;
   \   000000D4   3020               MOVS     R0,#+48
   \   000000D6   86F88100           STRB     R0,[R6, #+129]
    272          		tptr->BackUp.EcIo						= 0x10; //-10
   \   000000DA   1020               MOVS     R0,#+16
   \   000000DC   86F88200           STRB     R0,[R6, #+130]
    273          		tptr->BackUp.Radio_ReportTime[0]		= 0;
   \   000000E0   86F88540           STRB     R4,[R6, #+133]
    274          		tptr->BackUp.Radio_ReportTime[1]		= 0;
   \   000000E4   86F88640           STRB     R4,[R6, #+134]
    275          #endif
    276          
    277          
    278          #if 0
    279          		tptr->BackUp.Amp1OffCase_LTE				= Enable;
    280          		tptr->BackUp.Amp1OffCase_LTE_A1 			= Disable;
    281          		tptr->BackUp.Amp1OffCase_LTE_A2 			= Disable;
    282          #endif		
    283          		tptr->BackUp.Band_Select_LTE_A2[0]	   = __NOTUSE;
   \   000000E8   86F82240           STRB     R4,[R6, #+34]
    284          		tptr->BackUp.Band_Select_LTE_A2[1]	   = 1;
   \   000000EC   0120               MOVS     R0,#+1
   \   000000EE   86F82300           STRB     R0,[R6, #+35]
    285          		tptr->BackUp.Band_Select_LTE_A2[2]	   = 0x70;
   \   000000F2   7020               MOVS     R0,#+112
   \   000000F4   86F82400           STRB     R0,[R6, #+36]
    286          		
    287          		
    288          		tptr->BackUp.RvsALCLvl_2G		= RvsHighLmt_2G; 
   \   000000F8   1520               MOVS     R0,#+21
   \   000000FA   86F89800           STRB     R0,[R6, #+152]
    289          		tptr->BackUp.RvsALCLvl_3G		= RvsHighLmt_2G; 
   \   000000FE   86F89B00           STRB     R0,[R6, #+155]
    290          		tptr->BackUp.RvsALCLvl_LTE		= RvsHighLmt_2G; 
   \   00000102   86F89900           STRB     R0,[R6, #+153]
    291          		tptr->BackUp.RvsALCLvl_LTE_A2	= RvsHighLmt_2G; 
   \   00000106   86F89A00           STRB     R0,[R6, #+154]
    292          #if 0	
    293          		tptr->BackUp.FemtocellUseOnOff.LTE = __NOTUSE;
    294          		tptr->BackUp.FemtocellUseOnOff.LTE_A1 = __NOTUSE;
    295          		tptr->BackUp.FemtocellUseOnOff.LTE_A2 = __NOTUSE;
    296          		
    297          		tptr->BackUp.FemtocellUseOnOff.LTE_1= __NOTUSE;
    298          		tptr->BackUp.FemtocellUseOnOff.LTE_A1_1 = __NOTUSE;
    299          		tptr->BackUp.FemtocellUseOnOff.LTE_A2_1 = __NOTUSE;
    300          #endif
    301          
    302          		tptr->BackUp.FemtocellUseOnOff	= 0x00;
   \   0000010A   86F82540           STRB     R4,[R6, #+37]
    303          		tptr->BackUp.AutoReportPriod = 0x05;
   \   0000010E   0520               MOVS     R0,#+5
   \   00000110   86F83200           STRB     R0,[R6, #+50]
    304          
    305          		tptr->BackUp.Radio_ReportPeriod[0] = 0x09;
   \   00000114   0920               MOVS     R0,#+9
   \   00000116   86F88700           STRB     R0,[R6, #+135]
    306          		tptr->BackUp.Radio_ReportPeriod[1] = 0x10;
   \   0000011A   1020               MOVS     R0,#+16
   \   0000011C   86F88800           STRB     R0,[R6, #+136]
    307          		
    308          		tptr->BackUp.AR_Mode[0] = 0x03;
   \   00000120   0320               MOVS     R0,#+3
   \   00000122   86F88300           STRB     R0,[R6, #+131]
    309          		tptr->BackUp.AR_Mode[1] = 0x03;
   \   00000126   86F88400           STRB     R0,[R6, #+132]
    310          
    311                  ////////////////////////////////////////////////////////////////////////
    312          		tptr->BackUp.IsDataFlag = ISDATA;
   \   0000012A   A020               MOVS     R0,#+160
   \   0000012C   3070               STRB     R0,[R6, #+0]
    313          
    314          
    315          		for(i = 0; i < sizeof(EE_BACK1); i++)
   \   0000012E                      REQUIRE ?Subroutine0
   \   0000012E                      ;; // Fall through to label ?Subroutine0
    316          		{
    317          			WriteEEprom(At24cDevID, vEE_BACK1Addr + i, *((INT8U *)tptr + i), 0);
    318          		}
    319          	}
    320          	OSSemPost(pBackupSem);
    321          	////////////////////////////////////////////////////////////////////////////////
    322          }
    323          
    324          
    325          #if 0
    326          void DefaultTableSet1(void)
    327          {
    328          	__Dnr_Sts *Sts = tDnrSts;
    329          	
    330          	INT32U cpu_sr;
    331          
    332          	OS_ENTER_CRITICAL();
    333          
    334          	Sts->FwdOutUpperLmt_3G[0]		= FwdHighLmt_3G; 
    335          	Sts->FwdOutUpperLmt_3G[1]		= 0; 
    336          	Sts->FwdOutLowerLmt_3G[0]		= FwdHighLmt_3G - 10; 
    337          	Sts->FwdOutLowerLmt_3G[1]		= 0; 
    338          	Sts->FwdGainSet_3G				= DefaultGain_3G; 
    339          	Sts->Rvs0GainSet_3G 			= DefaultGain_3G;
    340          	Sts->RvsGainBalance_3G			= DefaultGainBalance;
    341          
    342          	Sts->OverInAlarmLmt_3G			= FwdOverInSDAlmLmt_3G; 
    343          
    344          	Sts->FwdOutUpperLmt_2G[0]		= FwdHighLmt_2G; 
    345          	Sts->FwdOutUpperLmt_2G[1]		= 0; 
    346          	Sts->FwdOutLowerLmt_2G[0]		= FwdHighLmt_2G - 10; 
    347          	Sts->FwdOutLowerLmt_2G[1]		= 0; 
    348          	Sts->FwdGainSet_2G				= DefaultGain_2G;
    349          	Sts->Rvs0GainSet_2G 			= DefaultGain_2G;
    350          	Sts->RvsGainBalance_2G			= DefaultGainBalance;
    351          
    352          	Sts->OverInAlarmLmt_2G			= FwdOverInSDAlmLmt_2G; 
    353          
    354          	Sts->FwdOutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
    355          	Sts->FwdOutUpperLmt_LTE[1]		= 0;
    356          	Sts->FwdOutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
    357          	Sts->FwdOutLowerLmt_LTE[1]		= 0;
    358          	Sts->FwdGainSet_LTE 			= DefaultGain_LTE;
    359          	Sts->Rvs0GainSet_LTE			= DefaultGain_LTE; 
    360          	Sts->RvsGainBalance_LTE 		= DefaultGainBalance; 
    361          
    362          	Sts->OverInAlarmLmt_LTE 		= FwdOverInSDAlmLmt_LTE; 
    363          
    364          	Sts->FwdOutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
    365          	Sts->FwdOutUpperLmt_LTE_A1[1]	= 0;
    366          	Sts->FwdOutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 -10;
    367          	Sts->FwdOutLowerLmt_LTE_A1[1]	= 0;
    368          	Sts->FwdGainSet_LTE_A1			= DefaultGain_LTE_A;
    369          	Sts->Rvs0GainSet_LTE_A1 		= DefaultGain_LTE_A;
    370          	Sts->RvsGainBalance_LTE_A1		= DefaultGainBalance; 
    371          
    372          	Sts->OverInAlarmLmt_LTE_A1		= FwdOverInSDAlmLmt_LTE_A1; 
    373          
    374          	Sts->FwdOutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2;
    375          	Sts->FwdOutUpperLmt_LTE_A2[1]	= 0;
    376          	Sts->FwdOutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2 -10;
    377          	Sts->FwdOutLowerLmt_LTE_A2[1]	= 0;
    378          	Sts->FwdGainSet_LTE_A2			= DefaultGain_LTE_A;
    379          	Sts->Rvs0GainSet_LTE_A2 		= DefaultGain_LTE_A;
    380          	Sts->RvsGainBalance_LTE_A2		= DefaultGainBalance; 
    381          
    382          	Sts->OverInAlarmLmt_LTE_A2		= FwdOverInSDAlmLmt_LTE_A2; 
    383          
    384          	Sts->Fwd1OutUpperLmt_LTE[0] 	= FwdHighLmt_LTE; 
    385          	Sts->Fwd1OutUpperLmt_LTE[1] 	= 0;
    386          	Sts->Fwd1OutLowerLmt_LTE[0] 	= FwdHighLmt_LTE - 10;
    387          	Sts->Fwd1OutLowerLmt_LTE[1] 	= 0;
    388          	Sts->Fwd1GainSet_LTE			= DefaultGain_LTE;
    389          	Sts->Rvs1GainSet_LTE			= DefaultGain_LTE; 
    390          	Sts->Rvs1GainBalance_LTE		= DefaultGainBalance;
    391          
    392          	Sts->Fwd1OutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
    393          	Sts->Fwd1OutUpperLmt_LTE_A1[1]	= 0;
    394          	Sts->Fwd1OutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 - 10;
    395          	Sts->Fwd1OutLowerLmt_LTE_A1[1]	= 0;
    396          	Sts->Fwd1GainSet_LTE_A1 		= DefaultGain_LTE_A;
    397          	Sts->Rvs1GainSet_LTE_A1 		= DefaultGain_LTE_A;
    398          	Sts->Rvs1GainBalance_LTE_A1 	= DefaultGainBalance; 
    399          
    400          	Sts->Fwd1OutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1;
    401          	Sts->Fwd1OutUpperLmt_LTE_A2[1]	= 0;
    402          	Sts->Fwd1OutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1 - 10;
    403          	Sts->Fwd1OutLowerLmt_LTE_A2[1]	= 0;
    404          	Sts->Fwd1GainSet_LTE_A2 		= DefaultGain_LTE_A;
    405          	Sts->Rvs1GainSet_LTE_A2 		= DefaultGain_LTE_A;
    406          	Sts->Rvs1GainBalance_LTE_A2 	= DefaultGainBalance; 
    407          
    408          	Sts->AmpOffCase_2G				= Enable; 
    409          	Sts->AmpOffCase_LTE 			= Enable; 
    410          	Sts->AmpOffCase_3G				= Enable; 
    411          	Sts->AmpOffCase_LTE_A1			= Disable; 
    412          	Sts->AmpOffCase_LTE_A2			= Disable; 
    413          
    414          	Sts->LTE15MUse					= __NOTUSE; 
    415          
    416          	Sts->AGCOnOff_3G				= Enable; 
    417          	Sts->AGCOnOff_CDMALTE			= Enable; 
    418          	Sts->AGCOnOff_LTE_A_0			= Enable;
    419          	Sts->AGC1OnOff_LTE				= Enable;
    420          	Sts->AGCOnOff_LTE_A_1			= Enable;
    421          	
    422          	Sts->AGCMode_3G 				= _AGCAvgMode;
    423          	Sts->AGCMode_2G 				= _AGCAvgMode;
    424          	Sts->AGCMode_LTE				= _AGCPeakMode;
    425          	Sts->AGCMode_LTE_A1 			= _AGCPeakMode;
    426          	Sts->AGCMode_LTE_A2 			= _AGCPeakMode;
    427          	
    428          	Sts->AutoReportPriod			= 0;
    429          	Sts->AutoReportBasePer[0]		= 0;
    430          	Sts->AutoReportBasePer[1]		= 0;
    431          	Sts->TPTL_OnOff 				= Disable;
    432          	Sts->AlarmMask					= Enable;
    433          	Sts->VccDet_Lmt.Data			= 4200; 
    434          	Sts->ResetPeriodCountSet[0] 	= 1; 
    435          	Sts->ResetPeriodCountSet[1] 	= 0; 
    436          	Sts->ResetPeriodCountSet[2] 	= 0; 
    437          
    438          	Sts->WaveCtrl.RxMaxVal[0]				= 0x30;
    439          	Sts->WaveCtrl.RxMaxVal[1]				= 0x61;
    440          	Sts->WaveCtrl.RxMinVal[0]				= 0x39;
    441          	Sts->WaveCtrl.RxMinVal[1]				= 0x63;
    442          	Sts->WaveCtrl.TxMaxVal[0]				= 0x33;
    443          	Sts->WaveCtrl.TxMaxVal[1]				= 0x63;
    444          	Sts->WaveCtrl.TxMinVal[0]				= 0x62;
    445          	Sts->WaveCtrl.TxMinVal[1]				= 0x30;
    446          	Sts->WaveCtrl.EcIo						= 0x10; //-10
    447          	Sts->WaveCtrl.Radio_ReportTime[0]		= 0;
    448          	Sts->WaveCtrl.Radio_ReportTime[1]		= 0;
    449          	
    450          	Sts->Amp1OffCase_LTE				= Enable;
    451          	Sts->Amp1OffCase_LTE_A1 			= Disable;
    452          	Sts->Amp1OffCase_LTE_A2 			= Disable;
    453          	
    454          	Sts->Band_Select_LTE_A1 	   = __NOTUSE;
    455          	Sts->Band_Select_LTE_A2[0]	   = __NOTUSE;
    456          	Sts->Band_Select_LTE_A2[1]	   = 1;
    457          	Sts->Band_Select_LTE_A2[2]	   = 0x70;
    458          
    459          
    460          	Sts->RvsALCLvl_2G		= RvsHighLmt_2G; 
    461          	Sts->RvsALCLvl_3G		= RvsHighLmt_2G; 
    462          	Sts->RvsALCLvl_LTE		= RvsHighLmt_2G; 
    463          	Sts->RvsALCLvl_LTE_A1	= RvsHighLmt_2G; 
    464          	Sts->RvsALCLvl_LTE_A2	= RvsHighLmt_2G; 
    465          	Sts->Rvs1ALCLvl_LTE 	= RvsHighLmt_2G; 
    466          	Sts->Rvs1ALCLvl_LTE_A1	= RvsHighLmt_2G; 
    467          	Sts->Rvs1ALCLvl_LTE_A2	= RvsHighLmt_2G; 
    468          
    469          	Sts->FemtocellUseOnOff.LTE = __NOTUSE;
    470          	Sts->FemtocellUseOnOff.LTE_A1 = __NOTUSE;
    471          	Sts->FemtocellUseOnOff.LTE_A2 = __NOTUSE;
    472          
    473          	Sts->FemtocellUseOnOff.LTE_1= __NOTUSE;
    474          	Sts->FemtocellUseOnOff.LTE_A1_1 = __NOTUSE;
    475          	Sts->FemtocellUseOnOff.LTE_A2_1 = __NOTUSE;
    476          
    477          	tDnrSts->AutoReportPriod = 0x05;
    478          
    479          	tDnrSts->WaveCtrl.Radio_ReportPeriod[0] = 0x09;
    480          	tDnrSts->WaveCtrl.Radio_ReportPeriod[1] = 0x10;
    481          
    482          	Sts->WaveCtrl.AR_Mode[0] = 0x03;
    483          	Sts->WaveCtrl.AR_Mode[1] = 0x03;
    484          
    485          	SaveBackupData();
    486          	OS_EXIT_CRITICAL();
    487          }
    488          #endif
    489          #if 0
    490          void Response_Table_DE1(INT8U Comm,__ProtocolPtr *nPtr)
    491          {
    492          	INT8U TblID = 0;
    493          	INT8S tIndex = 0;
    494          
    495          	INT8S tlimit;
    496          	INT8U tsize;
    497          	INT32U tbllen = 0;		//, mlen = 0;
    498          	INT32U i = 0;
    499          //	INT8U err = 0;
    500          	INT8U rtry = 5;
    501          
    502          	INT16S *tblptr16 = NULL;
    503          	INT8S  *tblptr8 = NULL;
    504          
    505          	__WRCSSIO *Recv = nPtr->WRCSRecv;
    506          	__WRCSSIO *Send = nPtr->WRCSSend;
    507          
    508              __BODYFRAME *rBody = &Recv->BodyFrame[Recv->cBody];
    509              __BODYFRAME *sBody = &Send->BodyFrame[Recv->cBody];
    510          
    511          	TblID = rBody->SubData[0];
    512          	
    513          	INT8U tid[3] = {rBody->SubID[0], rBody->SubID[1], rBody->SubID[2]};
    514          
    515          	if( (tIndex = TableIndex(TblID)) == -1) return;
    516          
    517          //	OSSemPend(pBackupSem, 0, &err);
    518          //	OSSemPend(AlcSem, 0, &err );
    519          //	OSSemPend(ExpSem, 0, &err );
    520          
    521          
    522          	while(ASTART && rtry--){
    523          		OSTimeDly(10);
    524          	}
    525          
    526          //	EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    527          //	INT32U AddrOffset = (INT32U )&gEE_TABLE;
    528          
    529          
    530          	switch(TblID)	//command 체크
    531          	{
    532          		case Index_FwdOutAvgPwr_2G			:
    533          		case Index_RvsOutPwr_2G 			: 
    534          		case Index_FwdOutAvgPwr_LTE 		: 
    535          		case Index_RvsInPwr_LTE 			: 
    536          		case Index_RvsOutPwr_LTE			: 
    537          		case Index_FwdInPwr_CDMALTE 		:
    538          		case Index_FwdOutAvgPwr_CDMALTE 	: 
    539          		case Index_RvsInPwr_CDMALTE 		:
    540          		case Index_RvsOutPwr_CDMALTE		: 
    541          		case Index_FwdOutAvgPwr_LTE_A2		: 
    542          		case Index_RvsOutPwr_LTE_A2 		: 
    543          		case Index_FwdInPwr_LTE_A			:
    544          		case Index_FwdOutAvgPwr_LTE_A		: 
    545          		case Index_RvsInPwr_LTE_A			:
    546          		case Index_RvsOutPwr_LTE_A			: 
    547          		case Index_Rvs1InPwr_LTE_A			:
    548          		case Index_FwdInPwr_3G				: 
    549          		case Index_FwdOutAvgPwr_3G			: 
    550          		case Index_RvsInPwr_3G				: 
    551          		case Index_RvsOutPwr_3G 			:
    552          #if 1
    553                    {
    554          #if 0
    555          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE.OutputTbl[tIndex];//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    556          			INT32U Startptr = (INT32U )&gEE_TABLE.OutputTbl[0];
    557          			INT32U Addr = (INT32U )&gEE_TABLE.OutputTbl[tIndex];
    558          
    559          			INT32U AddrOffset = Addr - Startptr;
    560          
    561          			__OutputTblStr *TblStr;
    562          #endif
    563          			
    564          //			tIndex = 0;
    565          //			AddrOffset = 0;
    566          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    567          			INT32U AddrOffset = (INT32U )&gEE_TABLE;
    568          			__OutputTblStr *TblStr;
    569          
    570          
    571          			if( Comm == DDRTableSetQue)
    572          			{
    573          //				INT32U cpu_sr;
    574          //				OS_ENTER_CRITICAL();
    575          
    576          				{
    577          					switch(tIndex)
    578          					{
    579          						case Local_FwdOutAvgPwr_2G:
    580          							tblptr16 = (INT16S *)tptr->FwdOutAvgPwr_2G.limit;
    581          							TblStr = &(tptr->FwdOutAvgPwr_2G);
    582          						break;
    583          
    584          						case Local_RvsOutPwr_2G:
    585          							tblptr16 = (INT16S *)tptr->RvsOutPwr_2G.limit;
    586          							TblStr = &(tptr->RvsOutPwr_2G);
    587          						break;
    588          
    589          						case Local_FwdOutAvgPwr_LTE:
    590          							tblptr16 = (INT16S *)tptr->FwdOutAvgPwr_LTE.limit;
    591          							TblStr = &(tptr->FwdOutAvgPwr_LTE);
    592          						break;
    593          
    594          						case Local_RvsInPwr_LTE:
    595          							tblptr16 = (INT16S *)tptr->RvsInPwr_LTE.limit;
    596          							TblStr = &(tptr->RvsInPwr_LTE);
    597          						break;
    598          							
    599          						default:
    600          						break;
    601          							
    602          					}
    603          
    604          //					EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
    605          //					tblptr16 = (INT16S *)&tptr->OutputTbl[tIndex].limit;
    606          
    607          //					tblptr16 = (INT16S *)&tptr->OutputTbl[tIndex].limit;
    608          //					tblptr16 = (INT16S )tptr->OutputTbl[tIndex].limit;
    609          //					tblptr16 = (INT16S *)tptr->FwdPowerTable_4G;
    610          //					tblptr16 = sizeof(__OutputTblStr);
    611          
    612          
    613          //					SerPtr->printf("0: AddrOffset[%d][%d]\n", AddrOffset,tblptr16);
    614          
    615          //					AddrOffset = (INT32U)tblptr16 - AddrOffset;
    616          //					AddrOffset = (sizeof(__OutputTblStr) * tIndex)/2;
    617          
    618          	//				SerPtr->printf("0: tblptr16[%d][%d]: [%d][%d][%d]\n",TblID, tIndex,Startptr,Addr,AddrOffset);
    619          
    620          //					TblStr = &(tptr->OutputTbl[tIndex]);
    621          
    622          					tlimit = TblStr->limit = rBody->SubData[1];
    623          					tsize = TblStr->nsize = rBody->SubData[2];
    624          
    625          					if( tsize > OutputTBL_Size)  tsize = TblStr->nsize =  OutputTBL_Size; 
    626          
    627          					tbllen = (tsize*2); // data type: int16!!
    628          					{
    629          						INT16U *dsptr = (INT16U *)TblStr->Data;
    630          						INT16U *stptr = (INT16U *)&rBody->SubData[3];
    631          						for(i = 0; i < tbllen/2 && i < (OutputTBL_Size); i++)
    632          						{
    633          							dsptr[i] = swab16(stptr[i]);
    634          						}
    635          
    636          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 0), tlimit, 0);
    637          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 1), tsize, 0);
    638          
    639          //						for(i = 0; i < tbllen; i++){
    640          						for(i = 0; i < tbllen/2; i++){
    641          
    642          //							tblptr16[i] = recvptr16[i];
    643          							WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*i + 0 + 2), (dsptr[i] >> 0) & 0xff, 0);
    644          							WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*i + 1 + 2), (dsptr[i] >> 8) & 0xff, 0);
    645          						}
    646          					}
    647          //					SerPtr->printf("0: tlimit[%d][%d][%d]>[%d]\n", tlimit,tsize,tbllen,AddrOffset);
    648          
    649          //					WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
    650          				}
    651          //				OS_EXIT_CRITICAL();
    652          			}
    653          			{
    654          //				EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    655          //				INT8U iDataFlag = ReadEEprom(At24cDevID, SearchOffsetEeprom((INT32U)&tptr->BackUp.IsDataFlag), 0);
    656          				//				TblStr = &(vEE_TABLE1->Dnr0OutputTbl[tIndex]);
    657          
    658          				TblStr = &(tptr->FwdOutAvgPwr_2G ) + (sizeof(__OutputTblStr) * tIndex);
    659          				tlimit = TblStr->limit;
    660          				tsize  = TblStr->nsize;
    661          
    662          //				SerPtr->printf("1: tblptr16[%d][%d]>[%d][%d]\n",TblID, tIndex,tlimit,tsize);
    663          				
    664          //				if( tsize > OutputTBL_Size)  tsize = TblStr->nsize =  OutputTBL_Size; 
    665          				tbllen = (tsize*2); // data type: int16!!
    666          //				SerPtr->printf("2: tlimit[%d][%d][%d]>[%d]\n", tlimit,tsize,tbllen,TblStr);
    667          
    668          					
    669          				sBody->SubData[0] = TblID;
    670          				sBody->SubData[1] = tlimit;
    671          				sBody->SubData[2] = tsize;
    672          				{
    673          					INT16U *dsptr = (INT16U *)&sBody->SubData[3];
    674          					INT16U *stptr = (INT16U *)TblStr->Data;
    675          
    676          					for(i = 0; i < tbllen/2 && i < (OutputTBL_Size); i++)
    677          					{
    678          						dsptr[i] = swab16(stptr[i]);
    679          					}
    680          				}
    681          			}
    682          		}
    683          #endif
    684          		break;
    685          
    686          #if 0
    687          		case Index_FwdAttn1_2G			:	
    688          		case Index_RvsAttn1_2G			:	
    689          		case Index_RvsAttn2_2G			:	
    690          		case Index_RvsAttn3_2G			:	
    691          		case Index_RvsAttn4_2G			:	
    692          		case Index_RvsAttn5_2G			:	
    693          		case Index_FwdAttn1_LTE 		: 
    694          		case Index_RvsAttn1_LTE 		: 
    695          		case Index_RvsAttn2_LTE 		: 
    696          		case Index_RvsAttn3_LTE 		: 
    697          		case Index_RvsAttn4_LTE 		: 
    698          		case Index_RvsAttn5_LTE 		: 
    699          		case Index_FwdAttn1_CDMALTE 	: 
    700          		case Index_RvsAttn1_CDMALTE 	: 
    701          		case Index_FwdAttn1_LTE_A2		: 
    702          		case Index_FwdAttn2_LTE_A2		: 
    703          		case Index_RvsAttn1_LTE_A2		: 
    704          		case Index_RvsAttn2_LTE_A2		: 
    705          		case Index_RvsAttn3_LTE_A2		: 
    706          		case Index_RvsAttn4_LTE_A2		: 
    707          		case Index_FwdAttn1_LTE_A		: 
    708          		case Index_RvsAttn1_LTE_A		: 
    709          		case Index_FwdAttn1_3G			:	
    710          		case Index_FwdAttn2_3G			:	
    711          		case Index_FwdAttn3_3G			:	
    712          		case Index_FwdAttn4_3G			:	
    713          		case Index_RvsAttn1_3G			:	
    714          		case Index_RvsAttn2_3G			:	
    715          		case Index_RvsAttn3_3G			:	
    716          		case Index_RvsAttn4_3G			:	
    717          		case Index_RvsAttn5_3G			:	
    718          		{
    719          
    720          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE.AttnTbl[tIndex];//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    721          			INT32U Startptr = (INT32U )&gEE_TABLE.AttnTbl[0];
    722          			INT32U Addr = (INT32U )&gEE_TABLE.AttnTbl[tIndex];
    723          
    724          			INT32U AddrOffset = (sizeof(__OutputTblStr) * Local_PwrSts_Max)+ Addr - Startptr;
    725          
    726          
    727          			__AttnOffsetTblStr *AttTblStr;
    728          
    729          			if( Comm == DDRTableSetQue)
    730          			{
    731          				{
    732          
    733          					AttTblStr = &tptr->AttnTbl[tIndex];
    734          
    735          					tlimit = AttTblStr->limit = rBody->SubData[1] = AttMaxLimit;
    736          					tsize = AttTblStr->nsize = rBody->SubData[2] = AttTBL_Size;
    737          					if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    738          
    739          					tbllen = (tsize*1); // data type: int16!!
    740          					{
    741          						INT8U *dsptr = (INT8U *)AttTblStr->Data;
    742          						INT8U *stptr = (INT8U *)&rBody->SubData[3];
    743          						
    744          						for(i = 0; i < tbllen && i < (AttTBL_Size); i++)
    745          						{
    746          							dsptr[i] = (stptr[i]);
    747          						}
    748          
    749          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 0), tlimit, 0);
    750          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 1), tsize, 0);
    751          						
    752          						for(i = 0; i < tbllen; i++){
    753          							WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + i + 2), dsptr[i], 0);
    754          						}
    755          					}
    756          				}
    757          			}
    758          			{
    759          				AttTblStr = &(tptr->AttnTbl[tIndex]);
    760          
    761          				tlimit = AttTblStr->limit;
    762          				tsize = AttTblStr->nsize;
    763          				
    764          				if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    765          
    766          				tbllen = (tsize*1); // data type: int16!!
    767          
    768          				sBody->SubData[0] = TblID;
    769          				sBody->SubData[1] = tlimit;
    770          				sBody->SubData[2] = tsize;
    771          				{
    772          					INT8U *dsptr = (INT8U *)&sBody->SubData[3];
    773          					INT8U *stptr = (INT8U *)AttTblStr->Data;
    774          					
    775          					for(i = 0; i < tbllen ; i++)
    776          					{
    777          						dsptr[i] = stptr[i];
    778          					}
    779          				}
    780          			}
    781          		}			
    782          		break;
    783          #endif        
    784          
    785          #if 0
    786          		case Index_FwdTempAttn_2G  		:
    787          		case Index_RvsTempAttn_2G  		:
    788          		case Index_FwdTempAttn_LTE 		:
    789          		case Index_RvsTempAttn_LTE 		:
    790          		case Index_FwdTempAttn_LTE_A2	:
    791          		case Index_RvsTempAttn_LTE_A2	:
    792          		case Index_FwdTempAttn_3G  		:
    793          		case Index_RvsTempAttn_3G		:
    794          		{
    795          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;//RoadBackuptobuffer(vEE_TABLEAddr); // load flash data!!
    796          			INT32U AddrOffset = (INT32U )&gEE_TABLE;
    797          
    798          			__AttnTempTblStr *AttTblStr;
    799          
    800          			if( Comm == DDRTableSetQue)
    801          			{
    802          				{
    803          
    804          					AddrOffset = sizeof(__AttnTempTblStr) * tIndex;
    805          
    806          					
    807          					AttTblStr = &tptr->AttnTempTbl[tIndex];
    808          
    809          					tlimit = AttTblStr->limit = rBody->SubData[1] = TempMaxlimit;
    810          					tsize = AttTblStr->nsize = rBody->SubData[2]= TempTBL_Size;
    811          					if( tsize > TempTBL_Size)  tsize = AttTblStr->nsize = TempTBL_Size; 
    812          
    813          					tbllen = (tsize*1); // data type: int16!!
    814          					{
    815          						INT8U *dsptr = (INT8U *)AttTblStr->Data;
    816          						INT8U *stptr = (INT8U *)&rBody->SubData[3];
    817          						
    818          						for(i = 0; i < tbllen && i < (TempTBL_Size); i++)
    819          						{
    820          							dsptr[i] = (stptr[i]);
    821          						}
    822          
    823          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 0), tlimit, 0);
    824          						WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + 2*0 + 1), tsize, 0);
    825          						
    826          						for(i = 0; i < tbllen; i++){
    827          						
    828          							WriteEEprom(At24cDevID, (vEE_TABLEAddr + AddrOffset + i + 2), dsptr[i], 0);
    829          						}
    830          
    831          					}
    832          //					WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
    833          				}
    834          			}
    835          			{
    836          				AttTblStr = &(tptr->AttnTempTbl[tIndex]);
    837          				tlimit = AttTblStr->limit;
    838          				tsize = AttTblStr->nsize;
    839          				if( tsize > TempTBL_Size)  tsize = AttTblStr->nsize = TempTBL_Size; 
    840          
    841          				tbllen = (tsize*1); // data type: int16!!
    842          
    843          				sBody->SubData[0] = TblID;
    844          				sBody->SubData[1] = tlimit;
    845          				sBody->SubData[2] = tsize;
    846          				{
    847          					INT8U *dsptr = (INT8U *)&sBody->SubData[3];
    848          					INT8U *stptr = (INT8U *)AttTblStr->Data;
    849          					
    850          					for(i = 0; i < tbllen ; i++)
    851          					{
    852          						dsptr[i] = stptr[i];
    853          					}
    854          				}
    855          			}
    856          
    857          		}			
    858          		break;
    859          #endif
    860          		default:
    861              	break;
    862          	}
    863          //	OSSemPost(AlcSem);
    864          //	OSSemPost(ExpSem);
    865          //	OSSemPost(pBackupSem);
    866          
    867          	GenBodyFrame(tid, (INT8U *)Send->BodyFrame[0].SubData, Send->BodyFrame[0].SubLength, Comm, nPtr, 0);
    868          	WRCS_ProDataAckTx(nPtr);
    869          }
    870          #endif
    871          
    872          
    873          #if 1
    874          #endif
    875          
    876          

   \                                 In section .text, align 4, keep-with-next
    877          INT8S TableIndex(INT8U TblID)
    878          {
    879              INT8S tIndex = -1;	
    880          
    881          	switch(TblID)
   \                     TableIndex:
   \   00000000   5A28               CMP      R0,#+90
   \   00000002   00F25C80           BHI.W    ??TableIndex_1
   \   00000006   DFE800F0           TBB      [PC, R0]
   \                     ??TableIndex_0:
   \   0000000A   2E5A3032           DC8      0x2E,0x5A,0x30,0x32
   \   0000000E   5A343638           DC8      0x5A,0x34,0x36,0x38
   \   00000012   3A5A3C3E           DC8      0x3A,0x5A,0x3C,0x3E
   \   00000016   5A5A5A40           DC8      0x5A,0x5A,0x5A,0x40
   \   0000001A   5A424446           DC8      0x5A,0x42,0x44,0x46
   \   0000001E   5A484A4C           DC8      0x5A,0x48,0x4A,0x4C
   \   00000022   4E505A52           DC8      0x4E,0x50,0x5A,0x52
   \   00000026   545A5A5A           DC8      0x54,0x5A,0x5A,0x5A
   \   0000002A   2E5A3032           DC8      0x2E,0x5A,0x30,0x32
   \   0000002E   345A5A36           DC8      0x34,0x5A,0x5A,0x36
   \   00000032   5A383A3C           DC8      0x5A,0x38,0x3A,0x3C
   \   00000036   5A5A3E5A           DC8      0x5A,0x5A,0x3E,0x5A
   \   0000003A   5A405A5A           DC8      0x5A,0x40,0x5A,0x5A
   \   0000003E   5A5A5A5A           DC8      0x5A,0x5A,0x5A,0x5A
   \   00000042   5A5A5A42           DC8      0x5A,0x5A,0x5A,0x42
   \   00000046   4446484A           DC8      0x44,0x46,0x48,0x4A
   \   0000004A   4C5A5A5A           DC8      0x4C,0x5A,0x5A,0x5A
   \   0000004E   5A5A5A5A           DC8      0x5A,0x5A,0x5A,0x5A
   \   00000052   4E505A5A           DC8      0x4E,0x50,0x5A,0x5A
   \   00000056   52545658           DC8      0x52,0x54,0x56,0x58
   \   0000005A   5A2E3032           DC8      0x5A,0x2E,0x30,0x32
   \   0000005E   345A5A36           DC8      0x34,0x5A,0x5A,0x36
   \   00000062   383A3C00           DC8      0x38,0x3A,0x3C,0x0
    882          	{
    883          
    884          		case Index_FwdOutAvgPwr_2G		: 	return Local_FwdOutAvgPwr_2G;
   \                     ??TableIndex_2:
   \   00000066   0020               MOVS     R0,#+0
   \   00000068   7047               BX       LR
    885          		case Index_RvsOutPwr_2G			: 	return Local_RvsOutPwr_2G; 
   \                     ??TableIndex_3:
   \   0000006A   0120               MOVS     R0,#+1
   \   0000006C   7047               BX       LR
    886          		case Index_FwdOutAvgPwr_LTE		: 	return Local_FwdOutAvgPwr_LTE; 
   \                     ??TableIndex_4:
   \   0000006E   0220               MOVS     R0,#+2
   \   00000070   7047               BX       LR
    887          		case Index_RvsInPwr_LTE			: 	return Local_RvsInPwr_LTE; 
   \                     ??TableIndex_5:
   \   00000072   0320               MOVS     R0,#+3
   \   00000074   7047               BX       LR
    888          		case Index_RvsOutPwr_LTE		: 	return Local_RvsOutPwr_LTE; 
   \                     ??TableIndex_6:
   \   00000076   0420               MOVS     R0,#+4
   \   00000078   7047               BX       LR
    889          		case Index_FwdInPwr_CDMALTE		:	return Local_FwdInPwr_CDMALTE;
   \                     ??TableIndex_7:
   \   0000007A   0520               MOVS     R0,#+5
   \   0000007C   7047               BX       LR
    890          		case Index_FwdOutAvgPwr_CDMALTE	: 	return Local_FwdOutAvgPwr_CDMALTE; 
   \                     ??TableIndex_8:
   \   0000007E   0620               MOVS     R0,#+6
   \   00000080   7047               BX       LR
    891          		case Index_RvsInPwr_CDMALTE		:	return Local_RvsInPwr_CDMALTE;
   \                     ??TableIndex_9:
   \   00000082   0720               MOVS     R0,#+7
   \   00000084   7047               BX       LR
    892          		case Index_RvsOutPwr_CDMALTE	: 	return Local_RvsOutPwr_CDMALTE; 
   \                     ??TableIndex_10:
   \   00000086   0820               MOVS     R0,#+8
   \   00000088   7047               BX       LR
    893          		case Index_FwdOutAvgPwr_LTE_A2	: 	return Local_FwdOutAvgPwr_LTE_A2; 
   \                     ??TableIndex_11:
   \   0000008A   0920               MOVS     R0,#+9
   \   0000008C   7047               BX       LR
    894          		case Index_RvsOutPwr_LTE_A2		: 	return Local_RvsOutPwr_LTE_A2; 
   \                     ??TableIndex_12:
   \   0000008E   0A20               MOVS     R0,#+10
   \   00000090   7047               BX       LR
    895          		case Index_FwdInPwr_LTE_A		:	return Local_FwdInPwr_LTE_A;
   \                     ??TableIndex_13:
   \   00000092   0B20               MOVS     R0,#+11
   \   00000094   7047               BX       LR
    896          		case Index_FwdOutAvgPwr_LTE_A	: 	return Local_FwdOutAvgPwr_LTE_A; 
   \                     ??TableIndex_14:
   \   00000096   0C20               MOVS     R0,#+12
   \   00000098   7047               BX       LR
    897          		case Index_RvsInPwr_LTE_A		:	return Local_RvsInPwr_LTE_A;
   \                     ??TableIndex_15:
   \   0000009A   0D20               MOVS     R0,#+13
   \   0000009C   7047               BX       LR
    898          		case Index_RvsOutPwr_LTE_A		: 	return Local_RvsOutPwr_LTE_A; 
   \                     ??TableIndex_16:
   \   0000009E   0E20               MOVS     R0,#+14
   \   000000A0   7047               BX       LR
    899          		case Index_Rvs1InPwr_LTE_A		:	return Local_Rvs1InPwr_LTE_A;
   \                     ??TableIndex_17:
   \   000000A2   0F20               MOVS     R0,#+15
   \   000000A4   7047               BX       LR
    900          		case Index_FwdInPwr_3G			: 	return Local_FwdInPwr_3G; 
   \                     ??TableIndex_18:
   \   000000A6   1020               MOVS     R0,#+16
   \   000000A8   7047               BX       LR
    901          		case Index_FwdOutAvgPwr_3G		: 	return Local_FwdOutAvgPwr_3G; 
   \                     ??TableIndex_19:
   \   000000AA   1120               MOVS     R0,#+17
   \   000000AC   7047               BX       LR
    902          		case Index_RvsInPwr_3G			: 	return Local_RvsInPwr_3G; 
   \                     ??TableIndex_20:
   \   000000AE   1220               MOVS     R0,#+18
   \   000000B0   7047               BX       LR
    903          		case Index_RvsOutPwr_3G			:	return Local_RvsOutPwr_3G; 
   \                     ??TableIndex_21:
   \   000000B2   1320               MOVS     R0,#+19
   \   000000B4   7047               BX       LR
    904          #if 0
    905          		case Index_BalancePwr_CDMA 		: 	return Local_BalancePwr_CDMA;
    906          		case Index_BalancePwr_LTE		: 	return Local_BalancePwr_LTE;
    907          		case Index_BalancePwr_LTE_A		: 	return Local_BalancePwr_LTE_A;
    908          		case Index_BalancePwr_WCDMA		:	return Local_BalancePwr_WCDMA;
    909          #endif
    910          
    911          		case Index_FwdAttn1_2G			:	return Local_FwdAttn1_2G;	
    912          		case Index_RvsAttn1_2G			:	return Local_RvsAttn1_2G; 
    913          		case Index_RvsAttn2_2G			:	return Local_RvsAttn2_2G; 
    914          		case Index_RvsAttn3_2G			:	return Local_RvsAttn3_2G; 
    915          
    916                  case Index_FwdAttn1_LTE			: 	return Local_FwdAttn1_LTE;	
    917          		case Index_RvsAttn1_LTE			: 	return Local_RvsAttn1_LTE;	
    918          		case Index_RvsAttn2_LTE			: 	return Local_RvsAttn2_LTE;	
    919          		case Index_RvsAttn3_LTE			: 	return Local_RvsAttn3_LTE;	
    920          
    921          		case Index_FwdAttn1_CDMALTE		: 	return Local_FwdAttn1_CDMALTE;	
    922          		case Index_RvsAttn1_CDMALTE		: 	return Local_RvsAttn1_CDMALTE;	
    923          		case Index_FwdAttn1_LTE_A2		: 	return Local_FwdAttn1_LTE_A2; 
    924          		case Index_FwdAttn2_LTE_A2		: 	return Local_FwdAttn2_LTE_A2; 
    925          		case Index_RvsAttn1_LTE_A2		: 	return Local_RvsAttn1_LTE_A2; 
    926          		case Index_RvsAttn2_LTE_A2		: 	return Local_RvsAttn2_LTE_A2; 
    927          		case Index_RvsAttn3_LTE_A2		: 	return Local_RvsAttn3_LTE_A2; 
    928          		case Index_RvsAttn4_LTE_A2		: 	return Local_RvsAttn4_LTE_A2; 
    929          		case Index_FwdAttn1_3G			:	return Local_FwdAttn1_3G; 
    930          		case Index_FwdAttn2_3G			:	return Local_FwdAttn2_3G; 
    931          		case Index_RvsAttn1_3G			:	return Local_RvsAttn1_3G; 
    932          		case Index_RvsAttn2_3G			:	return Local_RvsAttn2_3G; 
    933          		case Index_RvsAttn3_3G			:	return Local_RvsAttn3_3G; 
   \                     ??TableIndex_22:
   \   000000B6   1420               MOVS     R0,#+20
   \   000000B8   7047               BX       LR
    934          		case Index_RvsAttn4_3G			:	return Local_RvsAttn4_3G; 
   \                     ??TableIndex_23:
   \   000000BA   1520               MOVS     R0,#+21
   \   000000BC   7047               BX       LR
    935          
    936          
    937          		case Index_FwdTempAttn_2G  		:	return Local_FwdTempAttn_2G; 
    938          		case Index_RvsTempAttn_2G  		:	return Local_RvsTempAttn_2G; 
    939          		case Index_FwdTempAttn_LTE 		:	return Local_FwdTempAttn_LTE; 
    940          		case Index_RvsTempAttn_LTE 		:	return Local_RvsTempAttn_LTE;
    941          		case Index_FwdTempAttn_LTE_A2	:	return Local_FwdTempAttn_LTE_A2;
    942          		case Index_RvsTempAttn_LTE_A2	:	return Local_RvsTempAttn_LTE_A2;
    943          		case Index_FwdTempAttn_3G  		:	return Local_FwdTempAttn_3G;
    944          		case Index_RvsTempAttn_3G		:	return Local_RvsTempAttn_3G;
    945          	}
    946          	return tIndex;
   \                     ??TableIndex_1:
   \   000000BE   4FF0FF30           MOV      R0,#-1
   \   000000C2   7047               BX       LR               ;; return
    947          }
    948          
    949          
    950          

   \                                 In section .text, align 4, keep-with-next
    951          INT8S PwrTableLocation(INT8U TblID)
    952          {
    953              INT8S tIndex = -1;
   \                     PwrTableLocation:
   \   00000000   4FF0FF31           MOV      R1,#-1
    954          
    955          	switch(TblID)
   \   00000004   1C28               CMP      R0,#+28
   \   00000006   17D8               BHI.N    ??PwrTableLocation_1
   \   00000008   DFE800F0           TBB      [PC, R0]
   \                     ??PwrTableLocation_0:
   \   0000000C   0F16150F           DC8      0xF,0x16,0x15,0xF
   \   00000010   16161511           DC8      0x16,0x16,0x15,0x11
   \   00000014   0F161315           DC8      0xF,0x16,0x13,0x15
   \   00000018   0F16150F           DC8      0xF,0x16,0x15,0xF
   \   0000001C   1615110F           DC8      0x16,0x15,0x11,0xF
   \   00000020   16131516           DC8      0x16,0x13,0x15,0x16
   \   00000024   110F1613           DC8      0x11,0xF,0x16,0x13
   \   00000028   1500               DC8      0x15,0x0
    956          	{
    957          		case Index_FwdOutAvgPwr_3G		:
    958          		case Index_FwdOutAvgPwr_2G		:
    959          		case Index_FwdOutAvgPwr_LTE 	:
    960          		case Index_FwdOutAvgPwr_LTE_A1	:
    961          		case Index_FwdOutAvgPwr_LTE_A2	:
    962          		case Index_FwdOutAvgPwr_CDMALTE :
    963          		case Index_FwdOutAvgPwr_LTE_A	:
    964          			tIndex = _FwdOutPwr_Location;
   \                     ??PwrTableLocation_2:
   \   0000002A   0021               MOVS     R1,#+0
    965          		break;
   \   0000002C   04E0               B.N      ??PwrTableLocation_1
    966          
    967          
    968          		case Index_FwdInPwr_3G 			:
    969          		case Index_FwdInPwr_CDMALTE 	:
    970          		case Index_FwdInPwr_LTE_A		:
    971          			tIndex = _FwdInPwr_Location;
   \                     ??PwrTableLocation_3:
   \   0000002E   0121               MOVS     R1,#+1
    972          		break;
   \   00000030   02E0               B.N      ??PwrTableLocation_1
    973          
    974          		case Index_RvsInPwr_CDMALTE 	:
    975          		case Index_RvsInPwr_3G			:
    976          		case Index_RvsInPwr_LTE_A		:
    977          			tIndex = _RvsInPwr_Location;
   \                     ??PwrTableLocation_4:
   \   00000032   0321               MOVS     R1,#+3
    978          		break;
   \   00000034   00E0               B.N      ??PwrTableLocation_1
    979          
    980          
    981          		case Index_RvsOutPwr_3G 		:
    982          		case Index_RvsOutPwr_2G 		:
    983          		case Index_RvsOutPwr_LTE		:
    984          		case Index_RvsOutPwr_LTE_A1 	:
    985          		case Index_RvsOutPwr_LTE_A2 	:
    986          		case Index_RvsOutPwr_CDMALTE 	:
    987          		case Index_RvsOutPwr_LTE_A 		:
    988          #if 0
    989              	case Index_BalancePwr_CDMA 		: 
    990          		case Index_BalancePwr_LTE		: 
    991          		case Index_BalancePwr_LTE_A		: 
    992          		case Index_BalancePwr_WCDMA		:		
    993          #endif
    994                    tIndex = _RvsOutPwr_Location;
   \                     ??PwrTableLocation_5:
   \   00000036   0221               MOVS     R1,#+2
    995          		break;
    996          
    997          		default:
    998          		break;
    999          	}
   1000          
   1001          	return tIndex;
   \                     ??PwrTableLocation_1:
   \   00000038   0846               MOV      R0,R1
   \   0000003A   7047               BX       LR               ;; return
   1002          }
   1003          
   1004          
   1005          

   \                                 In section .text, align 2, keep-with-next
   1006          void DefaultValueSet_Test(INT8U Value)
   1007          {
   \                     DefaultValueSet_Test:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0446               MOV      R4,R0
   1008          //	INT8U err = 0;
   1009          	INT32U cpu_sr;
   1010          	OS_ENTER_CRITICAL();
   \   00000004   ........           BL       OS_CPU_SR_Save
   \   00000008   0546               MOV      R5,R0
   1011          
   1012          	switch(Value) //command u?
   \   0000000A   012C               CMP      R4,#+1
   \   0000000C   01D0               BEQ.N    ??DefaultValueSet_Test_0
   \   0000000E   7F2C               CMP      R4,#+127
   \   00000010   01D1               BNE.N    ??DefaultValueSet_Test_1
   1013          	{
   1014          		case TRIO_M_TBL :
   1015          			DefaultAttTable_TRIO_M();
   1016          			DefaultTempTable_TRIO_M();
   1017          //			DefaultPwrTable_TRIO_M();
   1018          			DefaultTableSet();
   \                     ??DefaultValueSet_Test_0:
   \   00000012   ........           BL       DefaultTableSet
   1019          		break;
   1020          
   1021          		case Default_TBL:
   1022          			DefaultTableInit();
   1023          			DefaultTableSet();
   1024          		break;
   1025          
   1026          		default:
   1027          		break;
   1028          	}
   1029          	OS_EXIT_CRITICAL();
   \                     ??DefaultValueSet_Test_1:
   \   00000016   2846               MOV      R0,R5
   \   00000018   BDE83240           POP      {R1,R4,R5,LR}
   \   0000001C   ........           B.W      OS_CPU_SR_Restore
   1030          }
   1031          

   \                                 In section .text, align 2, keep-with-next
   1032          void DefaultAttTable_TRIO_M(void)
   1033          {
   1034          #if 0
   1035              int i = 0;
   1036          	
   1037          	INT8U err = 0;
   1038          	OSSemPend(pBackupSem, 0, &err);
   1039          	
   1040          	{
   1041          		__AttnOffsetTblStr *AttTblStr;
   1042          		EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1043          
   1044          
   1045          
   1046          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_2G];
   1047          		AttTblStr->limit = AttMaxLimit;
   1048          		AttTblStr->nsize = 61;
   1049          		{
   1050          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1051          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_2G;
   1052          				
   1053          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1054          		}
   1055          
   1056          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_2G];
   1057          		AttTblStr->limit = AttMaxLimit;
   1058          		AttTblStr->nsize = 61;
   1059          		{
   1060          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1061          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_2G;
   1062          				
   1063          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1064          		}
   1065          
   1066          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_LTE];
   1067          		AttTblStr->limit =  AttMaxLimit;
   1068          		AttTblStr->nsize = 61;
   1069          		{
   1070          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1071          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE;
   1072          				
   1073          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1074          		}
   1075          		
   1076          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_LTE];
   1077          		AttTblStr->limit =  AttMaxLimit;
   1078          		AttTblStr->nsize = 61;
   1079          		{
   1080          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1081          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE;
   1082          				
   1083          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1084          		}
   1085          
   1086          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_CDMALTE];
   1087          		AttTblStr->limit =  AttMaxLimit;
   1088          		AttTblStr->nsize = 61;
   1089          		{
   1090          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1091          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_CDMALTE;
   1092          				
   1093          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1094          		}
   1095          
   1096          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_LTE_A2];
   1097          		AttTblStr->limit =  AttMaxLimit;
   1098          		AttTblStr->nsize = 61;
   1099          		{
   1100          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1101          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE_A2;
   1102          				
   1103          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1104          		}
   1105          		
   1106          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn2_LTE_A2];
   1107          		AttTblStr->limit =  AttMaxLimit;
   1108          		AttTblStr->nsize = 61;
   1109          		{
   1110          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1111          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1112          		}
   1113          
   1114          
   1115          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_LTE_A2];
   1116          		AttTblStr->limit =  AttMaxLimit;
   1117          		AttTblStr->nsize = 61;
   1118          		{
   1119          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1120          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1121          		}
   1122          
   1123          
   1124          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_LTE_A2];
   1125          		AttTblStr->limit =  AttMaxLimit;
   1126          		AttTblStr->nsize = 61;
   1127          		{
   1128          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1129          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE_A2;
   1130          				
   1131          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1132          		}
   1133          
   1134          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_LTE_A2];
   1135          		AttTblStr->limit =  AttMaxLimit;
   1136          		AttTblStr->nsize = 61;
   1137          		{
   1138          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1139          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE_A2;
   1140          				
   1141          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1142          		}
   1143          
   1144          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_3G];
   1145          		AttTblStr->limit =  AttMaxLimit;
   1146          		AttTblStr->nsize = 61;
   1147          		{
   1148          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1149          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1150          		}
   1151          
   1152          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn2_3G];
   1153          		AttTblStr->limit =  AttMaxLimit;
   1154          		AttTblStr->nsize = 61;
   1155          		{
   1156          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1157          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1158          		}
   1159          		
   1160          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_3G];
   1161          		AttTblStr->limit =  AttMaxLimit;
   1162          		AttTblStr->nsize = 61;
   1163          		{
   1164          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1165          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1166          		}
   1167          
   1168          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn4_3G];
   1169          		AttTblStr->limit =  AttMaxLimit;
   1170          		AttTblStr->nsize = 61;
   1171          		{
   1172          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1173          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1174          		}			
   1175          
   1176          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_2G];
   1177          		AttTblStr->limit =  AttMaxLimit;
   1178          		AttTblStr->nsize = 61;
   1179          		{
   1180          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1181          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_2G;
   1182          				
   1183          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1184          		}	
   1185          	
   1186          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_2G];
   1187          		AttTblStr->limit =  AttMaxLimit;
   1188          		AttTblStr->nsize = 61;
   1189          		{
   1190          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1191          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_2G;
   1192          				
   1193          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1194          		}	
   1195          
   1196          
   1197          		
   1198          		AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_LTE];
   1199          		AttTblStr->limit =  AttMaxLimit;
   1200          		AttTblStr->nsize = 61;
   1201          		{
   1202          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1203          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE;
   1204          				
   1205          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1206          		}	
   1207          
   1208          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_LTE];
   1209          		AttTblStr->limit =  AttMaxLimit;
   1210          		AttTblStr->nsize = 61;
   1211          		{
   1212          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1213          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_LTE;
   1214          				
   1215          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1216          		}	
   1217          
   1218          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_CDMALTE];
   1219          		AttTblStr->limit =  AttMaxLimit;
   1220          		AttTblStr->nsize = 61;
   1221          		{
   1222          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1223          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_CDMALTE;
   1224          				
   1225          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1226          		}	
   1227          
   1228          		
   1229          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_3G];
   1230          		AttTblStr->limit =  AttMaxLimit;
   1231          		AttTblStr->nsize = 61;
   1232          		{
   1233          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1234          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_WCDMA;
   1235          				
   1236          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1237          		}
   1238          
   1239          		AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_3G];
   1240          		AttTblStr->limit =  AttMaxLimit;
   1241          		AttTblStr->nsize = 61;
   1242          		{
   1243          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1244          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1245          		}	
   1246          
   1247          		for(i = 0; i < sizeof(EE_TABLE); i++)
   1248          		{
   1249          			WriteEEprom(At24cDevID, vEE_TABLEAddr + i, *((INT8U *)tptr + i), 0);
   1250          		}
   1251          	}
   1252          	OSSemPost(pBackupSem);
   1253          #endif    
   1254          }
   \                     DefaultAttTable_TRIO_M:
   \   00000000   7047               BX       LR               ;; return
   1255          
   1256          
   1257          
   1258          

   \                                 In section .text, align 2, keep-with-next
   1259          void DefaultTempTable_TRIO_M(void)
   1260          {
   1261          #if 0
   1262          	INT32U i = 0;
   1263          	INT8U err = 0;
   1264          	OSSemPend(pBackupSem, 0, &err);
   1265          
   1266          	{
   1267                  __AttnTempTblStr *AttTblStr;
   1268          		EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1269          
   1270          		AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_2G];
   1271          		AttTblStr->limit = TempMaxlimit;
   1272          		AttTblStr->nsize = TempTBL_Size;
   1273          		{
   1274          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1275          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   1276          		}
   1277          
   1278          		AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_2G];
   1279          		AttTblStr->limit = TempMaxlimit;
   1280          		AttTblStr->nsize = TempTBL_Size;
   1281          		{
   1282          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1283          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   1284          		}
   1285          
   1286          		AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE];
   1287          		AttTblStr->limit = TempMaxlimit;
   1288          		AttTblStr->nsize = TempTBL_Size;
   1289          		{
   1290          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1291          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   1292          		}
   1293          
   1294          		AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE];
   1295          		AttTblStr->limit = TempMaxlimit;
   1296          		AttTblStr->nsize = TempTBL_Size;
   1297          		{
   1298          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1299          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   1300          		}
   1301          
   1302          
   1303          		AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A2];
   1304          		AttTblStr->limit = TempMaxlimit;
   1305          		AttTblStr->nsize = TempTBL_Size;
   1306          		{
   1307          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1308          			INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_LTE_A2;
   1309          				
   1310          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1311          		}
   1312          
   1313          		AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A2];
   1314          		AttTblStr->limit = TempMaxlimit;
   1315          		AttTblStr->nsize = TempTBL_Size;
   1316          		{
   1317          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1318          			INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_LTE_A2;
   1319          				
   1320          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1321          		}
   1322          
   1323          
   1324          		AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_3G];
   1325          		AttTblStr->limit = TempMaxlimit;
   1326          		AttTblStr->nsize = TempTBL_Size;
   1327          		{
   1328          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1329          			INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_WCDMA;
   1330          				
   1331          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1332          		}
   1333          
   1334          		AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_3G];
   1335          		AttTblStr->limit = TempMaxlimit;
   1336          		AttTblStr->nsize = TempTBL_Size;
   1337          		{
   1338          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1339          			INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_WCDMA;
   1340          				
   1341          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1342          		}
   1343          		
   1344          		for(i = 0; i < sizeof(EE_TABLE); i++)
   1345          		{
   1346          			WriteEEprom(At24cDevID, vEE_TABLEAddr + i, *((INT8U *)tptr + i), 0);
   1347          		}
   1348          
   1349          	}
   1350          	OSSemPost(pBackupSem);
   1351          #endif    
   1352          }
   \                     DefaultTempTable_TRIO_M:
   \   00000000   7047               BX       LR               ;; return
   1353          
   1354          
   1355          

   \                                 In section .text, align 2, keep-with-next
   1356          void DefaultPwrTable_TRIO_M(void)
   1357          {
   1358          #if 0
   1359              INT32U i = 0;
   1360          
   1361          	INT8U err = 0;
   1362          	OSSemPend(pBackupSem, 0, &err);
   1363          
   1364           	{
   1365          
   1366           		EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1367          		__OutputTblStr *TblStr;
   1368          
   1369          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_CDMALTE]);
   1370          		TblStr->limit = 26*2;
   1371          		TblStr->nsize = 21;
   1372           		{
   1373          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1374          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMALTE;
   1375          			
   1376          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1377          
   1378          		}
   1379           
   1380          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_LTE_A2]);
   1381          		TblStr->limit = 26*2;
   1382          		TblStr->nsize = 21;
   1383          		{
   1384          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1385          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A2;
   1386          			
   1387          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1388          
   1389          		}
   1390          
   1391          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A2]);
   1392          		TblStr->limit = 28*2;
   1393          		TblStr->nsize = 26;
   1394          		{
   1395          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1396          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A2;
   1397          			
   1398          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1399          
   1400          		}
   1401          		
   1402          		TblStr = &(tptr->OutputTbl[Local_FwdInPwr_LTE_A]);
   1403          		TblStr->limit = -15*2;
   1404          		TblStr->nsize = 32;
   1405          		{
   1406          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1407          			INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_LTE_A;
   1408          			
   1409          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1410          
   1411          		}
   1412          
   1413          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_LTE_A]);
   1414          		TblStr->limit = 26*2;
   1415          		TblStr->nsize = 21;
   1416          		{
   1417          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1418          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A;
   1419          			
   1420          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1421          
   1422          		}
   1423          
   1424          		TblStr = &(tptr->OutputTbl[Local_FwdInPwr_3G]);
   1425          		TblStr->limit = -17*2;
   1426          		TblStr->nsize = 34;
   1427          		{
   1428          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1429          			INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_WCDMA;
   1430          			
   1431          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1432          		}
   1433          
   1434          		TblStr = &(tptr->OutputTbl[Local_FwdInPwr_CDMALTE]);
   1435          		TblStr->limit = -4*2;
   1436          		TblStr->nsize = 47;
   1437          		{
   1438          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1439          			INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_CDMALTE;
   1440          			
   1441          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1442          		}
   1443          
   1444          
   1445          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_3G]);
   1446          		TblStr->limit = 26*2;
   1447          		TblStr->nsize = 58;
   1448          		{
   1449          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1450          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_WCDMA;
   1451          			
   1452          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1453          		}
   1454          
   1455          
   1456          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_2G]);
   1457          		TblStr->limit = 22*2;
   1458          		TblStr->nsize = 26;
   1459          		{
   1460          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1461          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMA;
   1462          			
   1463          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1464          		}
   1465          
   1466          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_2G]);
   1467          		TblStr->limit = 26*2;
   1468          		TblStr->nsize = 21;
   1469          		{
   1470          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1471          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMA;
   1472          			
   1473          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1474          		}
   1475          
   1476          
   1477          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_LTE]);
   1478          		TblStr->limit = 25*2;
   1479          		TblStr->nsize = 26;
   1480          		{
   1481          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1482          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE;
   1483          			
   1484          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1485          		}
   1486          
   1487          		TblStr = &(tptr->OutputTbl[Local_RvsOutPwr_LTE]);
   1488          		TblStr->limit = 26*2;
   1489          		TblStr->nsize = 21;
   1490          		{
   1491          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1492          			INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE;
   1493          			
   1494          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1495          		}
   1496          
   1497          
   1498          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_CDMALTE]);
   1499          		TblStr->limit = 27*2;
   1500          		TblStr->nsize = 21;
   1501          		{
   1502          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1503          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMALTE;
   1504          			
   1505          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1506          		}
   1507          
   1508          		TblStr = &(tptr->OutputTbl[Local_RvsInPwr_CDMALTE]);
   1509          		TblStr->limit = -12*2;
   1510          		TblStr->nsize = 31;
   1511          		{
   1512          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1513          			INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_CDMALTE;
   1514          			
   1515          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1516          		}
   1517          
   1518          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A]);
   1519          		TblStr->limit = 28*2;
   1520          		TblStr->nsize = 21;
   1521          		{
   1522          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1523          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A;
   1524          			
   1525          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1526          		}
   1527          
   1528          		TblStr = &(tptr->OutputTbl[Local_FwdOutAvgPwr_3G]);
   1529          		TblStr->limit = 28*2;
   1530          		TblStr->nsize = 21;
   1531          		{
   1532          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1533          			INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_WCDMA;
   1534          			
   1535          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1536          		}
   1537          
   1538          		TblStr = &(tptr->OutputTbl[Local_RvsInPwr_3G]);
   1539          		TblStr->limit = -12*2;
   1540          		TblStr->nsize = 31;
   1541          		{
   1542          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1543          			INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_WCDMA;
   1544          			
   1545          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1546          		}
   1547          
   1548          
   1549          		TblStr = &(tptr->OutputTbl[Local_RvsInPwr_LTE_A]);
   1550          		TblStr->limit = -12*2;
   1551          		TblStr->nsize = 39;
   1552          		{
   1553          			INT16U *dsptr = (INT16U *)TblStr->Data;
   1554          			INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_LTE_A;
   1555          			
   1556          			for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   1557          		}
   1558          		
   1559          		for(i = 0; i < sizeof(EE_TABLE); i++)
   1560          		{
   1561          			WriteEEprom(At24cDevID, vEE_TABLEAddr + i, *((INT8U *)tptr + i), 0);
   1562          		}
   1563          	}
   1564          	OSSemPost(pBackupSem);
   1565          #endif   
   1566          }
   \                     DefaultPwrTable_TRIO_M:
   \   00000000   7047               BX       LR               ;; return
   1567          

   \                                 In section .text, align 2, keep-with-next
   1568          void DefaultTableInit(void)
   1569          {
   1570          #if 0
   1571          	int i = 0;
   1572          	int j = 0;
   1573          
   1574          	
   1575          	EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1576          	{
   1577          
   1578          		__AttnOffsetTblStr *AttTblStr;
   1579          
   1580          
   1581          		for(j = 0; j < Local_AttnSts_Max; j++) 
   1582          		{
   1583          			
   1584          			AttTblStr = &tptr->AttnTbl[j];
   1585          			AttTblStr->limit = AttMaxLimit;
   1586          			AttTblStr->nsize = 61;
   1587          			{
   1588          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1589          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1590          			}
   1591          		}
   1592          	}
   1593          
   1594          	{
   1595          		__AttnTempTblStr *AttTblStr;
   1596          		for(j = 0; j < Local_TempAttnSts_Max; j++) 
   1597          		{
   1598          			
   1599          			AttTblStr = &tptr->AttnTempTbl[j];
   1600          			AttTblStr->limit = TempMaxlimit;
   1601          			AttTblStr->nsize = TempTBL_Size;
   1602          			{
   1603          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1604          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1605          			}
   1606          		}
   1607          	}
   1608          
   1609          	{
   1610          		__OutputTblStr *TblStr;
   1611          
   1612          		for(j = 0; j < Local_PwrSts_Max; j++) 
   1613          		{
   1614          			
   1615          			TblStr = &(tptr->OutputTbl[j]);
   1616          			TblStr->limit = 0;
   1617          			TblStr->nsize = OutputTBL_Size;
   1618          			{
   1619          				INT16U *dsptr = (INT16U *)TblStr->Data;
   1620          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);
   1621          			}
   1622          		}
   1623          	}
   1624          	
   1625          	for(i = 0; i < sizeof(EE_TABLE); i++)
   1626          	{
   1627          		WriteEEprom(At24cDevID, vEE_TABLEAddr + i, *((INT8U *)tptr + i), 0);
   1628          	}
   1629          
   1630          
   1631          #endif	
   1632          }
   \                     DefaultTableInit:
   \   00000000   7047               BX       LR               ;; return
   1633          
   1634          

   \                                 In section .text, align 2, keep-with-next
   1635          void DefaultTableSet2(void)
   1636          {
   1637          #if 0
   1638              INT32U i = 0;
   1639          	INT8U err = 0;
   1640          
   1641          	OSSemPend(pBackupSem, 0, &err);
   1642            	{
   1643          		EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1644          		
   1645          #if 1
   1646          	{
   1647          		{
   1648          			tptr->OutputTbl[Local_RvsOutPwr_CDMALTE].limit = 26*2;
   1649          			tptr->OutputTbl[Local_RvsOutPwr_CDMALTE].nsize = 21;
   1650          
   1651          			{
   1652          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_CDMALTE].Data;
   1653          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMALTE;
   1654          				
   1655          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_CDMALTE].nsize; i++) dsptr[i] = stptr[i];
   1656          
   1657          			}
   1658          			
   1659          			tptr->OutputTbl[Local_RvsOutPwr_LTE_A2].limit = 26*2;
   1660          			tptr->OutputTbl[Local_RvsOutPwr_LTE_A2].nsize = 21;
   1661          			{
   1662          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_LTE_A2].Data;
   1663          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A2;
   1664          				
   1665          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_LTE_A2].nsize; i++) dsptr[i] = stptr[i];
   1666          
   1667          			}
   1668          
   1669          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A2].limit = 28*2;
   1670          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A2].nsize = 26;
   1671          			{
   1672          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A2].Data;
   1673          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A2;
   1674          				
   1675          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A2].nsize; i++) dsptr[i] = stptr[i];
   1676          
   1677          			}
   1678          			
   1679          			tptr->OutputTbl[Local_FwdInPwr_LTE_A].limit = -15*2;
   1680          			tptr->OutputTbl[Local_FwdInPwr_LTE_A].nsize = 32;
   1681          			{
   1682          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdInPwr_LTE_A].Data;
   1683          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_LTE_A;
   1684          				
   1685          				for(i = 0; i < tptr->OutputTbl[Local_FwdInPwr_LTE_A].nsize; i++) dsptr[i] = stptr[i];
   1686          
   1687          			}
   1688          
   1689          			tptr->OutputTbl[Local_RvsOutPwr_LTE_A].limit = 26*2;
   1690          			tptr->OutputTbl[Local_RvsOutPwr_LTE_A].nsize = 21;
   1691          			{
   1692          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_LTE_A].Data;
   1693          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A;
   1694          				
   1695          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_LTE_A].nsize; i++) dsptr[i] = stptr[i];
   1696          
   1697          			}
   1698          
   1699          			tptr->OutputTbl[Local_FwdInPwr_3G].limit = -17*2;
   1700          			tptr->OutputTbl[Local_FwdInPwr_3G].nsize = 34;
   1701          			{
   1702          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdInPwr_3G].Data;
   1703          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_WCDMA;
   1704          				
   1705          				for(i = 0; i < tptr->OutputTbl[Local_FwdInPwr_3G].nsize; i++) dsptr[i] = stptr[i];
   1706          			}
   1707          
   1708          		}
   1709          		
   1710          		{
   1711          			tptr->OutputTbl[Local_FwdInPwr_CDMALTE].limit = -4*2;
   1712          			tptr->OutputTbl[Local_FwdInPwr_CDMALTE].nsize = 47;
   1713          			{
   1714          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdInPwr_CDMALTE].Data;
   1715          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_CDMALTE;
   1716          				
   1717          				for(i = 0; i < tptr->OutputTbl[Local_FwdInPwr_CDMALTE].nsize; i++) dsptr[i] = stptr[i];
   1718          			}
   1719          
   1720          
   1721          			tptr->OutputTbl[Local_RvsOutPwr_3G].limit = 26*2;
   1722          			tptr->OutputTbl[Local_RvsOutPwr_3G].nsize = 58;
   1723          			{
   1724          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_3G].Data;
   1725          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_WCDMA;
   1726          				
   1727          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_3G].nsize; i++) dsptr[i] = stptr[i];
   1728          			}
   1729          
   1730          		}
   1731          		
   1732          		{
   1733          			tptr->OutputTbl[Local_FwdOutAvgPwr_2G].limit = 22*2;
   1734          			tptr->OutputTbl[Local_FwdOutAvgPwr_2G].nsize = 26;
   1735          			{
   1736          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_2G].Data;
   1737          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMA;
   1738          				
   1739          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_2G].nsize; i++) dsptr[i] = stptr[i];
   1740          			}
   1741          
   1742          			tptr->OutputTbl[Local_RvsOutPwr_2G].limit = 26*2;
   1743          			tptr->OutputTbl[Local_RvsOutPwr_2G].nsize = 21;
   1744          			{
   1745          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_2G].Data;
   1746          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMA;
   1747          				
   1748          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_2G].nsize; i++) dsptr[i] = stptr[i];
   1749          			}
   1750          
   1751          
   1752          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE].limit = 25*2;
   1753          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE].nsize = 26;
   1754          			{
   1755          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_LTE].Data;
   1756          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE;
   1757          				
   1758          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_LTE].nsize; i++) dsptr[i] = stptr[i];
   1759          			}
   1760          
   1761          			tptr->OutputTbl[Local_RvsOutPwr_LTE].limit = 26*2;
   1762          			tptr->OutputTbl[Local_RvsOutPwr_LTE].nsize = 21;
   1763          			{
   1764          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsOutPwr_LTE].Data;
   1765          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE;
   1766          				
   1767          				for(i = 0; i < tptr->OutputTbl[Local_RvsOutPwr_LTE].nsize; i++) dsptr[i] = stptr[i];
   1768          			}
   1769          
   1770          
   1771          			tptr->OutputTbl[Local_FwdOutAvgPwr_CDMALTE].limit = 27*2;
   1772          			tptr->OutputTbl[Local_FwdOutAvgPwr_CDMALTE].nsize = 21;
   1773          			{
   1774          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_CDMALTE].Data;
   1775          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMALTE;
   1776          				
   1777          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_CDMALTE].nsize; i++) dsptr[i] = stptr[i];
   1778          			}
   1779          
   1780          			tptr->OutputTbl[Local_RvsInPwr_CDMALTE].limit = -12*2;
   1781          			tptr->OutputTbl[Local_RvsInPwr_CDMALTE].nsize = 31;
   1782          			{
   1783          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsInPwr_CDMALTE].Data;
   1784          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_CDMALTE;
   1785          				
   1786          				for(i = 0; i < tptr->OutputTbl[Local_RvsInPwr_CDMALTE].nsize; i++) dsptr[i] = stptr[i];
   1787          			}
   1788          
   1789          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A].limit = 28*2;
   1790          			tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A].nsize = 21;
   1791          			{
   1792          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A].Data;
   1793          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A;
   1794          				
   1795          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_LTE_A].nsize; i++) dsptr[i] = stptr[i];
   1796          			}
   1797          
   1798          			tptr->OutputTbl[Local_FwdOutAvgPwr_3G].limit = 28*2;
   1799          			tptr->OutputTbl[Local_FwdOutAvgPwr_3G].nsize = 21;
   1800          			{
   1801          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_FwdOutAvgPwr_3G].Data;
   1802          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_WCDMA;
   1803          				
   1804          				for(i = 0; i < tptr->OutputTbl[Local_FwdOutAvgPwr_3G].nsize; i++) dsptr[i] = stptr[i];
   1805          			}
   1806          
   1807          			tptr->OutputTbl[Local_RvsInPwr_3G].limit = -12*2;
   1808          			tptr->OutputTbl[Local_RvsInPwr_3G].nsize = 31;
   1809          			{
   1810          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsInPwr_3G].Data;
   1811          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_WCDMA;
   1812          				
   1813          				for(i = 0; i < tptr->OutputTbl[Local_RvsInPwr_3G].nsize; i++) dsptr[i] = stptr[i];
   1814          			}
   1815          
   1816          		}
   1817          		
   1818          		{
   1819          			tptr->OutputTbl[Local_RvsInPwr_LTE_A].limit = -12*2;
   1820          			tptr->OutputTbl[Local_RvsInPwr_LTE_A].nsize = 39;
   1821          			{
   1822          				INT16U *dsptr = (INT16U *)tptr->OutputTbl[Local_RvsInPwr_LTE_A].Data;
   1823          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_LTE_A;
   1824          				
   1825          				for(i = 0; i < tptr->OutputTbl[Local_RvsInPwr_LTE_A].nsize; i++) dsptr[i] = stptr[i];
   1826          			}
   1827          
   1828          		}
   1829          		
   1830          	}
   1831          
   1832          
   1833          #endif		
   1834          {
   1835          	__AttnOffsetTblStr *AttTblStr;
   1836          //			SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   1837          	EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1838          
   1839          	AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_2G];
   1840          	AttTblStr->limit = AttMaxLimit;
   1841          	AttTblStr->nsize = 61;
   1842          	{
   1843          		INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1844          		INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_2G;
   1845          			
   1846          		for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1847          	}
   1848          
   1849          
   1850          
   1851          }
   1852          
   1853          
   1854          #if 1
   1855          	
   1856          		int i = 0;
   1857          		
   1858          		{
   1859          			__AttnOffsetTblStr *AttTblStr;
   1860          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   1861          			
   1862          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_2G];
   1863          			AttTblStr->limit = AttMaxLimit;
   1864          			AttTblStr->nsize = 61;
   1865          			{
   1866          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1867          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_2G;
   1868          					
   1869          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1870          			}
   1871          
   1872          	
   1873          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_2G];
   1874          			AttTblStr->limit = AttMaxLimit;
   1875          			AttTblStr->nsize = 61;
   1876          			{
   1877          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1878          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_2G;
   1879          					
   1880          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1881          			}
   1882          	
   1883          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_LTE];
   1884          			AttTblStr->limit =	AttMaxLimit;
   1885          			AttTblStr->nsize = 61;
   1886          			{
   1887          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1888          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE;
   1889          					
   1890          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1891          			}
   1892          			
   1893          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_LTE];
   1894          			AttTblStr->limit =	AttMaxLimit;
   1895          			AttTblStr->nsize = 61;
   1896          			{
   1897          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1898          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE;
   1899          					
   1900          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1901          			}
   1902          	
   1903          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_CDMALTE];
   1904          			AttTblStr->limit =	AttMaxLimit;
   1905          			AttTblStr->nsize = 61;
   1906          			{
   1907          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1908          				INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_CDMALTE;
   1909          					
   1910          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1911          			}
   1912          	
   1913          
   1914          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_LTE_A2];
   1915          			AttTblStr->limit =	AttMaxLimit;
   1916          			AttTblStr->nsize = 61;
   1917          			{
   1918          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1919          				INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE_A2;
   1920          					
   1921          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1922          			}
   1923          			
   1924          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn2_LTE_A2];
   1925          			AttTblStr->limit =	AttMaxLimit;
   1926          			AttTblStr->nsize = 61;
   1927          			{
   1928          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1929          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1930          			}
   1931          	
   1932          	
   1933          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_LTE_A2];
   1934          			AttTblStr->limit =	AttMaxLimit;
   1935          			AttTblStr->nsize = 61;
   1936          			{
   1937          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1938          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1939          			}
   1940          	
   1941          	
   1942          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_LTE_A2];
   1943          			AttTblStr->limit =	AttMaxLimit;
   1944          			AttTblStr->nsize = 61;
   1945          			{
   1946          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1947          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE_A2;
   1948          					
   1949          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1950          			}
   1951          	
   1952          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_LTE_A2];
   1953          			AttTblStr->limit =	AttMaxLimit;
   1954          			AttTblStr->nsize = 61;
   1955          			{
   1956          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1957          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE_A2;
   1958          					
   1959          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1960          			}
   1961          	
   1962          	
   1963          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_3G];
   1964          			AttTblStr->limit =	AttMaxLimit;
   1965          			AttTblStr->nsize = 61;
   1966          			{
   1967          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1968          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1969          			}
   1970          	
   1971          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn2_3G];
   1972          			AttTblStr->limit =	AttMaxLimit;
   1973          			AttTblStr->nsize = 61;
   1974          			{
   1975          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1976          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1977          			}
   1978          			
   1979          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn3_3G];
   1980          			AttTblStr->limit =	AttMaxLimit;
   1981          			AttTblStr->nsize = 61;
   1982          			{
   1983          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1984          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1985          			}
   1986          	
   1987          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn4_3G];
   1988          			AttTblStr->limit =	AttMaxLimit;
   1989          			AttTblStr->nsize = 61;
   1990          			{
   1991          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1992          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1993          			}			
   1994          	
   1995          	
   1996          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_2G];
   1997          			AttTblStr->limit =	AttMaxLimit;
   1998          			AttTblStr->nsize = 61;
   1999          			{
   2000          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2001          				INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_2G;
   2002          					
   2003          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2004          			}	
   2005          	
   2006          	
   2007          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_2G];
   2008          			AttTblStr->limit =	AttMaxLimit;
   2009          			AttTblStr->nsize = 61;
   2010          			{
   2011          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2012          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_2G;
   2013          					
   2014          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2015          			}	
   2016          	
   2017          	
   2018          			
   2019          			AttTblStr = &tptr->AttnTbl[Local_FwdAttn1_LTE];
   2020          			AttTblStr->limit =	AttMaxLimit;
   2021          			AttTblStr->nsize = 61;
   2022          			{
   2023          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2024          				INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE;
   2025          					
   2026          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2027          			}	
   2028          
   2029          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_LTE];
   2030          			AttTblStr->limit =	AttMaxLimit;
   2031          			AttTblStr->nsize = 61;
   2032          			{
   2033          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2034          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_LTE;
   2035          					
   2036          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2037          			}	
   2038          	
   2039          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_CDMALTE];
   2040          			AttTblStr->limit =	AttMaxLimit;
   2041          			AttTblStr->nsize = 61;
   2042          			{
   2043          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2044          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_CDMALTE;
   2045          					
   2046          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2047          			}	
   2048          		
   2049          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn1_3G];
   2050          			AttTblStr->limit =	AttMaxLimit;
   2051          			AttTblStr->nsize = 61;
   2052          			{
   2053          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2054          				INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_WCDMA;
   2055          					
   2056          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2057          			}
   2058          	
   2059          			AttTblStr = &tptr->AttnTbl[Local_RvsAttn2_3G];
   2060          			AttTblStr->limit =	AttMaxLimit;
   2061          			AttTblStr->nsize = 61;
   2062          			{
   2063          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2064          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   2065          			}	
   2066          	
   2067          	
   2068          		}
   2069          	
   2070          #endif	
   2071          
   2072          #if 1
   2073          
   2074          	
   2075          	
   2076          		{
   2077          			INT32U i = 0;
   2078                      __AttnTempTblStr *AttTblStr;
   2079          			EE_TABLE *tptr = (EE_TABLE *)&gEE_TABLE;
   2080          
   2081          			{
   2082          
   2083          				AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_2G];
   2084          				AttTblStr->limit = TempMaxlimit;
   2085          				AttTblStr->nsize = TempTBL_Size;
   2086          				{
   2087          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2088          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2089          					
   2090          	//				INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_CDMA;
   2091          					
   2092          	//				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2093          				}
   2094          	
   2095          				AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_2G];
   2096          				AttTblStr->limit = TempMaxlimit;
   2097          				AttTblStr->nsize = TempTBL_Size;
   2098          				{
   2099          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2100          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2101          				}
   2102          	
   2103          				AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE];
   2104          				AttTblStr->limit = TempMaxlimit;
   2105          				AttTblStr->nsize = TempTBL_Size;
   2106          				{
   2107          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2108          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2109          				}
   2110          	
   2111          				AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE];
   2112          				AttTblStr->limit = TempMaxlimit;
   2113          				AttTblStr->nsize = TempTBL_Size;
   2114          				{
   2115          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2116          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2117          				}
   2118          	
   2119          
   2120          				AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A2];
   2121          				AttTblStr->limit = TempMaxlimit;
   2122          				AttTblStr->nsize = TempTBL_Size;
   2123          				{
   2124          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2125          					INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_LTE_A2;
   2126          						
   2127          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2128          				}
   2129          
   2130          				AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A2];
   2131          				AttTblStr->limit = TempMaxlimit;
   2132          				AttTblStr->nsize = TempTBL_Size;
   2133          				{
   2134          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2135          					INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_LTE_A2;
   2136          						
   2137          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2138          				}
   2139          	
   2140          	
   2141          				AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_3G];
   2142          				AttTblStr->limit = TempMaxlimit;
   2143          				AttTblStr->nsize = TempTBL_Size;
   2144          				{
   2145          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2146          					INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_WCDMA;
   2147          						
   2148          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2149          				}
   2150          	
   2151          				AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_3G];
   2152          				AttTblStr->limit = TempMaxlimit;
   2153          				AttTblStr->nsize = TempTBL_Size;
   2154          				{
   2155          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2156          					INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_WCDMA;
   2157          						
   2158          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2159          				}
   2160          	
   2161          			}
   2162          		}
   2163          #endif
   2164          
   2165          
   2166          
   2167          
   2168          		for(i = 0; i < TableMAX62 + 2; i++)
   2169          		{
   2170          #if 0
   2171                      tptr->FwdPowerTable_4G[i] = (INT16U)m_TX_TABLE_LTE[i];
   2172          			tptr->RvsPowerTable_4G[i] = (INT16U)m_RX_TABLE_LTE[i];
   2173          			tptr->FwdPowerTable_3G[i] = (INT16U)m_TX_TABLE_3G[i];
   2174          			tptr->RvsPowerTable_3G[i] = (INT16U)m_RX_TABLE_3G[i];
   2175          
   2176          			tptr->FwdTempAttnTable_4G[i] = (INT16U)m_TX_TEMP_ATTN_LTE[i];
   2177          			tptr->RvsTempAttnTable_4G[i] = (INT16U)m_RX_TEMP_ATTN_LTE[i];
   2178          			tptr->FwdTempAttnTable_3G[i] = (INT16U)m_TX_TEMP_ATTN_3G[i];
   2179          			tptr->RvsTempAttnTable_3G[i] = (INT16U)m_RX_TEMP_ATTN_3G[i];
   2180          
   2181          			tptr->FwdAttnTable_4G[i] = (INT16U)m_TX_ATTN_LTE[i];
   2182          			tptr->RvsAttnTable_4G[i] = (INT16U)m_RX_ATTN_LTE[i];
   2183          			tptr->FwdAttnTable_3G[i] = (INT16U)m_TX_ATTN_3G[i];
   2184          			tptr->RvsAttnTable_3G[i] = (INT16U)m_RX_ATTN_3G[i];
   2185          			
   2186          			tptr->TempPllTable_4G[i] = m_PLL_TEMP_LTE[i];
   2187          			tptr->TempPllTable_3G[i] = m_PLL_TEMP_3G[i];
   2188          
   2189          			tptr->FwdInputAttnTable_4G[i] = m_TX_IN_ATTN_LTE[i];
   2190          			tptr->FwdInputAttnTable_3G[i] = m_TX_IN_ATTN_3G[i];
   2191          #endif            
   2192          		}
   2193          
   2194          		for(i = 0; i < sizeof(EE_TABLE); i++)
   2195          		{
   2196          			WriteEEprom(At24cDevID, vEE_TABLEAddr + i, *((INT8U *)tptr + i), 0);
   2197          		}
   2198          	}
   2199          	OSSemPost(pBackupSem);
   2200          #endif  
   2201          
   2202          }
   \                     DefaultTableSet2:
   \   00000000   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     pBackupSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   ........           DC32     gEE_BACK1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   ........           DC32     iRepeaterType
   2203          
   2204          
   2205          ////////////////////////////////////////////////////////////////////////////////
   2206          // End of Source File
   2207          /////////////////////
   2208          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     DefaultAttTable_TRIO_M       0
     DefaultPwrTable_TRIO_M       0
     DefaultTableInit             0
     DefaultTableSet             24
     DefaultTableSet2             0
     DefaultTempTable_TRIO_M      0
     DefaultValueSet             24
     DefaultValueSet_Test        16
     PwrTableLocation             0
     TableIndex                   0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     DefaultValueSet          308
     ?Subroutine0              36
     DefaultTableSet          302
     TableIndex               196
     PwrTableLocation          60
     DefaultValueSet_Test      32
     DefaultAttTable_TRIO_M     2
     DefaultTempTable_TRIO_M    2
     DefaultPwrTable_TRIO_M     2
     DefaultTableInit           2
     DefaultTableSet2           2
     ??DataTable0               4
     ??DataTable0_1             4
     ??DataTable0_2             4

 
 956 bytes in section .text
 
 956 bytes of CODE memory

Errors: none
Warnings: none

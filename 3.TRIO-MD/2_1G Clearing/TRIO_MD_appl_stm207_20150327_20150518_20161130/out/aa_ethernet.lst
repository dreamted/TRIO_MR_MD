###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     01/Dec/2012  00:53:02 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\a #
#                    a_ethernet.c                                             #
#    Command line =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\a #
#                    a_ethernet.c -lC C:\user\project\FR-DB家屈\fw\appl_stm20 #
#                    7_20121201\out\ -o C:\user\project\FR-DB家屈\fw\appl_stm #
#                    207_20121201\out\ --endian=little --cpu=Cortex-M3 -e     #
#                    --fpu=None --dlib_config "C:\compiler\ewarm              #
#                    6.2\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\includ #
#                    e\ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\ -I                     #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\STM32F #
#                    2xx_StdPeriph_Driver_v1212\inc\ -I                       #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\uC-CPU #
#                    \ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\u #
#                    C-LIB\ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121 #
#                    201\uCOS-II\Ports\ -I C:\user\project\FR-DB家屈\fw\appl_ #
#                    stm207_20121201\uCOS-II\Source\ -I                       #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\uC-Pro #
#                    be\ -Oh --use_c++_inline                                 #
#    List file    =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\out\aa #
#                    _ethernet.lst                                            #
#    Object file  =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\out\aa #
#                    _ethernet.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\aa_ethernet.c
      1          
      2          /******************** (C) COPYRIGHT 2008 PILOG, NSINFO *************************
      3          * File Name          : exlib.c
      4          * Author             : Yoon Byong-Gyu(bgyoon@naver.com)
      5          * Date First Issued  : 02/01/2008
      6          * Description        : This file provides all the port/input/update firmware functions.
      7          * $Revision: 0.1 $
      8          * $Revision date: 2008.01.__
      9          ********************************************************************************/
     10          
     11          #define ETH0_C
     12          
     13          #include "../dev/W3150A_v1.0.6/types.h"
     14          #include "../dev/W3150A_v1.0.6/socket.h"
     15          #include "../dev/W3150A_v1.0.6/w3150a.h"
     16          
     17          #include "../include/main.h"

   \                                 In section .rodata, align 4, keep-with-next
   \   __absolute __IPINFOR const defaultip
   \                     defaultip:
   \   00000000   001A4B638181       DC8 0, 26, 75, 99, 129, 129, 192, 168, 0, 23, 192, 168, 0, 1, 255, 255
   \              C0A80017C0A8
   \              0001FFFF    
   \   00000010   FF00               DC8 255, 0
   \   00000012   204E               DC16 20000
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   00000026   0000               DC16 0

   \                                 In section .bss, align 4
   \   __absolute __N_ProtocolPtr Eth0B
   \                     Eth0B:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
   \   __absolute struct <unnamed> *N_RuAlarm[8][16]
   \                     N_RuAlarm:
   \   00000000                      DS8 512

   \                                 In section .bss, align 1
   \   __absolute INT8U UdpPadOnFlag
   \                     UdpPadOnFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \   __absolute INT8U Nms_Crtl_Flag
   \                     Nms_Crtl_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \   __absolute INT8U RuBootFlag[8][16]
   \                     RuBootFlag:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \   __absolute INT8U RuBootCnt[8][16]
   \                     RuBootCnt:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
   \   __absolute INT8U udp_rx_buf[2][2048]
   \                     udp_rx_buf:
   \   00000000                      DS8 4096

   \                                 In section .data, align 4
   \   __absolute INT8U AlarmReportStartFlag
   \                     AlarmReportStartFlag:
   \   00000000   00                 DC8 0
   \   __absolute INT8U MuBootCnt
   \                     MuBootCnt:
   \   00000001   00                 DC8 0
   \   00000002   0000               DC8 0, 0
   \   __absolute INT8U HuBootFlag[8]
   \                     HuBootFlag:
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute INT8U HuBootCnt[8]
   \                     HuBootCnt:
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute INT16U DstPort
   \                     DstPort:
   \   00000014   0000               DC8 0, 0
   \   00000016   0000               DC8 0, 0
   \   __absolute INT16U udp_rx_len[2]
   \                     udp_rx_len:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \   __absolute INT16U udp_rx_rcnt[2]
   \                     udp_rx_rcnt:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   __absolute INT16U returnport[2]
   \                     returnport:
   \   00000020   00000000           DC8 0, 0, 0, 0
   \   __absolute __N_ProtocolPtr *Eth0
   \                     Eth0:
   \   00000024   ........           DC32 Eth0B
   \   __absolute __N_MU_STS *N_MuStatus
   \                     N_MuStatus:
   \   00000028   00000000           DC8 0, 0, 0, 0
   \   __absolute __N_HU_STS *N_HuStatus
   \                     N_HuStatus:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   __absolute __N_RU_STS *N_RuStatus
   \                     N_RuStatus:
   \   00000030   00000000           DC8 0, 0, 0, 0
   \   __absolute _MU_ALARM *N_MuAlarm
   \                     N_MuAlarm:
   \   00000034   00000000           DC8 0, 0, 0, 0
   \   __absolute struct <unnamed> *N_HuAlarm[8]
   \                     N_HuAlarm:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute INT8U *DstAddr
   \                     DstAddr:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \   __absolute OS_STK Eth0TaskStk[300]
   \                     Eth0TaskStk:
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000020C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000021C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000022C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000023C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute __N_MU_STS N_MuStatusB
   \                     N_MuStatusB:
   \   0000050C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000059C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   __absolute __N_HU_STS N_HuStatusB
   \                     N_HuStatusB:
   \   00000608   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000618   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000628   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000648   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000658   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000668   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000678   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   __absolute __N_RU_STS N_RuStatusB
   \                     N_RuStatusB:
   \   0000068C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000069C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000070C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000071C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000072C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   __absolute _MU_ALARM N_MuAlarmB
   \                     N_MuAlarmB:
   \   00000740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute _HU_ALARM N_HuAlarmB[8]
   \                     N_HuAlarmB:
   \   00000770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute _RU_ALARM N_RuAlarmB[8][16]
   \                     N_RuAlarmB:
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000012F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000013F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000014F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000015F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   __absolute INT8U returnip[2][4]
   \                     returnip:
   \   000016A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute INT8U udp_preAddr[2][4]
   \                     udp_preAddr:
   \   000016A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .bss, align 1
   \   __absolute INT8U Ethernet_Debug
   \                     Ethernet_Debug:
   \   00000000                      DS8 1
     18          
     19          //#define DBG_ETH0_OUT
     20          #define DBG_ETH1_OUT
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void Ethenet0Init(void)
     23          {
   \                     Ethenet0Init:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
     24          	INT8U	i,j,k;
     25          	
     26          	Eth0->CheckByte = ret0CheckByte;
   \   00000004   ........           LDR.W    R4,??DataTable24
   \   00000008   606A               LDR      R0,[R4, #+36]
   \   0000000A   ........           LDR.W    R1,??DataTable24_1
   \   0000000E   0160               STR      R1,[R0, #+0]
     27          	Eth0->RxGetByte = ret0GetByte;
   \   00000010   ........           LDR.W    R1,??DataTable24_2
   \   00000014   4160               STR      R1,[R0, #+4]
     28          	Eth0->PutStr = udp0PutStr;
   \   00000016   ........           LDR.W    R1,??DataTable24_3
   \   0000001A   8160               STR      R1,[R0, #+8]
     29          	Eth0->TxCheckByte = NULL;
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   0161               STR      R1,[R0, #+16]
     30          	Eth0->BuffClear = NULL;
   \   00000020   4161               STR      R1,[R0, #+20]
     31          
     32          	Eth0->TimerRx = TimerudpRx;
   \   00000022   0B21               MOVS     R1,#+11
   \   00000024   0183               STRH     R1,[R0, #+24]
     33          
     34          	Eth0->Recv = &Rnms;
   \   00000026   ........           LDR.W    R1,??DataTable24_4
   \   0000002A   4162               STR      R1,[R0, #+36]
     35          	Eth0->Send = &Snms;
   \   0000002C   ........           LDR.W    R1,??DataTable24_5
   \   00000030   8162               STR      R1,[R0, #+40]
     36          
     37          	Eth0->OSSem = OSSemCreate(1);
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   ........           BL       OSSemCreate
   \   00000038   616A               LDR      R1,[R4, #+36]
   \   0000003A   0862               STR      R0,[R1, #+32]
     38          
     39          	// Mem Allocation
     40          	N_MuStatus	= &N_MuStatusB;
   \   0000003C   04F20C50           ADDW     R0,R4,#+1292
   \   00000040   A062               STR      R0,[R4, #+40]
     41          	N_HuStatus	= &N_HuStatusB;
   \   00000042   04F20860           ADDW     R0,R4,#+1544
   \   00000046   E062               STR      R0,[R4, #+44]
     42          	N_RuStatus	= &N_RuStatusB;
   \   00000048   04F28C60           ADDW     R0,R4,#+1676
   \   0000004C   2063               STR      R0,[R4, #+48]
     43          
     44          	N_MuAlarm	= &N_MuAlarmB;
   \   0000004E   04F24070           ADDW     R0,R4,#+1856
   \   00000052   6063               STR      R0,[R4, #+52]
     45          	for(i=0; i<HU_MAX; i++)
   \   00000054   0021               MOVS     R1,#+0
   \   00000056   04F23802           ADDW     R2,R4,#+56
   \   0000005A   04F27073           ADDW     R3,R4,#+1904
   \   0000005E   0825               MOVS     R5,#+8
   \   00000060   4FF4D876           MOV      R6,#+432
   \   00000064   ........           LDR.W    R0,??DataTable24_6
     46          	{
     47          		N_HuAlarm[i]	= &N_HuAlarmB[i];
   \                     ??Ethenet0Init_0:
   \   00000068   1360               STR      R3,[R2, #+0]
     48          		for(j=0; j<HDTU_MAX; j++)
   \   0000006A   00EB8117           ADD      R7,R0,R1, LSL #+6
   \   0000006E   04F5126C           ADD      R12,R4,#+2336
   \   00000072   06FB01CC           MLA      R12,R6,R1,R12
   \   00000076   4FF0040E           MOV      LR,#+4
     49          		{
     50          			N_RuAlarm[i][j]	= &N_RuAlarmB[i][j];
   \                     ??Ethenet0Init_1:
   \   0000007A   47F804CB           STR      R12,[R7], #+4
   \   0000007E   0CF21B08           ADDW     R8,R12,#+27
   \   00000082   47F8048B           STR      R8,[R7], #+4
   \   00000086   0CF23608           ADDW     R8,R12,#+54
   \   0000008A   47F8048B           STR      R8,[R7], #+4
   \   0000008E   0CF25108           ADDW     R8,R12,#+81
   \   00000092   47F8048B           STR      R8,[R7], #+4
     51          		}
   \   00000096   0CF26C0C           ADDW     R12,R12,#+108
   \   0000009A   BEF1010E           SUBS     LR,LR,#+1
   \   0000009E   ECD1               BNE.N    ??Ethenet0Init_1
     52          	}
   \   000000A0   491C               ADDS     R1,R1,#+1
   \   000000A2   03F23603           ADDW     R3,R3,#+54
   \   000000A6   121D               ADDS     R2,R2,#+4
   \   000000A8   6D1E               SUBS     R5,R5,#+1
   \   000000AA   DDD1               BNE.N    ??Ethenet0Init_0
     53          
     54          	// Buf Clear
     55          	for(i=0; i<sizeof(_MU_ALARM); i++)
   \   000000AC   0021               MOVS     R1,#+0
   \   000000AE   0023               MOVS     R3,#+0
     56          	{
     57          		*((INT8U*)N_MuAlarm+i) = 0;
   \                     ??Ethenet0Init_2:
   \   000000B0   626B               LDR      R2,[R4, #+52]
   \   000000B2   8B54               STRB     R3,[R1, R2]
     58          	}
   \   000000B4   491C               ADDS     R1,R1,#+1
   \   000000B6   2D29               CMP      R1,#+45
   \   000000B8   FAD3               BCC.N    ??Ethenet0Init_2
     59          	for(i=0; i<HU_MAX; i++)
   \   000000BA   04F23801           ADDW     R1,R4,#+56
   \   000000BE   0822               MOVS     R2,#+8
   \   000000C0   0026               MOVS     R6,#+0
     60          	{
     61          		for(j=0; j<sizeof(_HU_ALARM); j++)
   \                     ??Ethenet0Init_3:
   \   000000C2   0023               MOVS     R3,#+0
     62          		{
     63          			*((INT8U*)N_HuAlarm[i]+j) = 0;
   \                     ??Ethenet0Init_4:
   \   000000C4   0D68               LDR      R5,[R1, #+0]
   \   000000C6   5E55               STRB     R6,[R3, R5]
     64          		}
   \   000000C8   5B1C               ADDS     R3,R3,#+1
   \   000000CA   362B               CMP      R3,#+54
   \   000000CC   FAD3               BCC.N    ??Ethenet0Init_4
     65          	}
   \   000000CE   091D               ADDS     R1,R1,#+4
   \   000000D0   521E               SUBS     R2,R2,#+1
   \   000000D2   F6D1               BNE.N    ??Ethenet0Init_3
     66          	for(i=0; i<HU_MAX; i++)
   \   000000D4   0021               MOVS     R1,#+0
   \   000000D6   0822               MOVS     R2,#+8
   \   000000D8   8C46               MOV      R12,R1
     67          	{
     68          		for(j=0; j<HDTU_MAX; j++)
   \                     ??Ethenet0Init_5:
   \   000000DA   00EB8113           ADD      R3,R0,R1, LSL #+6
   \   000000DE   1025               MOVS     R5,#+16
     69          		{
     70          			for(k=0; k<sizeof(_RU_ALARM); k++)
   \                     ??Ethenet0Init_6:
   \   000000E0   0026               MOVS     R6,#+0
     71          			{
     72          				*((INT8U*)N_RuAlarm[i][j]+k) = 0;
   \                     ??Ethenet0Init_7:
   \   000000E2   1F68               LDR      R7,[R3, #+0]
   \   000000E4   06F807C0           STRB     R12,[R6, R7]
     73          			}
   \   000000E8   761C               ADDS     R6,R6,#+1
   \   000000EA   1B2E               CMP      R6,#+27
   \   000000EC   F9D3               BCC.N    ??Ethenet0Init_7
     74          		}
   \   000000EE   1B1D               ADDS     R3,R3,#+4
   \   000000F0   6D1E               SUBS     R5,R5,#+1
   \   000000F2   F5D1               BNE.N    ??Ethenet0Init_6
     75          	}
   \   000000F4   491C               ADDS     R1,R1,#+1
   \   000000F6   521E               SUBS     R2,R2,#+1
   \   000000F8   EFD1               BNE.N    ??Ethenet0Init_5
     76          	
     77          	for(i=0; i<HU_MAX; i++)
   \   000000FA   0020               MOVS     R0,#+0
   \   000000FC   211D               ADDS     R1,R4,#+4
   \   000000FE   04F20C02           ADDW     R2,R4,#+12
   \   00000102   0823               MOVS     R3,#+8
   \   00000104   ........           LDR.W    R5,??DataTable25
   \   00000108   ........           LDR.W    R6,??DataTable25_1
   \   0000010C   8046               MOV      R8,R0
     78          	{
     79          		HuBootFlag[i] = 0;
   \                     ??Ethenet0Init_8:
   \   0000010E   0027               MOVS     R7,#+0
   \   00000110   0F70               STRB     R7,[R1, #+0]
     80          		HuBootCnt[i] = 0;
   \   00000112   1770               STRB     R7,[R2, #+0]
     81          		for(j=0; j<HDTU_MAX; j++)
   \   00000114   06EB0017           ADD      R7,R6,R0, LSL #+4
   \   00000118   05EB001C           ADD      R12,R5,R0, LSL #+4
   \   0000011C   4FF0020E           MOV      LR,#+2
     82          		{
     83          			RuBootFlag[i][j] = 0;
   \                     ??Ethenet0Init_9:
   \   00000120   07F8018B           STRB     R8,[R7], #+1
     84          			RuBootCnt[i][j] = 0;
   \   00000124   0CF8018B           STRB     R8,[R12], #+1
   \   00000128   07F8018B           STRB     R8,[R7], #+1
   \   0000012C   0CF8018B           STRB     R8,[R12], #+1
   \   00000130   07F8018B           STRB     R8,[R7], #+1
   \   00000134   0CF8018B           STRB     R8,[R12], #+1
   \   00000138   07F8018B           STRB     R8,[R7], #+1
   \   0000013C   0CF8018B           STRB     R8,[R12], #+1
   \   00000140   07F8018B           STRB     R8,[R7], #+1
   \   00000144   0CF8018B           STRB     R8,[R12], #+1
   \   00000148   07F8018B           STRB     R8,[R7], #+1
   \   0000014C   0CF8018B           STRB     R8,[R12], #+1
   \   00000150   07F8018B           STRB     R8,[R7], #+1
   \   00000154   0CF8018B           STRB     R8,[R12], #+1
   \   00000158   07F8018B           STRB     R8,[R7], #+1
   \   0000015C   0CF8018B           STRB     R8,[R12], #+1
     85          		}
   \   00000160   BEF1010E           SUBS     LR,LR,#+1
   \   00000164   DCD1               BNE.N    ??Ethenet0Init_9
     86          	}
   \   00000166   401C               ADDS     R0,R0,#+1
   \   00000168   521C               ADDS     R2,R2,#+1
   \   0000016A   491C               ADDS     R1,R1,#+1
   \   0000016C   5B1E               SUBS     R3,R3,#+1
   \   0000016E   CED1               BNE.N    ??Ethenet0Init_8
     87          	
     88          ////////////////////////////////////////////////////////////////////////////////
     89          	EthernetPortReset();
   \   00000170   ........           BL       EthernetPortReset
     90          	
     91          	OSTaskCreate(Ethernet0Task, (void *)NULL, (OS_STK *)&Eth0TaskStk[ETH0_START_STK_SIZE - 1], ETH_START_PRIO);
   \   00000174   0623               MOVS     R3,#+6
   \   00000176   04F5A162           ADD      R2,R4,#+1288
   \   0000017A   0021               MOVS     R1,#+0
   \   0000017C   ........           LDR.W    R0,??DataTable25_2
   \   00000180   BDE8F041           POP      {R4-R8,LR}
   \   00000184   ........           B.W      OSTaskCreate
     92          }
     93          
     94          // UDP CASE !!(SERVER)

   \                                 In section .text, align 2, keep-with-next
     95          void Ethernet0Task(void *p_arg)
     96          {
   \                     Ethernet0Task:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
     97          	INT8U s = 0;
     98          	INT8U nUSE = ETH0_CHANNEL;
     99          	INT8U len;
    100          	INT8U	uTemp[2];
    101          	
    102          	__N_ProtocolPtr *nPtr = Eth0;
   \   00000006   ........           LDR.W    R4,??DataTable24
   \   0000000A   656A               LDR      R5,[R4, #+36]
    103          	
    104          	OSTimeDly(100L*ETH_START_PRIO);
   \   0000000C   4FF41670           MOV      R0,#+600
   \   00000010   ........           BL       OSTimeDly
    105          	EthernetInitSet(nUSE, Sn_MR_UDP, TRUE);
   \   00000014   0122               MOVS     R2,#+1
   \   00000016   0221               MOVS     R1,#+2
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       EthernetInitSet
    106          	
    107          	udp0SetAddr(returnip[nUSE], returnport[nUSE]);
   \   0000001E   04F5B558           ADD      R8,R4,#+5792
   \   00000022   238C               LDRH     R3,[R4, #+32]
   \   00000024   4246               MOV      R2,R8
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   ........           BL       udpSetAddr
   \   0000002E   ........           LDR.W    R7,??DataTable25_3
   \   00000032   ........           LDR.W    R6,??DataTable25_4
   \   00000036   03E0               B.N      ??Ethernet0Task_0
    108          		
    109          	while(1)
    110          	{
    111          		if(eLink_Check(nUSE) && !tTestFlag)
    112          		{
    113          			while(eLink_Check(nUSE) && !tTestFlag)
    114          			{
    115          				//StsCheckConnectionRst(nPtr);
    116          				
    117          				OSTimeDly(300L);
    118          			}
    119          			EthernetInitSet(nUSE, Sn_MR_UDP, FALSE);
    120          			OSTimeDly(1000L);
    121          		}
    122          
    123          		while(!AlarmReportStartFlag)
    124          		{
    125          			TimerRegist(TimerAlarmChk, Time1Sec);
    126          			OSTimeDly(300L);
    127          		}
    128          		
    129          		//while(!eLink_Check(nUSE) && !tTestFlag && ((DownLoadGiveupTimerSet(NULL)==0)||(DownLoadGiveupTimerSet(NULL)==(INT32U)Eth0)) )
    130          		while(!eLink_Check(nUSE) && !tTestFlag )
    131          		{
    132          			if( (len = retSelect(nUSE, s, returnip[nUSE], &returnport[nUSE])))
    133          			{
    134          				INT16U Recv;
    135                          
    136                          len = len;
    137          
    138          			    while(nPtr->CheckByte(1, &Recv))
    139          				{
    140          					if(N_ProtocolCheck(nPtr, Time1Sec))
    141          					{
    142          						returnport[0] = IpSts->Server_Port;
    143          						udp0SetAddr(returnip[nUSE], returnport[nUSE]);
    144          
    145          						if((DownLoadGiveupTimerSet(NULL)!=0)&&(DownLoadGiveupTimerSet(NULL)!=(INT32U)Eth0))
    146          						{
    147          							uTemp[0] = ERR_DOWN;
    148          							NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
    149          						}
    150          						else	N_ProtocolComCheck(nPtr);
    151          					}
    152          				}
    153          			
    154          			}
    155          
    156          			//-----------------------------------------------------------------------//
    157          			// Alarm Report
    158          			if(AlarmReportStartFlag)
    159          			{
    160          				if(TimeOverCheck(TimerAlarmChk))
    161          				{
    162          					// Boot Alarm Check
    163          					NmsBootAlarmReport();
    164          
    165          					// Alarm Check
    166          					NmsAlarmReport();
    167          					TimerRegist(TimerAlarmChk, Time1Sec);
    168          				}
    169          			}
    170          			
    171          			OSTimeDly(200L);
    172          		}
    173          		OSTimeDly(300L);
   \                     ??Ethernet0Task_1:
   \   00000038   4FF49670           MOV      R0,#+300
   \   0000003C   ........           BL       OSTimeDly
   \                     ??Ethernet0Task_0:
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   ........           BL       eLink_Check
   \   00000046   B0B1               CBZ.N    R0,??Ethernet0Task_2
   \   00000048   3078               LDRB     R0,[R6, #+0]
   \   0000004A   A0B9               CBNZ.N   R0,??Ethernet0Task_2
   \   0000004C   03E0               B.N      ??Ethernet0Task_3
   \                     ??Ethernet0Task_4:
   \   0000004E   4FF49670           MOV      R0,#+300
   \   00000052   ........           BL       OSTimeDly
   \                     ??Ethernet0Task_3:
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   ........           BL       eLink_Check
   \   0000005C   10B1               CBZ.N    R0,??Ethernet0Task_5
   \   0000005E   3078               LDRB     R0,[R6, #+0]
   \   00000060   0028               CMP      R0,#+0
   \   00000062   F4D0               BEQ.N    ??Ethernet0Task_4
   \                     ??Ethernet0Task_5:
   \   00000064   0022               MOVS     R2,#+0
   \   00000066   0221               MOVS     R1,#+2
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   ........           BL       EthernetInitSet
   \   0000006E   4FF47A70           MOV      R0,#+1000
   \   00000072   ........           BL       OSTimeDly
   \                     ??Ethernet0Task_2:
   \   00000076   2078               LDRB     R0,[R4, #+0]
   \   00000078   58B9               CBNZ.N   R0,??Ethernet0Task_6
   \                     ??Ethernet0Task_7:
   \   0000007A   4FF47A71           MOV      R1,#+1000
   \   0000007E   1520               MOVS     R0,#+21
   \   00000080   ........           BL       TimerRegist
   \   00000084   4FF49670           MOV      R0,#+300
   \   00000088   ........           BL       OSTimeDly
   \   0000008C   2078               LDRB     R0,[R4, #+0]
   \   0000008E   0028               CMP      R0,#+0
   \   00000090   F3D0               BEQ.N    ??Ethernet0Task_7
   \                     ??Ethernet0Task_6:
   \   00000092   0020               MOVS     R0,#+0
   \   00000094   ........           BL       eLink_Check
   \   00000098   0028               CMP      R0,#+0
   \   0000009A   CDD1               BNE.N    ??Ethernet0Task_1
   \   0000009C   3078               LDRB     R0,[R6, #+0]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   CAD1               BNE.N    ??Ethernet0Task_1
   \   000000A2   04F12003           ADD      R3,R4,#+32
   \   000000A6   4246               MOV      R2,R8
   \   000000A8   0021               MOVS     R1,#+0
   \   000000AA   ........           BL       retSelect
   \   000000AE   C0B2               UXTB     R0,R0
   \   000000B0   60B3               CBZ.N    R0,??Ethernet0Task_8
   \   000000B2   08E0               B.N      ??Ethernet0Task_9
   \                     ??Ethernet0Task_10:
   \   000000B4   0820               MOVS     R0,#+8
   \   000000B6   8DF80000           STRB     R0,[SP, #+0]
   \   000000BA   2B46               MOV      R3,R5
   \   000000BC   7022               MOVS     R2,#+112
   \   000000BE   0121               MOVS     R1,#+1
   \   000000C0   00A8               ADD      R0,SP,#+0
   \   000000C2   ........           BL       NmsDataAckTx
   \                     ??Ethernet0Task_9:
   \   000000C6   0DF10201           ADD      R1,SP,#+2
   \   000000CA   0120               MOVS     R0,#+1
   \   000000CC   2A68               LDR      R2,[R5, #+0]
   \   000000CE   9047               BLX      R2
   \   000000D0   E0B1               CBZ.N    R0,??Ethernet0Task_8
   \   000000D2   4FF47A71           MOV      R1,#+1000
   \   000000D6   2846               MOV      R0,R5
   \   000000D8   ........           BL       N_ProtocolCheck
   \   000000DC   0028               CMP      R0,#+0
   \   000000DE   F2D0               BEQ.N    ??Ethernet0Task_9
   \   000000E0   3868               LDR      R0,[R7, #+0]
   \   000000E2   4389               LDRH     R3,[R0, #+10]
   \   000000E4   2384               STRH     R3,[R4, #+32]
   \   000000E6   4246               MOV      R2,R8
   \   000000E8   0021               MOVS     R1,#+0
   \   000000EA   0020               MOVS     R0,#+0
   \   000000EC   ........           BL       udpSetAddr
   \   000000F0   0020               MOVS     R0,#+0
   \   000000F2   ........           BL       DownLoadGiveupTimerSet
   \   000000F6   28B1               CBZ.N    R0,??Ethernet0Task_11
   \   000000F8   0020               MOVS     R0,#+0
   \   000000FA   ........           BL       DownLoadGiveupTimerSet
   \   000000FE   616A               LDR      R1,[R4, #+36]
   \   00000100   8842               CMP      R0,R1
   \   00000102   D7D1               BNE.N    ??Ethernet0Task_10
   \                     ??Ethernet0Task_11:
   \   00000104   2846               MOV      R0,R5
   \   00000106   ........           BL       N_ProtocolComCheck
   \   0000010A   DCE7               B.N      ??Ethernet0Task_9
   \                     ??Ethernet0Task_8:
   \   0000010C   2078               LDRB     R0,[R4, #+0]
   \   0000010E   60B1               CBZ.N    R0,??Ethernet0Task_12
   \   00000110   1520               MOVS     R0,#+21
   \   00000112   ........           BL       TimeOverCheck
   \   00000116   40B1               CBZ.N    R0,??Ethernet0Task_12
   \   00000118   ........           BL       NmsBootAlarmReport
   \   0000011C   ........           BL       NmsAlarmReport
   \   00000120   4FF47A71           MOV      R1,#+1000
   \   00000124   1520               MOVS     R0,#+21
   \   00000126   ........           BL       TimerRegist
   \                     ??Ethernet0Task_12:
   \   0000012A   C820               MOVS     R0,#+200
   \   0000012C   ........           BL       OSTimeDly
   \   00000130   AFE7               B.N      ??Ethernet0Task_6
    174          	}
    175          }
    176          

   \                                 In section .text, align 2, keep-with-next
    177          INT16U retSelect(INT32U nUSE, SOCKET s, unsigned char *addr, unsigned short int *port)
    178          {
   \                     retSelect:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   84B0               SUB      SP,SP,#+16
   \   00000006   0446               MOV      R4,R0
   \   00000008   0F46               MOV      R7,R1
    179          	INT16U len = 0;
   \   0000000A   0025               MOVS     R5,#+0
    180          	INT8U err;
    181          	
    182          	OSSemPend(Eth0->OSSem, 0, &err);
   \   0000000C   ........           LDR.W    R6,??DataTable24
   \   00000010   02AA               ADD      R2,SP,#+8
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   706A               LDR      R0,[R6, #+36]
   \   00000016   006A               LDR      R0,[R0, #+32]
   \   00000018   ........           BL       OSSemPend
    183          	if ((IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_RECV )) // check interrupt register
   \   0000001C   3802               LSLS     R0,R7,#+8
   \   0000001E   00F20248           ADDW     R8,R0,#+1026
   \   00000022   4146               MOV      R1,R8
   \   00000024   2046               MOV      R0,R4
   \   00000026   ........           BL       IINCHIP_READ
   \   0000002A   4007               LSLS     R0,R0,#+29
   \   0000002C   27D5               BPL.N    ??retSelect_0
    184          	{
    185          		// clear interrupt register
    186          		IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), Sn_IR_RECV);
   \   0000002E   0422               MOVS     R2,#+4
   \   00000030   4146               MOV      R1,R8
   \   00000032   2046               MOV      R0,R4
   \   00000034   ........           BL       IINCHIP_WRITE
    187          
    188          		if ((len = getSn_RX_RSR(nUSE, s)) > 0)			// check Rx data
   \   00000038   3946               MOV      R1,R7
   \   0000003A   2046               MOV      R0,R4
   \   0000003C   ........           BL       getSn_RX_RSR
   \   00000040   0500               MOVS     R5,R0
   \   00000042   1CD0               BEQ.N    ??retSelect_0
    189          		{
    190          			if (len > TX_RX_MAX_BUF_SIZE) len = TX_RX_MAX_BUF_SIZE; 	//if Rx data size is lager than TX_RX_MAX_BUF_SIZE
   \   00000044   41F20100           MOVW     R0,#+4097
   \   00000048   8542               CMP      R5,R0
   \   0000004A   28BF               IT       CS 
   \   0000004C   4FF48055           MOVCS    R5,#+4096
    191          																		//the data size to read is MAX_BUF_SIZE.
    192          			len = recvfrom(nUSE, 0, udp_rx_buf[nUSE], len,(u_char *)returnip[nUSE], &returnport[nUSE]); //read the received data
   \   00000050   06EB4407           ADD      R7,R6,R4, LSL #+1
   \   00000054   07F12000           ADD      R0,R7,#+32
   \   00000058   0190               STR      R0,[SP, #+4]
   \   0000005A   06EB8400           ADD      R0,R6,R4, LSL #+2
   \   0000005E   00F5B550           ADD      R0,R0,#+5792
   \   00000062   0090               STR      R0,[SP, #+0]
   \   00000064   2B46               MOV      R3,R5
   \   00000066   ........           LDR.W    R0,??DataTable25_5
   \   0000006A   00EBC422           ADD      R2,R0,R4, LSL #+11
   \   0000006E   0021               MOVS     R1,#+0
   \   00000070   2046               MOV      R0,R4
   \   00000072   ........           BL       recvfrom
   \   00000076   0546               MOV      R5,R0
    193          			udp_rx_len[nUSE] = len;
   \   00000078   3D83               STRH     R5,[R7, #+24]
    194          			udp_rx_rcnt[nUSE] = 0;
   \   0000007A   0020               MOVS     R0,#+0
   \   0000007C   B883               STRH     R0,[R7, #+28]
    195          		}
    196          	}
    197          /*
    198          #ifdef DBG_ETH0_OUT
    199          	//SerPtr->printf("len: %d\n", len);
    200          	if(len)
    201          	{
    202          		int i;
    203          		for(i = 0; i < len; i++) SerPtr->printf("%02x ", udp_rx_buf[nUSE][i]);
    204          		SerPtr->printf("\n", len);
    205          			
    206          	}
    207          #endif
    208          */
    209          	OSSemPost(Eth0->OSSem);
   \                     ??retSelect_0:
   \   0000007E   706A               LDR      R0,[R6, #+36]
   \   00000080   006A               LDR      R0,[R0, #+32]
   \   00000082   ........           BL       OSSemPost
    210          
    211          	return len;
   \   00000086   2846               MOV      R0,R5
   \   00000088   04B0               ADD      SP,SP,#+16
   \   0000008A   BDE8F081           POP      {R4-R8,PC}       ;; return
    212          }
    213          

   \                                 In section .text, align 2, keep-with-next
    214          unsigned char ret0CheckByte(unsigned short int ByteCnt, unsigned short int *Recv)
    215          {
    216          	return (retCheckByte(ETH0_CHANNEL, ByteCnt, Recv));
   \                     ret0CheckByte:
   \   00000000   0A46               MOV      R2,R1
   \   00000002   0146               MOV      R1,R0
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   ....               B.N      retCheckByte
    217          }
    218          

   \                                 In section .text, align 2, keep-with-next
    219          signed short int ret0GetByte(void)
    220          {
    221          	return (retGetByte(ETH0_CHANNEL));
   \                     ret0GetByte:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   ....               B.N      retGetByte
    222          }
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void udp0SetAddr(INT8U *destaddr, INT16U destport)
    225          {
    226          	udpSetAddr(ETH0_CHANNEL, 0, destaddr, destport);
   \                     udp0SetAddr:
   \   00000000   0B46               MOV      R3,R1
   \   00000002   0246               MOV      R2,R0
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ....               B.N      udpSetAddr
    227          }
    228          

   \                                 In section .text, align 2, keep-with-next
    229          void udp0PutStr(unsigned char *Str, unsigned short int Length, int iEn)
    230          {
   \                     udp0PutStr:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
    231          	udpPutStr(ETH0_CHANNEL, Str, Length, iEn, DstAddr, DstPort);
   \   00000002   ........           LDR.W    R3,??DataTable24
   \   00000006   9C8A               LDRH     R4,[R3, #+20]
   \   00000008   0194               STR      R4,[SP, #+4]
   \   0000000A   9B6D               LDR      R3,[R3, #+88]
   \   0000000C   0093               STR      R3,[SP, #+0]
   \   0000000E   1346               MOV      R3,R2
   \   00000010   0A46               MOV      R2,R1
   \   00000012   0146               MOV      R1,R0
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       udpPutStr
    232          }
   \   0000001A   13BD               POP      {R0,R1,R4,PC}    ;; return
    233          

   \                                 In section .text, align 2, keep-with-next
    234          void udp0desportcmp(SOCKET s, INT8U *pddr, INT8U *addr)
    235          {
    236          	udpdesportcmp(ETH0_CHANNEL, s, pddr, addr);
   \                     udp0desportcmp:
   \   00000000   1346               MOV      R3,R2
   \   00000002   0A46               MOV      R2,R1
   \   00000004   0146               MOV      R1,R0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ....               B.N      udpdesportcmp
    237          }
    238          

   \                                 In section .text, align 2, keep-with-next
    239          unsigned char retCheckByte(INT32U nUSE, unsigned short int ByteCnt, unsigned short int *Recv)
    240          {
   \                     retCheckByte:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   8046               MOV      R8,R0
   \   00000008   0E46               MOV      R6,R1
   \   0000000A   1746               MOV      R7,R2
    241          
    242          	INT16U rval = 0;
   \   0000000C   0024               MOVS     R4,#+0
    243          	INT8U err;
    244          	
    245          	OSSemPend(Eth0->OSSem, 0, &err);
   \   0000000E   ........           LDR.W    R5,??DataTable24
   \   00000012   00AA               ADD      R2,SP,#+0
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   686A               LDR      R0,[R5, #+36]
   \   00000018   006A               LDR      R0,[R0, #+32]
   \   0000001A   ........           BL       OSSemPend
    246          
    247          	*Recv = 0;
   \   0000001E   3C80               STRH     R4,[R7, #+0]
    248          	
    249          	if(udp_rx_rcnt[nUSE] >= TX_RX_MAX_BUF_SIZE || udp_rx_rcnt[nUSE] >= udp_rx_len[nUSE]){
   \   00000020   05EB4800           ADD      R0,R5,R8, LSL #+1
   \   00000024   818B               LDRH     R1,[R0, #+28]
   \   00000026   B1F5805F           CMP      R1,#+4096
   \   0000002A   02D2               BCS.N    ??retCheckByte_0
   \   0000002C   028B               LDRH     R2,[R0, #+24]
   \   0000002E   9142               CMP      R1,R2
   \   00000030   01D3               BCC.N    ??retCheckByte_1
    250          
    251          		udp_rx_len[nUSE] = 0;
   \                     ??retCheckByte_0:
   \   00000032   0483               STRH     R4,[R0, #+24]
   \   00000034   05E0               B.N      ??retCheckByte_2
    252          	}
    253          	else
    254          	{
    255          		*Recv = (udp_rx_len[nUSE] - udp_rx_rcnt[nUSE]);
   \                     ??retCheckByte_1:
   \   00000036   501A               SUBS     R0,R2,R1
   \   00000038   3880               STRH     R0,[R7, #+0]
    256          		if(*Recv >= ByteCnt) rval = TRUE;
   \   0000003A   80B2               UXTH     R0,R0
   \   0000003C   B042               CMP      R0,R6
   \   0000003E   28BF               IT       CS 
   \   00000040   0124               MOVCS    R4,#+1
    257          	}
    258          /*
    259          #ifdef DBG_ETH0_OUT
    260          	SerPtr->printf("Recv: %d, rval: %d \n", *Recv, rval);
    261          #endif
    262          */
    263          	OSSemPost(Eth0->OSSem);
   \                     ??retCheckByte_2:
   \   00000042   686A               LDR      R0,[R5, #+36]
   \   00000044   006A               LDR      R0,[R0, #+32]
   \   00000046   ........           BL       OSSemPost
    264          
    265          	return rval;
   \   0000004A   2046               MOV      R0,R4
   \   0000004C   BDE8F681           POP      {R1,R2,R4-R8,PC}  ;; return
    266          }
    267          

   \                                 In section .text, align 2, keep-with-next
    268          signed short int retGetByte(INT32U nUSE)
    269          {
   \                     retGetByte:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0546               MOV      R5,R0
    270          	INT8U rval = 0;
    271          	INT8U err;
    272          	
    273          	OSSemPend(Eth0->OSSem, 0, &err);
   \   00000004   ........           LDR.W    R4,??DataTable24
   \   00000008   00AA               ADD      R2,SP,#+0
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   606A               LDR      R0,[R4, #+36]
   \   0000000E   006A               LDR      R0,[R0, #+32]
   \   00000010   ........           BL       OSSemPend
    274          
    275          	rval = udp_rx_buf[nUSE][udp_rx_rcnt[nUSE]++];
   \   00000014   04EB4500           ADD      R0,R4,R5, LSL #+1
   \   00000018   818B               LDRH     R1,[R0, #+28]
   \   0000001A   ........           LDR.W    R2,??DataTable25_5
   \   0000001E   02EBC522           ADD      R2,R2,R5, LSL #+11
   \   00000022   8D5C               LDRB     R5,[R1, R2]
   \   00000024   491C               ADDS     R1,R1,#+1
   \   00000026   8183               STRH     R1,[R0, #+28]
    276          
    277          	OSSemPost(Eth0->OSSem);
   \   00000028   606A               LDR      R0,[R4, #+36]
   \   0000002A   006A               LDR      R0,[R0, #+32]
   \   0000002C   ........           BL       OSSemPost
    278          /*
    279          #ifdef DBG_ETH0_OUT
    280          	SerPtr->printf("rval: %02x \n", rval & 0xff);
    281          #endif
    282          */
    283          	return rval & 0xff;
   \   00000030   2846               MOV      R0,R5
   \   00000032   32BD               POP      {R1,R4,R5,PC}    ;; return
    284          }
    285          
    286          

   \                                 In section .text, align 2, keep-with-next
    287          void udpSetAddr(INT32U nUSE, SOCKET s, INT8U *destaddr, INT16U destport)
    288          {
   \                     udpSetAddr:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0646               MOV      R6,R0
   \   00000004   1446               MOV      R4,R2
   \   00000006   1F46               MOV      R7,R3
    289          	
    290          	INT8U err;
    291          	OSSemPend(Eth0->OSSem, 0, &err);
   \   00000008   ........           LDR.W    R5,??DataTable24
   \   0000000C   00AA               ADD      R2,SP,#+0
   \   0000000E   0021               MOVS     R1,#+0
   \   00000010   686A               LDR      R0,[R5, #+36]
   \   00000012   006A               LDR      R0,[R0, #+32]
   \   00000014   ........           BL       OSSemPend
    292          
    293          	if(nUSE == ETH0_CHANNEL)
   \   00000018   002E               CMP      R6,#+0
   \   0000001A   AC65               STR      R4,[R5, #+88]
   \   0000001C   AF82               STRH     R7,[R5, #+20]
   \   0000001E   12D1               BNE.N    ??udpSetAddr_0
    294          	{
    295              	DstAddr = destaddr;
    296          		DstPort = destport;
    297          
    298          		rambackup[1] = (INT8U)(destport >> 0);
   \   00000020   ........           LDR.W    R0,??DataTable25_6
   \   00000024   0168               LDR      R1,[R0, #+0]
   \   00000026   4F70               STRB     R7,[R1, #+1]
    299          		rambackup[2] = (INT8U)(destport >> 8);
   \   00000028   0168               LDR      R1,[R0, #+0]
   \   0000002A   3A0A               LSRS     R2,R7,#+8
   \   0000002C   8A70               STRB     R2,[R1, #+2]
    300          		rambackup[3] = (INT8U)(destaddr[0]);
   \   0000002E   0168               LDR      R1,[R0, #+0]
   \   00000030   2278               LDRB     R2,[R4, #+0]
   \   00000032   CA70               STRB     R2,[R1, #+3]
    301          		rambackup[4] = (INT8U)(destaddr[1]);
   \   00000034   0168               LDR      R1,[R0, #+0]
   \   00000036   6278               LDRB     R2,[R4, #+1]
   \   00000038   0A71               STRB     R2,[R1, #+4]
    302          		rambackup[5] = (INT8U)(destaddr[2]);
   \   0000003A   0168               LDR      R1,[R0, #+0]
   \   0000003C   A278               LDRB     R2,[R4, #+2]
   \   0000003E   4A71               STRB     R2,[R1, #+5]
    303          		rambackup[6] = (INT8U)(destaddr[3]);
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   E178               LDRB     R1,[R4, #+3]
   \   00000044   8171               STRB     R1,[R0, #+6]
    304          	}
    305          	else
    306          	{
    307              	DstAddr = destaddr;
    308          		DstPort = destport;
    309          	}
    310          	OSSemPost(Eth0->OSSem);
   \                     ??udpSetAddr_0:
   \   00000046   686A               LDR      R0,[R5, #+36]
   \   00000048   006A               LDR      R0,[R0, #+32]
   \   0000004A   ........           BL       OSSemPost
    311          }
   \   0000004E   F1BD               POP      {R0,R4-R7,PC}    ;; return
    312          

   \                                 In section .text, align 2, keep-with-next
    313          void udpdesportcmp(INT32U nUSE, SOCKET s, INT8U *pddr, INT8U *addr)
    314          {
   \                     udpdesportcmp:
   \   00000000   30B4               PUSH     {R4,R5}
    315          	INT32U i = 0;
    316          //	INT16U nPort;
    317          	INT8U IsItSame = TRUE;
   \   00000002   0120               MOVS     R0,#+1
    318          	
    319          	for(i = 0; i < 4; i++)
    320          	{
    321          		if(pddr[i] != addr[i]) IsItSame = FALSE;
   \   00000004   1978               LDRB     R1,[R3, #+0]
   \   00000006   1478               LDRB     R4,[R2, #+0]
   \   00000008   8C42               CMP      R4,R1
   \   0000000A   18BF               IT       NE 
   \   0000000C   0020               MOVNE    R0,#+0
   \   0000000E   5478               LDRB     R4,[R2, #+1]
   \   00000010   5D78               LDRB     R5,[R3, #+1]
   \   00000012   AC42               CMP      R4,R5
   \   00000014   18BF               IT       NE 
   \   00000016   0020               MOVNE    R0,#+0
   \   00000018   9478               LDRB     R4,[R2, #+2]
   \   0000001A   9D78               LDRB     R5,[R3, #+2]
   \   0000001C   AC42               CMP      R4,R5
   \   0000001E   18BF               IT       NE 
   \   00000020   0020               MOVNE    R0,#+0
   \   00000022   D478               LDRB     R4,[R2, #+3]
   \   00000024   DD78               LDRB     R5,[R3, #+3]
   \   00000026   AC42               CMP      R4,R5
   \   00000028   00D1               BNE.N    ??udpdesportcmp_0
    322          	}
    323          
    324          	if(IsItSame == FALSE)
   \   0000002A   30B9               CBNZ.N   R0,??udpdesportcmp_1
    325          	{		
    326          		for(i = 0; i < 4; i++) pddr[i] = addr[i];
   \                     ??udpdesportcmp_0:
   \   0000002C   1170               STRB     R1,[R2, #+0]
   \   0000002E   5878               LDRB     R0,[R3, #+1]
   \   00000030   5070               STRB     R0,[R2, #+1]
   \   00000032   9878               LDRB     R0,[R3, #+2]
   \   00000034   9070               STRB     R0,[R2, #+2]
   \   00000036   D878               LDRB     R0,[R3, #+3]
   \   00000038   D070               STRB     R0,[R2, #+3]
    327          //		if(nUSE == ETH0_CHANNEL)	nPort = IpSts->Server_Port;
    328          //		else						nPort = IpSts->Server_Port;
    329          
    330          ///		init_sock(nUSE, s, Sn_MR_UDP, nPort, 0, (INT8U)NULL);
    331          	}
    332          }
   \                     ??udpdesportcmp_1:
   \   0000003A   30BC               POP      {R4,R5}
   \   0000003C   7047               BX       LR               ;; return
    333          

   \                                 In section .text, align 2, keep-with-next
    334          void udpPutStr(INT32U nUSE, unsigned char *Str, unsigned short int Length, int iEn, INT8U *daddr, INT16U dport)
    335          {
   \                     udpPutStr:
   \   00000000   2DE9F043           PUSH     {R4-R9,LR}
   \   00000004   83B0               SUB      SP,SP,#+12
   \   00000006   0546               MOV      R5,R0
   \   00000008   8846               MOV      R8,R1
   \   0000000A   9146               MOV      R9,R2
   \   0000000C   0A9E               LDR      R6,[SP, #+40]
   \   0000000E   0B9C               LDR      R4,[SP, #+44]
    336          	INT8U err;
    337          		
    338          	if(eLink_Check(nUSE)) return;
   \   00000010   ........           BL       eLink_Check
   \   00000014   F0B9               CBNZ.N   R0,??udpPutStr_0
    339          	
    340          	OSSemPend(Eth0->OSSem, 0, &err);
   \   00000016   ........           LDR.W    R7,??DataTable24
   \   0000001A   02AA               ADD      R2,SP,#+8
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   786A               LDR      R0,[R7, #+36]
   \   00000020   006A               LDR      R0,[R0, #+32]
   \   00000022   ........           BL       OSSemPend
    341          /*
    342          #ifdef DBG_ETH0_OUT
    343          	SerPtr->printf("IPAddr: %d.%d.%d.%d\n", 
    344          		daddr[0],
    345          		daddr[1],
    346          		daddr[2],
    347          		daddr[3]);
    348          	
    349          	SerPtr->printf("Port: %d\n", dport);
    350          	{
    351          		int i = 0;
    352          		SerPtr->printf("[TX] ");
    353          
    354          		for(i = 0; i < Length; i++) SerPtr->printf("%02x ", Str[i]);
    355          		SerPtr->printf("\n");
    356          	}
    357          #endif
    358          */	
    359          	udpdesportcmp(nUSE, 0, udp_preAddr[nUSE], daddr);
   \   00000026   3346               MOV      R3,R6
   \   00000028   07EB8500           ADD      R0,R7,R5, LSL #+2
   \   0000002C   00F5B052           ADD      R2,R0,#+5632
   \   00000030   A832               ADDS     R2,R2,#+168
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   2846               MOV      R0,R5
   \   00000036   ........           BL       udpdesportcmp
    360          	
    361          	if(sendto(nUSE, 0, Str, Length,(u_char *)daddr, dport) == 0); //send the received data
   \   0000003A   A4B2               UXTH     R4,R4
   \   0000003C   0194               STR      R4,[SP, #+4]
   \   0000003E   0096               STR      R6,[SP, #+0]
   \   00000040   4B46               MOV      R3,R9
   \   00000042   4246               MOV      R2,R8
   \   00000044   0021               MOVS     R1,#+0
   \   00000046   2846               MOV      R0,R5
   \   00000048   ........           BL       sendto
    362          
    363          	OSSemPost(Eth0->OSSem);
   \   0000004C   786A               LDR      R0,[R7, #+36]
   \   0000004E   006A               LDR      R0,[R0, #+32]
   \   00000050   ........           BL       OSSemPost
    364          
    365          }
   \                     ??udpPutStr_0:
   \   00000054   03B0               ADD      SP,SP,#+12
   \   00000056   BDE8F083           POP      {R4-R9,PC}       ;; return
    366          
    367          
    368          

   \                                 In section .text, align 2, keep-with-next
    369          void EthernetServerMode(INT32U nUSE)
    370          {
   \                     EthernetServerMode:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
    371          	IINCHIP_WRITE(nUSE, Sn_CR(nUSE, 0), Sn_CR_CLOSE);
   \   00000004   1022               MOVS     R2,#+16
   \   00000006   40F20141           MOVW     R1,#+1025
   \   0000000A   ........           BL       IINCHIP_WRITE
    372          	OSTimeDly(2000L);
   \   0000000E   4FF4FA60           MOV      R0,#+2000
   \   00000012   ........           BL       OSTimeDly
    373          	EthernetInitSet(nUSE, TCP_Server_Mode, FALSE);
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   2046               MOV      R0,R4
   \   0000001C   ........           BL       EthernetInitSet
    374          	if (Ethernet_Debug) USART1Printf("Server肺 傈券\n");
   \   00000020   ........           LDR.W    R0,??DataTable25_7
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   18B1               CBZ.N    R0,??EthernetServerMode_0
   \   00000028   ........           ADR.W    R0,`?<Constant "Server\\267\\316 \\300\\374\\310\\257\\n"`
   \   0000002C   ........           BL       USART1Printf
    375          }
   \                     ??EthernetServerMode_0:
   \   00000030   10BD               POP      {R4,PC}          ;; return
    376          

   \                                 In section .text, align 2, keep-with-next
    377          void EthernetClientMode(INT32U nUSE)
    378          {
   \                     EthernetClientMode:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
    379          	IINCHIP_WRITE(nUSE, Sn_CR(nUSE, 0),Sn_CR_CLOSE);
   \   00000004   1022               MOVS     R2,#+16
   \   00000006   40F20141           MOVW     R1,#+1025
   \   0000000A   ........           BL       IINCHIP_WRITE
    380          	OSTimeDly(2000L);
   \   0000000E   4FF4FA60           MOV      R0,#+2000
   \   00000012   ........           BL       OSTimeDly
    381          	EthernetInitSet(nUSE, TCP_Client_Mode, FALSE);
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   2046               MOV      R0,R4
   \   0000001C   ........           BL       EthernetInitSet
    382          	if (Ethernet_Debug) USART1Printf("Client肺 傈券\n");
   \   00000020   ........           LDR.W    R0,??DataTable25_7
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   18B1               CBZ.N    R0,??EthernetClientMode_0
   \   00000028   ........           ADR.W    R0,`?<Constant "Client\\267\\316 \\300\\374\\310\\257\\n"`
   \   0000002C   ........           BL       USART1Printf
    383          }
   \                     ??EthernetClientMode_0:
   \   00000030   10BD               POP      {R4,PC}          ;; return
    384          
    385          

   \                                 In section .text, align 2, keep-with-next
    386          void EthernetPortReset(void)
    387          {
   \                     EthernetPortReset:
   \   00000000   10B5               PUSH     {R4,LR}
    388          	W3150RST = 1;
   \   00000002   ........           LDR.W    R4,??DataTable25_8  ;; 0x40020c14
   \   00000006   2068               LDR      R0,[R4, #+0]
   \   00000008   40F48060           ORR      R0,R0,#0x400
   \   0000000C   2060               STR      R0,[R4, #+0]
    389          	OSTimeDly(100L);
   \   0000000E   6420               MOVS     R0,#+100
   \   00000010   ........           BL       OSTimeDly
    390          	W3150RST = 0;
   \   00000014   2068               LDR      R0,[R4, #+0]
   \   00000016   20F48060           BIC      R0,R0,#0x400
   \   0000001A   2060               STR      R0,[R4, #+0]
    391          	OSTimeDly(100L);
   \   0000001C   6420               MOVS     R0,#+100
   \   0000001E   ........           BL       OSTimeDly
    392          	W3150RST = 1;
   \   00000022   2068               LDR      R0,[R4, #+0]
   \   00000024   40F48060           ORR      R0,R0,#0x400
   \   00000028   2060               STR      R0,[R4, #+0]
    393          }
   \   0000002A   10BD               POP      {R4,PC}          ;; return
    394          

   \                                 In section .text, align 2, keep-with-next
    395          void EthernetInitSet(INT32U nUSE, INT8U Mode, INT8U TcpDebug)
    396          {
   \                     EthernetInitSet:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   8CB0               SUB      SP,SP,#+48
   \   00000006   0446               MOV      R4,R0
   \   00000008   1546               MOV      R5,R2
    397          	INT8U tmp[6];
    398          	INT16U nPort;
    399          	INT8U err0 = 0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   8DF82400           STRB     R0,[SP, #+36]
    400          //	INT8U err1 = 0;
    401          
    402          	
    403          	OSSemPend(Eth0->OSSem, 0, &err0);
   \   00000010   ........           LDR.W    R6,??DataTable24
   \   00000014   09AA               ADD      R2,SP,#+36
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   706A               LDR      R0,[R6, #+36]
   \   0000001A   006A               LDR      R0,[R0, #+32]
   \   0000001C   ........           BL       OSSemPend
    404          	
    405          	W3150RST = 1;
   \   00000020   ........           LDR.W    R0,??DataTable25_8  ;; 0x40020c14
   \   00000024   0168               LDR      R1,[R0, #+0]
   \   00000026   41F48061           ORR      R1,R1,#0x400
   \   0000002A   0160               STR      R1,[R0, #+0]
    406          		
    407          	w3150ainit(nUSE);
   \   0000002C   2046               MOV      R0,R4
   \   0000002E   ........           BL       w3150ainit
    408          
    409          	if(nUSE == ETH0_CHANNEL) 	setGAR(nUSE, IpSts->Server_Gw);
   \   00000032   ........           LDR.W    R7,??DataTable25_3
   \   00000036   3868               LDR      R0,[R7, #+0]
   \   00000038   00F10C01           ADD      R1,R0,#+12
   \   0000003C   2046               MOV      R0,R4
   \   0000003E   ........           BL       setGAR
    410          	else					 	setGAR(nUSE, IpSts->Server_Gw);	
    411          
    412          	getGWIP(nUSE, tmp);
   \   00000042   0AA9               ADD      R1,SP,#+40
   \   00000044   2046               MOV      R0,R4
   \   00000046   ........           BL       getGWIP
    413          	if (TcpDebug)
   \   0000004A   B5B1               CBZ.N    R5,??EthernetInitSet_0
    414          	{
    415          		SerPtr->printf("nUSE CHANNEL: %d\n", nUSE); 
   \   0000004C   ........           LDR.W    R8,??DataTable25_9
   \   00000050   2146               MOV      R1,R4
   \   00000052   ........           ADR.W    R0,`?<Constant "nUSE CHANNEL: %d\\n">`
   \   00000056   D8F80020           LDR      R2,[R8, #+0]
   \   0000005A   1269               LDR      R2,[R2, #+16]
   \   0000005C   9047               BLX      R2
    416          		SerPtr->printf("GatewayAddr: %d.%d.%d.%d\n", 
    417          					tmp[0],
    418          					tmp[1],
    419          					tmp[2],
    420          					tmp[3]);
   \   0000005E   0AA8               ADD      R0,SP,#+40
   \   00000060   C178               LDRB     R1,[R0, #+3]
   \   00000062   0091               STR      R1,[SP, #+0]
   \   00000064   8378               LDRB     R3,[R0, #+2]
   \   00000066   4278               LDRB     R2,[R0, #+1]
   \   00000068   9DF82810           LDRB     R1,[SP, #+40]
   \   0000006C   ........           ADR.W    R0,`?<Constant "GatewayAddr: %d.%d.%d...">`
   \   00000070   D8F800C0           LDR      R12,[R8, #+0]
   \   00000074   DCF810C0           LDR      R12,[R12, #+16]
   \   00000078   E047               BLX      R12
    421          	}
    422          	
    423          	setSHAR(nUSE, IpSts->MacAddress);
   \                     ??EthernetInitSet_0:
   \   0000007A   3868               LDR      R0,[R7, #+0]
   \   0000007C   00F11401           ADD      R1,R0,#+20
   \   00000080   2046               MOV      R0,R4
   \   00000082   ........           BL       setSHAR
    424          	getSHAR(nUSE, tmp);
   \   00000086   0AA9               ADD      R1,SP,#+40
   \   00000088   2046               MOV      R0,R4
   \   0000008A   ........           BL       getSHAR
    425          	if (TcpDebug)
   \   0000008E   0DB3               CBZ.N    R5,??EthernetInitSet_1
    426          	{
    427          		SerPtr->printf("MacAddr: %x[%x].%x[%x].%x[%x].%x[%x].%x[%x].%x[%x]\n", 
    428          					tmp[0],IpSts->MacAddress[0],
    429          					tmp[1],IpSts->MacAddress[1],
    430          					tmp[2],IpSts->MacAddress[2],
    431          					tmp[3],IpSts->MacAddress[3],
    432          					tmp[4],IpSts->MacAddress[4],
    433          					tmp[5],IpSts->MacAddress[5]);
   \   00000090   3968               LDR      R1,[R7, #+0]
   \   00000092   0AA8               ADD      R0,SP,#+40
   \   00000094   4A7E               LDRB     R2,[R1, #+25]
   \   00000096   0892               STR      R2,[SP, #+32]
   \   00000098   9DF82D20           LDRB     R2,[SP, #+45]
   \   0000009C   0792               STR      R2,[SP, #+28]
   \   0000009E   0A7E               LDRB     R2,[R1, #+24]
   \   000000A0   0692               STR      R2,[SP, #+24]
   \   000000A2   0279               LDRB     R2,[R0, #+4]
   \   000000A4   0592               STR      R2,[SP, #+20]
   \   000000A6   CA7D               LDRB     R2,[R1, #+23]
   \   000000A8   0492               STR      R2,[SP, #+16]
   \   000000AA   C278               LDRB     R2,[R0, #+3]
   \   000000AC   0392               STR      R2,[SP, #+12]
   \   000000AE   8A7D               LDRB     R2,[R1, #+22]
   \   000000B0   0292               STR      R2,[SP, #+8]
   \   000000B2   8278               LDRB     R2,[R0, #+2]
   \   000000B4   0192               STR      R2,[SP, #+4]
   \   000000B6   4A7D               LDRB     R2,[R1, #+21]
   \   000000B8   0092               STR      R2,[SP, #+0]
   \   000000BA   4378               LDRB     R3,[R0, #+1]
   \   000000BC   0A7D               LDRB     R2,[R1, #+20]
   \   000000BE   9DF82810           LDRB     R1,[SP, #+40]
   \   000000C2   ........           ADR.W    R0,`?<Constant "MacAddr: %x[%x].%x[%x...">`
   \   000000C6   ........           LDR.W    R12,??DataTable25_9
   \   000000CA   DCF800C0           LDR      R12,[R12, #+0]
   \   000000CE   DCF810C0           LDR      R12,[R12, #+16]
   \   000000D2   E047               BLX      R12
    434          	}
    435          	if(nUSE == ETH0_CHANNEL)	setSUBR(nUSE, IpSts->Server_Sub);
   \                     ??EthernetInitSet_1:
   \   000000D4   3868               LDR      R0,[R7, #+0]
   \   000000D6   00F11001           ADD      R1,R0,#+16
   \   000000DA   2046               MOV      R0,R4
   \   000000DC   ........           BL       setSUBR
    436          	else						setSUBR(nUSE, IpSts->Server_Sub);
    437          	getSUBR(nUSE, tmp);
   \   000000E0   0AA9               ADD      R1,SP,#+40
   \   000000E2   2046               MOV      R0,R4
   \   000000E4   ........           BL       getSUBR
    438          	if (TcpDebug)
   \   000000E8   7DB1               CBZ.N    R5,??EthernetInitSet_2
    439          	{
    440          		SerPtr->printf("SubnetAddr: %d.%d.%d.%d\n", 
    441          			tmp[0],
    442          			tmp[1],
    443          			tmp[2],
    444          			tmp[3]);
   \   000000EA   0AA8               ADD      R0,SP,#+40
   \   000000EC   C178               LDRB     R1,[R0, #+3]
   \   000000EE   0091               STR      R1,[SP, #+0]
   \   000000F0   8378               LDRB     R3,[R0, #+2]
   \   000000F2   4278               LDRB     R2,[R0, #+1]
   \   000000F4   9DF82810           LDRB     R1,[SP, #+40]
   \   000000F8   ........           ADR.W    R0,`?<Constant "SubnetAddr: %d.%d.%d.%d\\n">`
   \   000000FC   ........           LDR.W    R12,??DataTable25_9
   \   00000100   DCF800C0           LDR      R12,[R12, #+0]
   \   00000104   DCF810C0           LDR      R12,[R12, #+16]
   \   00000108   E047               BLX      R12
    445          	}
    446          	if(nUSE == ETH0_CHANNEL)	setSIPR(nUSE, IpSts->Rep_Ip);
   \                     ??EthernetInitSet_2:
   \   0000010A   3968               LDR      R1,[R7, #+0]
   \   0000010C   002C               CMP      R4,#+0
   \   0000010E   0CBF               ITE      EQ 
   \   00000110   0020               MOVEQ    R0,#+0
   \   00000112   2046               MOVNE    R0,R4
    447          	else						setSIPR(nUSE, IpSts->Rep_Ip);
   \   00000114   ........           BL       setSIPR
    448          	getSIPR(nUSE, tmp);
   \   00000118   0AA9               ADD      R1,SP,#+40
   \   0000011A   2046               MOV      R0,R4
   \   0000011C   ........           BL       getSIPR
    449          
    450          	if (TcpDebug)
   \   00000120   6DB1               CBZ.N    R5,??EthernetInitSet_3
    451          	{
    452          		SerPtr->printf("IPAddr: %d.%d.%d.%d\n", 
    453          			tmp[0],
    454          			tmp[1],
    455          			tmp[2],
    456          			tmp[3]);
   \   00000122   0AA8               ADD      R0,SP,#+40
   \   00000124   C178               LDRB     R1,[R0, #+3]
   \   00000126   0091               STR      R1,[SP, #+0]
   \   00000128   8378               LDRB     R3,[R0, #+2]
   \   0000012A   4278               LDRB     R2,[R0, #+1]
   \   0000012C   9DF82810           LDRB     R1,[SP, #+40]
   \   00000130   ........           ADR.W    R0,`?<Constant "IPAddr: %d.%d.%d.%d\\n">`
   \   00000134   ........           LDR.W    R5,??DataTable25_9
   \   00000138   2D68               LDR      R5,[R5, #+0]
   \   0000013A   2D69               LDR      R5,[R5, #+16]
   \   0000013C   A847               BLX      R5
    457          	}
    458          	sysinit(nUSE, 0x55, 0x55);
   \                     ??EthernetInitSet_3:
   \   0000013E   5522               MOVS     R2,#+85
   \   00000140   5521               MOVS     R1,#+85
   \   00000142   2046               MOV      R0,R4
   \   00000144   ........           BL       sysinit
   \   00000148   3868               LDR      R0,[R7, #+0]
   \   0000014A   8388               LDRH     R3,[R0, #+4]
    459          
    460          	if(nUSE == ETH0_CHANNEL)	nPort = IpSts->Rep_Port;
    461          	else						nPort = IpSts->Rep_Port;
    462          
    463          	init_sock(nUSE, 0, Sn_MR_UDP, nPort, 0, (INT8U)NULL);
   \   0000014C   0020               MOVS     R0,#+0
   \   0000014E   0190               STR      R0,[SP, #+4]
   \   00000150   0090               STR      R0,[SP, #+0]
   \   00000152   0222               MOVS     R2,#+2
   \   00000154   0146               MOV      R1,R0
   \   00000156   E0B2               UXTB     R0,R4
   \   00000158   ........           BL       init_sock
    464          
    465          	OSSemPost(Eth0->OSSem);
   \   0000015C   706A               LDR      R0,[R6, #+36]
   \   0000015E   006A               LDR      R0,[R0, #+32]
   \   00000160   ........           BL       OSSemPost
    466          	
    467          	OSTimeDly(1000L);
   \   00000164   4FF47A70           MOV      R0,#+1000
   \   00000168   ........           BL       OSTimeDly
    468          }
   \   0000016C   0CB0               ADD      SP,SP,#+48
   \   0000016E   BDE8F081           POP      {R4-R8,PC}       ;; return
    469          

   \                                 In section .text, align 2, keep-with-next
    470          void init_sock(INT8U nUSE, SOCKET s, uint8 protocol, uint16 port, uint8 flag, uint8 *serverip) 
    471          {
   \                     init_sock:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0546               MOV      R5,R0
   \   00000006   8946               MOV      R9,R1
   \   00000008   1746               MOV      R7,R2
   \   0000000A   9846               MOV      R8,R3
   \   0000000C   089C               LDR      R4,[SP, #+32]
   \   0000000E   099E               LDR      R6,[SP, #+36]
    472          	// sflag: 1: clent mode, 0: server mode
    473          	socket(nUSE, s, protocol, port, flag);	/* Create a new socket */
   \   00000010   0094               STR      R4,[SP, #+0]
   \   00000012   ........           BL       socket
    474          
    475          	if(protocol == Sn_MR_TCP)
   \   00000016   012F               CMP      R7,#+1
   \   00000018   12D1               BNE.N    ??init_sock_0
    476          	{
    477          		if (serverip != NULL)
   \   0000001A   6EB1               CBZ.N    R6,??init_sock_1
    478          		{
    479          		
    480          			if (connect(nUSE, s, serverip, port) == 0) {
   \   0000001C   4346               MOV      R3,R8
   \   0000001E   3246               MOV      R2,R6
   \   00000020   4946               MOV      R1,R9
   \   00000022   2846               MOV      R0,R5
   \   00000024   ........           BL       connect
   \   00000028   50B9               CBNZ.N   R0,??init_sock_0
    481          				socket(nUSE, s, Sn_MR_TCP, port, flag);	/* Create a new socket */
   \   0000002A   0094               STR      R4,[SP, #+0]
   \   0000002C   4346               MOV      R3,R8
   \   0000002E   0122               MOVS     R2,#+1
   \   00000030   4946               MOV      R1,R9
   \   00000032   2846               MOV      R0,R5
   \   00000034   ........           BL       socket
    482          				listen(nUSE, s);           				/* Server Mode */
    483          			}
    484          		}
    485          		else
    486          		{
    487          			listen(nUSE, s);           			/* Server Mode */
   \                     ??init_sock_1:
   \   00000038   4946               MOV      R1,R9
   \   0000003A   2846               MOV      R0,R5
   \   0000003C   ........           BL       listen
    488          		}
    489          	}
    490          }
   \                     ??init_sock_0:
   \   00000040   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    491          

   \                                 In section .text, align 2, keep-with-next
    492          INT32U eLink_Check(INT32U nUSE)
    493          {
    494          	INT32U rval = FALSE;
   \                     eLink_Check:
   \   00000000   0021               MOVS     R1,#+0
    495          
    496                   if(nUSE == ETH0_CHANNEL) 	rval = GPIOD->__B.IDR.B9;
   \   00000002   20B9               CBNZ.N   R0,??eLink_Check_0
   \   00000004   ........           LDR.W    R0,??DataTable25_10  ;; 0x40020c10
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   C0F34021           UBFX     R1,R0,#+9,#+1
    497          //	else if(nUSE == ETH1_CHANNEL)	rval = GPIOA->IDR.B0;
    498          	
    499          	return rval;
   \                     ??eLink_Check_0:
   \   0000000E   0846               MOV      R0,R1
   \   00000010   7047               BX       LR               ;; return
    500          
    501          }
    502          
    503          //=======================================================================//

   \                                 In section .text, align 2, keep-with-next
    504          INT32U N_ProtocolCheck(__N_ProtocolPtr *nPtr, INT32U ResTime)
    505          {
   \                     N_ProtocolCheck:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0446               MOV      R4,R0
    506          	INT16U nCnt;
    507          	INT16U i = 0, n = 0;
    508          	INT32U RetVal;
    509          	INT8U Data;
    510          	
    511          	NMS *Recv = nPtr->Recv;
   \   00000008   656A               LDR      R5,[R4, #+36]
    512          
    513          	TimerRegist(nPtr->TimerRx, ResTime);
   \   0000000A   208B               LDRH     R0,[R4, #+24]
   \   0000000C   C0B2               UXTB     R0,R0
   \   0000000E   ........           BL       TimerRegist
    514          	Recv->Command = NULLcomm;	// RX Command Clear
   \   00000012   E020               MOVS     R0,#+224
   \   00000014   6874               STRB     R0,[R5, #+17]
    515          
    516          	//====================//
    517          	// Sync Check 4 bytes //
    518          	//======================================================================//
    519          	n = 4;
    520          	
    521          	RetVal = FALSE;
   \   00000016   02E0               B.N      ??N_ProtocolCheck_0
    522          	while (RetVal == FALSE)
    523          	{
    524          		if(TimeOverCheck(nPtr->TimerRx)) return FALSE;
    525          
    526          		if(nPtr->CheckByte(1, &nCnt))
    527          		{
    528          			Data = nPtr->RxGetByte();
    529          			
    530          			if(N_STX == Data/*nPtr->RxGetByte()*/)
    531          			{
    532          				Recv->Sync = N_STX;
    533          				RetVal = TRUE;
    534          			}
    535          		}
    536          		else OSTimeDly(100L);
   \                     ??N_ProtocolCheck_1:
   \   00000018   6420               MOVS     R0,#+100
   \   0000001A   ........           BL       OSTimeDly
   \                     ??N_ProtocolCheck_0:
   \   0000001E   208B               LDRH     R0,[R4, #+24]
   \   00000020   C0B2               UXTB     R0,R0
   \   00000022   ........           BL       TimeOverCheck
   \   00000026   08B1               CBZ.N    R0,??N_ProtocolCheck_2
   \                     ??N_ProtocolCheck_3:
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   9CE0               B.N      ??N_ProtocolCheck_4
   \                     ??N_ProtocolCheck_2:
   \   0000002C   00A9               ADD      R1,SP,#+0
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   2268               LDR      R2,[R4, #+0]
   \   00000032   9047               BLX      R2
   \   00000034   0028               CMP      R0,#+0
   \   00000036   EFD0               BEQ.N    ??N_ProtocolCheck_1
   \   00000038   6068               LDR      R0,[R4, #+4]
   \   0000003A   8047               BLX      R0
   \   0000003C   C0B2               UXTB     R0,R0
   \   0000003E   0228               CMP      R0,#+2
   \   00000040   EDD1               BNE.N    ??N_ProtocolCheck_0
   \   00000042   2870               STRB     R0,[R5, #+0]
   \   00000044   4FF00108           MOV      R8,#+1
    537          	}
    538          	
    539          	TimerRegist(nPtr->TimerRx, Time1Sec);
   \   00000048   4FF47A71           MOV      R1,#+1000
   \   0000004C   208B               LDRH     R0,[R4, #+24]
   \   0000004E   C0B2               UXTB     R0,R0
   \   00000050   ........           BL       TimerRegist
    540          
    541          	//======================//
    542          	// Header Check 5 bytes //
    543          	//======================================================================//
    544          	n = 19;
   \   00000054   08E0               B.N      ??N_ProtocolCheck_5
    545          	while ( !nPtr->CheckByte(n, &nCnt) )
    546          	{
    547          		if (TRUE == TimeOverCheck(nPtr->TimerRx) ) return(FALSE);
   \                     ??N_ProtocolCheck_6:
   \   00000056   208B               LDRH     R0,[R4, #+24]
   \   00000058   C0B2               UXTB     R0,R0
   \   0000005A   ........           BL       TimeOverCheck
   \   0000005E   0128               CMP      R0,#+1
   \   00000060   E2D0               BEQ.N    ??N_ProtocolCheck_3
    548          		OSTimeDly(100L);
   \   00000062   6420               MOVS     R0,#+100
   \   00000064   ........           BL       OSTimeDly
    549          	}
   \                     ??N_ProtocolCheck_5:
   \   00000068   00A9               ADD      R1,SP,#+0
   \   0000006A   1320               MOVS     R0,#+19
   \   0000006C   2268               LDR      R2,[R4, #+0]
   \   0000006E   9047               BLX      R2
   \   00000070   0028               CMP      R0,#+0
   \   00000072   F0D0               BEQ.N    ??N_ProtocolCheck_6
    550          	Recv->R_Code		= nPtr->RxGetByte();
   \   00000074   6068               LDR      R0,[R4, #+4]
   \   00000076   8047               BLX      R0
   \   00000078   6870               STRB     R0,[R5, #+1]
    551          	for(i=0; i<10; i++)
   \   0000007A   2F46               MOV      R7,R5
   \   0000007C   0A26               MOVS     R6,#+10
    552          		Recv->RepeaterID[i]	= nPtr->RxGetByte();
   \                     ??N_ProtocolCheck_7:
   \   0000007E   6068               LDR      R0,[R4, #+4]
   \   00000080   8047               BLX      R0
   \   00000082   B870               STRB     R0,[R7, #+2]
   \   00000084   7F1C               ADDS     R7,R7,#+1
   \   00000086   761E               SUBS     R6,R6,#+1
   \   00000088   F9D1               BNE.N    ??N_ProtocolCheck_7
    553          	Recv->P_ID[0]		= nPtr->RxGetByte();
   \   0000008A   6068               LDR      R0,[R4, #+4]
   \   0000008C   8047               BLX      R0
   \   0000008E   2873               STRB     R0,[R5, #+12]
    554          	Recv->P_ID[1]		= nPtr->RxGetByte();
   \   00000090   6068               LDR      R0,[R4, #+4]
   \   00000092   8047               BLX      R0
   \   00000094   6873               STRB     R0,[R5, #+13]
    555          	Recv->DstID.MuID	= nPtr->RxGetByte();
   \   00000096   6068               LDR      R0,[R4, #+4]
   \   00000098   8047               BLX      R0
   \   0000009A   A873               STRB     R0,[R5, #+14]
    556          	Recv->DstID.HuID	= nPtr->RxGetByte();
   \   0000009C   6068               LDR      R0,[R4, #+4]
   \   0000009E   8047               BLX      R0
   \   000000A0   E873               STRB     R0,[R5, #+15]
    557          	Recv->DstID.RuID	= nPtr->RxGetByte();
   \   000000A2   6068               LDR      R0,[R4, #+4]
   \   000000A4   8047               BLX      R0
   \   000000A6   2874               STRB     R0,[R5, #+16]
    558          	Recv->Command		= nPtr->RxGetByte();
   \   000000A8   6068               LDR      R0,[R4, #+4]
   \   000000AA   8047               BLX      R0
   \   000000AC   6874               STRB     R0,[R5, #+17]
    559          	Recv->DataLength[0]   = nPtr->RxGetByte();
   \   000000AE   6068               LDR      R0,[R4, #+4]
   \   000000B0   8047               BLX      R0
   \   000000B2   A874               STRB     R0,[R5, #+18]
    560          	Recv->DataLength[1]   = nPtr->RxGetByte();
   \   000000B4   6068               LDR      R0,[R4, #+4]
   \   000000B6   8047               BLX      R0
   \   000000B8   E874               STRB     R0,[R5, #+19]
    561          	Recv->SubDataLength = (((INT16U)Recv->DataLength[0])<<8) + (((INT16U)Recv->DataLength[1])&0xff);
   \   000000BA   41F21900           MOVW     R0,#+4121
   \   000000BE   A97C               LDRB     R1,[R5, #+18]
   \   000000C0   EA7C               LDRB     R2,[R5, #+19]
   \   000000C2   02EB0121           ADD      R1,R2,R1, LSL #+8
   \   000000C6   4153               STRH     R1,[R0, R5]
    562          	n = Recv->SubDataLength;
   \   000000C8   475B               LDRH     R7,[R0, R5]
    563          	
    564          	//====================//
    565          	// Data Check n bytes //
    566          	//======================================================================//
    567          	if ( n > BODYSIZEMAX ) return(FALSE);
   \   000000CA   B7F5006F           CMP      R7,#+2048
   \   000000CE   09DD               BLE.N    ??N_ProtocolCheck_8
   \   000000D0   AAE7               B.N      ??N_ProtocolCheck_3
    568          
    569          	while ( !nPtr->CheckByte(n + 2, &nCnt) )
    570          	{
    571          		if(TimeOverCheck(nPtr->TimerRx)) return(FALSE);
   \                     ??N_ProtocolCheck_9:
   \   000000D2   208B               LDRH     R0,[R4, #+24]
   \   000000D4   C0B2               UXTB     R0,R0
   \   000000D6   ........           BL       TimeOverCheck
   \   000000DA   0028               CMP      R0,#+0
   \   000000DC   A4D1               BNE.N    ??N_ProtocolCheck_3
    572          		OSTimeDly(100L);
   \   000000DE   6420               MOVS     R0,#+100
   \   000000E0   ........           BL       OSTimeDly
    573          	}
   \                     ??N_ProtocolCheck_8:
   \   000000E4   00A9               ADD      R1,SP,#+0
   \   000000E6   B81C               ADDS     R0,R7,#+2
   \   000000E8   80B2               UXTH     R0,R0
   \   000000EA   2268               LDR      R2,[R4, #+0]
   \   000000EC   9047               BLX      R2
   \   000000EE   0028               CMP      R0,#+0
   \   000000F0   EFD0               BEQ.N    ??N_ProtocolCheck_9
    574          	for(i = 0; i < n+2; i++ )	Recv->Data[i] = nPtr->RxGetByte();
   \   000000F2   0026               MOVS     R6,#+0
   \   000000F4   A946               MOV      R9,R5
   \   000000F6   07F1020A           ADD      R10,R7,#+2
   \                     ??N_ProtocolCheck_10:
   \   000000FA   6068               LDR      R0,[R4, #+4]
   \   000000FC   8047               BLX      R0
   \   000000FE   89F81400           STRB     R0,[R9, #+20]
   \   00000102   701C               ADDS     R0,R6,#+1
   \   00000104   09F10109           ADD      R9,R9,#+1
   \   00000108   86B2               UXTH     R6,R0
   \   0000010A   5645               CMP      R6,R10
   \   0000010C   F5DB               BLT.N    ??N_ProtocolCheck_10
    575          
    576          	// ETX
    577          	Recv->Data[i] = nPtr->RxGetByte();	
   \   0000010E   7619               ADDS     R6,R6,R5
   \   00000110   6068               LDR      R0,[R4, #+4]
   \   00000112   8047               BLX      R0
   \   00000114   3075               STRB     R0,[R6, #+20]
    578          
    579          	if(Recv->Data[i]!=ETX)	return	FALSE;
   \   00000116   307D               LDRB     R0,[R6, #+20]
   \   00000118   0328               CMP      R0,#+3
   \   0000011A   85D1               BNE.N    ??N_ProtocolCheck_3
    580          
    581          /*
    582          #ifdef DBG_ETH1_OUT
    583          	if(nPtr == Eth0)
    584          	{
    585          		pUSART1.printf("\n\n Eth0 RX[%d] = ",  nPtr->Recv->SubDataLength+23);
    586          		for(i=0; i<nPtr->Recv->SubDataLength+23; i++)
    587          			pUSART1.printf("%02x ", *((INT8U *)nPtr->Recv + i));
    588          	}
    589          #endif
    590          */
    591          	//===========//
    592          	// CRC Check //
    593          	//======================================================================//
    594          	Recv->Crc = Crc16Calc( &Recv->R_Code, n + 19, NULL);
   \   0000011C   41F21706           MOVW     R6,#+4119
   \   00000120   0022               MOVS     R2,#+0
   \   00000122   07F11301           ADD      R1,R7,#+19
   \   00000126   681C               ADDS     R0,R5,#+1
   \   00000128   ........           BL       Crc16Calc
   \   0000012C   7053               STRH     R0,[R6, R5]
    595          /*
    596          #ifdef DBG_ETH1_OUT
    597          	pUSART1.printf("%04x [%02x][%02x]", Recv->Crc, Recv->Data[n+0], Recv->Data[n+1]);
    598          #endif
    599          */
    600          	if ( (INT8U)(Recv->Crc>>8)	!= Recv->Data[n+0] ) RetVal = FALSE;
   \   0000012E   7819               ADDS     R0,R7,R5
   \   00000130   715B               LDRH     R1,[R6, R5]
   \   00000132   090A               LSRS     R1,R1,#+8
   \   00000134   027D               LDRB     R2,[R0, #+20]
   \   00000136   9142               CMP      R1,R2
   \   00000138   18BF               IT       NE 
   \   0000013A   4FF00008           MOVNE    R8,#+0
    601          	if ( (INT8U)(Recv->Crc) 	!= Recv->Data[n+1] ) RetVal = FALSE;
   \   0000013E   715B               LDRH     R1,[R6, R5]
   \   00000140   407D               LDRB     R0,[R0, #+21]
   \   00000142   C9B2               UXTB     R1,R1
   \   00000144   8142               CMP      R1,R0
   \   00000146   02D1               BNE.N    ??N_ProtocolCheck_11
    602          	//======================================================================//
    603          	if ( RetVal == FALSE )
   \   00000148   B8F1000F           CMP      R8,#+0
   \   0000014C   0AD1               BNE.N    ??N_ProtocolCheck_12
    604          	{
    605          		INT8U	uTemp[2];
    606          
    607          		uTemp[0] = ERR_CRC;
   \                     ??N_ProtocolCheck_11:
   \   0000014E   0120               MOVS     R0,#+1
   \   00000150   8DF80200           STRB     R0,[SP, #+2]
    608          		NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
   \   00000154   2346               MOV      R3,R4
   \   00000156   7022               MOVS     R2,#+112
   \   00000158   0121               MOVS     R1,#+1
   \   0000015A   0DF10200           ADD      R0,SP,#+2
   \   0000015E   ........           BL       NmsDataAckTx
    609          		return FALSE;
   \   00000162   61E7               B.N      ??N_ProtocolCheck_3
    610          	}
    611          	return TRUE;
   \                     ??N_ProtocolCheck_12:
   \   00000164   0120               MOVS     R0,#+1
   \                     ??N_ProtocolCheck_4:
   \   00000166   BDE8F687           POP      {R1,R2,R4-R10,PC}  ;; return
    612          }
    613          
    614          //=======================================================================//

   \                                 In section .text, align 2, keep-with-next
    615          void N_ProtocolComCheck (__N_ProtocolPtr *nPtr)
    616          {
   \                     N_ProtocolComCheck:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0446               MOV      R4,R0
    617          	INT8U	PathChk = 0;
    618          	INT8U	uTemp[2];
    619          
    620          	__ProtocolPtr *TarPtr;
    621          	
    622          	NMS *Recv = nPtr->Recv;
   \   00000006   656A               LDR      R5,[R4, #+36]
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   05F10E01           ADD      R1,R5,#+14
   \   0000000E   0322               MOVS     R2,#+3
   \   00000010   ........           BL       __aeabi_memcpy
    623          
    624          	PathChk = ID_Check(Recv->DstID);
   \   00000014   0098               LDR      R0,[SP, #+0]
   \   00000016   ........           BL       ID_Check
    625          	
    626          	if(PathChk == MY_PATH)
   \   0000001A   0628               CMP      R0,#+6
   \   0000001C   58D1               BNE.N    ??N_ProtocolComCheck_0
    627          	{
    628          		switch(Recv->Command)
   \   0000001E   05F10F00           ADD      R0,R5,#+15
   \   00000022   8078               LDRB     R0,[R0, #+2]
   \   00000024   1038               SUBS     R0,R0,#+16
   \   00000026   07D0               BEQ.N    ??N_ProtocolComCheck_1
   \   00000028   401E               SUBS     R0,R0,#+1
   \   0000002A   19D0               BEQ.N    ??N_ProtocolComCheck_2
   \   0000002C   0F38               SUBS     R0,R0,#+15
   \   0000002E   2DD0               BEQ.N    ??N_ProtocolComCheck_3
   \   00000030   4038               SUBS     R0,R0,#+64
   \   00000032   0328               CMP      R0,#+3
   \   00000034   3BD9               BLS.N    ??N_ProtocolComCheck_4
   \   00000036   41E0               B.N      ??N_ProtocolComCheck_5
   \                     ??N_ProtocolComCheck_1:
   \   00000038   00A8               ADD      R0,SP,#+0
   \   0000003A   05F10E01           ADD      R1,R5,#+14
   \   0000003E   0322               MOVS     R2,#+3
   \   00000040   ........           BL       __aeabi_memcpy
    629          		{
    630          			//-----------------------------------------------------------------------//
    631          			case N_Status_CMD:
    632          				NmsDataCopy(MU_PATH, Recv->DstID);
   \   00000044   0099               LDR      R1,[SP, #+0]
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   ........           BL       NmsDataCopy
    633          				NmsDataAckTx((INT8U*)N_MuStatus, sizeof(__N_MU_STS), N_Status_CMD, nPtr);
   \   0000004C   2346               MOV      R3,R4
   \   0000004E   1022               MOVS     R2,#+16
   \                     ??N_ProtocolComCheck_6:
   \   00000050   FC21               MOVS     R1,#+252
   \   00000052   ........           LDR.W    R0,??DataTable24
   \   00000056   806A               LDR      R0,[R0, #+40]
   \                     ??N_ProtocolComCheck_7:
   \   00000058   ........           BL       NmsDataAckTx
    634          			break;
   \                     ??N_ProtocolComCheck_8:
   \   0000005C   05B0               ADD      SP,SP,#+20
   \   0000005E   F0BD               POP      {R4-R7,PC}       ;; return
    635          
    636          			case N_Control_CMD:
    637          				if(Recv->SubDataLength != sizeof(__N_MU_CTRL)) break;
   \                     ??N_ProtocolComCheck_2:
   \   00000060   41F21900           MOVW     R0,#+4121
   \   00000064   405B               LDRH     R0,[R0, R5]
   \   00000066   6828               CMP      R0,#+104
   \   00000068   F8D1               BNE.N    ??N_ProtocolComCheck_8
    638          
    639          				N_SetDnrCtrlData((__N_MU_CTRL*)Recv->Data);
   \   0000006A   05F11400           ADD      R0,R5,#+20
   \   0000006E   ........           BL       N_SetDnrCtrlData
   \   00000072   00A8               ADD      R0,SP,#+0
   \   00000074   05F10E01           ADD      R1,R5,#+14
   \   00000078   0322               MOVS     R2,#+3
   \   0000007A   ........           BL       __aeabi_memcpy
    640          				NmsDataCopy(MU_PATH, Recv->DstID);
   \   0000007E   0099               LDR      R1,[SP, #+0]
   \   00000080   0020               MOVS     R0,#+0
   \   00000082   ........           BL       NmsDataCopy
    641          				NmsDataAckTx((INT8U*)N_MuStatus, sizeof(__N_MU_STS), N_Control_CMD, nPtr);
   \   00000086   2346               MOV      R3,R4
   \   00000088   1122               MOVS     R2,#+17
   \   0000008A   E1E7               B.N      ??N_ProtocolComCheck_6
    642          			break;
    643          
    644          			case N_Alarm_CMD:
    645          				MuStatus->MuAlm.Reset_Alarm = 0;
   \                     ??N_ProtocolComCheck_3:
   \   0000008C   ........           LDR.W    R0,??DataTable26
   \   00000090   0168               LDR      R1,[R0, #+0]
   \   00000092   91F85922           LDRB     R2,[R1, #+601]
   \   00000096   02F0F702           AND      R2,R2,#0xF7
   \   0000009A   81F85922           STRB     R2,[R1, #+601]
    646          				MuStatus->ResetReason = 0;
   \   0000009E   0068               LDR      R0,[R0, #+0]
   \   000000A0   0021               MOVS     R1,#+0
   \   000000A2   80F8AF13           STRB     R1,[R0, #+943]
    647          
    648          				MuBootCnt = 0;
   \   000000A6   ........           LDR.W    R0,??DataTable24
   \   000000AA   4170               STRB     R1,[R0, #+1]
    649          			break;
   \   000000AC   D6E7               B.N      ??N_ProtocolComCheck_8
    650          
    651          			//-----------------------------------------------------------------------//
    652          			case N_DownloadCMD:
    653          			case N_DownloadCMDConfirm:
    654          			case N_DownLoadData:
    655          			case N_DownLoadDataConfirm:
    656          				DownLoadGiveupTimerSet((INT32U)nPtr);
   \                     ??N_ProtocolComCheck_4:
   \   000000AE   2046               MOV      R0,R4
   \   000000B0   ........           BL       DownLoadGiveupTimerSet
    657          				WRCS_DownloadFunc(nPtr);
   \   000000B4   2046               MOV      R0,R4
   \   000000B6   ........           BL       WRCS_DownloadFunc
    658          			break;
   \   000000BA   CFE7               B.N      ??N_ProtocolComCheck_8
    659          
    660          			//-----------------------------------------------------------------------//
    661          			default:
    662          				uTemp[0] = ERR_FRAME;
   \                     ??N_ProtocolComCheck_5:
   \   000000BC   0220               MOVS     R0,#+2
   \                     ??N_ProtocolComCheck_9:
   \   000000BE   8DF80800           STRB     R0,[SP, #+8]
    663          				NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
   \   000000C2   2346               MOV      R3,R4
   \   000000C4   7022               MOVS     R2,#+112
   \   000000C6   0121               MOVS     R1,#+1
   \   000000C8   02A8               ADD      R0,SP,#+8
   \   000000CA   ........           BL       NmsDataAckTx
    664          			break;
   \   000000CE   C5E7               B.N      ??N_ProtocolComCheck_8
    665          		}
    666          	}	
    667          	else if(PathChk == HU_PATH)
   \                     ??N_ProtocolComCheck_0:
   \   000000D0   0128               CMP      R0,#+1
   \   000000D2   40F0AA80           BNE.W    ??N_ProtocolComCheck_10
   \   000000D6   00A8               ADD      R0,SP,#+0
   \   000000D8   05F10E01           ADD      R1,R5,#+14
   \   000000DC   0322               MOVS     R2,#+3
   \   000000DE   ........           BL       __aeabi_memcpy
    668          	{
    669          		if(!InstallCheck(Recv->DstID, HU_PATH))
   \   000000E2   0121               MOVS     R1,#+1
   \   000000E4   0098               LDR      R0,[SP, #+0]
   \   000000E6   ........           BL       InstallCheck
   \   000000EA   08B9               CBNZ.N   R0,??N_ProtocolComCheck_11
    670          		{
    671          			uTemp[0] = ERR_NOT_INST;
   \                     ??N_ProtocolComCheck_12:
   \   000000EC   0420               MOVS     R0,#+4
   \   000000EE   E6E7               B.N      ??N_ProtocolComCheck_9
    672          			NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
    673          			return;
    674          		}
    675          		
    676          		switch(Recv->Command)
   \                     ??N_ProtocolComCheck_11:
   \   000000F0   05F20F07           ADDW     R7,R5,#+15
   \   000000F4   B878               LDRB     R0,[R7, #+2]
   \   000000F6   1038               SUBS     R0,R0,#+16
   \   000000F8   07D0               BEQ.N    ??N_ProtocolComCheck_13
   \   000000FA   401E               SUBS     R0,R0,#+1
   \   000000FC   15D0               BEQ.N    ??N_ProtocolComCheck_14
   \   000000FE   0F38               SUBS     R0,R0,#+15
   \   00000100   51D0               BEQ.N    ??N_ProtocolComCheck_15
   \   00000102   4038               SUBS     R0,R0,#+64
   \   00000104   0328               CMP      R0,#+3
   \   00000106   57D9               BLS.N    ??N_ProtocolComCheck_16
   \   00000108   A8E7               B.N      ??N_ProtocolComCheck_8
   \                     ??N_ProtocolComCheck_13:
   \   0000010A   00A8               ADD      R0,SP,#+0
   \   0000010C   05F10E01           ADD      R1,R5,#+14
   \   00000110   0322               MOVS     R2,#+3
   \   00000112   ........           BL       __aeabi_memcpy
    677          		{
    678          			//-----------------------------------------------------------------------//
    679          			case N_Status_CMD:
    680          				NmsDataCopy(HU_PATH, Recv->DstID);
   \   00000116   0099               LDR      R1,[SP, #+0]
   \   00000118   0120               MOVS     R0,#+1
   \   0000011A   ........           BL       NmsDataCopy
    681          				NmsDataAckTx((INT8U*)N_HuStatus, sizeof(__N_HU_STS), N_Status_CMD, nPtr);
   \   0000011E   2346               MOV      R3,R4
   \   00000120   1022               MOVS     R2,#+16
   \   00000122   8121               MOVS     R1,#+129
   \   00000124   ....               LDR.N    R0,??DataTable24
   \   00000126   C06A               LDR      R0,[R0, #+44]
   \   00000128   96E7               B.N      ??N_ProtocolComCheck_7
    682          			break;
    683          
    684          			case N_Control_CMD:
    685          				if(Recv->SubDataLength != sizeof(__N_HU_CTRL)) break;
   \                     ??N_ProtocolComCheck_14:
   \   0000012A   41F21900           MOVW     R0,#+4121
   \   0000012E   405B               LDRH     R0,[R0, R5]
   \   00000130   2A28               CMP      R0,#+42
   \   00000132   93D1               BNE.N    ??N_ProtocolComCheck_8
    686          
    687          				GetHuCommand();
   \   00000134   ........           BL       GetHuCommand
    688          				
    689          				if((Recv->DstID.HuID==0)||(Recv->DstID.HuID==1))		TarPtr = (__ProtocolPtr *)Hu_Ser2Ser;
   \   00000138   E87B               LDRB     R0,[R5, #+15]
   \   0000013A   08B1               CBZ.N    R0,??N_ProtocolComCheck_17
   \   0000013C   0128               CMP      R0,#+1
   \   0000013E   02D1               BNE.N    ??N_ProtocolComCheck_18
   \                     ??N_ProtocolComCheck_17:
   \   00000140   ........           LDR.W    R1,??DataTable27
   \   00000144   13E0               B.N      ??N_ProtocolComCheck_19
    690          				else if((Recv->DstID.HuID==2)||(Recv->DstID.HuID==3))	TarPtr = (__ProtocolPtr *)Hu_Ser3Ser;
   \                     ??N_ProtocolComCheck_18:
   \   00000146   0228               CMP      R0,#+2
   \   00000148   01D0               BEQ.N    ??N_ProtocolComCheck_20
   \   0000014A   0328               CMP      R0,#+3
   \   0000014C   02D1               BNE.N    ??N_ProtocolComCheck_21
   \                     ??N_ProtocolComCheck_20:
   \   0000014E   ........           LDR.W    R1,??DataTable27_1
   \   00000152   0CE0               B.N      ??N_ProtocolComCheck_19
    691          				else if((Recv->DstID.HuID==4)||(Recv->DstID.HuID==5))	TarPtr = (__ProtocolPtr *)Hu_Ser5Ser;
   \                     ??N_ProtocolComCheck_21:
   \   00000154   0428               CMP      R0,#+4
   \   00000156   01D0               BEQ.N    ??N_ProtocolComCheck_22
   \   00000158   0528               CMP      R0,#+5
   \   0000015A   02D1               BNE.N    ??N_ProtocolComCheck_23
   \                     ??N_ProtocolComCheck_22:
   \   0000015C   ........           LDR.W    R1,??DataTable27_2
   \   00000160   05E0               B.N      ??N_ProtocolComCheck_19
    692          				else if((Recv->DstID.HuID==6)||(Recv->DstID.HuID==7))	TarPtr = (__ProtocolPtr *)Hu_Ser6Ser;
   \                     ??N_ProtocolComCheck_23:
   \   00000162   0628               CMP      R0,#+6
   \   00000164   01D0               BEQ.N    ??N_ProtocolComCheck_24
   \   00000166   0728               CMP      R0,#+7
   \   00000168   02D1               BNE.N    ??N_ProtocolComCheck_25
   \                     ??N_ProtocolComCheck_24:
   \   0000016A   ........           LDR.W    R1,??DataTable27_3
   \                     ??N_ProtocolComCheck_19:
   \   0000016E   0E68               LDR      R6,[R1, #+0]
    693          
    694          				MuxControl(Recv->DstID.HuID);
   \                     ??N_ProtocolComCheck_25:
   \   00000170   ........           BL       MuxControl
   \   00000174   00A8               ADD      R0,SP,#+0
   \   00000176   05F10E01           ADD      R1,R5,#+14
   \   0000017A   0322               MOVS     R2,#+3
   \   0000017C   ........           BL       __aeabi_memcpy
    695          				Eth0_Control_Hu_Conv(Recv->DstID, (__N_HU_CTRL*)Recv->Data, TarPtr);
   \   00000180   3246               MOV      R2,R6
   \   00000182   05F11401           ADD      R1,R5,#+20
   \   00000186   0098               LDR      R0,[SP, #+0]
   \   00000188   ........           BL       Eth0_Control_Hu_Conv
    696          
    697          				if(ProtocolCheck(TarPtr, (Time1Sec*2)))
   \                     ??N_ProtocolComCheck_26:
   \   0000018C   4FF4FA61           MOV      R1,#+2000
   \                     ??N_ProtocolComCheck_27:
   \   00000190   3046               MOV      R0,R6
   \   00000192   ........           BL       ProtocolCheck
   \   00000196   18B1               CBZ.N    R0,??N_ProtocolComCheck_28
    698          				{
    699          					HuProtocolComCheck(TarPtr, nPtr);
   \   00000198   2146               MOV      R1,R4
   \   0000019A   3046               MOV      R0,R6
   \   0000019C   ........           BL       HuProtocolComCheck
    700          				}
    701          				EndHuCommand();
   \                     ??N_ProtocolComCheck_28:
   \   000001A0   ........           BL       EndHuCommand
    702          			break;
   \   000001A4   5AE7               B.N      ??N_ProtocolComCheck_8
    703          
    704          			case N_Alarm_CMD:
    705          				//SerPtr->printf("\nHu Alarm ACK [%x][%x][%x]", Recv->DstID.MuID, Recv->DstID.HuID, Recv->DstID.RuID);
    706          				HuBootFlag[Recv->DstID.HuID] = 0;
   \                     ??N_ProtocolComCheck_15:
   \   000001A6   ....               LDR.N    R0,??DataTable24
   \   000001A8   E97B               LDRB     R1,[R5, #+15]
   \   000001AA   0918               ADDS     R1,R1,R0
   \   000001AC   0022               MOVS     R2,#+0
   \   000001AE   0A71               STRB     R2,[R1, #+4]
    707          				HuBootCnt[Recv->DstID.HuID] = 0;
   \   000001B0   E97B               LDRB     R1,[R5, #+15]
   \   000001B2   0818               ADDS     R0,R1,R0
   \   000001B4   0273               STRB     R2,[R0, #+12]
    708          			break;
   \   000001B6   51E7               B.N      ??N_ProtocolComCheck_8
    709          
    710          			//-----------------------------------------------------------------------//
    711          			case N_DownloadCMD:
    712          			case N_DownloadCMDConfirm:
    713          			case N_DownLoadData:
    714          			case N_DownLoadDataConfirm:
    715          				GetHuCommand();
   \                     ??N_ProtocolComCheck_16:
   \   000001B8   ........           BL       GetHuCommand
    716          				
    717          				if((Recv->DstID.HuID==0)||(Recv->DstID.HuID==1))		TarPtr = (__ProtocolPtr *)Hu_Ser2Ser;
   \   000001BC   E87B               LDRB     R0,[R5, #+15]
   \   000001BE   08B1               CBZ.N    R0,??N_ProtocolComCheck_29
   \   000001C0   0128               CMP      R0,#+1
   \   000001C2   02D1               BNE.N    ??N_ProtocolComCheck_30
   \                     ??N_ProtocolComCheck_29:
   \   000001C4   ........           LDR.W    R1,??DataTable27
   \   000001C8   13E0               B.N      ??N_ProtocolComCheck_31
    718          				else if((Recv->DstID.HuID==2)||(Recv->DstID.HuID==3))	TarPtr = (__ProtocolPtr *)Hu_Ser3Ser;
   \                     ??N_ProtocolComCheck_30:
   \   000001CA   0228               CMP      R0,#+2
   \   000001CC   01D0               BEQ.N    ??N_ProtocolComCheck_32
   \   000001CE   0328               CMP      R0,#+3
   \   000001D0   02D1               BNE.N    ??N_ProtocolComCheck_33
   \                     ??N_ProtocolComCheck_32:
   \   000001D2   ........           LDR.W    R1,??DataTable27_1
   \   000001D6   0CE0               B.N      ??N_ProtocolComCheck_31
    719          				else if((Recv->DstID.HuID==4)||(Recv->DstID.HuID==5))	TarPtr = (__ProtocolPtr *)Hu_Ser5Ser;
   \                     ??N_ProtocolComCheck_33:
   \   000001D8   0428               CMP      R0,#+4
   \   000001DA   01D0               BEQ.N    ??N_ProtocolComCheck_34
   \   000001DC   0528               CMP      R0,#+5
   \   000001DE   02D1               BNE.N    ??N_ProtocolComCheck_35
   \                     ??N_ProtocolComCheck_34:
   \   000001E0   ........           LDR.W    R1,??DataTable27_2
   \   000001E4   05E0               B.N      ??N_ProtocolComCheck_31
    720          				else if((Recv->DstID.HuID==6)||(Recv->DstID.HuID==7))	TarPtr = (__ProtocolPtr *)Hu_Ser6Ser;
   \                     ??N_ProtocolComCheck_35:
   \   000001E6   0628               CMP      R0,#+6
   \   000001E8   01D0               BEQ.N    ??N_ProtocolComCheck_36
   \   000001EA   0728               CMP      R0,#+7
   \   000001EC   02D1               BNE.N    ??N_ProtocolComCheck_37
   \                     ??N_ProtocolComCheck_36:
   \   000001EE   ........           LDR.W    R1,??DataTable27_3
   \                     ??N_ProtocolComCheck_31:
   \   000001F2   0E68               LDR      R6,[R1, #+0]
    721          
    722          				MuxControl(Recv->DstID.HuID);
   \                     ??N_ProtocolComCheck_37:
   \   000001F4   ........           BL       MuxControl
   \   000001F8   04A8               ADD      R0,SP,#+16
   \   000001FA   05F10E01           ADD      R1,R5,#+14
   \   000001FE   0322               MOVS     R2,#+3
   \   00000200   ........           BL       __aeabi_memcpy
   \   00000204   03A8               ADD      R0,SP,#+12
   \   00000206   ........           LDR.W    R1,??DataTable27_4
   \   0000020A   0322               MOVS     R2,#+3
   \   0000020C   ........           BL       __aeabi_memcpy
    723          				SioDataAckTx(MyID, Recv->DstID, (INT8U*)Recv->Data, Recv->SubDataLength, Recv->Command, TarPtr);
   \   00000210   0196               STR      R6,[SP, #+4]
   \   00000212   B878               LDRB     R0,[R7, #+2]
   \   00000214   0090               STR      R0,[SP, #+0]
   \   00000216   41F21900           MOVW     R0,#+4121
   \   0000021A   435B               LDRH     R3,[R0, R5]
   \   0000021C   05F11402           ADD      R2,R5,#+20
   \   00000220   0499               LDR      R1,[SP, #+16]
   \   00000222   0398               LDR      R0,[SP, #+12]
   \   00000224   ........           BL       SioDataAckTx
    724          
    725          				if(ProtocolCheck(TarPtr, (Time1Sec*2)))
   \   00000228   B0E7               B.N      ??N_ProtocolComCheck_26
    726          				{
    727          					HuProtocolComCheck(TarPtr, nPtr);
    728          				}
    729          				EndHuCommand();
    730          			break;
    731          
    732          			//-----------------------------------------------------------------------//
    733          		}
    734          	}
    735          	else if(PathChk == RU_PATH)
   \                     ??N_ProtocolComCheck_10:
   \   0000022A   0228               CMP      R0,#+2
   \   0000022C   7FF45EAF           BNE.W    ??N_ProtocolComCheck_12
   \   00000230   00A8               ADD      R0,SP,#+0
   \   00000232   05F10E01           ADD      R1,R5,#+14
   \   00000236   0322               MOVS     R2,#+3
   \   00000238   ........           BL       __aeabi_memcpy
    736          	{
    737          		if(!InstallCheck(Recv->DstID, RU_PATH))
   \   0000023C   0221               MOVS     R1,#+2
   \   0000023E   0098               LDR      R0,[SP, #+0]
   \   00000240   ........           BL       InstallCheck
   \   00000244   0028               CMP      R0,#+0
   \   00000246   3FF451AF           BEQ.W    ??N_ProtocolComCheck_12
    738          		{
    739          			uTemp[0] = ERR_NOT_INST;
    740          			NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
    741          			return;
    742          		}
    743          		
    744          		switch(Recv->Command)
   \   0000024A   05F20F07           ADDW     R7,R5,#+15
   \   0000024E   B878               LDRB     R0,[R7, #+2]
   \   00000250   1038               SUBS     R0,R0,#+16
   \   00000252   07D0               BEQ.N    ??N_ProtocolComCheck_38
   \   00000254   401E               SUBS     R0,R0,#+1
   \   00000256   15D0               BEQ.N    ??N_ProtocolComCheck_39
   \   00000258   0F38               SUBS     R0,R0,#+15
   \   0000025A   48D0               BEQ.N    ??N_ProtocolComCheck_40
   \   0000025C   4038               SUBS     R0,R0,#+64
   \   0000025E   0328               CMP      R0,#+3
   \   00000260   56D9               BLS.N    ??N_ProtocolComCheck_41
   \   00000262   FBE6               B.N      ??N_ProtocolComCheck_8
   \                     ??N_ProtocolComCheck_38:
   \   00000264   00A8               ADD      R0,SP,#+0
   \   00000266   05F10E01           ADD      R1,R5,#+14
   \   0000026A   0322               MOVS     R2,#+3
   \   0000026C   ........           BL       __aeabi_memcpy
    745          		{
    746          			//-----------------------------------------------------------------------//
    747          			case N_Status_CMD:
    748          				NmsDataCopy(RU_PATH, Recv->DstID);
   \   00000270   0099               LDR      R1,[SP, #+0]
   \   00000272   0220               MOVS     R0,#+2
   \   00000274   ........           BL       NmsDataCopy
    749          				NmsDataAckTx((INT8U*)N_RuStatus, sizeof(__N_RU_STS), N_Status_CMD, nPtr);
   \   00000278   2346               MOV      R3,R4
   \   0000027A   1022               MOVS     R2,#+16
   \   0000027C   B121               MOVS     R1,#+177
   \   0000027E   ....               LDR.N    R0,??DataTable24
   \   00000280   006B               LDR      R0,[R0, #+48]
   \   00000282   E9E6               B.N      ??N_ProtocolComCheck_7
    750          			break;
    751          
    752          			case N_Control_CMD:
    753          				if(Recv->SubDataLength != sizeof(__N_RU_CTRL)) break;
   \                     ??N_ProtocolComCheck_39:
   \   00000284   41F21900           MOVW     R0,#+4121
   \   00000288   405B               LDRH     R0,[R0, R5]
   \   0000028A   7228               CMP      R0,#+114
   \   0000028C   7FF4E6AE           BNE.W    ??N_ProtocolComCheck_8
    754          
    755          				GetHuCommand();
   \   00000290   ........           BL       GetHuCommand
    756          				
    757          				if((Recv->DstID.HuID==0)||(Recv->DstID.HuID==1))		TarPtr = (__ProtocolPtr *)Hu_Ser2Ser;
   \   00000294   E87B               LDRB     R0,[R5, #+15]
   \   00000296   08B1               CBZ.N    R0,??N_ProtocolComCheck_42
   \   00000298   0128               CMP      R0,#+1
   \   0000029A   02D1               BNE.N    ??N_ProtocolComCheck_43
   \                     ??N_ProtocolComCheck_42:
   \   0000029C   ........           LDR.W    R1,??DataTable27
   \   000002A0   13E0               B.N      ??N_ProtocolComCheck_44
    758          				else if((Recv->DstID.HuID==2)||(Recv->DstID.HuID==3))	TarPtr = (__ProtocolPtr *)Hu_Ser3Ser;
   \                     ??N_ProtocolComCheck_43:
   \   000002A2   0228               CMP      R0,#+2
   \   000002A4   01D0               BEQ.N    ??N_ProtocolComCheck_45
   \   000002A6   0328               CMP      R0,#+3
   \   000002A8   02D1               BNE.N    ??N_ProtocolComCheck_46
   \                     ??N_ProtocolComCheck_45:
   \   000002AA   ........           LDR.W    R1,??DataTable27_1
   \   000002AE   0CE0               B.N      ??N_ProtocolComCheck_44
    759          				else if((Recv->DstID.HuID==4)||(Recv->DstID.HuID==5))	TarPtr = (__ProtocolPtr *)Hu_Ser5Ser;
   \                     ??N_ProtocolComCheck_46:
   \   000002B0   0428               CMP      R0,#+4
   \   000002B2   01D0               BEQ.N    ??N_ProtocolComCheck_47
   \   000002B4   0528               CMP      R0,#+5
   \   000002B6   02D1               BNE.N    ??N_ProtocolComCheck_48
   \                     ??N_ProtocolComCheck_47:
   \   000002B8   ........           LDR.W    R1,??DataTable27_2
   \   000002BC   05E0               B.N      ??N_ProtocolComCheck_44
    760          				else if((Recv->DstID.HuID==6)||(Recv->DstID.HuID==7))	TarPtr = (__ProtocolPtr *)Hu_Ser6Ser;
   \                     ??N_ProtocolComCheck_48:
   \   000002BE   0628               CMP      R0,#+6
   \   000002C0   01D0               BEQ.N    ??N_ProtocolComCheck_49
   \   000002C2   0728               CMP      R0,#+7
   \   000002C4   02D1               BNE.N    ??N_ProtocolComCheck_50
   \                     ??N_ProtocolComCheck_49:
   \   000002C6   ........           LDR.W    R1,??DataTable27_3
   \                     ??N_ProtocolComCheck_44:
   \   000002CA   0E68               LDR      R6,[R1, #+0]
    761          
    762          				MuxControl(Recv->DstID.HuID);
   \                     ??N_ProtocolComCheck_50:
   \   000002CC   ........           BL       MuxControl
   \   000002D0   00A8               ADD      R0,SP,#+0
   \   000002D2   05F10E01           ADD      R1,R5,#+14
   \   000002D6   0322               MOVS     R2,#+3
   \   000002D8   ........           BL       __aeabi_memcpy
    763          				Eth0_Control_Ru_Conv(Recv->DstID, (__N_RU_CTRL*)Recv->Data, TarPtr);
   \   000002DC   3246               MOV      R2,R6
   \   000002DE   05F11401           ADD      R1,R5,#+20
   \   000002E2   0098               LDR      R0,[SP, #+0]
   \   000002E4   ........           BL       Eth0_Control_Ru_Conv
    764          
    765          				if(ProtocolCheck(TarPtr, (Time1Sec*6)))
   \                     ??N_ProtocolComCheck_51:
   \   000002E8   41F27071           MOVW     R1,#+6000
   \   000002EC   50E7               B.N      ??N_ProtocolComCheck_27
    766          				{
    767          					HuProtocolComCheck(TarPtr, nPtr);
    768          				}
    769          				EndHuCommand();
    770          			break;
    771          
    772          			case N_Alarm_CMD:
    773          				//SerPtr->printf("\nRu Alarm ACK [%x][%x][%x]", Recv->DstID.MuID, Recv->DstID.HuID, Recv->DstID.RuID);
    774          				RuBootFlag[Recv->DstID.HuID][((Recv->DstID.RuID>>4)&0x0F)] = 0;
   \                     ??N_ProtocolComCheck_40:
   \   000002EE   7878               LDRB     R0,[R7, #+1]
   \   000002F0   0011               ASRS     R0,R0,#+4
   \   000002F2   E97B               LDRB     R1,[R5, #+15]
   \   000002F4   ....               LDR.N    R2,??DataTable25_1
   \   000002F6   02EB0111           ADD      R1,R2,R1, LSL #+4
   \   000002FA   0022               MOVS     R2,#+0
   \   000002FC   4254               STRB     R2,[R0, R1]
    775          				RuBootCnt[Recv->DstID.HuID][((Recv->DstID.RuID>>4)&0x0F)] = 0;
   \   000002FE   7878               LDRB     R0,[R7, #+1]
   \   00000300   0011               ASRS     R0,R0,#+4
   \   00000302   E97B               LDRB     R1,[R5, #+15]
   \   00000304   ....               LDR.N    R2,??DataTable25
   \   00000306   02EB0111           ADD      R1,R2,R1, LSL #+4
   \   0000030A   0022               MOVS     R2,#+0
   \   0000030C   4254               STRB     R2,[R0, R1]
    776          			break;
   \   0000030E   A5E6               B.N      ??N_ProtocolComCheck_8
    777          
    778          			//-----------------------------------------------------------------------//
    779          			case N_DownloadCMD:
    780          			case N_DownloadCMDConfirm:
    781          			case N_DownLoadData:
    782          			case N_DownLoadDataConfirm:
    783          				GetHuCommand();
   \                     ??N_ProtocolComCheck_41:
   \   00000310   ........           BL       GetHuCommand
    784          				
    785          				if((Recv->DstID.HuID==0)||(Recv->DstID.HuID==1))		TarPtr = (__ProtocolPtr *)Hu_Ser2Ser;
   \   00000314   E87B               LDRB     R0,[R5, #+15]
   \   00000316   08B1               CBZ.N    R0,??N_ProtocolComCheck_52
   \   00000318   0128               CMP      R0,#+1
   \   0000031A   02D1               BNE.N    ??N_ProtocolComCheck_53
   \                     ??N_ProtocolComCheck_52:
   \   0000031C   ........           LDR.W    R1,??DataTable27
   \   00000320   13E0               B.N      ??N_ProtocolComCheck_54
    786          				else if((Recv->DstID.HuID==2)||(Recv->DstID.HuID==3))	TarPtr = (__ProtocolPtr *)Hu_Ser3Ser;
   \                     ??N_ProtocolComCheck_53:
   \   00000322   0228               CMP      R0,#+2
   \   00000324   01D0               BEQ.N    ??N_ProtocolComCheck_55
   \   00000326   0328               CMP      R0,#+3
   \   00000328   02D1               BNE.N    ??N_ProtocolComCheck_56
   \                     ??N_ProtocolComCheck_55:
   \   0000032A   ........           LDR.W    R1,??DataTable27_1
   \   0000032E   0CE0               B.N      ??N_ProtocolComCheck_54
    787          				else if((Recv->DstID.HuID==4)||(Recv->DstID.HuID==5))	TarPtr = (__ProtocolPtr *)Hu_Ser5Ser;
   \                     ??N_ProtocolComCheck_56:
   \   00000330   0428               CMP      R0,#+4
   \   00000332   01D0               BEQ.N    ??N_ProtocolComCheck_57
   \   00000334   0528               CMP      R0,#+5
   \   00000336   02D1               BNE.N    ??N_ProtocolComCheck_58
   \                     ??N_ProtocolComCheck_57:
   \   00000338   ........           LDR.W    R1,??DataTable27_2
   \   0000033C   05E0               B.N      ??N_ProtocolComCheck_54
    788          				else if((Recv->DstID.HuID==6)||(Recv->DstID.HuID==7))	TarPtr = (__ProtocolPtr *)Hu_Ser6Ser;
   \                     ??N_ProtocolComCheck_58:
   \   0000033E   0628               CMP      R0,#+6
   \   00000340   01D0               BEQ.N    ??N_ProtocolComCheck_59
   \   00000342   0728               CMP      R0,#+7
   \   00000344   02D1               BNE.N    ??N_ProtocolComCheck_60
   \                     ??N_ProtocolComCheck_59:
   \   00000346   ........           LDR.W    R1,??DataTable27_3
   \                     ??N_ProtocolComCheck_54:
   \   0000034A   0E68               LDR      R6,[R1, #+0]
    789          
    790          				MuxControl(Recv->DstID.HuID);
   \                     ??N_ProtocolComCheck_60:
   \   0000034C   ........           BL       MuxControl
   \   00000350   04A8               ADD      R0,SP,#+16
   \   00000352   05F10E01           ADD      R1,R5,#+14
   \   00000356   0322               MOVS     R2,#+3
   \   00000358   ........           BL       __aeabi_memcpy
   \   0000035C   03A8               ADD      R0,SP,#+12
   \   0000035E   ........           LDR.W    R1,??DataTable27_4
   \   00000362   0322               MOVS     R2,#+3
   \   00000364   ........           BL       __aeabi_memcpy
    791          				SioDataAckTx(MyID, Recv->DstID, (INT8U*)Recv->Data, Recv->SubDataLength, Recv->Command, TarPtr);
   \   00000368   0196               STR      R6,[SP, #+4]
   \   0000036A   B878               LDRB     R0,[R7, #+2]
   \   0000036C   0090               STR      R0,[SP, #+0]
   \   0000036E   41F21900           MOVW     R0,#+4121
   \   00000372   435B               LDRH     R3,[R0, R5]
   \   00000374   05F11402           ADD      R2,R5,#+20
   \   00000378   0499               LDR      R1,[SP, #+16]
   \   0000037A   0398               LDR      R0,[SP, #+12]
   \   0000037C   ........           BL       SioDataAckTx
    792          
    793          				if(ProtocolCheck(TarPtr, (Time1Sec*6)))
   \   00000380   B2E7               B.N      ??N_ProtocolComCheck_51
    794          				{
    795          					HuProtocolComCheck(TarPtr, nPtr);
    796          				}
    797          				EndHuCommand();
    798          			break;
    799          
    800          			//-----------------------------------------------------------------------//
    801          		}
    802          	}
    803          	else
    804          	{
    805          		uTemp[0] = ERR_NOT_INST;
    806          		NmsDataAckTx((INT8U*)uTemp, 1, N_Error_CMD, nPtr);
    807          	}
    808          }
    809          

   \                                 In section .text, align 2, keep-with-next
    810          void NmsDataAckTx(INT8U *Data, INT16U nCnt, INT8U Comm, __N_ProtocolPtr *toPtr)
    811          {
   \                     NmsDataAckTx:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   8846               MOV      R8,R1
   \   00000006   1D46               MOV      R5,R3
    812          //	INT8U	err = 0;
    813          	INT16U	i = 0;
    814          	
    815          	NMS *Send = toPtr->Send;
   \   00000008   AE6A               LDR      R6,[R5, #+40]
    816          	NMS *Recv = toPtr->Recv;
   \   0000000A   696A               LDR      R1,[R5, #+36]
    817          	
    818          //	OSSemPend(toPtr->OSSem, 0, &err );
    819          
    820          	if( nCnt > BODYSIZEMAX ) {
   \   0000000C   40F60103           MOVW     R3,#+2049
   \   00000010   9845               CMP      R8,R3
   \   00000012   51D2               BCS.N    ??NmsDataAckTx_0
    821          //		OSSemPost(toPtr->OSSem);
    822          		return;
    823          	}
    824          
    825          	Send->Sync			= N_STX;
   \   00000014   0223               MOVS     R3,#+2
   \   00000016   3370               STRB     R3,[R6, #+0]
    826          	Send->R_Code		= Recv->R_Code;
   \   00000018   4B78               LDRB     R3,[R1, #+1]
   \   0000001A   7370               STRB     R3,[R6, #+1]
    827          	for(i=0; i<10; i++)
   \   0000001C   0023               MOVS     R3,#+0
   \   0000001E   3746               MOV      R7,R6
   \   00000020   ........           LDR.W    R4,??DataTable26
    828          		Send->RepeaterID[i] = MuStatus->RepeaterID[i];
   \                     ??NmsDataAckTx_1:
   \   00000024   D4F800E0           LDR      LR,[R4, #+0]
   \   00000028   9E44               ADD      LR,R3,LR
   \   0000002A   9EF84EE2           LDRB     LR,[LR, #+590]
   \   0000002E   87F802E0           STRB     LR,[R7, #+2]
   \   00000032   5B1C               ADDS     R3,R3,#+1
   \   00000034   7F1C               ADDS     R7,R7,#+1
   \   00000036   0A2B               CMP      R3,#+10
   \   00000038   F4DB               BLT.N    ??NmsDataAckTx_1
    829          	Send->P_ID[0]		= Recv->P_ID[0];
   \   0000003A   0B7B               LDRB     R3,[R1, #+12]
   \   0000003C   3373               STRB     R3,[R6, #+12]
    830          	Send->P_ID[1]		= Recv->P_ID[1];
   \   0000003E   4B7B               LDRB     R3,[R1, #+13]
   \   00000040   7373               STRB     R3,[R6, #+13]
    831          	
    832          	Send->DstID.MuID	= Recv->DstID.MuID;
   \   00000042   8B7B               LDRB     R3,[R1, #+14]
   \   00000044   B373               STRB     R3,[R6, #+14]
    833          	Send->DstID.HuID	= Recv->DstID.HuID;
   \   00000046   CB7B               LDRB     R3,[R1, #+15]
   \   00000048   F373               STRB     R3,[R6, #+15]
    834          	Send->DstID.RuID	= Recv->DstID.RuID;
   \   0000004A   097C               LDRB     R1,[R1, #+16]
   \   0000004C   3174               STRB     R1,[R6, #+16]
    835          	Send->Command		= Comm;
   \   0000004E   7274               STRB     R2,[R6, #+17]
    836          	Send->SubDataLength = nCnt;
   \   00000050   41F21901           MOVW     R1,#+4121
   \   00000054   21F80680           STRH     R8,[R1, R6]
    837          	Send->DataLength[0] = (INT8U)(Send->SubDataLength>>8);
   \   00000058   4FEA1822           LSR      R2,R8,#+8
   \   0000005C   B274               STRB     R2,[R6, #+18]
    838          	Send->DataLength[1] = (INT8U)(Send->SubDataLength&0xff);
   \   0000005E   895B               LDRH     R1,[R1, R6]
   \   00000060   F174               STRB     R1,[R6, #+19]
    839          
    840          	for(i=0; i<nCnt && i < BODYSIZEMAX; i++)
   \   00000062   0027               MOVS     R7,#+0
   \   00000064   3146               MOV      R1,R6
   \   00000066   04E0               B.N      ??NmsDataAckTx_2
    841          		Send->Data[i]	= *((INT8U *)Data + i);
   \                     ??NmsDataAckTx_3:
   \   00000068   10F8013B           LDRB     R3,[R0], #+1
   \   0000006C   0B75               STRB     R3,[R1, #+20]
   \   0000006E   7F1C               ADDS     R7,R7,#+1
   \   00000070   491C               ADDS     R1,R1,#+1
   \                     ??NmsDataAckTx_2:
   \   00000072   4745               CMP      R7,R8
   \   00000074   02DA               BGE.N    ??NmsDataAckTx_4
   \   00000076   B7F5006F           CMP      R7,#+2048
   \   0000007A   F5DB               BLT.N    ??NmsDataAckTx_3
    842          	
    843          	Send->Crc = Crc16Calc((INT8U*)&Send->R_Code, i+19, NULL);
   \                     ??NmsDataAckTx_4:
   \   0000007C   41F21704           MOVW     R4,#+4119
   \   00000080   0022               MOVS     R2,#+0
   \   00000082   07F11301           ADD      R1,R7,#+19
   \   00000086   701C               ADDS     R0,R6,#+1
   \   00000088   ........           BL       Crc16Calc
   \   0000008C   A053               STRH     R0,[R4, R6]
    844          	Send->Data[i++] = (INT8U)(Send->Crc>>8);
   \   0000008E   B819               ADDS     R0,R7,R6
   \   00000090   A15B               LDRH     R1,[R4, R6]
   \   00000092   090A               LSRS     R1,R1,#+8
   \   00000094   0175               STRB     R1,[R0, #+20]
   \   00000096   781C               ADDS     R0,R7,#+1
   \   00000098   80B2               UXTH     R0,R0
    845          	Send->Data[i++] = (INT8U)(Send->Crc);
   \   0000009A   8119               ADDS     R1,R0,R6
   \   0000009C   A25B               LDRH     R2,[R4, R6]
   \   0000009E   0A75               STRB     R2,[R1, #+20]
    846          	Send->Data[i++] = ETX; 
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   80B2               UXTH     R0,R0
   \   000000A4   8019               ADDS     R0,R0,R6
   \   000000A6   0321               MOVS     R1,#+3
   \   000000A8   0175               STRB     R1,[R0, #+20]
    847          
    848          	toPtr->PutStr((INT8U *)Send, nCnt+23, ENABLE);
   \   000000AA   0122               MOVS     R2,#+1
   \   000000AC   08F11701           ADD      R1,R8,#+23
   \   000000B0   89B2               UXTH     R1,R1
   \   000000B2   3046               MOV      R0,R6
   \   000000B4   AB68               LDR      R3,[R5, #+8]
   \   000000B6   9847               BLX      R3
    849          
    850          
    851          //	OSSemPost(toPtr->OSSem);	
    852          
    853          
    854          /*
    855          #ifdef DBG_ETH1_OUT
    856          	if(toPtr == Eth0)
    857          	{
    858          		SerPtr->printf("\n Eth0 TX[%d] = ", Send->SubDataLength+15);
    859          		for(i=0; i<Send->SubDataLength+15; i++)
    860          			SerPtr->printf("%02x ", *((INT8U *)Send + i));
    861          	}
    862          #endif
    863          */
    864          }
   \                     ??NmsDataAckTx_0:
   \   000000B8   BDE8F081           POP      {R4-R8,PC}       ;; return
    865          

   \                                 In section .text, align 2, keep-with-next
    866          void NmsAlarmAckTx(SubIDStr TarID, INT8U *Data, INT16U nCnt, __N_ProtocolPtr *toPtr)
    867          {
   \                     NmsAlarmAckTx:
   \   00000000   2DE9F143           PUSH     {R0,R4-R9,LR}
   \   00000004   1446               MOV      R4,R2
   \   00000006   9846               MOV      R8,R3
    868          	INT16U	i = 0;
    869          	
    870          	NMS *Send = toPtr->Send;
   \   00000008   D8F82860           LDR      R6,[R8, #+40]
    871          	NMS *Recv = toPtr->Recv;
   \   0000000C   D8F82400           LDR      R0,[R8, #+36]
    872          	
    873          	if( nCnt > BODYSIZEMAX )	return;
   \   00000010   40F60102           MOVW     R2,#+2049
   \   00000014   A4B2               UXTH     R4,R4
   \   00000016   9442               CMP      R4,R2
   \   00000018   74D2               BCS.N    ??NmsAlarmAckTx_0
    874          	
    875          	Send->Sync			= N_STX;
   \   0000001A   0222               MOVS     R2,#+2
   \   0000001C   3270               STRB     R2,[R6, #+0]
    876          	Send->R_Code		= Recv->R_Code;
   \   0000001E   4278               LDRB     R2,[R0, #+1]
   \   00000020   7270               STRB     R2,[R6, #+1]
    877          	for(i=0; i<10; i++)
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   3346               MOV      R3,R6
   \   00000026   ........           LDR.W    R7,??DataTable26
    878          		Send->RepeaterID[i] = MuStatus->RepeaterID[i];
   \                     ??NmsAlarmAckTx_1:
   \   0000002A   D7F800C0           LDR      R12,[R7, #+0]
   \   0000002E   9444               ADD      R12,R2,R12
   \   00000030   9CF84E52           LDRB     R5,[R12, #+590]
   \   00000034   9D70               STRB     R5,[R3, #+2]
   \   00000036   521C               ADDS     R2,R2,#+1
   \   00000038   5B1C               ADDS     R3,R3,#+1
   \   0000003A   0A2A               CMP      R2,#+10
   \   0000003C   F5DB               BLT.N    ??NmsAlarmAckTx_1
    879          	Send->P_ID[0]		= Recv->P_ID[0];
   \   0000003E   027B               LDRB     R2,[R0, #+12]
   \   00000040   3273               STRB     R2,[R6, #+12]
    880          	Send->P_ID[1]		= Recv->P_ID[1];
   \   00000042   407B               LDRB     R0,[R0, #+13]
   \   00000044   7073               STRB     R0,[R6, #+13]
    881          	
    882          	Send->DstID.MuID	= TarID.MuID;
   \   00000046   9DF80000           LDRB     R0,[SP, #+0]
   \   0000004A   B073               STRB     R0,[R6, #+14]
    883          	Send->DstID.HuID	= TarID.HuID;
   \   0000004C   9DF80100           LDRB     R0,[SP, #+1]
   \   00000050   F073               STRB     R0,[R6, #+15]
    884          	Send->DstID.RuID	= TarID.RuID;
   \   00000052   9DF80200           LDRB     R0,[SP, #+2]
   \   00000056   3074               STRB     R0,[R6, #+16]
    885          	Send->Command		= N_Alarm_CMD;
   \   00000058   2020               MOVS     R0,#+32
   \   0000005A   7074               STRB     R0,[R6, #+17]
    886          	Send->SubDataLength = nCnt;
   \   0000005C   41F21907           MOVW     R7,#+4121
   \   00000060   BC53               STRH     R4,[R7, R6]
    887          	Send->DataLength[0] = (INT8U)(Send->SubDataLength>>8);
   \   00000062   200A               LSRS     R0,R4,#+8
   \   00000064   B074               STRB     R0,[R6, #+18]
    888          	Send->DataLength[1] = (INT8U)(Send->SubDataLength&0xff);
   \   00000066   B85B               LDRH     R0,[R7, R6]
   \   00000068   F074               STRB     R0,[R6, #+19]
    889          
    890          	for(i=0; i<nCnt && i < BODYSIZEMAX; i++)
   \   0000006A   0025               MOVS     R5,#+0
   \   0000006C   3046               MOV      R0,R6
   \   0000006E   04E0               B.N      ??NmsAlarmAckTx_2
    891          		Send->Data[i]	= *((INT8U *)Data + i);
   \                     ??NmsAlarmAckTx_3:
   \   00000070   11F8013B           LDRB     R3,[R1], #+1
   \   00000074   0375               STRB     R3,[R0, #+20]
   \   00000076   6D1C               ADDS     R5,R5,#+1
   \   00000078   401C               ADDS     R0,R0,#+1
   \                     ??NmsAlarmAckTx_2:
   \   0000007A   A542               CMP      R5,R4
   \   0000007C   02DA               BGE.N    ??NmsAlarmAckTx_4
   \   0000007E   B5F5006F           CMP      R5,#+2048
   \   00000082   F5DB               BLT.N    ??NmsAlarmAckTx_3
    892          	
    893          	Send->Crc = Crc16Calc((INT8U*)&Send->R_Code, i+19, NULL);
   \                     ??NmsAlarmAckTx_4:
   \   00000084   41F21709           MOVW     R9,#+4119
   \   00000088   0022               MOVS     R2,#+0
   \   0000008A   05F11301           ADD      R1,R5,#+19
   \   0000008E   701C               ADDS     R0,R6,#+1
   \   00000090   ........           BL       Crc16Calc
   \   00000094   29F80600           STRH     R0,[R9, R6]
    894          	Send->Data[i++] = (INT8U)(Send->Crc>>8);
   \   00000098   A819               ADDS     R0,R5,R6
   \   0000009A   39F80610           LDRH     R1,[R9, R6]
   \   0000009E   090A               LSRS     R1,R1,#+8
   \   000000A0   0175               STRB     R1,[R0, #+20]
   \   000000A2   681C               ADDS     R0,R5,#+1
   \   000000A4   82B2               UXTH     R2,R0
    895          	Send->Data[i++] = (INT8U)(Send->Crc);
   \   000000A6   9019               ADDS     R0,R2,R6
   \   000000A8   39F80610           LDRH     R1,[R9, R6]
   \   000000AC   0175               STRB     R1,[R0, #+20]
    896          	Send->Data[i++] = ETX; 
   \   000000AE   501C               ADDS     R0,R2,#+1
   \   000000B0   80B2               UXTH     R0,R0
   \   000000B2   8019               ADDS     R0,R0,R6
   \   000000B4   0321               MOVS     R1,#+3
   \   000000B6   0175               STRB     R1,[R0, #+20]
    897          
    898          	toPtr->PutStr((INT8U *)Send, nCnt+23, ENABLE);
   \   000000B8   0122               MOVS     R2,#+1
   \   000000BA   04F11701           ADD      R1,R4,#+23
   \   000000BE   89B2               UXTH     R1,R1
   \   000000C0   3046               MOV      R0,R6
   \   000000C2   D8F80830           LDR      R3,[R8, #+8]
   \   000000C6   9847               BLX      R3
    899          
    900          
    901          #ifdef DBG_ETH1_OUT
    902          	if(toPtr == Eth0)
   \   000000C8   ........           LDR.W    R0,??DataTable29
   \   000000CC   406A               LDR      R0,[R0, #+36]
   \   000000CE   8045               CMP      R8,R0
   \   000000D0   18D1               BNE.N    ??NmsAlarmAckTx_0
    903          	{
    904          		SerPtr->printf("\n Eth0 TX[%d] = ", Send->SubDataLength);
   \   000000D2   ....               LDR.N    R4,??DataTable25_9
   \   000000D4   B95B               LDRH     R1,[R7, R6]
   \   000000D6   ........           LDR.W    R0,??DataTable29_1
   \   000000DA   2268               LDR      R2,[R4, #+0]
   \   000000DC   1269               LDR      R2,[R2, #+16]
   \   000000DE   9047               BLX      R2
    905          		for(i=0; i<Send->SubDataLength+23; i++)
   \   000000E0   0025               MOVS     R5,#+0
   \   000000E2   ........           LDR.W    R8,??DataTable29_2
   \   000000E6   B85B               LDRH     R0,[R7, R6]
   \   000000E8   1730               ADDS     R0,R0,#+23
   \   000000EA   0128               CMP      R0,#+1
   \   000000EC   0ADB               BLT.N    ??NmsAlarmAckTx_0
    906          			SerPtr->printf("%02x ", *((INT8U *)Send + i));
   \                     ??NmsAlarmAckTx_5:
   \   000000EE   A95D               LDRB     R1,[R5, R6]
   \   000000F0   4046               MOV      R0,R8
   \   000000F2   2268               LDR      R2,[R4, #+0]
   \   000000F4   1269               LDR      R2,[R2, #+16]
   \   000000F6   9047               BLX      R2
   \   000000F8   681C               ADDS     R0,R5,#+1
   \   000000FA   85B2               UXTH     R5,R0
   \   000000FC   B85B               LDRH     R0,[R7, R6]
   \   000000FE   1730               ADDS     R0,R0,#+23
   \   00000100   8542               CMP      R5,R0
   \   00000102   F4DB               BLT.N    ??NmsAlarmAckTx_5
   \                     ??NmsAlarmAckTx_0:
   \   00000104   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    907          	}
    908          #endif
    909          
    910          }
    911          
    912          

   \                                 In section .text, align 2, keep-with-next
    913          void NmsDataCopy(INT8U Path, SubIDStr TarID)
    914          {
   \                     NmsDataCopy:
   \   00000000   2DE9F24F           PUSH     {R1,R4-R11,LR}
    915          	INT16U	i, j, k;
    916          	INT8U	BrID, RuID;
    917          	INT8U	uVal = 0;
    918          
    919          	switch(Path)
   \   00000004   30B1               CBZ.N    R0,??NmsDataCopy_0
   \   00000006   0228               CMP      R0,#+2
   \   00000008   00F03982           BEQ.W    ??NmsDataCopy_1
   \   0000000C   C0F08881           BCC.W    ??NmsDataCopy_2
   \   00000010   00F000BC           B.W      ??NmsDataCopy_3
    920          	{
    921          		case MU_PATH:
    922          			
    923          			//-----------------------------------------------------------------------//
    924          			// System
    925          			N_MuStatus->MakerID			= MuStatus->MakerID;
   \                     ??NmsDataCopy_0:
   \   00000014   ........           LDR.W    R4,??DataTable26
   \   00000018   ........           LDR.W    R5,??DataTable29
   \   0000001C   A86A               LDR      R0,[R5, #+40]
   \   0000001E   2168               LDR      R1,[R4, #+0]
   \   00000020   91F84912           LDRB     R1,[R1, #+585]
   \   00000024   0170               STRB     R1,[R0, #+0]
    926          			N_MuStatus->ProgramVer[0]	= MuStatus->ProgramVer[0];
   \   00000026   A86A               LDR      R0,[R5, #+40]
   \   00000028   2168               LDR      R1,[R4, #+0]
   \   0000002A   91F84A12           LDRB     R1,[R1, #+586]
   \   0000002E   4170               STRB     R1,[R0, #+1]
    927          			N_MuStatus->ProgramVer[1]	= MuStatus->ProgramVer[1];
   \   00000030   A86A               LDR      R0,[R5, #+40]
   \   00000032   2168               LDR      R1,[R4, #+0]
   \   00000034   91F84B12           LDRB     R1,[R1, #+587]
   \   00000038   8170               STRB     R1,[R0, #+2]
    928          			N_MuStatus->DtuVer			= MuStatus->DtuVer;
   \   0000003A   A86A               LDR      R0,[R5, #+40]
   \   0000003C   2168               LDR      R1,[R4, #+0]
   \   0000003E   91F84D12           LDRB     R1,[R1, #+589]
   \   00000042   C170               STRB     R1,[R0, #+3]
    929          			for(i=0; i<10; i++)
   \   00000044   0020               MOVS     R0,#+0
    930          				N_MuStatus->RepeaterID[i]	= MuStatus->RepeaterID[i];
   \                     ??NmsDataCopy_4:
   \   00000046   A96A               LDR      R1,[R5, #+40]
   \   00000048   4118               ADDS     R1,R0,R1
   \   0000004A   2268               LDR      R2,[R4, #+0]
   \   0000004C   8218               ADDS     R2,R0,R2
   \   0000004E   92F84E22           LDRB     R2,[R2, #+590]
   \   00000052   0A71               STRB     R2,[R1, #+4]
   \   00000054   401C               ADDS     R0,R0,#+1
   \   00000056   0A28               CMP      R0,#+10
   \   00000058   F5DB               BLT.N    ??NmsDataCopy_4
    931          			
    932          			//-----------------------------------------------------------------------//
    933          			// HU Install
    934          			for(i=0; i<HU_MAX; i++)
   \   0000005A   0021               MOVS     R1,#+0
   \   0000005C   0120               MOVS     R0,#+1
    935          			{
    936          				if(SysInfo->Hu_Install[i] != _NotInstall)	BitSet(N_MuStatus->Hu_Inst, N_Hu1_Bit+i);
   \                     ??NmsDataCopy_5:
   \   0000005E   AA6A               LDR      R2,[R5, #+40]
   \   00000060   937B               LDRB     R3,[R2, #+14]
   \   00000062   00FA01F6           LSL      R6,R0,R1
   \   00000066   ........           LDR.W    R7,??DataTable30
   \   0000006A   3F68               LDR      R7,[R7, #+0]
   \   0000006C   CF19               ADDS     R7,R1,R7
   \   0000006E   7F78               LDRB     R7,[R7, #+1]
   \   00000070   002F               CMP      R7,#+0
   \   00000072   14BF               ITE      NE 
   \   00000074   3343               ORRNE    R3,R6,R3
   \   00000076   B343               BICEQ    R3,R3,R6
    937          				else										BitRst(N_MuStatus->Hu_Inst, N_Hu1_Bit+i);
   \   00000078   9373               STRB     R3,[R2, #+14]
    938          			}
   \   0000007A   491C               ADDS     R1,R1,#+1
   \   0000007C   0829               CMP      R1,#+8
   \   0000007E   EEDB               BLT.N    ??NmsDataCopy_5
    939          			
    940          			// HU-RU Install
    941          			for(i=0; i<MDTU_MAX; i++)
   \   00000080   0021               MOVS     R1,#+0
   \   00000082   0022               MOVS     R2,#+0
   \   00000084   0823               MOVS     R3,#+8
    942          			{
    943          				for(j=0; j<HDTU_MAX; j++)
   \                     ??NmsDataCopy_6:
   \   00000086   0026               MOVS     R6,#+0
   \   00000088   0027               MOVS     R7,#+0
    944          				{
    945          					uVal = j%2; 
    946          					
    947          					for(k=0; k<HU_RU_MAX; k++)
   \                     ??NmsDataCopy_7:
   \   0000008A   4FF0000C           MOV      R12,#+0
   \   0000008E   06EBD67E           ADD      LR,R6,R6, LSR #+31
   \   00000092   4FEA6E0E           ASR      LR,LR,#+1
   \   00000096   A6EB4E08           SUB      R8,R6,LR, LSL #+1
   \   0000009A   4FEA8808           LSL      R8,R8,#+2
   \                     ??NmsDataCopy_8:
   \   0000009E   00FA08FB           LSL      R11,R0,R8
   \   000000A2   ........           LDR.W    R9,??DataTable30
   \   000000A6   D9F80090           LDR      R9,[R9, #+0]
   \   000000AA   9144               ADD      R9,R2,R9
   \   000000AC   B944               ADD      R9,R7,R9
   \   000000AE   E144               ADD      R9,R12,R9
   \   000000B0   99F80990           LDRB     R9,[R9, #+9]
   \   000000B4   B9F1000F           CMP      R9,#+0
   \   000000B8   D5F82890           LDR      R9,[R5, #+40]
   \   000000BC   8944               ADD      R9,R1,R9
   \   000000BE   F144               ADD      R9,LR,R9
   \   000000C0   99F80FA0           LDRB     R10,[R9, #+15]
   \   000000C4   14BF               ITE      NE 
   \   000000C6   4BEA0A0A           ORRNE    R10,R11,R10
   \   000000CA   2AEA0B0A           BICEQ    R10,R10,R11
    948          					{
    949          						if(SysInfo->Hu_Ru[i].Ru_Install[j][k] !=_NotInstall)
    950          								BitSet(N_MuStatus->Hu_Ru_Inst[i][(j/2)], N_Br1_Ru1_Bit+(uVal*4)+k);
    951          						else	BitRst(N_MuStatus->Hu_Ru_Inst[i][(j/2)], N_Br1_Ru1_Bit+(uVal*4)+k);
   \   000000CE   89F80FA0           STRB     R10,[R9, #+15]
    952          					}
   \   000000D2   0CF1010C           ADD      R12,R12,#+1
   \   000000D6   08F10108           ADD      R8,R8,#+1
   \   000000DA   BCF1040F           CMP      R12,#+4
   \   000000DE   DEDB               BLT.N    ??NmsDataCopy_8
    953          				}
   \   000000E0   761C               ADDS     R6,R6,#+1
   \   000000E2   3F1D               ADDS     R7,R7,#+4
   \   000000E4   102E               CMP      R6,#+16
   \   000000E6   D0DB               BLT.N    ??NmsDataCopy_7
    954          			}
   \   000000E8   4032               ADDS     R2,R2,#+64
   \   000000EA   0831               ADDS     R1,R1,#+8
   \   000000EC   5B1E               SUBS     R3,R3,#+1
   \   000000EE   CAD1               BNE.N    ??NmsDataCopy_6
    955          			
    956          			// MU-RU Install
    957          			for(i=0; i<MDTU_MAX; i++)
   \   000000F0   0021               MOVS     R1,#+0
   \   000000F2   0022               MOVS     R2,#+0
    958          			{
    959          				for(j=0; j<MU_RU_MAX; j++)
   \                     ??NmsDataCopy_9:
   \   000000F4   0026               MOVS     R6,#+0
    960          				{
    961          					if(SysInfo->Mu_Ru_Install[i][j]==_Install)
   \                     ??NmsDataCopy_10:
   \   000000F6   00FA06F3           LSL      R3,R0,R6
   \   000000FA   AF6A               LDR      R7,[R5, #+40]
   \   000000FC   CF19               ADDS     R7,R1,R7
   \   000000FE   ........           LDR.W    R12,??DataTable30
   \   00000102   DCF800C0           LDR      R12,[R12, #+0]
   \   00000106   9444               ADD      R12,R2,R12
   \   00000108   B444               ADD      R12,R6,R12
   \   0000010A   9CF809C2           LDRB     R12,[R12, #+521]
   \   0000010E   BCF1010F           CMP      R12,#+1
   \   00000112   97F84FC0           LDRB     R12,[R7, #+79]
   \   00000116   0CBF               ITE      EQ 
   \   00000118   43EA0C03           ORREQ    R3,R3,R12
   \   0000011C   2CEA0303           BICNE    R3,R12,R3
    962          							BitSet(N_MuStatus->Mu_Ru_Install[i], N_Ru1_Bit+j);
    963          					else	BitRst(N_MuStatus->Mu_Ru_Install[i], N_Ru1_Bit+j);
   \   00000120   87F84F30           STRB     R3,[R7, #+79]
    964          				}
   \   00000124   761C               ADDS     R6,R6,#+1
   \   00000126   082E               CMP      R6,#+8
   \   00000128   E5DB               BLT.N    ??NmsDataCopy_10
    965          			}
   \   0000012A   491C               ADDS     R1,R1,#+1
   \   0000012C   0832               ADDS     R2,R2,#+8
   \   0000012E   0829               CMP      R1,#+8
   \   00000130   E0DB               BLT.N    ??NmsDataCopy_9
    966          						
    967          			//-----------------------------------------------------------------------//
    968          			// System
    969          			N_MuStatus->MuAlm.Data[0] = MuStatus->MuAlm.Data[0]&0x5D;
   \   00000132   2068               LDR      R0,[R4, #+0]
   \   00000134   90F85802           LDRB     R0,[R0, #+600]
   \   00000138   00F05D00           AND      R0,R0,#0x5D
   \   0000013C   A96A               LDR      R1,[R5, #+40]
   \   0000013E   81F85900           STRB     R0,[R1, #+89]
    970          			N_MuStatus->MuAlm.Data[1] = MuStatus->MuAlm.Data[1]&0x0F;
   \   00000142   2068               LDR      R0,[R4, #+0]
   \   00000144   90F85902           LDRB     R0,[R0, #+601]
   \   00000148   00F00F00           AND      R0,R0,#0xF
   \   0000014C   A96A               LDR      R1,[R5, #+40]
   \   0000014E   81F85A00           STRB     R0,[R1, #+90]
    971          
    972          			N_MuStatus->EnvTemp			= MuStatus->EnvTemp;
   \   00000152   A86A               LDR      R0,[R5, #+40]
   \   00000154   2168               LDR      R1,[R4, #+0]
   \   00000156   91F85A12           LDRB     R1,[R1, #+602]
   \   0000015A   80F85D10           STRB     R1,[R0, #+93]
    973          			N_MuStatus->FanTemp			= MuStatus->FanTemp;
   \   0000015E   A86A               LDR      R0,[R5, #+40]
   \   00000160   2168               LDR      R1,[R4, #+0]
   \   00000162   91F85D12           LDRB     R1,[R1, #+605]
   \   00000166   80F85E10           STRB     R1,[R0, #+94]
    974          			N_MuStatus->FanMode			= MuStatus->FanMode;
   \   0000016A   A86A               LDR      R0,[R5, #+40]
   \   0000016C   2168               LDR      R1,[R4, #+0]
   \   0000016E   91F85E12           LDRB     R1,[R1, #+606]
   \   00000172   80F85F10           STRB     R1,[R0, #+95]
    975          			
    976          			// MDTU
    977          			for(i=0; i<MDTU_MAX; i++)
   \   00000176   0020               MOVS     R0,#+0
   \   00000178   0021               MOVS     R1,#+0
   \   0000017A   0822               MOVS     R2,#+8
    978          			{
    979          				N_MuStatus->MdtuSts[i].Install		= MuStatus->MdtuSts[i].Install;
   \                     ??NmsDataCopy_11:
   \   0000017C   AB6A               LDR      R3,[R5, #+40]
   \   0000017E   C318               ADDS     R3,R0,R3
   \   00000180   2668               LDR      R6,[R4, #+0]
   \   00000182   8E19               ADDS     R6,R1,R6
   \   00000184   96F86162           LDRB     R6,[R6, #+609]
   \   00000188   83F86060           STRB     R6,[R3, #+96]
    980          				N_MuStatus->MdtuSts[i].Alarm.Data	= MuStatus->MdtuSts[i].Alarm.Data&0x03;
   \   0000018C   2368               LDR      R3,[R4, #+0]
   \   0000018E   CB18               ADDS     R3,R1,R3
   \   00000190   93F86232           LDRB     R3,[R3, #+610]
   \   00000194   03F00303           AND      R3,R3,#0x3
   \   00000198   AE6A               LDR      R6,[R5, #+40]
   \   0000019A   8619               ADDS     R6,R0,R6
   \   0000019C   86F86130           STRB     R3,[R6, #+97]
    981          				N_MuStatus->MdtuSts[i].PD_Power		= MuStatus->MdtuSts[i].PD_Power;
   \   000001A0   AB6A               LDR      R3,[R5, #+40]
   \   000001A2   C318               ADDS     R3,R0,R3
   \   000001A4   2668               LDR      R6,[R4, #+0]
   \   000001A6   8E19               ADDS     R6,R1,R6
   \   000001A8   96F86362           LDRB     R6,[R6, #+611]
   \   000001AC   83F86260           STRB     R6,[R3, #+98]
    982          				N_MuStatus->MdtuSts[i].LD_Power		= MuStatus->MdtuSts[i].LD_Power;
   \   000001B0   AB6A               LDR      R3,[R5, #+40]
   \   000001B2   C318               ADDS     R3,R0,R3
   \   000001B4   2668               LDR      R6,[R4, #+0]
   \   000001B6   8E19               ADDS     R6,R1,R6
   \   000001B8   96F86462           LDRB     R6,[R6, #+612]
   \   000001BC   83F86360           STRB     R6,[R3, #+99]
    983          				N_MuStatus->MdtuSts[i].BIP			= MuStatus->MdtuSts[i].BIP;
   \   000001C0   AB6A               LDR      R3,[R5, #+40]
   \   000001C2   C318               ADDS     R3,R0,R3
   \   000001C4   2668               LDR      R6,[R4, #+0]
   \   000001C6   8E19               ADDS     R6,R1,R6
   \   000001C8   96F86762           LDRB     R6,[R6, #+615]
   \   000001CC   83F86460           STRB     R6,[R3, #+100]
    984          				N_MuStatus->MdtuSts[i].OpticSum 	= MuStatus->MdtuSts[i].OpticSum;
   \   000001D0   AB6A               LDR      R3,[R5, #+40]
   \   000001D2   C318               ADDS     R3,R0,R3
   \   000001D4   2668               LDR      R6,[R4, #+0]
   \   000001D6   8E19               ADDS     R6,R1,R6
   \   000001D8   96F86862           LDRB     R6,[R6, #+616]
   \   000001DC   83F86560           STRB     R6,[R3, #+101]
    985          			}
   \   000001E0   0A31               ADDS     R1,R1,#+10
   \   000001E2   801D               ADDS     R0,R0,#+6
   \   000001E4   521E               SUBS     R2,R2,#+1
   \   000001E6   C9D1               BNE.N    ??NmsDataCopy_11
    986          			
    987          			// MRFU
    988          			for(i=0; i<RFU_MAX; i++)
   \   000001E8   ........           LDR.W    R6,??DataTable31
   \   000001EC   0027               MOVS     R7,#+0
   \   000001EE   B846               MOV      R8,R7
   \   000001F0   4FF00609           MOV      R9,#+6
    989          			{
    990          				N_MuStatus->MrfuSts[i].Install		= MuStatus->MrfuSts[i].Install;
   \                     ??NmsDataCopy_12:
   \   000001F4   A86A               LDR      R0,[R5, #+40]
   \   000001F6   3818               ADDS     R0,R7,R0
   \   000001F8   2168               LDR      R1,[R4, #+0]
   \   000001FA   4144               ADD      R1,R8,R1
   \   000001FC   91F8B112           LDRB     R1,[R1, #+689]
   \   00000200   80F89010           STRB     R1,[R0, #+144]
    991          				N_MuStatus->MrfuSts[i].Alarm.Data	= MuStatus->MrfuSts[i].Alarm.Data&0x9F;
   \   00000204   2068               LDR      R0,[R4, #+0]
   \   00000206   4044               ADD      R0,R8,R0
   \   00000208   90F8B202           LDRB     R0,[R0, #+690]
   \   0000020C   00F09F00           AND      R0,R0,#0x9F
   \   00000210   A96A               LDR      R1,[R5, #+40]
   \   00000212   7918               ADDS     R1,R7,R1
   \   00000214   81F89100           STRB     R0,[R1, #+145]
    992          				N_MuStatus->MrfuSts[i].DL_OutPower	= swab16(MuStatus->MrfuSts[i].DL_OutPower);
   \   00000218   2068               LDR      R0,[R4, #+0]
   \   0000021A   4044               ADD      R0,R8,R0
   \   0000021C   B0F8B302           LDRH     R0,[R0, #+691]
   \   00000220   ........           BL       __fswab16
   \   00000224   A96A               LDR      R1,[R5, #+40]
   \   00000226   7918               ADDS     R1,R7,R1
   \   00000228   A1F89200           STRH     R0,[R1, #+146]
    993          				N_MuStatus->MrfuSts[i].DL_Attn		= MuStatus->MrfuSts[i].DL_Attn;
   \   0000022C   2068               LDR      R0,[R4, #+0]
   \   0000022E   4044               ADD      R0,R8,R0
   \   00000230   90F8B602           LDRB     R0,[R0, #+694]
   \   00000234   81F89400           STRB     R0,[R1, #+148]
    994          				N_MuStatus->MrfuSts[i].DL_ALC_High	= MuStatus->MrfuSts[i].DL_ALC_High;
   \   00000238   A86A               LDR      R0,[R5, #+40]
   \   0000023A   3818               ADDS     R0,R7,R0
   \   0000023C   2168               LDR      R1,[R4, #+0]
   \   0000023E   4144               ADD      R1,R8,R1
   \   00000240   91F8B712           LDRB     R1,[R1, #+695]
   \   00000244   80F89510           STRB     R1,[R0, #+149]
    995          				N_MuStatus->MrfuSts[i].DL_Alc_OnOffH	= MuStatus->MrfuSts[i].DL_Alc_OnOffH;
   \   00000248   A86A               LDR      R0,[R5, #+40]
   \   0000024A   3818               ADDS     R0,R7,R0
   \   0000024C   2168               LDR      R1,[R4, #+0]
   \   0000024E   4144               ADD      R1,R8,R1
   \   00000250   91F8B912           LDRB     R1,[R1, #+697]
   \   00000254   80F89610           STRB     R1,[R0, #+150]
    996          				N_MuStatus->MrfuSts[i].UL_OutPower	= swab16(MuStatus->MrfuSts[i].UL_OutPower);
   \   00000258   2068               LDR      R0,[R4, #+0]
   \   0000025A   4044               ADD      R0,R8,R0
   \   0000025C   B0F8BB02           LDRH     R0,[R0, #+699]
   \   00000260   ........           BL       __fswab16
   \   00000264   A96A               LDR      R1,[R5, #+40]
   \   00000266   7918               ADDS     R1,R7,R1
   \   00000268   A1F89700           STRH     R0,[R1, #+151]
    997          				N_MuStatus->MrfuSts[i].UL_Attn	 	= MuStatus->MrfuSts[i].UL_Attn;
   \   0000026C   2068               LDR      R0,[R4, #+0]
   \   0000026E   4044               ADD      R0,R8,R0
   \   00000270   90F8BE02           LDRB     R0,[R0, #+702]
   \   00000274   81F89900           STRB     R0,[R1, #+153]
    998          				N_MuStatus->MrfuSts[i].UL_ALC_High	= MuStatus->MrfuSts[i].UL_ALC_High;
   \   00000278   A86A               LDR      R0,[R5, #+40]
   \   0000027A   3818               ADDS     R0,R7,R0
   \   0000027C   2168               LDR      R1,[R4, #+0]
   \   0000027E   4144               ADD      R1,R8,R1
   \   00000280   91F8BF12           LDRB     R1,[R1, #+703]
   \   00000284   80F89A10           STRB     R1,[R0, #+154]
    999          				N_MuStatus->MrfuSts[i].UL_Alc_OnOffH	= MuStatus->MrfuSts[i].UL_Alc_OnOffH;
   \   00000288   A86A               LDR      R0,[R5, #+40]
   \   0000028A   3818               ADDS     R0,R7,R0
   \   0000028C   2168               LDR      R1,[R4, #+0]
   \   0000028E   4144               ADD      R1,R8,R1
   \   00000290   91F8C012           LDRB     R1,[R1, #+704]
   \   00000294   80F89B10           STRB     R1,[R0, #+155]
   1000          				N_MuStatus->MrfuSts[i].UL_SD_Limit	= MuStatus->MrfuSts[i].UL_SD_Limit;
   \   00000298   A86A               LDR      R0,[R5, #+40]
   \   0000029A   3818               ADDS     R0,R7,R0
   \   0000029C   2168               LDR      R1,[R4, #+0]
   \   0000029E   4144               ADD      R1,R8,R1
   \   000002A0   91F8C312           LDRB     R1,[R1, #+707]
   \   000002A4   80F89C10           STRB     R1,[R0, #+156]
   1001          				N_MuStatus->MrfuSts[i].UL_SD_OnOff	= MuStatus->MrfuSts[i].UL_SD_OnOff;
   \   000002A8   A86A               LDR      R0,[R5, #+40]
   \   000002AA   3818               ADDS     R0,R7,R0
   \   000002AC   2168               LDR      R1,[R4, #+0]
   \   000002AE   4144               ADD      R1,R8,R1
   \   000002B0   91F8C412           LDRB     R1,[R1, #+708]
   \   000002B4   80F89D10           STRB     R1,[R0, #+157]
   1002          				N_MuStatus->MrfuSts[i].UL_Amp_OnOff	= MuStatus->MrfuSts[i].UL_Amp_OnOff;
   \   000002B8   A86A               LDR      R0,[R5, #+40]
   \   000002BA   3818               ADDS     R0,R7,R0
   \   000002BC   2168               LDR      R1,[R4, #+0]
   \   000002BE   4144               ADD      R1,R8,R1
   \   000002C0   91F8C512           LDRB     R1,[R1, #+709]
   \   000002C4   80F89E10           STRB     R1,[R0, #+158]
   1003          				N_MuStatus->MrfuSts[i].UL_SD_Count	= Sd_Count[i];//MuStatus->MrfuSts[i].Alarm.UL_SD_Alarm_C;
   \   000002C8   A86A               LDR      R0,[R5, #+40]
   \   000002CA   3818               ADDS     R0,R7,R0
   \   000002CC   16F8011B           LDRB     R1,[R6], #+1
   \   000002D0   80F89F10           STRB     R1,[R0, #+159]
   1004          			}
   \   000002D4   08F11508           ADD      R8,R8,#+21
   \   000002D8   1037               ADDS     R7,R7,#+16
   \   000002DA   B9F10109           SUBS     R9,R9,#+1
   \   000002DE   89D1               BNE.N    ??NmsDataCopy_12
   1005          
   1006          			// CFR
   1007          			for(i=0; i<RFU_MAX; i++)
   \   000002E0   0022               MOVS     R2,#+0
   \   000002E2   0020               MOVS     R0,#+0
   1008          			{
   1009          				N_MuStatus->Cfr_Select[i].Data		= MuStatus->CfrSts[i].Cfr_Select.Data;
   \                     ??NmsDataCopy_13:
   \   000002E4   A96A               LDR      R1,[R5, #+40]
   \   000002E6   5118               ADDS     R1,R2,R1
   \   000002E8   2368               LDR      R3,[R4, #+0]
   \   000002EA   C318               ADDS     R3,R0,R3
   \   000002EC   93F84133           LDRB     R3,[R3, #+833]
   \   000002F0   81F8F030           STRB     R3,[R1, #+240]
   1010          			}
   \   000002F4   521C               ADDS     R2,R2,#+1
   \   000002F6   C01D               ADDS     R0,R0,#+7
   \   000002F8   062A               CMP      R2,#+6
   \   000002FA   F3DB               BLT.N    ??NmsDataCopy_13
   1011          
   1012          			N_MuStatus->AlarmMask = MuStatus->AlarmMask;
   \   000002FC   A86A               LDR      R0,[R5, #+40]
   \   000002FE   2168               LDR      R1,[R4, #+0]
   \   00000300   91F8AE13           LDRB     R1,[R1, #+942]
   \   00000304   80F8F610           STRB     R1,[R0, #+246]
   1013          			N_MuStatus->ResetReason = 0;
   \   00000308   A86A               LDR      R0,[R5, #+40]
   \   0000030A   0021               MOVS     R1,#+0
   \   0000030C   80F8F710           STRB     R1,[R0, #+247]
   1014          			N_MuStatus->MuAlm.Reset_Alarm = _Normal;
   \   00000310   A86A               LDR      R0,[R5, #+40]
   \   00000312   90F85A10           LDRB     R1,[R0, #+90]
   \   00000316   01F0F701           AND      R1,R1,#0xF7
   \   0000031A   80F85A10           STRB     R1,[R0, #+90]
   1015          /*
   1016          			if(MuStatus->MuAlm.Reset_Alarm == _Alarm)
   1017          			{
   1018          				N_MuStatus->MuAlm.Data[0] = 0;
   1019          				N_MuStatus->MuAlm.Data[1] = 0;
   1020          				N_MuStatus->MuAlm.Reset_Alarm = _Alarm;
   1021          			}
   1022          */			
   1023          			break;
   \   0000031E   79E2               B.N      ??NmsDataCopy_3
   1024          
   1025          		case HU_PATH:
   1026          			//-----------------------------------------------------------------------//
   1027          			// System
   1028          			N_HuStatus->MakerID			= HuStatus[TarID.HuID]->MakerID;
   \                     ??NmsDataCopy_2:
   \   00000320   9DF80100           LDRB     R0,[SP, #+1]
   \   00000324   ........           LDR.W    R1,??DataTable32
   \   00000328   ........           LDR.W    R5,??DataTable29
   \   0000032C   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000330   92F84922           LDRB     R2,[R2, #+585]
   \   00000334   EB6A               LDR      R3,[R5, #+44]
   \   00000336   1A70               STRB     R2,[R3, #+0]
   1029          			N_HuStatus->ProgramVer[0]	= HuStatus[TarID.HuID]->ProgramVer[0];
   \   00000338   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   0000033C   92F84A22           LDRB     R2,[R2, #+586]
   \   00000340   EB6A               LDR      R3,[R5, #+44]
   \   00000342   5A70               STRB     R2,[R3, #+1]
   1030          			N_HuStatus->ProgramVer[1]	= HuStatus[TarID.HuID]->ProgramVer[1];
   \   00000344   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000348   92F84B22           LDRB     R2,[R2, #+587]
   \   0000034C   EB6A               LDR      R3,[R5, #+44]
   \   0000034E   9A70               STRB     R2,[R3, #+2]
   1031          			N_HuStatus->DtuVer			= HuStatus[TarID.HuID]->DtuVer;
   \   00000350   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000354   92F84D22           LDRB     R2,[R2, #+589]
   \   00000358   EB6A               LDR      R3,[R5, #+44]
   \   0000035A   DA70               STRB     R2,[R3, #+3]
   1032          			for(i=0; i<10; i++)
   \   0000035C   0022               MOVS     R2,#+0
   1033          				N_HuStatus->RepeaterID[i]	= HuStatus[TarID.HuID]->RepeaterID[i];
   \                     ??NmsDataCopy_14:
   \   0000035E   51F82030           LDR      R3,[R1, R0, LSL #+2]
   \   00000362   D318               ADDS     R3,R2,R3
   \   00000364   93F84E32           LDRB     R3,[R3, #+590]
   \   00000368   EC6A               LDR      R4,[R5, #+44]
   \   0000036A   1419               ADDS     R4,R2,R4
   \   0000036C   2371               STRB     R3,[R4, #+4]
   \   0000036E   521C               ADDS     R2,R2,#+1
   \   00000370   0A2A               CMP      R2,#+10
   \   00000372   F4DB               BLT.N    ??NmsDataCopy_14
   1034          			
   1035          			//-----------------------------------------------------------------------//
   1036          			// System
   1037          			N_HuStatus->HuAlm.Data[0] = HuStatus[TarID.HuID]->HuAlm.Data[0]&0xDF;
   \   00000374   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000378   92F85822           LDRB     R2,[R2, #+600]
   \   0000037C   02F0DF02           AND      R2,R2,#0xDF
   \   00000380   EB6A               LDR      R3,[R5, #+44]
   \   00000382   1A74               STRB     R2,[R3, #+16]
   1038          			N_HuStatus->HuAlm.Data[1] = HuStatus[TarID.HuID]->HuAlm.Data[1];
   \   00000384   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000388   92F85922           LDRB     R2,[R2, #+601]
   \   0000038C   EB6A               LDR      R3,[R5, #+44]
   \   0000038E   5A74               STRB     R2,[R3, #+17]
   1039          
   1040          			N_HuStatus->EnvTemp			= HuStatus[TarID.HuID]->EnvTemp;
   \   00000390   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   00000394   92F85A22           LDRB     R2,[R2, #+602]
   \   00000398   EB6A               LDR      R3,[R5, #+44]
   \   0000039A   1A75               STRB     R2,[R3, #+20]
   1041          
   1042          			// HDTU
   1043          			N_HuStatus->Mu_HdtuSts.Install	= HuStatus[TarID.HuID]->Mu_HdtuSts.Install;
   \   0000039C   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003A0   92F85D22           LDRB     R2,[R2, #+605]
   \   000003A4   EB6A               LDR      R3,[R5, #+44]
   \   000003A6   5A75               STRB     R2,[R3, #+21]
   1044          			N_HuStatus->Mu_HdtuSts.Alarm.Data	= HuStatus[TarID.HuID]->Mu_HdtuSts.Alarm.Data&0x03;
   \   000003A8   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003AC   92F85E22           LDRB     R2,[R2, #+606]
   \   000003B0   02F00302           AND      R2,R2,#0x3
   \   000003B4   EB6A               LDR      R3,[R5, #+44]
   \   000003B6   9A75               STRB     R2,[R3, #+22]
   1045          			N_HuStatus->Mu_HdtuSts.PD_Power		= HuStatus[TarID.HuID]->Mu_HdtuSts.PD_Power;
   \   000003B8   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003BC   92F85F22           LDRB     R2,[R2, #+607]
   \   000003C0   EB6A               LDR      R3,[R5, #+44]
   \   000003C2   DA75               STRB     R2,[R3, #+23]
   1046          			N_HuStatus->Mu_HdtuSts.LD_Power		= HuStatus[TarID.HuID]->Mu_HdtuSts.LD_Power;
   \   000003C4   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003C8   92F86022           LDRB     R2,[R2, #+608]
   \   000003CC   EB6A               LDR      R3,[R5, #+44]
   \   000003CE   1A76               STRB     R2,[R3, #+24]
   1047          			N_HuStatus->Mu_HdtuSts.BIP			= HuStatus[TarID.HuID]->Mu_HdtuSts.BIP;
   \   000003D0   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003D4   92F86322           LDRB     R2,[R2, #+611]
   \   000003D8   EB6A               LDR      R3,[R5, #+44]
   \   000003DA   5A76               STRB     R2,[R3, #+25]
   1048          			N_HuStatus->Mu_HdtuSts.OpticSum 	= HuStatus[TarID.HuID]->Mu_HdtuSts.OpticSum;
   \   000003DC   51F82020           LDR      R2,[R1, R0, LSL #+2]
   \   000003E0   92F86422           LDRB     R2,[R2, #+612]
   \   000003E4   EB6A               LDR      R3,[R5, #+44]
   \   000003E6   9A76               STRB     R2,[R3, #+26]
   1049          			
   1050          			for(i=0; i<HDTU_MAX; i++)
   \   000003E8   0022               MOVS     R2,#+0
   \   000003EA   0023               MOVS     R3,#+0
   \   000003EC   1024               MOVS     R4,#+16
   1051          			{
   1052          				N_HuStatus->HdtuSts[i].Install		= HuStatus[TarID.HuID]->HdtuSts[i].Install;
   \                     ??NmsDataCopy_15:
   \   000003EE   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   000003F2   9E19               ADDS     R6,R3,R6
   \   000003F4   96F86762           LDRB     R6,[R6, #+615]
   \   000003F8   EF6A               LDR      R7,[R5, #+44]
   \   000003FA   D719               ADDS     R7,R2,R7
   \   000003FC   FE76               STRB     R6,[R7, #+27]
   1053          				N_HuStatus->HdtuSts[i].Alarm.Data	= HuStatus[TarID.HuID]->HdtuSts[i].Alarm.Data&0x03;
   \   000003FE   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   00000402   9E19               ADDS     R6,R3,R6
   \   00000404   96F86862           LDRB     R6,[R6, #+616]
   \   00000408   06F00306           AND      R6,R6,#0x3
   \   0000040C   EF6A               LDR      R7,[R5, #+44]
   \   0000040E   D719               ADDS     R7,R2,R7
   \   00000410   3E77               STRB     R6,[R7, #+28]
   1054          				N_HuStatus->HdtuSts[i].PD_Power		= HuStatus[TarID.HuID]->HdtuSts[i].PD_Power;
   \   00000412   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   00000416   9E19               ADDS     R6,R3,R6
   \   00000418   96F86962           LDRB     R6,[R6, #+617]
   \   0000041C   EF6A               LDR      R7,[R5, #+44]
   \   0000041E   D719               ADDS     R7,R2,R7
   \   00000420   7E77               STRB     R6,[R7, #+29]
   1055          				N_HuStatus->HdtuSts[i].LD_Power		= HuStatus[TarID.HuID]->HdtuSts[i].LD_Power;
   \   00000422   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   00000426   9E19               ADDS     R6,R3,R6
   \   00000428   96F86A62           LDRB     R6,[R6, #+618]
   \   0000042C   EF6A               LDR      R7,[R5, #+44]
   \   0000042E   D719               ADDS     R7,R2,R7
   \   00000430   BE77               STRB     R6,[R7, #+30]
   1056          				N_HuStatus->HdtuSts[i].BIP			= HuStatus[TarID.HuID]->HdtuSts[i].BIP;
   \   00000432   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   00000436   9E19               ADDS     R6,R3,R6
   \   00000438   96F86D62           LDRB     R6,[R6, #+621]
   \   0000043C   EF6A               LDR      R7,[R5, #+44]
   \   0000043E   D719               ADDS     R7,R2,R7
   \   00000440   FE77               STRB     R6,[R7, #+31]
   1057          				N_HuStatus->HdtuSts[i].OpticSum 	= HuStatus[TarID.HuID]->HdtuSts[i].OpticSum;
   \   00000442   51F82060           LDR      R6,[R1, R0, LSL #+2]
   \   00000446   9E19               ADDS     R6,R3,R6
   \   00000448   96F86E62           LDRB     R6,[R6, #+622]
   \   0000044C   EF6A               LDR      R7,[R5, #+44]
   \   0000044E   D719               ADDS     R7,R2,R7
   \   00000450   87F82060           STRB     R6,[R7, #+32]
   1058          			}
   \   00000454   0A33               ADDS     R3,R3,#+10
   \   00000456   921D               ADDS     R2,R2,#+6
   \   00000458   641E               SUBS     R4,R4,#+1
   \   0000045A   C8D1               BNE.N    ??NmsDataCopy_15
   1059          			
   1060          			N_HuStatus->AlarmMask = HuStatus[TarID.HuID]->AlarmMask;
   \   0000045C   51F82000           LDR      R0,[R1, R0, LSL #+2]
   \   00000460   90F80803           LDRB     R0,[R0, #+776]
   \   00000464   E96A               LDR      R1,[R5, #+44]
   \   00000466   81F87B00           STRB     R0,[R1, #+123]
   1061          			N_HuStatus->HuAlm.Reset_Alarm = _Normal;
   \   0000046A   E86A               LDR      R0,[R5, #+44]
   \   0000046C   417C               LDRB     R1,[R0, #+17]
   \   0000046E   01F0F701           AND      R1,R1,#0xF7
   \   00000472   4174               STRB     R1,[R0, #+17]
   1062          			N_HuStatus->ResetReason = 0;
   \   00000474   E86A               LDR      R0,[R5, #+44]
   \   00000476   0021               MOVS     R1,#+0
   \   00000478   80F87C10           STRB     R1,[R0, #+124]
   1063          			/*
   1064          			if(HuBootFlag[TarID.HuID] != 0)
   1065          			{
   1066          				N_HuStatus->HuAlm.Data[0] = 0;
   1067          				N_HuStatus->HuAlm.Data[1] = 0;
   1068          				
   1069          				N_HuStatus->ResetReason = HuBootFlag[TarID.HuID];
   1070          				N_HuStatus->HuAlm.Reset_Alarm = _Alarm;
   1071          			}
   1072          			else	N_HuStatus->ResetReason = HuStatus[TarID.HuID]->ResetReason;
   1073          			*/
   1074          			break;
   \   0000047C   CAE1               B.N      ??NmsDataCopy_3
   1075          
   1076          		case RU_PATH:
   1077          			BrID = (TarID.RuID>>4)&0x0F;
   \                     ??NmsDataCopy_1:
   \   0000047E   9DF80200           LDRB     R0,[SP, #+2]
   \   00000482   0109               LSRS     R1,R0,#+4
   1078          			RuID = TarID.RuID&0x0F;
   \   00000484   10F00F04           ANDS     R4,R0,#0xF
   1079          			if(RuID > 0)	RuID = 0;
   \   00000488   18BF               IT       NE 
   \   0000048A   0024               MOVNE    R4,#+0
   1080          			
   1081          			//-----------------------------------------------------------------------//
   1082          			// System
   1083          			N_RuStatus->MakerID			= RuBuf[TarID.HuID][BrID][RuID]->MakerID;
   \   0000048C   9DF80100           LDRB     R0,[SP, #+1]
   \   00000490   ........           LDR.W    R2,??DataTable33
   \   00000494   02EB8010           ADD      R0,R2,R0, LSL #+6
   \   00000498   00EB8106           ADD      R6,R0,R1, LSL #+2
   \   0000049C   ........           LDR.W    R5,??DataTable29
   \   000004A0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004A4   0078               LDRB     R0,[R0, #+0]
   \   000004A6   296B               LDR      R1,[R5, #+48]
   \   000004A8   0870               STRB     R0,[R1, #+0]
   1084          			N_RuStatus->ProgramVer[0]	= RuBuf[TarID.HuID][BrID][RuID]->ProgramVer[0];
   \   000004AA   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004AE   4078               LDRB     R0,[R0, #+1]
   \   000004B0   296B               LDR      R1,[R5, #+48]
   \   000004B2   4870               STRB     R0,[R1, #+1]
   1085          			N_RuStatus->ProgramVer[1]	= RuBuf[TarID.HuID][BrID][RuID]->ProgramVer[1];
   \   000004B4   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004B8   8078               LDRB     R0,[R0, #+2]
   \   000004BA   296B               LDR      R1,[R5, #+48]
   \   000004BC   8870               STRB     R0,[R1, #+2]
   1086          			N_RuStatus->DtuVer			= RuBuf[TarID.HuID][BrID][RuID]->DtuVer;
   \   000004BE   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004C2   0079               LDRB     R0,[R0, #+4]
   \   000004C4   296B               LDR      R1,[R5, #+48]
   \   000004C6   C870               STRB     R0,[R1, #+3]
   1087          			for(i=0; i<10; i++)
   \   000004C8   0022               MOVS     R2,#+0
   1088          				N_RuStatus->RepeaterID[i]	= RuBuf[TarID.HuID][BrID][RuID]->RepeaterID[i];
   \                     ??NmsDataCopy_16:
   \   000004CA   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004CE   1018               ADDS     R0,R2,R0
   \   000004D0   4079               LDRB     R0,[R0, #+5]
   \   000004D2   296B               LDR      R1,[R5, #+48]
   \   000004D4   5118               ADDS     R1,R2,R1
   \   000004D6   0871               STRB     R0,[R1, #+4]
   \   000004D8   521C               ADDS     R2,R2,#+1
   \   000004DA   0A2A               CMP      R2,#+10
   \   000004DC   F5DB               BLT.N    ??NmsDataCopy_16
   1089          			
   1090          			//-----------------------------------------------------------------------//
   1091          			// System
   1092          			N_RuStatus->RuAlm.Data[0] 	= RuBuf[TarID.HuID][BrID][RuID]->RuAlm.Data[0]&0xD1;
   \   000004DE   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004E2   C07B               LDRB     R0,[R0, #+15]
   \   000004E4   00F0D100           AND      R0,R0,#0xD1
   \   000004E8   296B               LDR      R1,[R5, #+48]
   \   000004EA   0874               STRB     R0,[R1, #+16]
   1093          			N_RuStatus->RuAlm.Data[1]	= RuBuf[TarID.HuID][BrID][RuID]->RuAlm.Data[1]&0x0F;
   \   000004EC   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000004F0   007C               LDRB     R0,[R0, #+16]
   \   000004F2   00F00F00           AND      R0,R0,#0xF
   \   000004F6   296B               LDR      R1,[R5, #+48]
   \   000004F8   4874               STRB     R0,[R1, #+17]
   1094          			N_RuStatus->RuAlm.S_VSWR_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[0].Alarm.VSWR_Alarm;
   \   000004FA   286B               LDR      R0,[R5, #+48]
   \   000004FC   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000500   91F83610           LDRB     R1,[R1, #+54]
   \   00000504   0909               LSRS     R1,R1,#+4
   \   00000506   427C               LDRB     R2,[R0, #+17]
   \   00000508   61F30412           BFI      R2,R1,#+4,#+1
   \   0000050C   4274               STRB     R2,[R0, #+17]
   1095          			N_RuStatus->RuAlm.M_VSWR_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[1].Alarm.VSWR_Alarm;
   \   0000050E   286B               LDR      R0,[R5, #+48]
   \   00000510   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000514   91F86610           LDRB     R1,[R1, #+102]
   \   00000518   0909               LSRS     R1,R1,#+4
   \   0000051A   427C               LDRB     R2,[R0, #+17]
   \   0000051C   61F34512           BFI      R2,R1,#+5,#+1
   \   00000520   4274               STRB     R2,[R0, #+17]
   1096          
   1097          			N_RuStatus->EnvTemp			= RuBuf[TarID.HuID][BrID][RuID]->EnvTemp;
   \   00000522   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000526   407C               LDRB     R0,[R0, #+17]
   \   00000528   296B               LDR      R1,[R5, #+48]
   \   0000052A   0875               STRB     R0,[R1, #+20]
   1098          			
   1099          			// RDTU
   1100          			for(i=0; i<RDTU_MAX; i++)
   \   0000052C   0020               MOVS     R0,#+0
   \   0000052E   0021               MOVS     R1,#+0
   \   00000530   0222               MOVS     R2,#+2
   1101          			{
   1102          				N_RuStatus->RdtuSts[i].Install		= RuBuf[TarID.HuID][BrID][RuID]->RdtuSts[i].Install;
   \                     ??NmsDataCopy_17:
   \   00000532   56F82430           LDR      R3,[R6, R4, LSL #+2]
   \   00000536   CB18               ADDS     R3,R1,R3
   \   00000538   5B7D               LDRB     R3,[R3, #+21]
   \   0000053A   2F6B               LDR      R7,[R5, #+48]
   \   0000053C   C719               ADDS     R7,R0,R7
   \   0000053E   7B75               STRB     R3,[R7, #+21]
   1103          				N_RuStatus->RdtuSts[i].Alarm.Data	= RuBuf[TarID.HuID][BrID][RuID]->RdtuSts[i].Alarm.Data&0x03;
   \   00000540   56F82430           LDR      R3,[R6, R4, LSL #+2]
   \   00000544   CB18               ADDS     R3,R1,R3
   \   00000546   9B7D               LDRB     R3,[R3, #+22]
   \   00000548   03F00303           AND      R3,R3,#0x3
   \   0000054C   2F6B               LDR      R7,[R5, #+48]
   \   0000054E   C719               ADDS     R7,R0,R7
   \   00000550   BB75               STRB     R3,[R7, #+22]
   1104          				N_RuStatus->RdtuSts[i].PD_Power		= RuBuf[TarID.HuID][BrID][RuID]->RdtuSts[i].PD_Power;
   \   00000552   56F82430           LDR      R3,[R6, R4, LSL #+2]
   \   00000556   CB18               ADDS     R3,R1,R3
   \   00000558   DB7D               LDRB     R3,[R3, #+23]
   \   0000055A   2F6B               LDR      R7,[R5, #+48]
   \   0000055C   C719               ADDS     R7,R0,R7
   \   0000055E   FB75               STRB     R3,[R7, #+23]
   1105          				N_RuStatus->RdtuSts[i].LD_Power		= RuBuf[TarID.HuID][BrID][RuID]->RdtuSts[i].LD_Power;
   \   00000560   56F82430           LDR      R3,[R6, R4, LSL #+2]
   \   00000564   CB18               ADDS     R3,R1,R3
   \   00000566   1B7E               LDRB     R3,[R3, #+24]
   \   00000568   2F6B               LDR      R7,[R5, #+48]
   \   0000056A   C719               ADDS     R7,R0,R7
   \   0000056C   3B76               STRB     R3,[R7, #+24]
   1106          				N_RuStatus->RdtuSts[i].BIP			= RuBuf[TarID.HuID][BrID][RuID]->RdtuSts[i].BIP;
   \   0000056E   56F82430           LDR      R3,[R6, R4, LSL #+2]
   \   00000572   CB18               ADDS     R3,R1,R3
   \   00000574   DB7E               LDRB     R3,[R3, #+27]
   \   00000576   2F6B               LDR      R7,[R5, #+48]
   \   00000578   C719               ADDS     R7,R0,R7
   \   0000057A   7B76               STRB     R3,[R7, #+25]
   1107          			}
   \   0000057C   0931               ADDS     R1,R1,#+9
   \   0000057E   401D               ADDS     R0,R0,#+5
   \   00000580   521E               SUBS     R2,R2,#+1
   \   00000582   D6D1               BNE.N    ??NmsDataCopy_17
   1108          			
   1109          			// Optic Common
   1110          			N_RuStatus->Optic_Switch	= 0;
   \   00000584   286B               LDR      R0,[R5, #+48]
   \   00000586   0021               MOVS     R1,#+0
   \   00000588   C177               STRB     R1,[R0, #+31]
   1111          			N_RuStatus->IR_UL_Sum		= 0;
   \   0000058A   286B               LDR      R0,[R5, #+48]
   \   0000058C   80F82010           STRB     R1,[R0, #+32]
   1112          			N_RuStatus->DL_Delay_21G	= swab16(RuBuf[TarID.HuID][BrID][RuID]->DL_Delay_21G);
   \   00000590   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000594   008D               LDRH     R0,[R0, #+40]
   \   00000596   ........           BL       __fswab16
   \   0000059A   296B               LDR      R1,[R5, #+48]
   \   0000059C   A1F82100           STRH     R0,[R1, #+33]
   1113          			N_RuStatus->UL_Delay_21G	= swab16(RuBuf[TarID.HuID][BrID][RuID]->UL_Delay_21G);
   \   000005A0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005A4   408D               LDRH     R0,[R0, #+42]
   \   000005A6   ........           BL       __fswab16
   \   000005AA   296B               LDR      R1,[R5, #+48]
   \   000005AC   A1F82300           STRH     R0,[R1, #+35]
   1114          			N_RuStatus->DL_Delay_900M	= swab16(RuBuf[TarID.HuID][BrID][RuID]->DL_Delay_900M);
   \   000005B0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005B4   808D               LDRH     R0,[R0, #+44]
   \   000005B6   ........           BL       __fswab16
   \   000005BA   296B               LDR      R1,[R5, #+48]
   \   000005BC   A1F82500           STRH     R0,[R1, #+37]
   1115          			N_RuStatus->UL_Delay_900M	= swab16(RuBuf[TarID.HuID][BrID][RuID]->UL_Delay_900M);
   \   000005C0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005C4   C08D               LDRH     R0,[R0, #+46]
   \   000005C6   ........           BL       __fswab16
   \   000005CA   296B               LDR      R1,[R5, #+48]
   \   000005CC   A1F82700           STRH     R0,[R1, #+39]
   1116          			N_RuStatus->DL_Delay_25G	= swab16(RuBuf[TarID.HuID][BrID][RuID]->DL_Delay_25G);
   \   000005D0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005D4   008E               LDRH     R0,[R0, #+48]
   \   000005D6   ........           BL       __fswab16
   \   000005DA   296B               LDR      R1,[R5, #+48]
   \   000005DC   A1F82900           STRH     R0,[R1, #+41]
   1117          			N_RuStatus->UL_Delay_25G	= swab16(RuBuf[TarID.HuID][BrID][RuID]->UL_Delay_25G);
   \   000005E0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005E4   408E               LDRH     R0,[R0, #+50]
   \   000005E6   ........           BL       __fswab16
   \   000005EA   296B               LDR      R1,[R5, #+48]
   \   000005EC   A1F82B00           STRH     R0,[R1, #+43]
   1118          			
   1119          			// RRFU
   1120          			for(i=0; i<RFU_MAX; i++)
   \   000005F0   0027               MOVS     R7,#+0
   \   000005F2   B846               MOV      R8,R7
   \   000005F4   4FF00609           MOV      R9,#+6
   1121          			{
   1122          				N_RuStatus->RrfuSts[i].Install				= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Install;
   \                     ??NmsDataCopy_18:
   \   000005F8   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000005FC   4044               ADD      R0,R8,R0
   \   000005FE   90F83400           LDRB     R0,[R0, #+52]
   \   00000602   296B               LDR      R1,[R5, #+48]
   \   00000604   7918               ADDS     R1,R7,R1
   \   00000606   81F82D00           STRB     R0,[R1, #+45]
   1123          				N_RuStatus->RrfuSts[i].Alarm.DL_Pll			= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_Pll;
   \   0000060A   286B               LDR      R0,[R5, #+48]
   \   0000060C   3818               ADDS     R0,R7,R0
   \   0000060E   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000612   4144               ADD      R1,R8,R1
   \   00000614   91F83510           LDRB     R1,[R1, #+53]
   \   00000618   90F82E20           LDRB     R2,[R0, #+46]
   \   0000061C   61F30002           BFI      R2,R1,#+0,#+1
   \   00000620   80F82E20           STRB     R2,[R0, #+46]
   1124          				N_RuStatus->RrfuSts[i].Alarm.UL_Pll			= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_Pll;
   \   00000624   286B               LDR      R0,[R5, #+48]
   \   00000626   3818               ADDS     R0,R7,R0
   \   00000628   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   0000062C   4144               ADD      R1,R8,R1
   \   0000062E   91F83510           LDRB     R1,[R1, #+53]
   \   00000632   4908               LSRS     R1,R1,#+1
   \   00000634   90F82E20           LDRB     R2,[R0, #+46]
   \   00000638   61F34102           BFI      R2,R1,#+1,#+1
   \   0000063C   80F82E20           STRB     R2,[R0, #+46]
   1125          				N_RuStatus->RrfuSts[i].Alarm.DL_OutLimitH_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_OutLimitH_Alarm;
   \   00000640   286B               LDR      R0,[R5, #+48]
   \   00000642   3818               ADDS     R0,R7,R0
   \   00000644   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000648   4144               ADD      R1,R8,R1
   \   0000064A   91F83510           LDRB     R1,[R1, #+53]
   \   0000064E   C908               LSRS     R1,R1,#+3
   \   00000650   90F82E20           LDRB     R2,[R0, #+46]
   \   00000654   61F38202           BFI      R2,R1,#+2,#+1
   \   00000658   80F82E20           STRB     R2,[R0, #+46]
   1126          				N_RuStatus->RrfuSts[i].Alarm.UL_OverInput	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_OverInput;
   \   0000065C   286B               LDR      R0,[R5, #+48]
   \   0000065E   3818               ADDS     R0,R7,R0
   \   00000660   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000664   4144               ADD      R1,R8,R1
   \   00000666   91F83510           LDRB     R1,[R1, #+53]
   \   0000066A   8909               LSRS     R1,R1,#+6
   \   0000066C   90F82E20           LDRB     R2,[R0, #+46]
   \   00000670   61F38612           BFI      R2,R1,#+6,#+1
   \   00000674   80F82E20           STRB     R2,[R0, #+46]
   1127          				N_RuStatus->RrfuSts[i].Alarm.Tsync_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.Tsync_Alarm;
   \   00000678   286B               LDR      R0,[R5, #+48]
   \   0000067A   3818               ADDS     R0,R7,R0
   \   0000067C   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   00000680   4144               ADD      R1,R8,R1
   \   00000682   91F83510           LDRB     R1,[R1, #+53]
   \   00000686   C909               LSRS     R1,R1,#+7
   \   00000688   90F82E20           LDRB     R2,[R0, #+46]
   \   0000068C   61F3C712           BFI      R2,R1,#+7,#+1
   \   00000690   80F82E20           STRB     R2,[R0, #+46]
   1128          				N_RuStatus->RrfuSts[i].Alarm.DL_SD_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_SD_Alarm;
   \   00000694   286B               LDR      R0,[R5, #+48]
   \   00000696   3818               ADDS     R0,R7,R0
   \   00000698   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   0000069C   4144               ADD      R1,R8,R1
   \   0000069E   91F83610           LDRB     R1,[R1, #+54]
   \   000006A2   90F82F20           LDRB     R2,[R0, #+47]
   \   000006A6   61F30002           BFI      R2,R1,#+0,#+1
   \   000006AA   80F82F20           STRB     R2,[R0, #+47]
   1129          				N_RuStatus->RrfuSts[i].Alarm.UL_SD_Alarm	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_SD_Alarm;
   \   000006AE   286B               LDR      R0,[R5, #+48]
   \   000006B0   3818               ADDS     R0,R7,R0
   \   000006B2   56F82410           LDR      R1,[R6, R4, LSL #+2]
   \   000006B6   4144               ADD      R1,R8,R1
   \   000006B8   91F83610           LDRB     R1,[R1, #+54]
   \   000006BC   4908               LSRS     R1,R1,#+1
   \   000006BE   90F82F20           LDRB     R2,[R0, #+47]
   \   000006C2   61F34102           BFI      R2,R1,#+1,#+1
   \   000006C6   80F82F20           STRB     R2,[R0, #+47]
   1130          								
   1131          				N_RuStatus->RrfuSts[i].DL_OutPower		= swab16(RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_OutPower);
   \   000006CA   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000006CE   4044               ADD      R0,R8,R0
   \   000006D0   B0F83700           LDRH     R0,[R0, #+55]
   \   000006D4   ........           BL       __fswab16
   \   000006D8   296B               LDR      R1,[R5, #+48]
   \   000006DA   7918               ADDS     R1,R7,R1
   \   000006DC   0886               STRH     R0,[R1, #+48]
   1132          				N_RuStatus->RrfuSts[i].DL_Attn			= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_Attn;
   \   000006DE   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000006E2   4044               ADD      R0,R8,R0
   \   000006E4   90F83B00           LDRB     R0,[R0, #+59]
   \   000006E8   81F83200           STRB     R0,[R1, #+50]
   1133          				N_RuStatus->RrfuSts[i].DL_ALC_High		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_ALC_High;
   \   000006EC   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000006F0   4044               ADD      R0,R8,R0
   \   000006F2   90F83C00           LDRB     R0,[R0, #+60]
   \   000006F6   296B               LDR      R1,[R5, #+48]
   \   000006F8   7918               ADDS     R1,R7,R1
   \   000006FA   81F83300           STRB     R0,[R1, #+51]
   1134          				N_RuStatus->RrfuSts[i].DL_Alc_OnOffH 	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_Alc_OnOffH;
   \   000006FE   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000702   4044               ADD      R0,R8,R0
   \   00000704   90F83E00           LDRB     R0,[R0, #+62]
   \   00000708   296B               LDR      R1,[R5, #+48]
   \   0000070A   7918               ADDS     R1,R7,R1
   \   0000070C   81F83400           STRB     R0,[R1, #+52]
   1135          				N_RuStatus->RrfuSts[i].DL_Amp_OnOff 	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_Amp_OnOff;
   \   00000710   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000714   4044               ADD      R0,R8,R0
   \   00000716   90F84000           LDRB     R0,[R0, #+64]
   \   0000071A   296B               LDR      R1,[R5, #+48]
   \   0000071C   7918               ADDS     R1,R7,R1
   \   0000071E   81F83500           STRB     R0,[R1, #+53]
   1136          
   1137          				N_RuStatus->RrfuSts[i].UL_InPower 		= swab16(RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_InPower);
   \   00000722   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000726   4044               ADD      R0,R8,R0
   \   00000728   B0F84100           LDRH     R0,[R0, #+65]
   \   0000072C   ........           BL       __fswab16
   \   00000730   296B               LDR      R1,[R5, #+48]
   \   00000732   7918               ADDS     R1,R7,R1
   \   00000734   C886               STRH     R0,[R1, #+54]
   1138          				N_RuStatus->RrfuSts[i].UL_Attn 			= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_Attn;
   \   00000736   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   0000073A   4044               ADD      R0,R8,R0
   \   0000073C   90F84300           LDRB     R0,[R0, #+67]
   \   00000740   81F83800           STRB     R0,[R1, #+56]
   1139          				N_RuStatus->RrfuSts[i].UL_Amp_OnOff 	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_Amp_OnOff;
   \   00000744   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000748   4044               ADD      R0,R8,R0
   \   0000074A   90F84400           LDRB     R0,[R0, #+68]
   \   0000074E   296B               LDR      R1,[R5, #+48]
   \   00000750   7918               ADDS     R1,R7,R1
   \   00000752   81F83900           STRB     R0,[R1, #+57]
   1140          				
   1141          				N_RuStatus->RrfuSts[i].DL_SD_Limit 		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_SD_Limit;
   \   00000756   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   0000075A   4044               ADD      R0,R8,R0
   \   0000075C   90F85000           LDRB     R0,[R0, #+80]
   \   00000760   296B               LDR      R1,[R5, #+48]
   \   00000762   7918               ADDS     R1,R7,R1
   \   00000764   81F83A00           STRB     R0,[R1, #+58]
   1142          				N_RuStatus->RrfuSts[i].DL_SD_OnOff 		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_SD_OnOff;
   \   00000768   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   0000076C   4044               ADD      R0,R8,R0
   \   0000076E   90F85100           LDRB     R0,[R0, #+81]
   \   00000772   296B               LDR      R1,[R5, #+48]
   \   00000774   7918               ADDS     R1,R7,R1
   \   00000776   81F83B00           STRB     R0,[R1, #+59]
   1143          				N_RuStatus->RrfuSts[i].UL_SD_Limit 		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_SD_Limit;
   \   0000077A   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   0000077E   4044               ADD      R0,R8,R0
   \   00000780   90F85200           LDRB     R0,[R0, #+82]
   \   00000784   296B               LDR      R1,[R5, #+48]
   \   00000786   7918               ADDS     R1,R7,R1
   \   00000788   81F83C00           STRB     R0,[R1, #+60]
   1144          				N_RuStatus->RrfuSts[i].UL_SD_OnOff 		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_SD_OnOff;
   \   0000078C   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   00000790   4044               ADD      R0,R8,R0
   \   00000792   90F85300           LDRB     R0,[R0, #+83]
   \   00000796   296B               LDR      R1,[R5, #+48]
   \   00000798   7918               ADDS     R1,R7,R1
   \   0000079A   81F83D00           STRB     R0,[R1, #+61]
   1145          
   1146          				N_RuStatus->RrfuSts[i].UL_ALC_High 		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_ALC_High;
   \   0000079E   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000007A2   4044               ADD      R0,R8,R0
   \   000007A4   90F85800           LDRB     R0,[R0, #+88]
   \   000007A8   296B               LDR      R1,[R5, #+48]
   \   000007AA   7918               ADDS     R1,R7,R1
   \   000007AC   81F83E00           STRB     R0,[R1, #+62]
   1147          				N_RuStatus->RrfuSts[i].UL_Alc_OnOffH 	= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_Alc_OnOffH;
   \   000007B0   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000007B4   4044               ADD      R0,R8,R0
   \   000007B6   90F85A00           LDRB     R0,[R0, #+90]
   \   000007BA   296B               LDR      R1,[R5, #+48]
   \   000007BC   7918               ADDS     R1,R7,R1
   \   000007BE   81F83F00           STRB     R0,[R1, #+63]
   1148          				
   1149          				N_RuStatus->RrfuSts[i].DL_SD_Count		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].DL_SD_Count;
   \   000007C2   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000007C6   4044               ADD      R0,R8,R0
   \   000007C8   90F86200           LDRB     R0,[R0, #+98]
   \   000007CC   296B               LDR      R1,[R5, #+48]
   \   000007CE   7918               ADDS     R1,R7,R1
   \   000007D0   81F84000           STRB     R0,[R1, #+64]
   1150          				N_RuStatus->RrfuSts[i].UL_SD_Count		= RuBuf[TarID.HuID][BrID][RuID]->RrfuSts[i].UL_SD_Count;
   \   000007D4   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000007D8   4044               ADD      R0,R8,R0
   \   000007DA   90F86300           LDRB     R0,[R0, #+99]
   \   000007DE   296B               LDR      R1,[R5, #+48]
   \   000007E0   7918               ADDS     R1,R7,R1
   \   000007E2   81F84100           STRB     R0,[R1, #+65]
   1151          			}
   \   000007E6   08F13008           ADD      R8,R8,#+48
   \   000007EA   1537               ADDS     R7,R7,#+21
   \   000007EC   B9F10109           SUBS     R9,R9,#+1
   \   000007F0   7FF402AF           BNE.W    ??NmsDataCopy_18
   1152          			
   1153          			N_RuStatus->AlarmMask = RuBuf[TarID.HuID][BrID][RuID]->AlarmMask;
   \   000007F4   56F82400           LDR      R0,[R6, R4, LSL #+2]
   \   000007F8   90F85501           LDRB     R0,[R0, #+341]
   \   000007FC   296B               LDR      R1,[R5, #+48]
   \   000007FE   81F8AB00           STRB     R0,[R1, #+171]
   1154          			N_RuStatus->ResetReason = 0;
   \   00000802   286B               LDR      R0,[R5, #+48]
   \   00000804   0021               MOVS     R1,#+0
   \   00000806   80F8AC10           STRB     R1,[R0, #+172]
   1155          			N_RuStatus->RuAlm.Reset_Alarm = _Normal;
   \   0000080A   286B               LDR      R0,[R5, #+48]
   \   0000080C   417C               LDRB     R1,[R0, #+17]
   \   0000080E   01F0F701           AND      R1,R1,#0xF7
   \   00000812   4174               STRB     R1,[R0, #+17]
   1156          			/*	
   1157          			if(RuBootFlag[TarID.HuID][BrID] != 0)
   1158          			{
   1159          				N_RuStatus->RuAlm.Data[0] = 0;
   1160          				N_RuStatus->RuAlm.Data[1] = 0;
   1161          				
   1162          				N_RuStatus->ResetReason = RuBootFlag[TarID.HuID][BrID];
   1163          				N_RuStatus->RuAlm.Reset_Alarm = _Alarm;
   1164          			}
   1165          			else	N_RuStatus->ResetReason = RuBuf[TarID.HuID][BrID][RuID]->ResetReason;
   1166          			*/
   1167          			break;
   1168          	}
   1169          }
   \                     ??NmsDataCopy_3:
   \   00000814   BDE8F18F           POP      {R0,R4-R11,PC}   ;; return
   1170          

   \                                 In section .text, align 2, keep-with-next
   1171          void Eth0_Control_Hu_Conv(SubIDStr DstID, __N_HU_CTRL *nPtr, __ProtocolPtr *Target)
   1172          {
   \                     Eth0_Control_Hu_Conv:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   AAB0               SUB      SP,SP,#+168
   \   00000004   0446               MOV      R4,R0
   \   00000006   0E46               MOV      R6,R1
   \   00000008   1546               MOV      R5,R2
   1173          	INT16U	i = 0;
   1174          	
   1175          	__HU_CTRL	CtrlB, *Ctrl = &CtrlB;
   1176          
   1177          	for(i=0; i<sizeof(__HU_CTRL); i++)
   1178          	{
   1179          		*((INT8U*)Ctrl+i) = 0;
   \   0000000A   9521               MOVS     R1,#+149
   \   0000000C   03A8               ADD      R0,SP,#+12
   \   0000000E   ........           BL       __aeabi_memclr4
   1180          	}
   1181          
   1182          	// Reset
   1183          	if(nPtr->CtrlFlag.System.Reset == 1)
   \   00000012   3078               LDRB     R0,[R6, #+0]
   \   00000014   0106               LSLS     R1,R0,#+24
   \   00000016   11D5               BPL.N    ??Eth0_Control_Hu_Conv_0
   \   00000018   02A8               ADD      R0,SP,#+8
   \   0000001A   ....               LDR.N    R1,??DataTable27_4
   \   0000001C   0322               MOVS     R2,#+3
   \   0000001E   ........           BL       __aeabi_memcpy
   1184          	{
   1185          		SioDataAckTx(MyID, DstID, NULL, 0, ResetRQST, Target);
   \   00000022   0195               STR      R5,[SP, #+4]
   \   00000024   2920               MOVS     R0,#+41
   \   00000026   0090               STR      R0,[SP, #+0]
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   0022               MOVS     R2,#+0
   \   0000002C   2146               MOV      R1,R4
   \   0000002E   0298               LDR      R0,[SP, #+8]
   \   00000030   ........           BL       SioDataAckTx
   1186          		OSTimeDly(100L);
   \   00000034   6420               MOVS     R0,#+100
   \   00000036   ........           BL       OSTimeDly
   1187          		return;
   \   0000003A   37E0               B.N      ??Eth0_Control_Hu_Conv_1
   1188          	}
   1189          
   1190          	// System
   1191          	if(nPtr->CtrlFlag.System.AlarmMask == 1)
   \                     ??Eth0_Control_Hu_Conv_0:
   \   0000003C   4006               LSLS     R0,R0,#+25
   \   0000003E   09D5               BPL.N    ??Eth0_Control_Hu_Conv_2
   1192          	{
   1193          		Ctrl->CtrlFlag.System.AlarmMask = 1;
   \   00000040   9DF81C00           LDRB     R0,[SP, #+28]
   \   00000044   40F04000           ORR      R0,R0,#0x40
   \   00000048   8DF81C00           STRB     R0,[SP, #+28]
   1194          		Ctrl->AlarmMask = nPtr->AlarmMask;
   \   0000004C   96F82500           LDRB     R0,[R6, #+37]
   \   00000050   8DF8A000           STRB     R0,[SP, #+160]
   1195          	}
   1196          	
   1197          	// HDTU
   1198          	if(nPtr->CtrlFlag.Mu_Hdtu.OpticSum == 1)
   \                     ??Eth0_Control_Hu_Conv_2:
   \   00000054   7078               LDRB     R0,[R6, #+1]
   \   00000056   4007               LSLS     R0,R0,#+29
   \   00000058   07D5               BPL.N    ??Eth0_Control_Hu_Conv_3
   1199          	{
   1200          		Ctrl->CtrlFlag.Mu_Hdtu.OpticSum = 1;
   \   0000005A   07A8               ADD      R0,SP,#+28
   \   0000005C   4178               LDRB     R1,[R0, #+1]
   \   0000005E   41F00401           ORR      R1,R1,#0x4
   \   00000062   4170               STRB     R1,[R0, #+1]
   1201          		Ctrl->Mu_HdtuSts.OpticSum = nPtr->Mu_OpticSum;
   \   00000064   307D               LDRB     R0,[R6, #+20]
   \   00000066   8DF84C00           STRB     R0,[SP, #+76]
   1202          	}
   1203          
   1204          	for(i=0; i<HDTU_MAX; i++)
   \                     ??Eth0_Control_Hu_Conv_3:
   \   0000006A   03A8               ADD      R0,SP,#+12
   \   0000006C   03A9               ADD      R1,SP,#+12
   \   0000006E   1022               MOVS     R2,#+16
   1205          	{
   1206          		if(nPtr->CtrlFlag.Hdtu[i].OpticSum == 1)
   \                     ??Eth0_Control_Hu_Conv_4:
   \   00000070   B378               LDRB     R3,[R6, #+2]
   \   00000072   5B07               LSLS     R3,R3,#+29
   \   00000074   06D5               BPL.N    ??Eth0_Control_Hu_Conv_5
   1207          		{
   1208          			Ctrl->CtrlFlag.Hdtu[i].OpticSum = 1;
   \   00000076   837C               LDRB     R3,[R0, #+18]
   \   00000078   43F00403           ORR      R3,R3,#0x4
   \   0000007C   8374               STRB     R3,[R0, #+18]
   1209          			Ctrl->HdtuSts[i].OpticSum = nPtr->OpticSum[i];
   \   0000007E   737D               LDRB     R3,[R6, #+21]
   \   00000080   81F84530           STRB     R3,[R1, #+69]
   1210          		}
   1211          	}
   \                     ??Eth0_Control_Hu_Conv_5:
   \   00000084   01F20501           ADDW     R1,R1,#+5
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   761C               ADDS     R6,R6,#+1
   \   0000008C   521E               SUBS     R2,R2,#+1
   \   0000008E   EFD1               BNE.N    ??Eth0_Control_Hu_Conv_4
   \   00000090   02A8               ADD      R0,SP,#+8
   \   00000092   ....               LDR.N    R1,??DataTable27_4
   \   00000094   0322               MOVS     R2,#+3
   \   00000096   ........           BL       __aeabi_memcpy
   1212          
   1213          	SioDataAckTx(MyID, DstID, (INT8U*)Ctrl, sizeof(__HU_CTRL), ControlRQST, Target);
   \   0000009A   0195               STR      R5,[SP, #+4]
   \   0000009C   2120               MOVS     R0,#+33
   \   0000009E   0090               STR      R0,[SP, #+0]
   \   000000A0   9523               MOVS     R3,#+149
   \   000000A2   03AA               ADD      R2,SP,#+12
   \   000000A4   2146               MOV      R1,R4
   \   000000A6   0298               LDR      R0,[SP, #+8]
   \   000000A8   ........           BL       SioDataAckTx
   1214          }
   \                     ??Eth0_Control_Hu_Conv_1:
   \   000000AC   2AB0               ADD      SP,SP,#+168
   \   000000AE   70BD               POP      {R4-R6,PC}       ;; return
   1215          

   \                                 In section .text, align 2, keep-with-next
   1216          void Eth0_Control_Ru_Conv(SubIDStr DstID, __N_RU_CTRL *nPtr, __ProtocolPtr *Target)
   1217          {
   \                     Eth0_Control_Ru_Conv:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   BDB0               SUB      SP,SP,#+244
   \   00000004   0446               MOV      R4,R0
   \   00000006   0D46               MOV      R5,R1
   \   00000008   1646               MOV      R6,R2
   1218          	INT16U	i = 0;
   1219          		
   1220          	__RU_CTRL	CtrlB, *Ctrl = &CtrlB;
   1221          	
   1222          	for(i=0; i<sizeof(__RU_CTRL); i++)
   1223          	{
   1224          		*((INT8U*)Ctrl+i) = 0;
   \   0000000A   E321               MOVS     R1,#+227
   \   0000000C   03A8               ADD      R0,SP,#+12
   \   0000000E   ........           BL       __aeabi_memclr4
   1225          	}
   1226          
   1227          	// Reset
   1228          	if(nPtr->CtrlFlag.System.Reset == 1)
   \   00000012   2878               LDRB     R0,[R5, #+0]
   \   00000014   0106               LSLS     R1,R0,#+24
   \   00000016   12D5               BPL.N    ??Eth0_Control_Ru_Conv_0
   \   00000018   02A8               ADD      R0,SP,#+8
   \   0000001A   ........           LDR.W    R1,??DataTable35
   \   0000001E   0322               MOVS     R2,#+3
   \   00000020   ........           BL       __aeabi_memcpy
   1229          	{
   1230          		SioDataAckTx(MyID, DstID, NULL, 0, ResetRQST, Target);
   \   00000024   0196               STR      R6,[SP, #+4]
   \   00000026   2920               MOVS     R0,#+41
   \   00000028   0090               STR      R0,[SP, #+0]
   \   0000002A   0023               MOVS     R3,#+0
   \   0000002C   0022               MOVS     R2,#+0
   \   0000002E   2146               MOV      R1,R4
   \   00000030   0298               LDR      R0,[SP, #+8]
   \   00000032   ........           BL       SioDataAckTx
   1231          		OSTimeDly(100L);
   \   00000036   6420               MOVS     R0,#+100
   \   00000038   ........           BL       OSTimeDly
   1232          		return;
   \   0000003C   42E1               B.N      ??Eth0_Control_Ru_Conv_1
   1233          	}
   1234          
   1235          	// System
   1236          	if(nPtr->CtrlFlag.System.AlarmMask == 1)
   \                     ??Eth0_Control_Ru_Conv_0:
   \   0000003E   4006               LSLS     R0,R0,#+25
   \   00000040   09D5               BPL.N    ??Eth0_Control_Ru_Conv_2
   1237          	{
   1238          		Ctrl->CtrlFlag.System.AlarmMask = 1;
   \   00000042   9DF80C00           LDRB     R0,[SP, #+12]
   \   00000046   40F01000           ORR      R0,R0,#0x10
   \   0000004A   8DF80C00           STRB     R0,[SP, #+12]
   1239          		Ctrl->AlarmMask = nPtr->AlarmMask;
   \   0000004E   95F86D00           LDRB     R0,[R5, #+109]
   \   00000052   8DF8EE00           STRB     R0,[SP, #+238]
   1240          	}
   1241          
   1242          	// Common
   1243          	//if(nPtr->CtrlFlag.OptCommon.Optic_Switch == 1)
   1244          	//if(nPtr->CtrlFlag.OptCommon.IR_UL_Sum == 1)
   1245          	if(nPtr->CtrlFlag.OptCommon.DL_Delay_21G == 1)
   \                     ??Eth0_Control_Ru_Conv_2:
   \   00000056   A878               LDRB     R0,[R5, #+2]
   \   00000058   C007               LSLS     R0,R0,#+31
   \   0000005A   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_3
   1246          	{
   1247          		Ctrl->CtrlFlag.RdtuCommon.DL_Delay_21G = 1;
   \   0000005C   9DF81000           LDRB     R0,[SP, #+16]
   \   00000060   40F00100           ORR      R0,R0,#0x1
   \   00000064   8DF81000           STRB     R0,[SP, #+16]
   1248          		Ctrl->DL_Delay_21G = swab16(nPtr->DL_Delay_21G);
   \   00000068   B5F81900           LDRH     R0,[R5, #+25]
   \   0000006C   ........           BL       __fswab16
   \   00000070   ADF83F00           STRH     R0,[SP, #+63]
   1249          	}
   1250          	if(nPtr->CtrlFlag.OptCommon.UL_Delay_21G == 1)
   \                     ??Eth0_Control_Ru_Conv_3:
   \   00000074   A878               LDRB     R0,[R5, #+2]
   \   00000076   8007               LSLS     R0,R0,#+30
   \   00000078   0CD5               BPL.N    ??Eth0_Control_Ru_Conv_4
   1251          	{
   1252          		Ctrl->CtrlFlag.RdtuCommon.UL_Delay_21G = 1;
   \   0000007A   9DF81000           LDRB     R0,[SP, #+16]
   \   0000007E   40F00200           ORR      R0,R0,#0x2
   \   00000082   8DF81000           STRB     R0,[SP, #+16]
   1253          		Ctrl->UL_Delay_21G = swab16(nPtr->UL_Delay_21G);
   \   00000086   B5F81B00           LDRH     R0,[R5, #+27]
   \   0000008A   ........           BL       __fswab16
   \   0000008E   0DF13F01           ADD      R1,SP,#+63
   \   00000092   4880               STRH     R0,[R1, #+2]
   1254          	}
   1255          
   1256          	if(nPtr->CtrlFlag.OptCommon.DL_Delay_900M == 1)
   \                     ??Eth0_Control_Ru_Conv_4:
   \   00000094   A878               LDRB     R0,[R5, #+2]
   \   00000096   4007               LSLS     R0,R0,#+29
   \   00000098   0CD5               BPL.N    ??Eth0_Control_Ru_Conv_5
   1257          	{
   1258          		Ctrl->CtrlFlag.RdtuCommon.DL_Delay_900M = 1;
   \   0000009A   9DF81000           LDRB     R0,[SP, #+16]
   \   0000009E   40F00400           ORR      R0,R0,#0x4
   \   000000A2   8DF81000           STRB     R0,[SP, #+16]
   1259          		Ctrl->DL_Delay_900M = swab16(nPtr->DL_Delay_900M);
   \   000000A6   B5F81D00           LDRH     R0,[R5, #+29]
   \   000000AA   ........           BL       __fswab16
   \   000000AE   0DF13F01           ADD      R1,SP,#+63
   \   000000B2   8880               STRH     R0,[R1, #+4]
   1260          	}
   1261          	if(nPtr->CtrlFlag.OptCommon.UL_Delay_900M == 1)
   \                     ??Eth0_Control_Ru_Conv_5:
   \   000000B4   A878               LDRB     R0,[R5, #+2]
   \   000000B6   0007               LSLS     R0,R0,#+28
   \   000000B8   0CD5               BPL.N    ??Eth0_Control_Ru_Conv_6
   1262          	{
   1263          		Ctrl->CtrlFlag.RdtuCommon.UL_Delay_900M = 1;
   \   000000BA   9DF81000           LDRB     R0,[SP, #+16]
   \   000000BE   40F00800           ORR      R0,R0,#0x8
   \   000000C2   8DF81000           STRB     R0,[SP, #+16]
   1264          		Ctrl->UL_Delay_900M = swab16(nPtr->UL_Delay_900M);
   \   000000C6   B5F81F00           LDRH     R0,[R5, #+31]
   \   000000CA   ........           BL       __fswab16
   \   000000CE   0DF13F01           ADD      R1,SP,#+63
   \   000000D2   C880               STRH     R0,[R1, #+6]
   1265          	}
   1266          
   1267          	if(nPtr->CtrlFlag.OptCommon.DL_Delay_25G == 1)
   \                     ??Eth0_Control_Ru_Conv_6:
   \   000000D4   A878               LDRB     R0,[R5, #+2]
   \   000000D6   C006               LSLS     R0,R0,#+27
   \   000000D8   0CD5               BPL.N    ??Eth0_Control_Ru_Conv_7
   1268          	{
   1269          		Ctrl->CtrlFlag.RdtuCommon.DL_Delay_25G = 1;
   \   000000DA   9DF81000           LDRB     R0,[SP, #+16]
   \   000000DE   40F01000           ORR      R0,R0,#0x10
   \   000000E2   8DF81000           STRB     R0,[SP, #+16]
   1270          		Ctrl->DL_Delay_25G = swab16(nPtr->DL_Delay_25G);
   \   000000E6   B5F82100           LDRH     R0,[R5, #+33]
   \   000000EA   ........           BL       __fswab16
   \   000000EE   0DF13F01           ADD      R1,SP,#+63
   \   000000F2   0881               STRH     R0,[R1, #+8]
   1271          	}
   1272          	if(nPtr->CtrlFlag.OptCommon.UL_Delay_25G == 1)
   \                     ??Eth0_Control_Ru_Conv_7:
   \   000000F4   A878               LDRB     R0,[R5, #+2]
   \   000000F6   8006               LSLS     R0,R0,#+26
   \   000000F8   0CD5               BPL.N    ??Eth0_Control_Ru_Conv_8
   1273          	{
   1274          		Ctrl->CtrlFlag.RdtuCommon.UL_Delay_25G = 1;
   \   000000FA   9DF81000           LDRB     R0,[SP, #+16]
   \   000000FE   40F02000           ORR      R0,R0,#0x20
   \   00000102   8DF81000           STRB     R0,[SP, #+16]
   1275          		Ctrl->UL_Delay_25G = swab16(nPtr->UL_Delay_25G);
   \   00000106   B5F82300           LDRH     R0,[R5, #+35]
   \   0000010A   ........           BL       __fswab16
   \   0000010E   0DF13F01           ADD      R1,SP,#+63
   \   00000112   4881               STRH     R0,[R1, #+10]
   1276          	}
   1277          			
   1278          	// Rrfu
   1279          	for(i=0; i<RFU_MAX; i++)
   \                     ??Eth0_Control_Ru_Conv_8:
   \   00000114   03A8               ADD      R0,SP,#+12
   \   00000116   2946               MOV      R1,R5
   \   00000118   03AA               ADD      R2,SP,#+12
   \   0000011A   0623               MOVS     R3,#+6
   1280          	{
   1281          		if(nPtr->CtrlFlag.Rrfu[i].DL_Amp_OnOff == 1)
   \                     ??Eth0_Control_Ru_Conv_9:
   \   0000011C   EF78               LDRB     R7,[R5, #+3]
   \   0000011E   FF07               LSLS     R7,R7,#+31
   \   00000120   07D5               BPL.N    ??Eth0_Control_Ru_Conv_10
   1282          		{
   1283          			Ctrl->CtrlFlag.Rrfu[i].DL_Amp_OnOff = 1;
   \   00000122   4779               LDRB     R7,[R0, #+5]
   \   00000124   47F00107           ORR      R7,R7,#0x1
   \   00000128   4771               STRB     R7,[R0, #+5]
   1284          			Ctrl->RrfuSts[i].DL_Amp_OnOff = nPtr->RrfuSts[i].DL_Amp_OnOff;
   \   0000012A   91F82570           LDRB     R7,[R1, #+37]
   \   0000012E   82F83F70           STRB     R7,[R2, #+63]
   1285          		}
   1286          
   1287          		if(nPtr->CtrlFlag.Rrfu[i].DL_Attn == 1)
   \                     ??Eth0_Control_Ru_Conv_10:
   \   00000132   EF78               LDRB     R7,[R5, #+3]
   \   00000134   BF07               LSLS     R7,R7,#+30
   \   00000136   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_11
   1288          		{
   1289          			Ctrl->CtrlFlag.Rrfu[i].DL_Attn = 1;
   \   00000138   4779               LDRB     R7,[R0, #+5]
   \   0000013A   47F00207           ORR      R7,R7,#0x2
   \   0000013E   4771               STRB     R7,[R0, #+5]
   1290          			Ctrl->RrfuSts[i].DL_Attn = nPtr->RrfuSts[i].DL_Attn;
   \   00000140   02F13F07           ADD      R7,R2,#+63
   \   00000144   01F1250C           ADD      R12,R1,#+37
   \   00000148   9CF801C0           LDRB     R12,[R12, #+1]
   \   0000014C   87F801C0           STRB     R12,[R7, #+1]
   1291          		}
   1292          
   1293          		if(nPtr->CtrlFlag.Rrfu[i].DL_ALC_High == 1)
   \                     ??Eth0_Control_Ru_Conv_11:
   \   00000150   EF78               LDRB     R7,[R5, #+3]
   \   00000152   FF06               LSLS     R7,R7,#+27
   \   00000154   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_12
   1294          		{
   1295          			Ctrl->CtrlFlag.Rrfu[i].DL_ALC_High = 1;
   \   00000156   4779               LDRB     R7,[R0, #+5]
   \   00000158   47F01007           ORR      R7,R7,#0x10
   \   0000015C   4771               STRB     R7,[R0, #+5]
   1296          			Ctrl->RrfuSts[i].DL_ALC_High = nPtr->RrfuSts[i].DL_ALC_High;
   \   0000015E   02F13F07           ADD      R7,R2,#+63
   \   00000162   01F1250C           ADD      R12,R1,#+37
   \   00000166   9CF802C0           LDRB     R12,[R12, #+2]
   \   0000016A   87F804C0           STRB     R12,[R7, #+4]
   1297          		}
   1298          
   1299          		if(nPtr->CtrlFlag.Rrfu[i].DL_Alc_OnOffH == 1)
   \                     ??Eth0_Control_Ru_Conv_12:
   \   0000016E   EF78               LDRB     R7,[R5, #+3]
   \   00000170   7F06               LSLS     R7,R7,#+25
   \   00000172   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_13
   1300          		{
   1301          			Ctrl->CtrlFlag.Rrfu[i].DL_Alc_OnOffH = 1;
   \   00000174   4779               LDRB     R7,[R0, #+5]
   \   00000176   47F04007           ORR      R7,R7,#0x40
   \   0000017A   4771               STRB     R7,[R0, #+5]
   1302          			Ctrl->RrfuSts[i].DL_Alc_OnOffH = nPtr->RrfuSts[i].DL_Alc_OnOffH;
   \   0000017C   02F13F07           ADD      R7,R2,#+63
   \   00000180   01F1250C           ADD      R12,R1,#+37
   \   00000184   9CF803C0           LDRB     R12,[R12, #+3]
   \   00000188   87F806C0           STRB     R12,[R7, #+6]
   1303          		}
   1304          
   1305          		if(nPtr->CtrlFlag.Rrfu[i].UL_Amp_OnOff == 1)
   \                     ??Eth0_Control_Ru_Conv_13:
   \   0000018C   2F79               LDRB     R7,[R5, #+4]
   \   0000018E   FF07               LSLS     R7,R7,#+31
   \   00000190   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_14
   1306          		{
   1307          			Ctrl->CtrlFlag.Rrfu[i].UL_Amp_OnOff = 1;
   \   00000192   8779               LDRB     R7,[R0, #+6]
   \   00000194   47F00107           ORR      R7,R7,#0x1
   \   00000198   8771               STRB     R7,[R0, #+6]
   1308          			Ctrl->RrfuSts[i].UL_Amp_OnOff = nPtr->RrfuSts[i].UL_Amp_OnOff;
   \   0000019A   02F13F07           ADD      R7,R2,#+63
   \   0000019E   01F1250C           ADD      R12,R1,#+37
   \   000001A2   9CF804C0           LDRB     R12,[R12, #+4]
   \   000001A6   87F808C0           STRB     R12,[R7, #+8]
   1309          		}
   1310          
   1311          		if(nPtr->CtrlFlag.Rrfu[i].DL_Amp_OnOff == 1)
   \                     ??Eth0_Control_Ru_Conv_14:
   \   000001AA   EF78               LDRB     R7,[R5, #+3]
   \   000001AC   FF07               LSLS     R7,R7,#+31
   \   000001AE   07D5               BPL.N    ??Eth0_Control_Ru_Conv_15
   1312          		{
   1313          			Ctrl->CtrlFlag.Rrfu[i].DL_Amp_OnOff = 1;
   \   000001B0   4779               LDRB     R7,[R0, #+5]
   \   000001B2   47F00107           ORR      R7,R7,#0x1
   \   000001B6   4771               STRB     R7,[R0, #+5]
   1314          			Ctrl->RrfuSts[i].DL_Amp_OnOff = nPtr->RrfuSts[i].DL_Amp_OnOff;
   \   000001B8   91F82570           LDRB     R7,[R1, #+37]
   \   000001BC   82F83F70           STRB     R7,[R2, #+63]
   1315          		}
   1316          
   1317          		if(nPtr->CtrlFlag.Rrfu[i].UL_Attn == 1)
   \                     ??Eth0_Control_Ru_Conv_15:
   \   000001C0   2F79               LDRB     R7,[R5, #+4]
   \   000001C2   BF07               LSLS     R7,R7,#+30
   \   000001C4   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_16
   1318          		{
   1319          			Ctrl->CtrlFlag.Rrfu[i].UL_Attn = 1;
   \   000001C6   8779               LDRB     R7,[R0, #+6]
   \   000001C8   47F00207           ORR      R7,R7,#0x2
   \   000001CC   8771               STRB     R7,[R0, #+6]
   1320          			Ctrl->RrfuSts[i].UL_Attn = nPtr->RrfuSts[i].UL_Attn;
   \   000001CE   02F13F07           ADD      R7,R2,#+63
   \   000001D2   01F1250C           ADD      R12,R1,#+37
   \   000001D6   9CF805C0           LDRB     R12,[R12, #+5]
   \   000001DA   87F809C0           STRB     R12,[R7, #+9]
   1321          		}
   1322          		
   1323          		if(nPtr->CtrlFlag.Rrfu[i].DL_SD_Limit == 1)
   \                     ??Eth0_Control_Ru_Conv_16:
   \   000001DE   2F79               LDRB     R7,[R5, #+4]
   \   000001E0   FF06               LSLS     R7,R7,#+27
   \   000001E2   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_17
   1324          		{
   1325          			Ctrl->CtrlFlag.Rrfu[i].DL_SD_Limit = 1;
   \   000001E4   8779               LDRB     R7,[R0, #+6]
   \   000001E6   47F01007           ORR      R7,R7,#0x10
   \   000001EA   8771               STRB     R7,[R0, #+6]
   1326          			Ctrl->RrfuSts[i].DL_SD_Limit = nPtr->RrfuSts[i].DL_SD_Limit;
   \   000001EC   02F13F07           ADD      R7,R2,#+63
   \   000001F0   01F1250C           ADD      R12,R1,#+37
   \   000001F4   9CF806C0           LDRB     R12,[R12, #+6]
   \   000001F8   87F811C0           STRB     R12,[R7, #+17]
   1327          		}
   1328          
   1329          		if(nPtr->CtrlFlag.Rrfu[i].DL_SD_OnOff == 1)
   \                     ??Eth0_Control_Ru_Conv_17:
   \   000001FC   2F79               LDRB     R7,[R5, #+4]
   \   000001FE   BF06               LSLS     R7,R7,#+26
   \   00000200   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_18
   1330          		{
   1331          			Ctrl->CtrlFlag.Rrfu[i].DL_SD_OnOff = 1;
   \   00000202   8779               LDRB     R7,[R0, #+6]
   \   00000204   47F02007           ORR      R7,R7,#0x20
   \   00000208   8771               STRB     R7,[R0, #+6]
   1332          			Ctrl->RrfuSts[i].DL_SD_OnOff = nPtr->RrfuSts[i].DL_SD_OnOff;
   \   0000020A   02F13F07           ADD      R7,R2,#+63
   \   0000020E   01F1250C           ADD      R12,R1,#+37
   \   00000212   9CF807C0           LDRB     R12,[R12, #+7]
   \   00000216   87F812C0           STRB     R12,[R7, #+18]
   1333          		}
   1334          
   1335          		if(nPtr->CtrlFlag.Rrfu[i].UL_SD_Limit == 1)
   \                     ??Eth0_Control_Ru_Conv_18:
   \   0000021A   2F79               LDRB     R7,[R5, #+4]
   \   0000021C   7F06               LSLS     R7,R7,#+25
   \   0000021E   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_19
   1336          		{
   1337          			Ctrl->CtrlFlag.Rrfu[i].UL_SD_Limit = 1;
   \   00000220   8779               LDRB     R7,[R0, #+6]
   \   00000222   47F04007           ORR      R7,R7,#0x40
   \   00000226   8771               STRB     R7,[R0, #+6]
   1338          			Ctrl->RrfuSts[i].UL_SD_Limit = nPtr->RrfuSts[i].UL_SD_Limit;
   \   00000228   02F13F07           ADD      R7,R2,#+63
   \   0000022C   01F1250C           ADD      R12,R1,#+37
   \   00000230   9CF808C0           LDRB     R12,[R12, #+8]
   \   00000234   87F813C0           STRB     R12,[R7, #+19]
   1339          		}
   1340          
   1341          		if(nPtr->CtrlFlag.Rrfu[i].UL_SD_OnOff == 1)
   \                     ??Eth0_Control_Ru_Conv_19:
   \   00000238   2F79               LDRB     R7,[R5, #+4]
   \   0000023A   3F06               LSLS     R7,R7,#+24
   \   0000023C   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_20
   1342          		{
   1343          			Ctrl->CtrlFlag.Rrfu[i].UL_SD_OnOff = 1;
   \   0000023E   8779               LDRB     R7,[R0, #+6]
   \   00000240   47F08007           ORR      R7,R7,#0x80
   \   00000244   8771               STRB     R7,[R0, #+6]
   1344          			Ctrl->RrfuSts[i].UL_SD_OnOff = nPtr->RrfuSts[i].UL_SD_OnOff;
   \   00000246   02F13F07           ADD      R7,R2,#+63
   \   0000024A   01F1250C           ADD      R12,R1,#+37
   \   0000024E   9CF809C0           LDRB     R12,[R12, #+9]
   \   00000252   87F814C0           STRB     R12,[R7, #+20]
   1345          		}
   1346          
   1347          		if(nPtr->CtrlFlag.Rrfu[i].UL_ALC_High == 1)
   \                     ??Eth0_Control_Ru_Conv_20:
   \   00000256   6F79               LDRB     R7,[R5, #+5]
   \   00000258   FF07               LSLS     R7,R7,#+31
   \   0000025A   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_21
   1348          		{
   1349          			Ctrl->CtrlFlag.Rrfu[i].UL_ALC_High = 1;
   \   0000025C   077A               LDRB     R7,[R0, #+8]
   \   0000025E   47F00107           ORR      R7,R7,#0x1
   \   00000262   0772               STRB     R7,[R0, #+8]
   1350          			Ctrl->RrfuSts[i].UL_ALC_High = nPtr->RrfuSts[i].UL_ALC_High;
   \   00000264   02F13F07           ADD      R7,R2,#+63
   \   00000268   01F1250C           ADD      R12,R1,#+37
   \   0000026C   9CF80AC0           LDRB     R12,[R12, #+10]
   \   00000270   87F815C0           STRB     R12,[R7, #+21]
   1351          		}
   1352          
   1353          		if(nPtr->CtrlFlag.Rrfu[i].UL_Alc_OnOffH == 1)
   \                     ??Eth0_Control_Ru_Conv_21:
   \   00000274   6F79               LDRB     R7,[R5, #+5]
   \   00000276   7F07               LSLS     R7,R7,#+29
   \   00000278   0BD5               BPL.N    ??Eth0_Control_Ru_Conv_22
   1354          		{
   1355          			Ctrl->CtrlFlag.Rrfu[i].UL_Alc_OnOffH = 1;
   \   0000027A   077A               LDRB     R7,[R0, #+8]
   \   0000027C   47F00407           ORR      R7,R7,#0x4
   \   00000280   0772               STRB     R7,[R0, #+8]
   1356          			Ctrl->RrfuSts[i].UL_Alc_OnOffH = nPtr->RrfuSts[i].UL_Alc_OnOffH;
   \   00000282   02F13F07           ADD      R7,R2,#+63
   \   00000286   01F1250C           ADD      R12,R1,#+37
   \   0000028A   9CF80BC0           LDRB     R12,[R12, #+11]
   \   0000028E   87F817C0           STRB     R12,[R7, #+23]
   1357          		}
   1358          		
   1359          	}
   \                     ??Eth0_Control_Ru_Conv_22:
   \   00000292   02F21B02           ADDW     R2,R2,#+27
   \   00000296   01F20C01           ADDW     R1,R1,#+12
   \   0000029A   001D               ADDS     R0,R0,#+4
   \   0000029C   05F20305           ADDW     R5,R5,#+3
   \   000002A0   5B1E               SUBS     R3,R3,#+1
   \   000002A2   7FF43BAF           BNE.W    ??Eth0_Control_Ru_Conv_9
   \   000002A6   02A8               ADD      R0,SP,#+8
   \   000002A8   ........           LDR.W    R1,??DataTable35
   \   000002AC   0322               MOVS     R2,#+3
   \   000002AE   ........           BL       __aeabi_memcpy
   1360          	SioDataAckTx(MyID, DstID, (INT8U*)Ctrl, sizeof(__RU_CTRL), ControlRQST, Target);
   \   000002B2   0196               STR      R6,[SP, #+4]
   \   000002B4   2120               MOVS     R0,#+33
   \   000002B6   0090               STR      R0,[SP, #+0]
   \   000002B8   E323               MOVS     R3,#+227
   \   000002BA   03AA               ADD      R2,SP,#+12
   \   000002BC   2146               MOV      R1,R4
   \   000002BE   0298               LDR      R0,[SP, #+8]
   \   000002C0   ........           BL       SioDataAckTx
   1361          }
   \                     ??Eth0_Control_Ru_Conv_1:
   \   000002C4   3DB0               ADD      SP,SP,#+244
   \   000002C6   F0BD               POP      {R4-R7,PC}       ;; return
   1362          
   1363          
   1364          //==============================================================================//

   \                                 In section .text, align 2, keep-with-next
   1365          void NmsBootAlarmReport(void)
   1366          {
   \                     NmsBootAlarmReport:
   \   00000000   2DE9FC47           PUSH     {R2-R10,LR}
   1367          	INT8U	i, j;
   1368          	SubIDStr TarID;
   1369          	
   1370          	//-----------------------------------------------------------------------//
   1371          	// Mu Boot Alarm
   1372          	if(MuStatus->MuAlm.Reset_Alarm)
   \   00000004   ........           LDR.W    R5,??DataTable35_1
   \   00000008   2868               LDR      R0,[R5, #+0]
   \   0000000A   ....               LDR.N    R4,??DataTable29
   \   0000000C   90F85912           LDRB     R1,[R0, #+601]
   \   00000010   0907               LSLS     R1,R1,#+28
   \   00000012   3ED5               BPL.N    ??NmsBootAlarmReport_0
   1373          	{
   1374          		if(MuBootCnt++>=3)
   \   00000014   6178               LDRB     R1,[R4, #+1]
   \   00000016   4A1C               ADDS     R2,R1,#+1
   \   00000018   0329               CMP      R1,#+3
   \   0000001A   6270               STRB     R2,[R4, #+1]
   \   0000001C   0BD3               BCC.N    ??NmsBootAlarmReport_1
   1375          		{
   1376          			// Mu Reset Reason Clear
   1377          			MuStatus->MuAlm.Reset_Alarm = 0;
   \   0000001E   90F85912           LDRB     R1,[R0, #+601]
   \   00000022   01F0F701           AND      R1,R1,#0xF7
   \   00000026   80F85912           STRB     R1,[R0, #+601]
   1378          			MuStatus->ResetReason = 0;
   \   0000002A   2868               LDR      R0,[R5, #+0]
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   80F8AF13           STRB     R1,[R0, #+943]
   1379          
   1380          			MuBootCnt = 0;
   \   00000032   6170               STRB     R1,[R4, #+1]
   \   00000034   2DE0               B.N      ??NmsBootAlarmReport_0
   1381          		}
   1382          		else
   1383          		{
   1384          			NmsDataCopy(MU_PATH, MyID);
   \                     ??NmsBootAlarmReport_1:
   \   00000036   ........           LDR.W    R6,??DataTable35
   \   0000003A   01A8               ADD      R0,SP,#+4
   \   0000003C   3146               MOV      R1,R6
   \   0000003E   0322               MOVS     R2,#+3
   \   00000040   ........           BL       __aeabi_memcpy
   \   00000044   0199               LDR      R1,[SP, #+4]
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   ........           BL       NmsDataCopy
   1385          			N_MuStatus->MuAlm.Data[0] = 0;
   \   0000004C   A06A               LDR      R0,[R4, #+40]
   \   0000004E   0021               MOVS     R1,#+0
   \   00000050   80F85910           STRB     R1,[R0, #+89]
   1386          			N_MuStatus->MuAlm.Data[1] = 0;
   \   00000054   A06A               LDR      R0,[R4, #+40]
   \   00000056   80F85A10           STRB     R1,[R0, #+90]
   1387          
   1388          			N_MuStatus->ResetReason = MuStatus->ResetReason;
   \   0000005A   A06A               LDR      R0,[R4, #+40]
   \   0000005C   2968               LDR      R1,[R5, #+0]
   \   0000005E   91F8AF13           LDRB     R1,[R1, #+943]
   \   00000062   80F8F710           STRB     R1,[R0, #+247]
   1389          			N_MuStatus->MuAlm.Reset_Alarm = _Alarm;
   \   00000066   A06A               LDR      R0,[R4, #+40]
   \   00000068   90F85A10           LDRB     R1,[R0, #+90]
   \   0000006C   41F00801           ORR      R1,R1,#0x8
   \   00000070   80F85A10           STRB     R1,[R0, #+90]
   1390          			
   1391          			//SerPtr->printf("\nMu Reset Reason=%d ",N_MuStatus->ResetReason);
   1392          			if(!eLink_Check(ETH0_CHANNEL))
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   ........           BL       eLink_Check
   \   0000007A   50B9               CBNZ.N   R0,??NmsBootAlarmReport_0
   \   0000007C   01A8               ADD      R0,SP,#+4
   \   0000007E   3146               MOV      R1,R6
   \   00000080   0322               MOVS     R2,#+3
   \   00000082   ........           BL       __aeabi_memcpy
   1393          				NmsAlarmAckTx(MyID, (INT8U*)N_MuStatus, sizeof(__N_MU_STS), Eth0);
   \   00000086   636A               LDR      R3,[R4, #+36]
   \   00000088   FC22               MOVS     R2,#+252
   \   0000008A   A16A               LDR      R1,[R4, #+40]
   \   0000008C   0198               LDR      R0,[SP, #+4]
   \   0000008E   ........           BL       NmsAlarmAckTx
   1394          
   1395          			// Mu Reset Reason Clear
   1396          			//MuStatus->MuAlm.Reset_Alarm = 0;
   1397          			//MuStatus->ResetReason = 0;
   1398          		}
   1399          	}
   1400          
   1401          	//-----------------------------------------------------------------------//
   1402          	// Hu Boot Alarm
   1403          	for(i=0; i<HU_MAX; i++)
   \                     ??NmsBootAlarmReport_0:
   \   00000092   0025               MOVS     R5,#+0
   \   00000094   261D               ADDS     R6,R4,#+4
   \   00000096   04F20C08           ADDW     R8,R4,#+12
   \   0000009A   FF27               MOVS     R7,#+255
   1404          	{
   1405          		TarID.MuID = 0x00;
   \                     ??NmsBootAlarmReport_2:
   \   0000009C   0020               MOVS     R0,#+0
   \   0000009E   8DF80000           STRB     R0,[SP, #+0]
   1406          		TarID.HuID = i;
   \   000000A2   8DF80150           STRB     R5,[SP, #+1]
   1407          		TarID.RuID = 0xFF;
   \   000000A6   8DF80270           STRB     R7,[SP, #+2]
   1408          		
   1409          		if(!InstallCheck(TarID, HU_PATH)) continue;
   \   000000AA   0121               MOVS     R1,#+1
   \   000000AC   0098               LDR      R0,[SP, #+0]
   \   000000AE   ........           BL       InstallCheck
   \   000000B2   48B3               CBZ.N    R0,??NmsBootAlarmReport_3
   1410          		
   1411          		if(HuBootFlag[i]!=0)
   \   000000B4   3078               LDRB     R0,[R6, #+0]
   \   000000B6   38B3               CBZ.N    R0,??NmsBootAlarmReport_3
   1412          		{
   1413          			if(HuBootCnt[i]++>=3)
   \   000000B8   98F80000           LDRB     R0,[R8, #+0]
   \   000000BC   411C               ADDS     R1,R0,#+1
   \   000000BE   0328               CMP      R0,#+3
   \   000000C0   88F80010           STRB     R1,[R8, #+0]
   \   000000C4   22BF               ITTT     CS 
   \   000000C6   0020               MOVCS    R0,#+0
   \   000000C8   3070               STRBCS   R0,[R6, #+0]
   \   000000CA   88F80000           STRBCS   R0,[R8, #+0]
   1414          			{
   1415          				// Hu Reset Reason Clear
   1416          				HuBootFlag[i] = 0;
   1417          				HuBootCnt[i] = 0;
   \   000000CE   1BD2               BCS.N    ??NmsBootAlarmReport_3
   1418          			}
   1419          			else
   1420          			{
   1421          				NmsDataCopy(HU_PATH, TarID);
   \   000000D0   0099               LDR      R1,[SP, #+0]
   \   000000D2   0120               MOVS     R0,#+1
   \   000000D4   ........           BL       NmsDataCopy
   1422          
   1423          				N_HuStatus->HuAlm.Data[0] = 0;
   \   000000D8   E06A               LDR      R0,[R4, #+44]
   \   000000DA   0021               MOVS     R1,#+0
   \   000000DC   0174               STRB     R1,[R0, #+16]
   1424          				N_HuStatus->HuAlm.Data[1] = 0;
   \   000000DE   E06A               LDR      R0,[R4, #+44]
   \   000000E0   4174               STRB     R1,[R0, #+17]
   1425          				
   1426          				N_HuStatus->ResetReason = HuBootFlag[i];
   \   000000E2   E06A               LDR      R0,[R4, #+44]
   \   000000E4   3178               LDRB     R1,[R6, #+0]
   \   000000E6   80F87C10           STRB     R1,[R0, #+124]
   1427          				N_HuStatus->HuAlm.Reset_Alarm = _Alarm;
   \   000000EA   E06A               LDR      R0,[R4, #+44]
   \   000000EC   417C               LDRB     R1,[R0, #+17]
   \   000000EE   41F00801           ORR      R1,R1,#0x8
   \   000000F2   4174               STRB     R1,[R0, #+17]
   1428          				
   1429          				//SerPtr->printf("\nHu Reset Reason=%d ",N_HuStatus->ResetReason);
   1430          				if(!eLink_Check(ETH0_CHANNEL))
   \   000000F4   0020               MOVS     R0,#+0
   \   000000F6   ........           BL       eLink_Check
   \   000000FA   28B9               CBNZ.N   R0,??NmsBootAlarmReport_3
   1431          					NmsAlarmAckTx(TarID, (INT8U*)N_HuStatus, sizeof(__N_HU_STS), Eth0);
   \   000000FC   636A               LDR      R3,[R4, #+36]
   \   000000FE   8122               MOVS     R2,#+129
   \   00000100   E16A               LDR      R1,[R4, #+44]
   \   00000102   0098               LDR      R0,[SP, #+0]
   \   00000104   ........           BL       NmsAlarmAckTx
   1432          
   1433          				// Hu Reset Reason Clear
   1434          				//HuBootFlag[i] = 0;
   1435          			}
   1436          		}
   1437          	}
   \                     ??NmsBootAlarmReport_3:
   \   00000108   6D1C               ADDS     R5,R5,#+1
   \   0000010A   08F10108           ADD      R8,R8,#+1
   \   0000010E   761C               ADDS     R6,R6,#+1
   \   00000110   082D               CMP      R5,#+8
   \   00000112   C3DB               BLT.N    ??NmsBootAlarmReport_2
   1438          
   1439          	//-----------------------------------------------------------------------//
   1440          	// Ru Boot Alarm
   1441          	for(i=0; i<HU_MAX; i++)
   \   00000114   0025               MOVS     R5,#+0
   \   00000116   04F20C06           ADDW     R6,R4,#+12
   \   0000011A   ........           LDR.W    R8,??DataTable35_2
   1442          	{
   1443          		for(j=0; j<HDTU_MAX; j++)
   \                     ??NmsBootAlarmReport_4:
   \   0000011E   08EB0517           ADD      R7,R8,R5, LSL #+4
   \   00000122   4FF00009           MOV      R9,#+0
   \   00000126   4FF0100A           MOV      R10,#+16
   1444          		{
   1445          			TarID.MuID = 0x00;
   \                     ??NmsBootAlarmReport_5:
   \   0000012A   0020               MOVS     R0,#+0
   \   0000012C   8DF80000           STRB     R0,[SP, #+0]
   1446          			TarID.HuID = i;
   \   00000130   8DF80150           STRB     R5,[SP, #+1]
   1447          			TarID.RuID = ((j<<4)&0xF0);
   \   00000134   8DF80290           STRB     R9,[SP, #+2]
   1448          			
   1449          			if(!InstallCheck(TarID, RU_PATH)) continue;
   \   00000138   0221               MOVS     R1,#+2
   \   0000013A   0098               LDR      R0,[SP, #+0]
   \   0000013C   ........           BL       InstallCheck
   \   00000140   28B3               CBZ.N    R0,??NmsBootAlarmReport_6
   1450          			
   1451          			if(RuBootFlag[i][j]!=0)
   \   00000142   3878               LDRB     R0,[R7, #+0]
   \   00000144   18B3               CBZ.N    R0,??NmsBootAlarmReport_6
   1452          			{
   1453          				if(HuBootCnt[i]++>=3)
   \   00000146   3078               LDRB     R0,[R6, #+0]
   \   00000148   411C               ADDS     R1,R0,#+1
   \   0000014A   0328               CMP      R0,#+3
   \   0000014C   3170               STRB     R1,[R6, #+0]
   \   0000014E   24BF               ITT      CS 
   \   00000150   0020               MOVCS    R0,#+0
   \   00000152   3870               STRBCS   R0,[R7, #+0]
   1454          				{
   1455          					// Ru Reset Reason Clear
   1456          					RuBootFlag[i][j] = 0;
   1457          					RuBootFlag[i][j] = 0;
   \   00000154   1BD2               BCS.N    ??NmsBootAlarmReport_6
   1458          				}
   1459          				else
   1460          				{
   1461          					NmsDataCopy(RU_PATH, TarID);
   \   00000156   0099               LDR      R1,[SP, #+0]
   \   00000158   0220               MOVS     R0,#+2
   \   0000015A   ........           BL       NmsDataCopy
   1462          
   1463          					N_RuStatus->RuAlm.Data[0] = 0;
   \   0000015E   206B               LDR      R0,[R4, #+48]
   \   00000160   0021               MOVS     R1,#+0
   \   00000162   0174               STRB     R1,[R0, #+16]
   1464          					N_RuStatus->RuAlm.Data[1] = 0;
   \   00000164   206B               LDR      R0,[R4, #+48]
   \   00000166   4174               STRB     R1,[R0, #+17]
   1465          					
   1466          					N_RuStatus->ResetReason = RuBootFlag[i][j];
   \   00000168   206B               LDR      R0,[R4, #+48]
   \   0000016A   3978               LDRB     R1,[R7, #+0]
   \   0000016C   80F8AC10           STRB     R1,[R0, #+172]
   1467          					N_RuStatus->RuAlm.Reset_Alarm = _Alarm;
   \   00000170   206B               LDR      R0,[R4, #+48]
   \   00000172   417C               LDRB     R1,[R0, #+17]
   \   00000174   41F00801           ORR      R1,R1,#0x8
   \   00000178   4174               STRB     R1,[R0, #+17]
   1468          
   1469          					//SerPtr->printf("\nRu Reset Reason=%d ",N_RuStatus->ResetReason);
   1470          					if(!eLink_Check(ETH0_CHANNEL))
   \   0000017A   0020               MOVS     R0,#+0
   \   0000017C   ........           BL       eLink_Check
   \   00000180   28B9               CBNZ.N   R0,??NmsBootAlarmReport_6
   1471          						NmsAlarmAckTx(TarID, (INT8U*)N_RuStatus, sizeof(__N_RU_STS), Eth0);
   \   00000182   636A               LDR      R3,[R4, #+36]
   \   00000184   B122               MOVS     R2,#+177
   \   00000186   216B               LDR      R1,[R4, #+48]
   \   00000188   0098               LDR      R0,[SP, #+0]
   \   0000018A   ........           BL       NmsAlarmAckTx
   1472          
   1473          					// Ru Reset Reason Clear
   1474          					//RuBootFlag[i][j] = 0;
   1475          				}
   1476          			}
   1477          		}
   \                     ??NmsBootAlarmReport_6:
   \   0000018E   09F11009           ADD      R9,R9,#+16
   \   00000192   7F1C               ADDS     R7,R7,#+1
   \   00000194   BAF1010A           SUBS     R10,R10,#+1
   \   00000198   C7D1               BNE.N    ??NmsBootAlarmReport_5
   1478          	}
   \   0000019A   6D1C               ADDS     R5,R5,#+1
   \   0000019C   761C               ADDS     R6,R6,#+1
   \   0000019E   082D               CMP      R5,#+8
   \   000001A0   BDDB               BLT.N    ??NmsBootAlarmReport_4
   1479          }
   \   000001A2   BDE8F387           POP      {R0,R1,R4-R10,PC}  ;; return
   1480          
   1481          //==============================================================================//

   \                                 In section .text, align 2, keep-with-next
   1482          void NmsAlarmReport(void)
   1483          {
   \                     NmsAlarmReport:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   1484          	INT8U	i, j;
   1485          	SubIDStr TarID;
   1486          	
   1487          	//-----------------------------------------------------------------------//
   1488          	// Mu Alarm
   1489          	NmsMuAlarmReport();
   \   00000002   ........           BL       NmsMuAlarmReport
   1490          
   1491          	//-----------------------------------------------------------------------//
   1492          	// Hu Alarm
   1493          	for(i=0; i<HU_MAX; i++)
   \   00000006   0024               MOVS     R4,#+0
   \   00000008   FF25               MOVS     R5,#+255
   1494          	{
   1495          		TarID.MuID = 0x00;
   \                     ??NmsAlarmReport_0:
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   8DF80000           STRB     R0,[SP, #+0]
   1496          		TarID.HuID = i;
   \   00000010   8DF80140           STRB     R4,[SP, #+1]
   1497          		TarID.RuID = 0xFF;
   \   00000014   8DF80250           STRB     R5,[SP, #+2]
   1498          		
   1499          		if(!InstallCheck(TarID, HU_PATH)) continue;
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   0098               LDR      R0,[SP, #+0]
   \   0000001C   ........           BL       InstallCheck
   \   00000020   10B1               CBZ.N    R0,??NmsAlarmReport_1
   1500          		
   1501          		NmsHuAlarmReport(TarID);
   \   00000022   0098               LDR      R0,[SP, #+0]
   \   00000024   ........           BL       NmsHuAlarmReport
   1502          	}
   \                     ??NmsAlarmReport_1:
   \   00000028   641C               ADDS     R4,R4,#+1
   \   0000002A   082C               CMP      R4,#+8
   \   0000002C   EDD3               BCC.N    ??NmsAlarmReport_0
   1503          
   1504          	//-----------------------------------------------------------------------//
   1505          	// Ru Alarm
   1506          	for(i=0; i<HU_MAX; i++)
   \   0000002E   0024               MOVS     R4,#+0
   1507          	{
   1508          		for(j=0; j<HDTU_MAX; j++)
   \                     ??NmsAlarmReport_2:
   \   00000030   0025               MOVS     R5,#+0
   1509          		{
   1510          			TarID.MuID = 0x00;
   \                     ??NmsAlarmReport_3:
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   8DF80000           STRB     R0,[SP, #+0]
   1511          			TarID.HuID = i;
   \   00000038   8DF80140           STRB     R4,[SP, #+1]
   1512          			TarID.RuID = ((j<<4)&0xF0);
   \   0000003C   2801               LSLS     R0,R5,#+4
   \   0000003E   8DF80200           STRB     R0,[SP, #+2]
   1513          			
   1514          			if(!InstallCheck(TarID, RU_PATH)) continue;
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   0098               LDR      R0,[SP, #+0]
   \   00000046   ........           BL       InstallCheck
   \   0000004A   10B1               CBZ.N    R0,??NmsAlarmReport_4
   1515          			
   1516          			NmsRuAlarmReport(TarID);
   \   0000004C   0098               LDR      R0,[SP, #+0]
   \   0000004E   ........           BL       NmsRuAlarmReport
   1517          		}
   \                     ??NmsAlarmReport_4:
   \   00000052   6D1C               ADDS     R5,R5,#+1
   \   00000054   102D               CMP      R5,#+16
   \   00000056   ECD3               BCC.N    ??NmsAlarmReport_3
   1518          	}
   \   00000058   641C               ADDS     R4,R4,#+1
   \   0000005A   082C               CMP      R4,#+8
   \   0000005C   E8D3               BCC.N    ??NmsAlarmReport_2
   1519          }
   \   0000005E   31BD               POP      {R0,R4,R5,PC}    ;; return
   1520          
   1521          //-----------------------------------------------------------------------//
   1522          // MU

   \                                 In section .text, align 2, keep-with-next
   1523          void NmsMuAlarmReport(void)
   1524          {
   \                     NmsMuAlarmReport:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   1525          	INT8U	i;
   1526          	INT8U	FlagChk = 0;
   \   00000002   0024               MOVS     R4,#+0
   1527          
   1528          	// Alarm Flag Check
   1529          	N_MuAlarm->AlarmFlag.System.Data = N_MuAlarm->Alarm.System.Data ^ N_MuAlarm->Old_Alarm.System.Data;
   \   00000004   ........           LDR.W    R5,??DataTable35_3
   \   00000008   686B               LDR      R0,[R5, #+52]
   \   0000000A   C17B               LDRB     R1,[R0, #+15]
   \   0000000C   827F               LDRB     R2,[R0, #+30]
   \   0000000E   5140               EORS     R1,R2,R1
   \   00000010   0170               STRB     R1,[R0, #+0]
   1530          	N_MuAlarm->Old_Alarm.System.Data = N_MuAlarm->Alarm.System.Data;
   \   00000012   686B               LDR      R0,[R5, #+52]
   \   00000014   C17B               LDRB     R1,[R0, #+15]
   \   00000016   8177               STRB     R1,[R0, #+30]
   1531          	for(i=0; i<MDTU_MAX; i++)
   \   00000018   0020               MOVS     R0,#+0
   1532          	{
   1533          		N_MuAlarm->AlarmFlag.Opt[i].Data = N_MuAlarm->Alarm.Opt[i].Data ^ N_MuAlarm->Old_Alarm.Opt[i].Data;
   \                     ??NmsMuAlarmReport_0:
   \   0000001A   696B               LDR      R1,[R5, #+52]
   \   0000001C   4118               ADDS     R1,R0,R1
   \   0000001E   0A7C               LDRB     R2,[R1, #+16]
   \   00000020   CB7F               LDRB     R3,[R1, #+31]
   \   00000022   5A40               EORS     R2,R3,R2
   \   00000024   4A70               STRB     R2,[R1, #+1]
   1534          		N_MuAlarm->Old_Alarm.Opt[i].Data = N_MuAlarm->Alarm.Opt[i].Data;
   \   00000026   696B               LDR      R1,[R5, #+52]
   \   00000028   4118               ADDS     R1,R0,R1
   \   0000002A   0A7C               LDRB     R2,[R1, #+16]
   \   0000002C   CA77               STRB     R2,[R1, #+31]
   1535          	}
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   0828               CMP      R0,#+8
   \   00000032   F2DB               BLT.N    ??NmsMuAlarmReport_0
   1536          	for(i=0; i<RFU_MAX; i++)
   \   00000034   0020               MOVS     R0,#+0
   1537          	{
   1538          		N_MuAlarm->AlarmFlag.Rf[i].Data = N_MuAlarm->Alarm.Rf[i].Data ^ N_MuAlarm->Old_Alarm.Rf[i].Data;
   \                     ??NmsMuAlarmReport_1:
   \   00000036   696B               LDR      R1,[R5, #+52]
   \   00000038   4118               ADDS     R1,R0,R1
   \   0000003A   01F20902           ADDW     R2,R1,#+9
   \   0000003E   D37B               LDRB     R3,[R2, #+15]
   \   00000040   927F               LDRB     R2,[R2, #+30]
   \   00000042   5A40               EORS     R2,R2,R3
   \   00000044   4A72               STRB     R2,[R1, #+9]
   1539          		N_MuAlarm->Old_Alarm.Rf[i].Data = N_MuAlarm->Alarm.Rf[i].Data;
   \   00000046   696B               LDR      R1,[R5, #+52]
   \   00000048   4118               ADDS     R1,R0,R1
   \   0000004A   0A7E               LDRB     R2,[R1, #+24]
   \   0000004C   81F82720           STRB     R2,[R1, #+39]
   1540          	}
   \   00000050   401C               ADDS     R0,R0,#+1
   \   00000052   0628               CMP      R0,#+6
   \   00000054   EFDB               BLT.N    ??NmsMuAlarmReport_1
   1541          
   1542          	// Alarm Mask
   1543          	if(MuStatus->AlarmMask == 1)	return;
   \   00000056   ........           LDR.W    R0,??DataTable35_1
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   90F8AE03           LDRB     R0,[R0, #+942]
   \   00000060   0128               CMP      R0,#+1
   \   00000062   2ED0               BEQ.N    ??NmsMuAlarmReport_2
   1544          	// Connection Check
   1545          	if(eLink_Check(ETH0_CHANNEL))	return;
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   ........           BL       eLink_Check
   \   0000006A   50BB               CBNZ.N   R0,??NmsMuAlarmReport_2
   1546          
   1547          	// Alarm Report OK
   1548          	if(N_MuAlarm->AlarmFlag.System.Data != 0)		FlagChk++;
   \   0000006C   686B               LDR      R0,[R5, #+52]
   \   0000006E   0178               LDRB     R1,[R0, #+0]
   \   00000070   01B1               CBZ.N    R1,??NmsMuAlarmReport_3
   \   00000072   0124               MOVS     R4,#+1
   1549          	for(i=0; i<MDTU_MAX; i++)
   \                     ??NmsMuAlarmReport_3:
   \   00000074   0146               MOV      R1,R0
   \   00000076   0822               MOVS     R2,#+8
   1550          		if(N_MuAlarm->AlarmFlag.Opt[i].Data != 0)	FlagChk++;
   \                     ??NmsMuAlarmReport_4:
   \   00000078   4B78               LDRB     R3,[R1, #+1]
   \   0000007A   03B1               CBZ.N    R3,??NmsMuAlarmReport_5
   \   0000007C   641C               ADDS     R4,R4,#+1
   \                     ??NmsMuAlarmReport_5:
   \   0000007E   491C               ADDS     R1,R1,#+1
   \   00000080   521E               SUBS     R2,R2,#+1
   \   00000082   F9D1               BNE.N    ??NmsMuAlarmReport_4
   1551          	for(i=0; i<RFU_MAX; i++)
   \   00000084   0621               MOVS     R1,#+6
   1552          		if(N_MuAlarm->AlarmFlag.Rf[i].Data != 0)	FlagChk++;	
   \                     ??NmsMuAlarmReport_6:
   \   00000086   427A               LDRB     R2,[R0, #+9]
   \   00000088   02B1               CBZ.N    R2,??NmsMuAlarmReport_7
   \   0000008A   641C               ADDS     R4,R4,#+1
   \                     ??NmsMuAlarmReport_7:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   491E               SUBS     R1,R1,#+1
   \   00000090   F9D1               BNE.N    ??NmsMuAlarmReport_6
   1553          	if(FlagChk != 0)
   \   00000092   E4B2               UXTB     R4,R4
   \   00000094   ACB1               CBZ.N    R4,??NmsMuAlarmReport_2
   1554          	{
   1555          		NmsDataCopy(MU_PATH, MyID);
   \   00000096   ........           LDR.W    R4,??DataTable35
   \   0000009A   00A8               ADD      R0,SP,#+0
   \   0000009C   2146               MOV      R1,R4
   \   0000009E   0322               MOVS     R2,#+3
   \   000000A0   ........           BL       __aeabi_memcpy
   \   000000A4   0099               LDR      R1,[SP, #+0]
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   ........           BL       NmsDataCopy
   \   000000AC   00A8               ADD      R0,SP,#+0
   \   000000AE   2146               MOV      R1,R4
   \   000000B0   0322               MOVS     R2,#+3
   \   000000B2   ........           BL       __aeabi_memcpy
   1556          		NmsAlarmAckTx(MyID, (INT8U*)N_MuStatus, sizeof(__N_MU_STS), Eth0);
   \   000000B6   6B6A               LDR      R3,[R5, #+36]
   \   000000B8   FC22               MOVS     R2,#+252
   \   000000BA   A96A               LDR      R1,[R5, #+40]
   \   000000BC   0098               LDR      R0,[SP, #+0]
   \   000000BE   ........           BL       NmsAlarmAckTx
   \                     ??NmsMuAlarmReport_2:
   \   000000C2   31BD               POP      {R0,R4,R5,PC}    ;; return
   1557          	}
   1558          }
   1559          
   1560          //-----------------------------------------------------------------------//
   1561          // HU

   \                                 In section .text, align 2, keep-with-next
   1562          void NmsHuAlarmReport(SubIDStr DstID)
   1563          {
   \                     NmsHuAlarmReport:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1564          	INT8U	i;
   1565          	INT8U	FlagChk = 0;
   \   00000002   0024               MOVS     R4,#+0
   1566          	INT8U	HuID;
   1567          
   1568          	HuID = DstID.HuID;
   \   00000004   9DF80150           LDRB     R5,[SP, #+1]
   1569          
   1570          	// Alarm Flag Check
   1571          	N_HuAlarm[HuID]->AlarmFlag.System.Data = N_HuAlarm[HuID]->Alarm.System.Data ^ N_HuAlarm[HuID]->Old_Alarm.System.Data;
   \   00000008   ........           LDR.W    R6,??DataTable35_3
   \   0000000C   06EB8507           ADD      R7,R6,R5, LSL #+2
   \   00000010   B86B               LDR      R0,[R7, #+56]
   \   00000012   817C               LDRB     R1,[R0, #+18]
   \   00000014   90F82420           LDRB     R2,[R0, #+36]
   \   00000018   5140               EORS     R1,R2,R1
   \   0000001A   0170               STRB     R1,[R0, #+0]
   1572          	N_HuAlarm[HuID]->Old_Alarm.System.Data = N_HuAlarm[HuID]->Alarm.System.Data;
   \   0000001C   B86B               LDR      R0,[R7, #+56]
   \   0000001E   817C               LDRB     R1,[R0, #+18]
   \   00000020   80F82410           STRB     R1,[R0, #+36]
   1573          	N_HuAlarm[HuID]->AlarmFlag.MuOpt.Data = N_HuAlarm[HuID]->Alarm.MuOpt.Data ^ N_HuAlarm[HuID]->Old_Alarm.MuOpt.Data;
   \   00000024   B86B               LDR      R0,[R7, #+56]
   \   00000026   C17C               LDRB     R1,[R0, #+19]
   \   00000028   90F82520           LDRB     R2,[R0, #+37]
   \   0000002C   5140               EORS     R1,R2,R1
   \   0000002E   4170               STRB     R1,[R0, #+1]
   1574          	N_HuAlarm[HuID]->Old_Alarm.MuOpt.Data = N_HuAlarm[HuID]->Alarm.MuOpt.Data;
   \   00000030   B86B               LDR      R0,[R7, #+56]
   \   00000032   C17C               LDRB     R1,[R0, #+19]
   \   00000034   80F82510           STRB     R1,[R0, #+37]
   1575          	for(i=0; i<HDTU_MAX; i++)
   \   00000038   0020               MOVS     R0,#+0
   1576          	{
   1577          		N_HuAlarm[HuID]->AlarmFlag.Opt[i].Data = N_HuAlarm[HuID]->Alarm.Opt[i].Data ^ N_HuAlarm[HuID]->Old_Alarm.Opt[i].Data;
   \                     ??NmsHuAlarmReport_0:
   \   0000003A   06F13801           ADD      R1,R6,#+56
   \   0000003E   51F82510           LDR      R1,[R1, R5, LSL #+2]
   \   00000042   4118               ADDS     R1,R0,R1
   \   00000044   0A7D               LDRB     R2,[R1, #+20]
   \   00000046   91F82630           LDRB     R3,[R1, #+38]
   \   0000004A   5A40               EORS     R2,R3,R2
   \   0000004C   8A70               STRB     R2,[R1, #+2]
   1578          		N_HuAlarm[HuID]->Old_Alarm.Opt[i].Data = N_HuAlarm[HuID]->Alarm.Opt[i].Data;
   \   0000004E   06F13801           ADD      R1,R6,#+56
   \   00000052   51F82510           LDR      R1,[R1, R5, LSL #+2]
   \   00000056   4118               ADDS     R1,R0,R1
   \   00000058   0A7D               LDRB     R2,[R1, #+20]
   \   0000005A   81F82620           STRB     R2,[R1, #+38]
   1579          	}
   \   0000005E   401C               ADDS     R0,R0,#+1
   \   00000060   1028               CMP      R0,#+16
   \   00000062   EADB               BLT.N    ??NmsHuAlarmReport_0
   1580          	
   1581          	// Alarm Mask
   1582          	if(HuStatus[HuID]->AlarmMask == 1)	return;
   \   00000064   ........           LDR.W    R0,??DataTable35_4
   \   00000068   50F82500           LDR      R0,[R0, R5, LSL #+2]
   \   0000006C   90F80803           LDRB     R0,[R0, #+776]
   \   00000070   0128               CMP      R0,#+1
   \   00000072   22D0               BEQ.N    ??NmsHuAlarmReport_1
   1583          	// Connection Check
   1584          	if(eLink_Check(ETH0_CHANNEL))	return;
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   ........           BL       eLink_Check
   \   0000007A   F0B9               CBNZ.N   R0,??NmsHuAlarmReport_1
   1585          
   1586          	// Alarm Report OK
   1587          	if(N_HuAlarm[HuID]->AlarmFlag.System.Data != 0)		FlagChk++;
   \   0000007C   B86B               LDR      R0,[R7, #+56]
   \   0000007E   0178               LDRB     R1,[R0, #+0]
   \   00000080   01B1               CBZ.N    R1,??NmsHuAlarmReport_2
   \   00000082   0124               MOVS     R4,#+1
   1588          	if(N_HuAlarm[HuID]->AlarmFlag.MuOpt.Data != 0)		FlagChk++;
   \                     ??NmsHuAlarmReport_2:
   \   00000084   4078               LDRB     R0,[R0, #+1]
   \   00000086   00B1               CBZ.N    R0,??NmsHuAlarmReport_3
   \   00000088   641C               ADDS     R4,R4,#+1
   1589          	for(i=0; i<HDTU_MAX; i++)
   \                     ??NmsHuAlarmReport_3:
   \   0000008A   0020               MOVS     R0,#+0
   1590          		if(N_HuAlarm[HuID]->AlarmFlag.Opt[i].Data != 0)	FlagChk++;
   \                     ??NmsHuAlarmReport_4:
   \   0000008C   06F13801           ADD      R1,R6,#+56
   \   00000090   51F82510           LDR      R1,[R1, R5, LSL #+2]
   \   00000094   4118               ADDS     R1,R0,R1
   \   00000096   8978               LDRB     R1,[R1, #+2]
   \   00000098   01B1               CBZ.N    R1,??NmsHuAlarmReport_5
   \   0000009A   641C               ADDS     R4,R4,#+1
   \                     ??NmsHuAlarmReport_5:
   \   0000009C   401C               ADDS     R0,R0,#+1
   \   0000009E   1028               CMP      R0,#+16
   \   000000A0   F4DB               BLT.N    ??NmsHuAlarmReport_4
   1591          	
   1592          	if(FlagChk != 0)
   \   000000A2   E4B2               UXTB     R4,R4
   \   000000A4   4CB1               CBZ.N    R4,??NmsHuAlarmReport_1
   1593          	{
   1594          		NmsDataCopy(HU_PATH, DstID);
   \   000000A6   0099               LDR      R1,[SP, #+0]
   \   000000A8   0120               MOVS     R0,#+1
   \   000000AA   ........           BL       NmsDataCopy
   1595          		NmsAlarmAckTx(DstID, (INT8U*)N_HuStatus, sizeof(__N_HU_STS), Eth0);
   \   000000AE   736A               LDR      R3,[R6, #+36]
   \   000000B0   8122               MOVS     R2,#+129
   \   000000B2   F16A               LDR      R1,[R6, #+44]
   \   000000B4   0098               LDR      R0,[SP, #+0]
   \   000000B6   ........           BL       NmsAlarmAckTx
   \                     ??NmsHuAlarmReport_1:
   \   000000BA   F1BD               POP      {R0,R4-R7,PC}    ;; return
   1596          	}
   1597          }
   1598          
   1599          //-----------------------------------------------------------------------//
   1600          // RU

   \                                 In section .text, align 2, keep-with-next
   1601          void NmsRuAlarmReport(SubIDStr DstID)
   1602          {
   \                     NmsRuAlarmReport:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1603          	INT8U	i;
   1604          	INT8U	FlagChk = 0;
   \   00000002   0024               MOVS     R4,#+0
   1605          	INT8U	HuID, BrID, RuID;
   1606          
   1607          	HuID = DstID.HuID;
   \   00000004   9DF80110           LDRB     R1,[SP, #+1]
   1608          	BrID = (DstID.RuID>>4)&0x0F;
   \   00000008   9DF80200           LDRB     R0,[SP, #+2]
   \   0000000C   0509               LSRS     R5,R0,#+4
   1609          	RuID = DstID.RuID&0x0F;
   \   0000000E   00F00F00           AND      R0,R0,#0xF
   1610          
   1611          	// Alarm Flag Check
   1612          	N_RuAlarm[HuID][BrID]->AlarmFlag.System.Data = N_RuAlarm[HuID][BrID]->Alarm.System.Data ^ N_RuAlarm[HuID][BrID]->Old_Alarm.System.Data;
   \   00000012   ........           LDR.W    R2,??DataTable35_5
   \   00000016   12EB8116           ADDS     R6,R2,R1, LSL #+6
   \   0000001A   56F82520           LDR      R2,[R6, R5, LSL #+2]
   \   0000001E   537A               LDRB     R3,[R2, #+9]
   \   00000020   977C               LDRB     R7,[R2, #+18]
   \   00000022   7B40               EORS     R3,R7,R3
   \   00000024   1370               STRB     R3,[R2, #+0]
   1613          	N_RuAlarm[HuID][BrID]->Old_Alarm.System.Data = N_RuAlarm[HuID][BrID]->Alarm.System.Data;
   \   00000026   56F82520           LDR      R2,[R6, R5, LSL #+2]
   \   0000002A   537A               LDRB     R3,[R2, #+9]
   \   0000002C   9374               STRB     R3,[R2, #+18]
   1614          	for(i=0; i<RDTU_MAX; i++)
   \   0000002E   0022               MOVS     R2,#+0
   1615          	{
   1616          		N_RuAlarm[HuID][BrID]->AlarmFlag.Opt[i].Data = N_RuAlarm[HuID][BrID]->Alarm.Opt[i].Data ^ N_RuAlarm[HuID][BrID]->Old_Alarm.Opt[i].Data;
   \                     ??NmsRuAlarmReport_0:
   \   00000030   56F82530           LDR      R3,[R6, R5, LSL #+2]
   \   00000034   D318               ADDS     R3,R2,R3
   \   00000036   9F7A               LDRB     R7,[R3, #+10]
   \   00000038   93F813C0           LDRB     R12,[R3, #+19]
   \   0000003C   8CEA0707           EOR      R7,R12,R7
   \   00000040   5F70               STRB     R7,[R3, #+1]
   1617          		N_RuAlarm[HuID][BrID]->Old_Alarm.Opt[i].Data = N_RuAlarm[HuID][BrID]->Alarm.Opt[i].Data;
   \   00000042   56F82530           LDR      R3,[R6, R5, LSL #+2]
   \   00000046   D318               ADDS     R3,R2,R3
   \   00000048   9F7A               LDRB     R7,[R3, #+10]
   \   0000004A   DF74               STRB     R7,[R3, #+19]
   1618          	}
   \   0000004C   521C               ADDS     R2,R2,#+1
   \   0000004E   022A               CMP      R2,#+2
   \   00000050   EEDB               BLT.N    ??NmsRuAlarmReport_0
   1619          	for(i=0; i<RFU_MAX; i++)
   \   00000052   0022               MOVS     R2,#+0
   1620          	{
   1621          		N_RuAlarm[HuID][BrID]->AlarmFlag.Rf[i].Data = N_RuAlarm[HuID][BrID]->Alarm.Rf[i].Data ^ N_RuAlarm[HuID][BrID]->Old_Alarm.Rf[i].Data;
   \                     ??NmsRuAlarmReport_1:
   \   00000054   56F82530           LDR      R3,[R6, R5, LSL #+2]
   \   00000058   D318               ADDS     R3,R2,R3
   \   0000005A   1F7B               LDRB     R7,[R3, #+12]
   \   0000005C   93F815C0           LDRB     R12,[R3, #+21]
   \   00000060   8CEA0707           EOR      R7,R12,R7
   \   00000064   DF70               STRB     R7,[R3, #+3]
   1622          		N_RuAlarm[HuID][BrID]->Old_Alarm.Rf[i].Data = N_RuAlarm[HuID][BrID]->Alarm.Rf[i].Data;
   \   00000066   56F82530           LDR      R3,[R6, R5, LSL #+2]
   \   0000006A   D318               ADDS     R3,R2,R3
   \   0000006C   1F7B               LDRB     R7,[R3, #+12]
   \   0000006E   5F75               STRB     R7,[R3, #+21]
   1623          	}
   \   00000070   521C               ADDS     R2,R2,#+1
   \   00000072   062A               CMP      R2,#+6
   \   00000074   EEDB               BLT.N    ??NmsRuAlarmReport_1
   1624          	
   1625          	// Alarm Mask
   1626          	if(RuBuf[HuID][BrID][RuID]->AlarmMask == 1)	return;
   \   00000076   ....               LDR.N    R2,??DataTable33
   \   00000078   12EB8111           ADDS     R1,R2,R1, LSL #+6
   \   0000007C   01EB8501           ADD      R1,R1,R5, LSL #+2
   \   00000080   51F82000           LDR      R0,[R1, R0, LSL #+2]
   \   00000084   90F85501           LDRB     R0,[R0, #+341]
   \   00000088   0128               CMP      R0,#+1
   \   0000008A   26D0               BEQ.N    ??NmsRuAlarmReport_2
   1627          	// Connection Check
   1628          	if(eLink_Check(ETH0_CHANNEL))	return;
   \   0000008C   0020               MOVS     R0,#+0
   \   0000008E   ........           BL       eLink_Check
   \   00000092   10BB               CBNZ.N   R0,??NmsRuAlarmReport_2
   1629          
   1630          	// Alarm Report OK
   1631          	if(N_RuAlarm[HuID][BrID]->AlarmFlag.System.Data != 0)		FlagChk++;
   \   00000094   56F82500           LDR      R0,[R6, R5, LSL #+2]
   \   00000098   0178               LDRB     R1,[R0, #+0]
   \   0000009A   01B1               CBZ.N    R1,??NmsRuAlarmReport_3
   \   0000009C   0124               MOVS     R4,#+1
   1632          	for(i=0; i<RDTU_MAX; i++)
   \                     ??NmsRuAlarmReport_3:
   \   0000009E   0021               MOVS     R1,#+0
   1633          		if(N_RuAlarm[HuID][BrID]->AlarmFlag.Opt[i].Data != 0)	FlagChk++;
   \                     ??NmsRuAlarmReport_4:
   \   000000A0   0A18               ADDS     R2,R1,R0
   \   000000A2   5278               LDRB     R2,[R2, #+1]
   \   000000A4   02B1               CBZ.N    R2,??NmsRuAlarmReport_5
   \   000000A6   641C               ADDS     R4,R4,#+1
   \                     ??NmsRuAlarmReport_5:
   \   000000A8   491C               ADDS     R1,R1,#+1
   \   000000AA   0229               CMP      R1,#+2
   \   000000AC   F8DB               BLT.N    ??NmsRuAlarmReport_4
   1634          	for(i=0; i<RFU_MAX; i++)
   \   000000AE   0022               MOVS     R2,#+0
   1635          		if(N_RuAlarm[HuID][BrID]->AlarmFlag.Rf[i].Data != 0)	FlagChk++;
   \                     ??NmsRuAlarmReport_6:
   \   000000B0   1118               ADDS     R1,R2,R0
   \   000000B2   C978               LDRB     R1,[R1, #+3]
   \   000000B4   01B1               CBZ.N    R1,??NmsRuAlarmReport_7
   \   000000B6   641C               ADDS     R4,R4,#+1
   \                     ??NmsRuAlarmReport_7:
   \   000000B8   521C               ADDS     R2,R2,#+1
   \   000000BA   062A               CMP      R2,#+6
   \   000000BC   F8DB               BLT.N    ??NmsRuAlarmReport_6
   1636          	
   1637          	if(FlagChk != 0)
   \   000000BE   E4B2               UXTB     R4,R4
   \   000000C0   5CB1               CBZ.N    R4,??NmsRuAlarmReport_2
   1638          	{
   1639          		NmsDataCopy(RU_PATH, DstID);
   \   000000C2   0099               LDR      R1,[SP, #+0]
   \   000000C4   0220               MOVS     R0,#+2
   \   000000C6   ........           BL       NmsDataCopy
   1640          		NmsAlarmAckTx(DstID, (INT8U*)N_RuStatus, sizeof(__N_RU_STS), Eth0);
   \   000000CA   ........           LDR.W    R0,??DataTable35_3
   \   000000CE   436A               LDR      R3,[R0, #+36]
   \   000000D0   B122               MOVS     R2,#+177
   \   000000D2   016B               LDR      R1,[R0, #+48]
   \   000000D4   0098               LDR      R0,[SP, #+0]
   \   000000D6   ........           BL       NmsAlarmAckTx
   \                     ??NmsRuAlarmReport_2:
   \   000000DA   F1BD               POP      {R0,R4-R7,PC}    ;; return
   1641          	}
   1642          }
   1643          
   1644          //==============================================================================//

   \                                 In section .text, align 2, keep-with-next
   1645          void AlarmUpdateAll(void)
   1646          {
   \                     AlarmUpdateAll:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   1647          	INT8U	i, j;
   1648          	SubIDStr TarID;
   1649          	
   1650          	//-----------------------------------------------------------------------//
   1651          	// Mu Alarm
   1652          	MuAlarmUpdate();
   \   00000002   ........           BL       MuAlarmUpdate
   1653          
   1654          	//-----------------------------------------------------------------------//
   1655          	// Hu Alarm
   1656          	for(i=0; i<HU_MAX; i++)
   \   00000006   0024               MOVS     R4,#+0
   \   00000008   FF25               MOVS     R5,#+255
   1657          	{
   1658          		TarID.MuID = 0x00;
   \                     ??AlarmUpdateAll_0:
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   8DF80000           STRB     R0,[SP, #+0]
   1659          		TarID.HuID = i;
   \   00000010   8DF80140           STRB     R4,[SP, #+1]
   1660          		TarID.RuID = 0xFF;
   \   00000014   8DF80250           STRB     R5,[SP, #+2]
   1661          		
   1662          		if(!InstallCheck(TarID, HU_PATH)) continue;
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   0098               LDR      R0,[SP, #+0]
   \   0000001C   ........           BL       InstallCheck
   \   00000020   10B1               CBZ.N    R0,??AlarmUpdateAll_1
   1663          		
   1664          		HuAlarmUpdate(TarID);
   \   00000022   0098               LDR      R0,[SP, #+0]
   \   00000024   ........           BL       HuAlarmUpdate
   1665          	}
   \                     ??AlarmUpdateAll_1:
   \   00000028   641C               ADDS     R4,R4,#+1
   \   0000002A   082C               CMP      R4,#+8
   \   0000002C   EDD3               BCC.N    ??AlarmUpdateAll_0
   1666          
   1667          	//-----------------------------------------------------------------------//
   1668          	// Ru Alarm
   1669          	for(i=0; i<HU_MAX; i++)
   \   0000002E   0024               MOVS     R4,#+0
   1670          	{
   1671          		for(j=0; j<HDTU_MAX; j++)
   \                     ??AlarmUpdateAll_2:
   \   00000030   0025               MOVS     R5,#+0
   1672          		{
   1673          			TarID.MuID = 0x00;
   \                     ??AlarmUpdateAll_3:
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   8DF80000           STRB     R0,[SP, #+0]
   1674          			TarID.HuID = i;
   \   00000038   8DF80140           STRB     R4,[SP, #+1]
   1675          			TarID.RuID = ((j<<4)&0xF0);
   \   0000003C   2801               LSLS     R0,R5,#+4
   \   0000003E   8DF80200           STRB     R0,[SP, #+2]
   1676          			
   1677          			if(!InstallCheck(TarID, RU_PATH)) continue;
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   0098               LDR      R0,[SP, #+0]
   \   00000046   ........           BL       InstallCheck
   \   0000004A   10B1               CBZ.N    R0,??AlarmUpdateAll_4
   1678          			
   1679          			RuAlarmUpdate(TarID);
   \   0000004C   0098               LDR      R0,[SP, #+0]
   \   0000004E   ........           BL       RuAlarmUpdate
   1680          		}
   \                     ??AlarmUpdateAll_4:
   \   00000052   6D1C               ADDS     R5,R5,#+1
   \   00000054   102D               CMP      R5,#+16
   \   00000056   ECD3               BCC.N    ??AlarmUpdateAll_3
   1681          	}
   \   00000058   641C               ADDS     R4,R4,#+1
   \   0000005A   082C               CMP      R4,#+8
   \   0000005C   E8D3               BCC.N    ??AlarmUpdateAll_2
   1682          }
   \   0000005E   31BD               POP      {R0,R4,R5,PC}    ;; return
   1683          

   \                                 In section .text, align 2, keep-with-next
   1684          void MuAlarmUpdate(void)
   1685          {
   \                     MuAlarmUpdate:
   \   00000000   70B4               PUSH     {R4-R6}
   1686          	INT8U	i=0;
   1687          
   1688          	// System
   1689          	N_MuAlarm->Alarm.System.DcIn_Alarm		= MuStatus->MuAlm.DcIn_Alarm;
   \   00000002   ........           LDR.W    R0,??DataTable35_3
   \   00000006   426B               LDR      R2,[R0, #+52]
   \   00000008   ........           LDR.W    R1,??DataTable35_1
   \   0000000C   0B68               LDR      R3,[R1, #+0]
   \   0000000E   93F85832           LDRB     R3,[R3, #+600]
   \   00000012   D47B               LDRB     R4,[R2, #+15]
   \   00000014   63F30004           BFI      R4,R3,#+0,#+1
   \   00000018   D473               STRB     R4,[R2, #+15]
   1690          	N_MuAlarm->Alarm.System.DcOut_Alarm		= MuStatus->MuAlm.DcOut_Alarm;
   \   0000001A   426B               LDR      R2,[R0, #+52]
   \   0000001C   0B68               LDR      R3,[R1, #+0]
   \   0000001E   93F85832           LDRB     R3,[R3, #+600]
   \   00000022   5B08               LSRS     R3,R3,#+1
   \   00000024   D47B               LDRB     R4,[R2, #+15]
   \   00000026   63F34104           BFI      R4,R3,#+1,#+1
   \   0000002A   D473               STRB     R4,[R2, #+15]
   1691          	N_MuAlarm->Alarm.System.Fan_Alarm		= MuStatus->MuAlm.Fan_Alarm;
   \   0000002C   426B               LDR      R2,[R0, #+52]
   \   0000002E   0B68               LDR      R3,[R1, #+0]
   \   00000030   93F85832           LDRB     R3,[R3, #+600]
   \   00000034   9B08               LSRS     R3,R3,#+2
   \   00000036   D47B               LDRB     R4,[R2, #+15]
   \   00000038   63F38204           BFI      R4,R3,#+2,#+1
   \   0000003C   D473               STRB     R4,[R2, #+15]
   1692          	N_MuAlarm->Alarm.System.TempH_Alarm		= MuStatus->MuAlm.TempH_Alarm;
   \   0000003E   426B               LDR      R2,[R0, #+52]
   \   00000040   0B68               LDR      R3,[R1, #+0]
   \   00000042   93F85832           LDRB     R3,[R3, #+600]
   \   00000046   1B09               LSRS     R3,R3,#+4
   \   00000048   D47B               LDRB     R4,[R2, #+15]
   \   0000004A   63F30414           BFI      R4,R3,#+4,#+1
   \   0000004E   D473               STRB     R4,[R2, #+15]
   1693          	N_MuAlarm->Alarm.System.DtuSts_Alarm	= MuStatus->MuAlm.DtuSts_Alarm;
   \   00000050   426B               LDR      R2,[R0, #+52]
   \   00000052   0B68               LDR      R3,[R1, #+0]
   \   00000054   93F85832           LDRB     R3,[R3, #+600]
   \   00000058   9B09               LSRS     R3,R3,#+6
   \   0000005A   D47B               LDRB     R4,[R2, #+15]
   \   0000005C   63F38614           BFI      R4,R3,#+6,#+1
   \   00000060   D473               STRB     R4,[R2, #+15]
   1694          	N_MuAlarm->Alarm.System.DtuLink_Alarm	= MuStatus->MuAlm.DtuLink_Alarm;
   \   00000062   426B               LDR      R2,[R0, #+52]
   \   00000064   0B68               LDR      R3,[R1, #+0]
   \   00000066   93F85832           LDRB     R3,[R3, #+600]
   \   0000006A   DB09               LSRS     R3,R3,#+7
   \   0000006C   D47B               LDRB     R4,[R2, #+15]
   \   0000006E   63F3C714           BFI      R4,R3,#+7,#+1
   \   00000072   D473               STRB     R4,[R2, #+15]
   1695          
   1696          	// Opt
   1697          	for(i=0; i<MDTU_MAX; i++)
   \   00000074   0022               MOVS     R2,#+0
   \   00000076   0023               MOVS     R3,#+0
   1698          	{
   1699          		N_MuAlarm->Alarm.Opt[i].Pd_Alarm		= MuStatus->MdtuSts[i].Alarm.Pd_Alarm;
   \                     ??MuAlarmUpdate_0:
   \   00000078   446B               LDR      R4,[R0, #+52]
   \   0000007A   1419               ADDS     R4,R2,R4
   \   0000007C   0D68               LDR      R5,[R1, #+0]
   \   0000007E   5D19               ADDS     R5,R3,R5
   \   00000080   95F86252           LDRB     R5,[R5, #+610]
   \   00000084   267C               LDRB     R6,[R4, #+16]
   \   00000086   65F30006           BFI      R6,R5,#+0,#+1
   \   0000008A   2674               STRB     R6,[R4, #+16]
   1700          		N_MuAlarm->Alarm.Opt[i].Ld_Alarm		= MuStatus->MdtuSts[i].Alarm.Ld_Alarm;
   \   0000008C   446B               LDR      R4,[R0, #+52]
   \   0000008E   1419               ADDS     R4,R2,R4
   \   00000090   0D68               LDR      R5,[R1, #+0]
   \   00000092   5D19               ADDS     R5,R3,R5
   \   00000094   95F86252           LDRB     R5,[R5, #+610]
   \   00000098   6D08               LSRS     R5,R5,#+1
   \   0000009A   267C               LDRB     R6,[R4, #+16]
   \   0000009C   65F34106           BFI      R6,R5,#+1,#+1
   \   000000A0   2674               STRB     R6,[R4, #+16]
   1701          	}
   \   000000A2   521C               ADDS     R2,R2,#+1
   \   000000A4   0A33               ADDS     R3,R3,#+10
   \   000000A6   082A               CMP      R2,#+8
   \   000000A8   E6DB               BLT.N    ??MuAlarmUpdate_0
   1702          
   1703          	// RF
   1704          	for(i=0; i<RFU_MAX; i++)
   \   000000AA   0022               MOVS     R2,#+0
   \   000000AC   0023               MOVS     R3,#+0
   1705          	{
   1706          		N_MuAlarm->Alarm.Rf[i].DL_Pll				= MuStatus->MrfuSts[i].Alarm.DL_Pll;
   \                     ??MuAlarmUpdate_1:
   \   000000AE   446B               LDR      R4,[R0, #+52]
   \   000000B0   1419               ADDS     R4,R2,R4
   \   000000B2   0D68               LDR      R5,[R1, #+0]
   \   000000B4   5D19               ADDS     R5,R3,R5
   \   000000B6   95F8B252           LDRB     R5,[R5, #+690]
   \   000000BA   267E               LDRB     R6,[R4, #+24]
   \   000000BC   65F30006           BFI      R6,R5,#+0,#+1
   \   000000C0   2676               STRB     R6,[R4, #+24]
   1707          		N_MuAlarm->Alarm.Rf[i].UL_Pll				= MuStatus->MrfuSts[i].Alarm.UL_Pll;
   \   000000C2   446B               LDR      R4,[R0, #+52]
   \   000000C4   1419               ADDS     R4,R2,R4
   \   000000C6   0D68               LDR      R5,[R1, #+0]
   \   000000C8   5D19               ADDS     R5,R3,R5
   \   000000CA   95F8B252           LDRB     R5,[R5, #+690]
   \   000000CE   6D08               LSRS     R5,R5,#+1
   \   000000D0   267E               LDRB     R6,[R4, #+24]
   \   000000D2   65F34106           BFI      R6,R5,#+1,#+1
   \   000000D6   2676               STRB     R6,[R4, #+24]
   1708          		N_MuAlarm->Alarm.Rf[i].DL_OutLimitH_Alarm	= MuStatus->MrfuSts[i].Alarm.DL_OutLimitH_Alarm;
   \   000000D8   446B               LDR      R4,[R0, #+52]
   \   000000DA   1419               ADDS     R4,R2,R4
   \   000000DC   0D68               LDR      R5,[R1, #+0]
   \   000000DE   5D19               ADDS     R5,R3,R5
   \   000000E0   95F8B252           LDRB     R5,[R5, #+690]
   \   000000E4   AD08               LSRS     R5,R5,#+2
   \   000000E6   267E               LDRB     R6,[R4, #+24]
   \   000000E8   65F38206           BFI      R6,R5,#+2,#+1
   \   000000EC   2676               STRB     R6,[R4, #+24]
   1709          		N_MuAlarm->Alarm.Rf[i].UL_OutLimitH_Alarm	= MuStatus->MrfuSts[i].Alarm.UL_OutLimitH_Alarm;
   \   000000EE   446B               LDR      R4,[R0, #+52]
   \   000000F0   1419               ADDS     R4,R2,R4
   \   000000F2   0D68               LDR      R5,[R1, #+0]
   \   000000F4   5D19               ADDS     R5,R3,R5
   \   000000F6   95F8B252           LDRB     R5,[R5, #+690]
   \   000000FA   ED08               LSRS     R5,R5,#+3
   \   000000FC   267E               LDRB     R6,[R4, #+24]
   \   000000FE   65F3C306           BFI      R6,R5,#+3,#+1
   \   00000102   2676               STRB     R6,[R4, #+24]
   1710          		N_MuAlarm->Alarm.Rf[i].UL_SD_Alarm			= MuStatus->MrfuSts[i].Alarm.UL_SD_Alarm;
   \   00000104   446B               LDR      R4,[R0, #+52]
   \   00000106   1419               ADDS     R4,R2,R4
   \   00000108   0D68               LDR      R5,[R1, #+0]
   \   0000010A   5D19               ADDS     R5,R3,R5
   \   0000010C   95F8B252           LDRB     R5,[R5, #+690]
   \   00000110   2D09               LSRS     R5,R5,#+4
   \   00000112   267E               LDRB     R6,[R4, #+24]
   \   00000114   65F30416           BFI      R6,R5,#+4,#+1
   \   00000118   2676               STRB     R6,[R4, #+24]
   1711          		N_MuAlarm->Alarm.Rf[i].Tsync_Alarm			= MuStatus->MrfuSts[i].Alarm.Tsync_Alarm;
   \   0000011A   446B               LDR      R4,[R0, #+52]
   \   0000011C   1419               ADDS     R4,R2,R4
   \   0000011E   0D68               LDR      R5,[R1, #+0]
   \   00000120   5D19               ADDS     R5,R3,R5
   \   00000122   95F8B252           LDRB     R5,[R5, #+690]
   \   00000126   ED09               LSRS     R5,R5,#+7
   \   00000128   267E               LDRB     R6,[R4, #+24]
   \   0000012A   65F3C716           BFI      R6,R5,#+7,#+1
   \   0000012E   2676               STRB     R6,[R4, #+24]
   1712          	}
   \   00000130   521C               ADDS     R2,R2,#+1
   \   00000132   1533               ADDS     R3,R3,#+21
   \   00000134   062A               CMP      R2,#+6
   \   00000136   BADB               BLT.N    ??MuAlarmUpdate_1
   1713          }
   \   00000138   70BC               POP      {R4-R6}
   \   0000013A   7047               BX       LR               ;; return
   1714          

   \                                 In section .text, align 2, keep-with-next
   1715          void HuAlarmUpdate(SubIDStr DstID)
   1716          {
   \                     HuAlarmUpdate:
   \   00000000   F1B4               PUSH     {R0,R4-R7}
   1717          	INT8U	i=0;
   1718          	INT8U	HuID;
   1719          
   1720          	HuID = DstID.HuID;
   \   00000002   9DF80100           LDRB     R0,[SP, #+1]
   1721          
   1722          	// System
   1723          	N_HuAlarm[HuID]->Alarm.System.Dc_Alarm		= HuStatus[HuID]->HuAlm.Dc_Alarm;
   \   00000006   ....               LDR.N    R1,??DataTable35_3
   \   00000008   01EB8003           ADD      R3,R1,R0, LSL #+2
   \   0000000C   9C6B               LDR      R4,[R3, #+56]
   \   0000000E   ....               LDR.N    R2,??DataTable35_4
   \   00000010   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000014   95F85852           LDRB     R5,[R5, #+600]
   \   00000018   A67C               LDRB     R6,[R4, #+18]
   \   0000001A   65F30006           BFI      R6,R5,#+0,#+1
   \   0000001E   A674               STRB     R6,[R4, #+18]
   1724          	N_HuAlarm[HuID]->Alarm.System.PsuFan_Alarm	= HuStatus[HuID]->HuAlm.PsuFan_Alarm;
   \   00000020   9C6B               LDR      R4,[R3, #+56]
   \   00000022   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000026   95F85852           LDRB     R5,[R5, #+600]
   \   0000002A   6D08               LSRS     R5,R5,#+1
   \   0000002C   A67C               LDRB     R6,[R4, #+18]
   \   0000002E   65F34106           BFI      R6,R5,#+1,#+1
   \   00000032   A674               STRB     R6,[R4, #+18]
   1725          	N_HuAlarm[HuID]->Alarm.System.DtuFan1_Alarm	= HuStatus[HuID]->HuAlm.DtuFan1_Alarm;
   \   00000034   9C6B               LDR      R4,[R3, #+56]
   \   00000036   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000003A   95F85852           LDRB     R5,[R5, #+600]
   \   0000003E   AD08               LSRS     R5,R5,#+2
   \   00000040   A67C               LDRB     R6,[R4, #+18]
   \   00000042   65F38206           BFI      R6,R5,#+2,#+1
   \   00000046   A674               STRB     R6,[R4, #+18]
   1726          	N_HuAlarm[HuID]->Alarm.System.DtuFan2_Alarm	= HuStatus[HuID]->HuAlm.DtuFan2_Alarm;
   \   00000048   9C6B               LDR      R4,[R3, #+56]
   \   0000004A   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000004E   95F85852           LDRB     R5,[R5, #+600]
   \   00000052   ED08               LSRS     R5,R5,#+3
   \   00000054   A67C               LDRB     R6,[R4, #+18]
   \   00000056   65F3C306           BFI      R6,R5,#+3,#+1
   \   0000005A   A674               STRB     R6,[R4, #+18]
   1727          	N_HuAlarm[HuID]->Alarm.System.TempH_Alarm	= HuStatus[HuID]->HuAlm.TempH_Alarm;
   \   0000005C   9C6B               LDR      R4,[R3, #+56]
   \   0000005E   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000062   95F85852           LDRB     R5,[R5, #+600]
   \   00000066   2D09               LSRS     R5,R5,#+4
   \   00000068   A67C               LDRB     R6,[R4, #+18]
   \   0000006A   65F30416           BFI      R6,R5,#+4,#+1
   \   0000006E   A674               STRB     R6,[R4, #+18]
   1728          	N_HuAlarm[HuID]->Alarm.System.DtuSts_Alarm	= HuStatus[HuID]->HuAlm.DtuSts_Alarm;
   \   00000070   9C6B               LDR      R4,[R3, #+56]
   \   00000072   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000076   95F85852           LDRB     R5,[R5, #+600]
   \   0000007A   AD09               LSRS     R5,R5,#+6
   \   0000007C   A67C               LDRB     R6,[R4, #+18]
   \   0000007E   65F38616           BFI      R6,R5,#+6,#+1
   \   00000082   A674               STRB     R6,[R4, #+18]
   1729          	N_HuAlarm[HuID]->Alarm.System.DtuLink_Alarm	= HuStatus[HuID]->HuAlm.DtuLink_Alarm;
   \   00000084   9C6B               LDR      R4,[R3, #+56]
   \   00000086   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000008A   95F85852           LDRB     R5,[R5, #+600]
   \   0000008E   ED09               LSRS     R5,R5,#+7
   \   00000090   A67C               LDRB     R6,[R4, #+18]
   \   00000092   65F3C716           BFI      R6,R5,#+7,#+1
   \   00000096   A674               STRB     R6,[R4, #+18]
   1730          	if(SysInfo->Hu_Install[HuID] == SYS_LINK_FAIL)	N_HuAlarm[HuID]->Alarm.System.LinkFail = _Alarm;
   \   00000098   9C6B               LDR      R4,[R3, #+56]
   \   0000009A   ....               LDR.N    R5,??DataTable35_6
   \   0000009C   2D68               LDR      R5,[R5, #+0]
   \   0000009E   4519               ADDS     R5,R0,R5
   \   000000A0   6D78               LDRB     R5,[R5, #+1]
   \   000000A2   032D               CMP      R5,#+3
   \   000000A4   A57C               LDRB     R5,[R4, #+18]
   \   000000A6   0CBF               ITE      EQ 
   \   000000A8   45F02005           ORREQ    R5,R5,#0x20
   \   000000AC   05F0DF05           ANDNE    R5,R5,#0xDF
   1731          	else											N_HuAlarm[HuID]->Alarm.System.LinkFail = _Normal;
   \   000000B0   A574               STRB     R5,[R4, #+18]
   1732          
   1733          	// MuOpt
   1734          	N_HuAlarm[HuID]->Alarm.MuOpt.Pd_Alarm		= HuStatus[HuID]->Mu_HdtuSts.Alarm.Pd_Alarm;
   \   000000B2   9C6B               LDR      R4,[R3, #+56]
   \   000000B4   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   000000B8   95F85E52           LDRB     R5,[R5, #+606]
   \   000000BC   E67C               LDRB     R6,[R4, #+19]
   \   000000BE   65F30006           BFI      R6,R5,#+0,#+1
   \   000000C2   E674               STRB     R6,[R4, #+19]
   1735          	N_HuAlarm[HuID]->Alarm.MuOpt.Ld_Alarm		= HuStatus[HuID]->Mu_HdtuSts.Alarm.Ld_Alarm;
   \   000000C4   9B6B               LDR      R3,[R3, #+56]
   \   000000C6   52F82040           LDR      R4,[R2, R0, LSL #+2]
   \   000000CA   94F85E42           LDRB     R4,[R4, #+606]
   \   000000CE   6408               LSRS     R4,R4,#+1
   \   000000D0   DD7C               LDRB     R5,[R3, #+19]
   \   000000D2   64F34105           BFI      R5,R4,#+1,#+1
   \   000000D6   DD74               STRB     R5,[R3, #+19]
   1736          	
   1737          	// Opt
   1738          	for(i=0; i<HDTU_MAX; i++)
   \   000000D8   0023               MOVS     R3,#+0
   \   000000DA   0024               MOVS     R4,#+0
   1739          	{
   1740          		N_HuAlarm[HuID]->Alarm.Opt[i].Pd_Alarm	= HuStatus[HuID]->HdtuSts[i].Alarm.Pd_Alarm;
   \                     ??HuAlarmUpdate_0:
   \   000000DC   01F13805           ADD      R5,R1,#+56
   \   000000E0   55F82050           LDR      R5,[R5, R0, LSL #+2]
   \   000000E4   5D19               ADDS     R5,R3,R5
   \   000000E6   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   000000EA   A619               ADDS     R6,R4,R6
   \   000000EC   96F86862           LDRB     R6,[R6, #+616]
   \   000000F0   2F7D               LDRB     R7,[R5, #+20]
   \   000000F2   66F30007           BFI      R7,R6,#+0,#+1
   \   000000F6   2F75               STRB     R7,[R5, #+20]
   1741          		N_HuAlarm[HuID]->Alarm.Opt[i].Ld_Alarm	= HuStatus[HuID]->HdtuSts[i].Alarm.Ld_Alarm;
   \   000000F8   01F13805           ADD      R5,R1,#+56
   \   000000FC   55F82050           LDR      R5,[R5, R0, LSL #+2]
   \   00000100   5D19               ADDS     R5,R3,R5
   \   00000102   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   00000106   A619               ADDS     R6,R4,R6
   \   00000108   96F86862           LDRB     R6,[R6, #+616]
   \   0000010C   7608               LSRS     R6,R6,#+1
   \   0000010E   2F7D               LDRB     R7,[R5, #+20]
   \   00000110   66F34107           BFI      R7,R6,#+1,#+1
   \   00000114   2F75               STRB     R7,[R5, #+20]
   1742          	}
   \   00000116   5B1C               ADDS     R3,R3,#+1
   \   00000118   0A34               ADDS     R4,R4,#+10
   \   0000011A   102B               CMP      R3,#+16
   \   0000011C   DEDB               BLT.N    ??HuAlarmUpdate_0
   1743          }
   \   0000011E   F1BC               POP      {R0,R4-R7}
   \   00000120   7047               BX       LR               ;; return
   1744          

   \                                 In section .text, align 2, keep-with-next
   1745          void RuAlarmUpdate(SubIDStr DstID)
   1746          {
   \                     RuAlarmUpdate:
   \   00000000   F1B4               PUSH     {R0,R4-R7}
   1747          	INT8U	i=0;
   1748          	INT8U	HuID, BrID, RuID;
   1749          
   1750          	HuID = DstID.HuID;
   \   00000002   9DF80120           LDRB     R2,[SP, #+1]
   1751          	BrID = (DstID.RuID>>4)&0x0F;
   \   00000006   9DF80210           LDRB     R1,[SP, #+2]
   \   0000000A   0809               LSRS     R0,R1,#+4
   1752          	RuID = DstID.RuID&0x0F;
   \   0000000C   01F00F01           AND      R1,R1,#0xF
   1753          
   1754          	// System
   1755          	N_RuAlarm[HuID][BrID]->Alarm.System.DcIn_Alarm		= RuBuf[HuID][BrID][RuID]->RuAlm.DcIn_Alarm;
   \   00000010   9401               LSLS     R4,R2,#+6
   \   00000012   ....               LDR.N    R2,??DataTable35_5
   \   00000014   A218               ADDS     R2,R4,R2
   \   00000016   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000001A   ....               LDR.N    R3,??DataTable35_7
   \   0000001C   E318               ADDS     R3,R4,R3
   \   0000001E   03EB8003           ADD      R3,R3,R0, LSL #+2
   \   00000022   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   00000026   F67B               LDRB     R6,[R6, #+15]
   \   00000028   6F7A               LDRB     R7,[R5, #+9]
   \   0000002A   66F30007           BFI      R7,R6,#+0,#+1
   \   0000002E   6F72               STRB     R7,[R5, #+9]
   1756          	N_RuAlarm[HuID][BrID]->Alarm.System.TempH_Alarm		= RuBuf[HuID][BrID][RuID]->RuAlm.TempH_Alarm;
   \   00000030   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000034   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   00000038   F67B               LDRB     R6,[R6, #+15]
   \   0000003A   3609               LSRS     R6,R6,#+4
   \   0000003C   6F7A               LDRB     R7,[R5, #+9]
   \   0000003E   66F30417           BFI      R7,R6,#+4,#+1
   \   00000042   6F72               STRB     R7,[R5, #+9]
   1757          	N_RuAlarm[HuID][BrID]->Alarm.System.DtuSts_Alarm	= RuBuf[HuID][BrID][RuID]->RuAlm.DtuSts_Alarm;
   \   00000044   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000048   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   0000004C   F67B               LDRB     R6,[R6, #+15]
   \   0000004E   B609               LSRS     R6,R6,#+6
   \   00000050   6F7A               LDRB     R7,[R5, #+9]
   \   00000052   66F38617           BFI      R7,R6,#+6,#+1
   \   00000056   6F72               STRB     R7,[R5, #+9]
   1758          	N_RuAlarm[HuID][BrID]->Alarm.System.DtuLink_Alarm	= RuBuf[HuID][BrID][RuID]->RuAlm.DtuLink_Alarm;
   \   00000058   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000005C   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   00000060   F67B               LDRB     R6,[R6, #+15]
   \   00000062   F609               LSRS     R6,R6,#+7
   \   00000064   6F7A               LDRB     R7,[R5, #+9]
   \   00000066   66F3C717           BFI      R7,R6,#+7,#+1
   \   0000006A   6F72               STRB     R7,[R5, #+9]
   1759          
   1760          	// VSWR
   1761          	N_RuAlarm[HuID][BrID]->Alarm.System.S_VSWR_Alarm	= RuBuf[HuID][BrID][RuID]->RrfuSts[0].Alarm.VSWR_Alarm;
   \   0000006C   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000070   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   00000074   96F83660           LDRB     R6,[R6, #+54]
   \   00000078   3609               LSRS     R6,R6,#+4
   \   0000007A   6F7A               LDRB     R7,[R5, #+9]
   \   0000007C   66F34107           BFI      R7,R6,#+1,#+1
   \   00000080   6F72               STRB     R7,[R5, #+9]
   1762          	N_RuAlarm[HuID][BrID]->Alarm.System.M_VSWR_Alarm	= RuBuf[HuID][BrID][RuID]->RrfuSts[1].Alarm.VSWR_Alarm;
   \   00000082   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   00000086   53F82160           LDR      R6,[R3, R1, LSL #+2]
   \   0000008A   96F86660           LDRB     R6,[R6, #+102]
   \   0000008E   3609               LSRS     R6,R6,#+4
   \   00000090   6F7A               LDRB     R7,[R5, #+9]
   \   00000092   66F38207           BFI      R7,R6,#+2,#+1
   \   00000096   6F72               STRB     R7,[R5, #+9]
   1763          	
   1764          	if(SysInfo->Hu_Ru[HuID].Ru_Install[BrID][RuID] == SYS_LINK_FAIL)	N_RuAlarm[HuID][BrID]->Alarm.System.LinkFail = _Alarm;
   \   00000098   52F82050           LDR      R5,[R2, R0, LSL #+2]
   \   0000009C   ....               LDR.N    R6,??DataTable35_6
   \   0000009E   3668               LDR      R6,[R6, #+0]
   \   000000A0   A419               ADDS     R4,R4,R6
   \   000000A2   04EB8004           ADD      R4,R4,R0, LSL #+2
   \   000000A6   0C19               ADDS     R4,R1,R4
   \   000000A8   647A               LDRB     R4,[R4, #+9]
   \   000000AA   032C               CMP      R4,#+3
   \   000000AC   6C7A               LDRB     R4,[R5, #+9]
   \   000000AE   0CBF               ITE      EQ 
   \   000000B0   44F02004           ORREQ    R4,R4,#0x20
   \   000000B4   04F0DF04           ANDNE    R4,R4,#0xDF
   1765          	else																N_RuAlarm[HuID][BrID]->Alarm.System.LinkFail = _Normal;
   \   000000B8   6C72               STRB     R4,[R5, #+9]
   1766          	
   1767          	// Opt
   1768          	for(i=0; i<RDTU_MAX; i++)
   \   000000BA   0024               MOVS     R4,#+0
   \   000000BC   0025               MOVS     R5,#+0
   1769          	{
   1770          		N_RuAlarm[HuID][BrID]->Alarm.Opt[i].Pd_Alarm		= RuBuf[HuID][BrID][RuID]->RdtuSts[i].Alarm.Pd_Alarm;
   \                     ??RuAlarmUpdate_0:
   \   000000BE   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   000000C2   A619               ADDS     R6,R4,R6
   \   000000C4   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   000000C8   EF19               ADDS     R7,R5,R7
   \   000000CA   BF7D               LDRB     R7,[R7, #+22]
   \   000000CC   96F80AC0           LDRB     R12,[R6, #+10]
   \   000000D0   67F3000C           BFI      R12,R7,#+0,#+1
   \   000000D4   86F80AC0           STRB     R12,[R6, #+10]
   1771          		N_RuAlarm[HuID][BrID]->Alarm.Opt[i].Ld_Alarm		= RuBuf[HuID][BrID][RuID]->RdtuSts[i].Alarm.Ld_Alarm;
   \   000000D8   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   000000DC   A619               ADDS     R6,R4,R6
   \   000000DE   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   000000E2   EF19               ADDS     R7,R5,R7
   \   000000E4   BF7D               LDRB     R7,[R7, #+22]
   \   000000E6   7F08               LSRS     R7,R7,#+1
   \   000000E8   96F80AC0           LDRB     R12,[R6, #+10]
   \   000000EC   67F3410C           BFI      R12,R7,#+1,#+1
   \   000000F0   86F80AC0           STRB     R12,[R6, #+10]
   1772          	}
   \   000000F4   641C               ADDS     R4,R4,#+1
   \   000000F6   0935               ADDS     R5,R5,#+9
   \   000000F8   022C               CMP      R4,#+2
   \   000000FA   E0DB               BLT.N    ??RuAlarmUpdate_0
   1773          
   1774          	// RF
   1775          	for(i=0; i<RFU_MAX; i++)
   \   000000FC   0024               MOVS     R4,#+0
   \   000000FE   0025               MOVS     R5,#+0
   1776          	{
   1777          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].DL_Pll			= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_Pll;
   \                     ??RuAlarmUpdate_1:
   \   00000100   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   00000104   A619               ADDS     R6,R4,R6
   \   00000106   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   0000010A   EF19               ADDS     R7,R5,R7
   \   0000010C   97F83570           LDRB     R7,[R7, #+53]
   \   00000110   96F80CC0           LDRB     R12,[R6, #+12]
   \   00000114   67F3000C           BFI      R12,R7,#+0,#+1
   \   00000118   86F80CC0           STRB     R12,[R6, #+12]
   1778          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].UL_Pll			= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_Pll;
   \   0000011C   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   00000120   A619               ADDS     R6,R4,R6
   \   00000122   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   00000126   EF19               ADDS     R7,R5,R7
   \   00000128   97F83570           LDRB     R7,[R7, #+53]
   \   0000012C   7F08               LSRS     R7,R7,#+1
   \   0000012E   96F80CC0           LDRB     R12,[R6, #+12]
   \   00000132   67F3410C           BFI      R12,R7,#+1,#+1
   \   00000136   86F80CC0           STRB     R12,[R6, #+12]
   1779          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].DL_OutLimitH_Alarm		= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_OutLimitH_Alarm;
   \   0000013A   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   0000013E   A619               ADDS     R6,R4,R6
   \   00000140   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   00000144   EF19               ADDS     R7,R5,R7
   \   00000146   97F83570           LDRB     R7,[R7, #+53]
   \   0000014A   FF08               LSRS     R7,R7,#+3
   \   0000014C   96F80CC0           LDRB     R12,[R6, #+12]
   \   00000150   67F3861C           BFI      R12,R7,#+6,#+1
   \   00000154   86F80CC0           STRB     R12,[R6, #+12]
   1780          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].UL_OverInput		= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_OverInput;
   \   00000158   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   0000015C   A619               ADDS     R6,R4,R6
   \   0000015E   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   00000162   EF19               ADDS     R7,R5,R7
   \   00000164   97F83570           LDRB     R7,[R7, #+53]
   \   00000168   BF09               LSRS     R7,R7,#+6
   \   0000016A   96F80CC0           LDRB     R12,[R6, #+12]
   \   0000016E   67F3820C           BFI      R12,R7,#+2,#+1
   \   00000172   86F80CC0           STRB     R12,[R6, #+12]
   1781          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].Tsync_Alarm		= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.Tsync_Alarm;
   \   00000176   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   0000017A   A619               ADDS     R6,R4,R6
   \   0000017C   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   00000180   EF19               ADDS     R7,R5,R7
   \   00000182   97F83570           LDRB     R7,[R7, #+53]
   \   00000186   FF09               LSRS     R7,R7,#+7
   \   00000188   96F80CC0           LDRB     R12,[R6, #+12]
   \   0000018C   67F3C30C           BFI      R12,R7,#+3,#+1
   \   00000190   86F80CC0           STRB     R12,[R6, #+12]
   1782          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].DL_SD_Alarm		= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.DL_SD_Alarm;
   \   00000194   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   00000198   A619               ADDS     R6,R4,R6
   \   0000019A   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   0000019E   EF19               ADDS     R7,R5,R7
   \   000001A0   97F83670           LDRB     R7,[R7, #+54]
   \   000001A4   96F80CC0           LDRB     R12,[R6, #+12]
   \   000001A8   67F3041C           BFI      R12,R7,#+4,#+1
   \   000001AC   86F80CC0           STRB     R12,[R6, #+12]
   1783          		N_RuAlarm[HuID][BrID]->Alarm.Rf[i].UL_SD_Alarm		= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_SD_Alarm;
   \   000001B0   52F82060           LDR      R6,[R2, R0, LSL #+2]
   \   000001B4   A619               ADDS     R6,R4,R6
   \   000001B6   53F82170           LDR      R7,[R3, R1, LSL #+2]
   \   000001BA   EF19               ADDS     R7,R5,R7
   \   000001BC   97F83670           LDRB     R7,[R7, #+54]
   \   000001C0   7F08               LSRS     R7,R7,#+1
   \   000001C2   96F80CC0           LDRB     R12,[R6, #+12]
   \   000001C6   67F3451C           BFI      R12,R7,#+5,#+1
   \   000001CA   86F80CC0           STRB     R12,[R6, #+12]
   1784          		//N_RuAlarm[HuID][BrID]->Alarm.Rf[i].UL_Fire_Alarm	= RuBuf[HuID][BrID][RuID]->RrfuSts[i].Alarm.UL_Fire_Alarm;
   1785          	}
   \   000001CE   641C               ADDS     R4,R4,#+1
   \   000001D0   3035               ADDS     R5,R5,#+48
   \   000001D2   062C               CMP      R4,#+6
   \   000001D4   94DB               BLT.N    ??RuAlarmUpdate_1
   1786          }
   \   000001D6   F1BC               POP      {R0,R4-R7}
   \   000001D8   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     AlarmReportStartFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   ........           DC32     ret0CheckByte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   ........           DC32     ret0GetByte

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   ........           DC32     udp0PutStr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   ........           DC32     Rnms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   ........           DC32     Snms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   ........           DC32     N_RuAlarm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     RuBootCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   ........           DC32     RuBootFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   ........           DC32     Ethernet0Task

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   ........           DC32     IpSts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   ........           DC32     tTestFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   ........           DC32     udp_rx_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   ........           DC32     rambackup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \   00000000   ........           DC32     Ethernet_Debug

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \   00000000   140C0240           DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \   00000000   ........           DC32     SerPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \   00000000   100C0240           DC32     0x40020c10

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Server\\267\\316 \\300\\374\\310\\257\\n"`:
   \   00000000   536572766572       DC8 "Server\267\316 \300\374\310\257\012"
   \              B7CE20C0FCC8
   \              AF0A00      
   \   0000000F   00                 DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Client\\267\\316 \\300\\374\\310\\257\\n"`:
   \   00000000   436C69656E74       DC8 "Client\267\316 \300\374\310\257\012"
   \              B7CE20C0FCC8
   \              AF0A00      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n Eth0 TX[%d] = ">`:
   \   00000000   0A2045746830       DC8 "\012 Eth0 TX[%d] = "
   \              2054585B2564
   \              5D203D2000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%02x ">`:
   \   00000000   253032782000       DC8 "%02x "
   \   00000006   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "nUSE CHANNEL: %d\\n">`:
   \   00000000   6E5553452043       DC8 "nUSE CHANNEL: %d\012"
   \              48414E4E454C
   \              3A2025640A00
   \   00000012   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GatewayAddr: %d.%d.%d...">`:
   \   00000000   476174657761       DC8 "GatewayAddr: %d.%d.%d.%d\012"
   \              79416464723A
   \              2025642E2564
   \              2E25642E2564
   \              0A00        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MacAddr: %x[%x].%x[%x...">`:
   \   00000000   4D6163416464       DC8 4DH, 61H, 63H, 41H, 64H, 64H, 72H, 3AH
   \              723A        
   \   00000008   2025785B2578       DC8 20H, 25H, 78H, 5BH, 25H, 78H, 5DH, 2EH
   \              5D2E        
   \   00000010   25785B25785D       DC8 25H, 78H, 5BH, 25H, 78H, 5DH, 2EH, 25H
   \              2E25        
   \   00000018   785B25785D2E       DC8 78H, 5BH, 25H, 78H, 5DH, 2EH, 25H, 78H
   \              2578        
   \   00000020   5B25785D2E25       DC8 5BH, 25H, 78H, 5DH, 2EH, 25H, 78H, 5BH
   \              785B        
   \   00000028   25785D2E2578       DC8 25H, 78H, 5DH, 2EH, 25H, 78H, 5BH, 25H
   \              5B25        
   \   00000030   785D0A00           DC8 78H, 5DH, 0AH, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SubnetAddr: %d.%d.%d.%d\\n">`:
   \   00000000   5375626E6574       DC8 "SubnetAddr: %d.%d.%d.%d\012"
   \              416464723A20
   \              25642E25642E
   \              25642E25640A
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "IPAddr: %d.%d.%d.%d\\n">`:
   \   00000000   495041646472       DC8 "IPAddr: %d.%d.%d.%d\012"
   \              3A2025642E25
   \              642E25642E25
   \              640A00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     MuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     Hu_Ser2Ser

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   ........           DC32     Hu_Ser3Ser

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   ........           DC32     Hu_Ser5Ser

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   ........           DC32     Hu_Ser6Ser

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   ........           DC32     MyID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     AlarmReportStartFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   ........           DC32     `?<Constant "\\n Eth0 TX[%d] = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \   00000000   ........           DC32     `?<Constant "%02x ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     SysInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     Sd_Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     HuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     RuBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     MyID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \   00000000   ........           DC32     MuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \   00000000   ........           DC32     RuBootFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \   00000000   ........           DC32     AlarmReportStartFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_4:
   \   00000000   ........           DC32     HuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_5:
   \   00000000   ........           DC32     N_RuAlarm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_6:
   \   00000000   ........           DC32     SysInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_7:
   \   00000000   ........           DC32     RuBuf
   1787          
   1788          
   1789          //=======================================================================//
   1790          // End of Source File
   1791          //=======================================================================//
   1792          
   1793          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     AlarmUpdateAll           16
     Eth0_Control_Hu_Conv    184
     Eth0_Control_Ru_Conv    264
     Ethenet0Init             24
     Ethernet0Task            32
     EthernetClientMode        8
     EthernetInitSet          72
     EthernetPortReset         8
     EthernetServerMode        8
     HuAlarmUpdate            20
     MuAlarmUpdate            12
     N_ProtocolCheck          40
     N_ProtocolComCheck       40
     NmsAlarmAckTx            32
     NmsAlarmReport           16
     NmsBootAlarmReport       40
     NmsDataAckTx             24
     NmsDataCopy              40
     NmsHuAlarmReport         24
     NmsMuAlarmReport         16
     NmsRuAlarmReport         24
     RuAlarmUpdate            20
     eLink_Check               0
     init_sock                32
     ret0CheckByte             8
     ret0GetByte               8
     retCheckByte             32
     retGetByte               16
     retSelect                40
     udp0PutStr               16
     udp0SetAddr               8
     udp0desportcmp            8
     udpPutStr                40
     udpSetAddr               24
     udpdesportcmp             8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     defaultip                                        40
     Eth0B                                            48
     N_RuAlarm                                       512
     UdpPadOnFlag                                      1
     Nms_Crtl_Flag                                     1
     RuBootFlag                                      128
     RuBootCnt                                       128
     udp_rx_buf                                     4096
     AlarmReportStartFlag                           5808
     MuBootCnt
     HuBootFlag
     HuBootCnt
     DstPort
     udp_rx_len
     udp_rx_rcnt
     returnport
     Eth0
     N_MuStatus
     N_HuStatus
     N_RuStatus
     N_MuAlarm
     N_HuAlarm
     DstAddr
     Eth0TaskStk
     N_MuStatusB
     N_HuStatusB
     N_RuStatusB
     N_MuAlarmB
     N_HuAlarmB
     N_RuAlarmB
     returnip
     udp_preAddr
     Ethernet_Debug                                    1
     Ethenet0Init                                    392
     Ethernet0Task                                   306
     retSelect                                       142
     ret0CheckByte                                     8
     ret0GetByte                                       4
     udp0SetAddr                                      10
     udp0PutStr                                       28
     udp0desportcmp                                   10
     retCheckByte                                     80
     retGetByte                                       52
     udpSetAddr                                       80
     udpdesportcmp                                    62
     udpPutStr                                        90
     EthernetServerMode                               50
     EthernetClientMode                               50
     EthernetPortReset                                44
     EthernetInitSet                                 370
     init_sock                                        68
     eLink_Check                                      18
     N_ProtocolCheck                                 362
     N_ProtocolComCheck                              898
     NmsDataAckTx                                    188
     NmsAlarmAckTx                                   264
     NmsDataCopy                                    2072
     Eth0_Control_Hu_Conv                            176
     Eth0_Control_Ru_Conv                            712
     NmsBootAlarmReport                              422
     NmsAlarmReport                                   96
     NmsMuAlarmReport                                196
     NmsHuAlarmReport                                188
     NmsRuAlarmReport                                220
     AlarmUpdateAll                                   96
     MuAlarmUpdate                                   316
     HuAlarmUpdate                                   290
     RuAlarmUpdate                                   474
     ??DataTable24                                     4
     ??DataTable24_1                                   4
     ??DataTable24_2                                   4
     ??DataTable24_3                                   4
     ??DataTable24_4                                   4
     ??DataTable24_5                                   4
     ??DataTable24_6                                   4
     ??DataTable25                                     4
     ??DataTable25_1                                   4
     ??DataTable25_2                                   4
     ??DataTable25_3                                   4
     ??DataTable25_4                                   4
     ??DataTable25_5                                   4
     ??DataTable25_6                                   4
     ??DataTable25_7                                   4
     ??DataTable25_8                                   4
     ??DataTable25_9                                   4
     ??DataTable25_10                                  4
     ?<Constant "Server\267\316 \300\374\310\257\n"   16
     ?<Constant "Client\267\316 \300\374\310\257\n"   16
     ?<Constant "\n Eth0 TX[%d] = ">                  20
     ?<Constant "%02x ">                               8
     ?<Constant "nUSE CHANNEL: %d\n">                 20
     ?<Constant "GatewayAddr: %d.%d.%d...">           28
     ?<Constant "MacAddr: %x[%x].%x[%x...">           52
     ?<Constant "SubnetAddr: %d.%d.%d.%d\n">          28
     ?<Constant "IPAddr: %d.%d.%d.%d\n">              24
     ??DataTable26                                     4
     ??DataTable27                                     4
     ??DataTable27_1                                   4
     ??DataTable27_2                                   4
     ??DataTable27_3                                   4
     ??DataTable27_4                                   4
     ??DataTable29                                     4
     ??DataTable29_1                                   4
     ??DataTable29_2                                   4
     ??DataTable30                                     4
     ??DataTable31                                     4
     ??DataTable32                                     4
     ??DataTable33                                     4
     ??DataTable35                                     4
     ??DataTable35_1                                   4
     ??DataTable35_2                                   4
     ??DataTable35_3                                   4
     ??DataTable35_4                                   4
     ??DataTable35_5                                   4
     ??DataTable35_6                                   4
     ??DataTable35_7                                   4

 
 4 915 bytes in section .bss
 5 808 bytes in section .data
    68 bytes in section .rodata
 9 174 bytes in section .text
 
  9 174 bytes of CODE  memory
     68 bytes of CONST memory
 10 723 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     19/Oct/2013  12:18:56 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\ #
#                    ALC.C                                                    #
#    Command line =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\ #
#                    ALC.C -lC C:\Project\TRIO\2차버전\3.F_W\appl_stm207_2013 #
#                    1019\out\ -o C:\Project\TRIO\2차버전\3.F_W\appl_stm207_2 #
#                    0131019\out\ --endian=little --cpu=Cortex-M3 -e          #
#                    --fpu=None --dlib_config "C:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_2013 #
#                    1019\include\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm2 #
#                    07_20131019\STM32F2xx_StdPeriph_Driver_v1212\ -I         #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\STM32 #
#                    F2xx_StdPeriph_Driver_v1212\inc\ -I                      #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\uC-CP #
#                    U\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019 #
#                    \uC-LIB\ -I C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20 #
#                    131019\uCOS-II\Ports\ -I C:\Project\TRIO\2차버전\3.F_W\a #
#                    ppl_stm207_20131019\uCOS-II\Source\ -I                   #
#                    C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\uC-Pr #
#                    obe\ -Oh --use_c++_inline                                #
#    List file    =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\out\A #
#                    LC.lst                                                   #
#    Object file  =  C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\out\A #
#                    LC.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Project\TRIO\2차버전\3.F_W\appl_stm207_20131019\code\ALC.C
      1           
      2          /*********************************************
      3          * File Name          : alc.c
      4          * Author             :
      5          * Date First Issued  : 10/20/2010
      6          * Description        : This file provides all the port/input/update firmware functions.
      7          * $Revision: 0.1 $
      8          * $Revision date: 2010.10.__
      9          ********************************************************************************/
     10          
     11          #define ALC_C1
     12          
     13          #include "../include/main.h"
     14          
     15          #include <stdlib.h>
     16          
     17          
     18          

   \                                 In section .text, align 2, keep-with-next
     19          INT8S PwrTableOffset(INT8S Temp,INT8U tIndex)
     20          {
   \                     PwrTableOffset:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0C46               MOV      R4,R1
     21          	INT8S DectVal = 0;
   \   00000004   0025               MOVS     R5,#+0
     22          
     23          	__Dnr_Sts *Sts = tDnrSts;
   \   00000006   ........           LDR.W    R0,??DataTable4
   \   0000000A   0068               LDR      R0,[R0, #+0]
     24          ////////////////////////////////////////////////
     25           	if(!Sts->TPTL_OnOff)
   \   0000000C   90F88110           LDRB     R1,[R0, #+129]
   \   00000010   C9B9               CBNZ.N   R1,??PwrTableOffset_0
   \   00000012   8130               ADDS     R0,R0,#+129
   \   00000014   90F93000           LDRSB    R0,[R0, #+48]
   \   00000018   ........           LDR.W    R1,??DataTable4_1
   \   0000001C   4A57               LDRSB    R2,[R1, R5]
   \   0000001E   9042               CMP      R0,R2
   \   00000020   02DA               BGE.N    ??PwrTableOffset_1
     26          	{
     27          		INT8S tindex = 0;
     28          		// Hysterisys !!
     29          			 if(Sts->CurrentTemp >= tempIndexHys)		tempIndexHys = Sts->CurrentTemp;
     30          		else if(Sts->CurrentTemp < (tempIndexHys - 1))	tempIndexHys = Sts->CurrentTemp;
   \   00000022   521E               SUBS     R2,R2,#+1
   \   00000024   9042               CMP      R0,R2
   \   00000026   00DA               BGE.N    ??PwrTableOffset_2
   \                     ??PwrTableOffset_1:
   \   00000028   0870               STRB     R0,[R1, #+0]
     31          
     32          		tindex = TemptoIndex(tempIndexHys);
   \                     ??PwrTableOffset_2:
   \   0000002A   4857               LDRSB    R0,[R1, R5]
   \   0000002C   ........           BL       TemptoIndex
   \   00000030   40B2               SXTB     R0,R0
     33          
     34          		if(tIndex == Index_FwdOutAvgPwr_LTE_A2)
   \   00000032   0F2C               CMP      R4,#+15
   \   00000034   08BF               IT       EQ 
   \   00000036   ........           LDREQ.W  R1,??DataTable4_2
     35          		{
     36          			DectVal = FwdOutPwrTemp_LTE_A2[tindex];
   \   0000003A   03D0               BEQ.N    ??PwrTableOffset_3
     37          
     38          		}
     39          		else if(tIndex == Index_RvsOutPwr_LTE_A2)
   \   0000003C   112C               CMP      R4,#+17
   \   0000003E   02D1               BNE.N    ??PwrTableOffset_0
     40          		{
     41          			DectVal = RvsOutPwrTemp_LTE_A2[tindex];
   \   00000040   ........           LDR.W    R1,??DataTable5
   \                     ??PwrTableOffset_3:
   \   00000044   4556               LDRSB    R5,[R0, R1]
     42          		}
     43          	}
     44          	else
     45          	{
     46          		DectVal 		= 0;
     47          	}
     48          	
     49          	return (DectVal);
   \                     ??PwrTableOffset_0:
   \   00000046   2846               MOV      R0,R5
   \   00000048   32BD               POP      {R1,R4,R5,PC}    ;; return
     50          }
     51          
     52          
     53          

   \                                 In section .text, align 2, keep-with-next
     54          INT16S ReadPwrTableDnr(INT32U AdcValue, INT8U TblID, INT8U roundingoff, INT8U *isminval, INT16S Offset)
     55          {
   \                     ReadPwrTableDnr:
   \   00000000   2DE9F043           PUSH     {R4-R9,LR}
   \   00000004   83B0               SUB      SP,SP,#+12
   \   00000006   0446               MOV      R4,R0
   \   00000008   0D46               MOV      R5,R1
   \   0000000A   9046               MOV      R8,R2
   \   0000000C   9946               MOV      R9,R3
   \   0000000E   BDF92860           LDRSH    R6,[SP, #+40]
     56          	INT8S tIndex = 0;
     57          	INT8S tPwrLocation = 0;
     58          
     59          	tIndex = TableIndex(TblID);
   \   00000012   2846               MOV      R0,R5
   \   00000014   ........           BL       TableIndex
   \   00000018   0746               MOV      R7,R0
     60          	tPwrLocation = PwrTableLocation(TblID);
   \   0000001A   2846               MOV      R0,R5
   \   0000001C   ........           BL       PwrTableLocation
     61          
     62          	return (Dnr0_ReadPwrTable(AdcValue, tIndex, roundingoff, isminval,Offset,tPwrLocation));
   \   00000020   0190               STR      R0,[SP, #+4]
   \   00000022   0096               STR      R6,[SP, #+0]
   \   00000024   4B46               MOV      R3,R9
   \   00000026   4246               MOV      R2,R8
   \   00000028   F9B2               UXTB     R1,R7
   \   0000002A   2046               MOV      R0,R4
   \   0000002C   ........           BL       Dnr0_ReadPwrTable
   \   00000030   03B0               ADD      SP,SP,#+12
   \   00000032   BDE8F083           POP      {R4-R9,PC}       ;; return
     63          }
     64          
     65          

   \                                 In section .text, align 2, keep-with-next
     66          INT16S Dnr0_ReadPwrTable(INT32U AdcValue, INT8U tIndex, INT8U roundingoff, INT8U *isminval, INT16S Offset, INT16S tPwrLocation)
     67          {
   \                     Dnr0_ReadPwrTable:
   \   00000000   2DE9F043           PUSH     {R4-R9,LR}
   \   00000004   BDF91C80           LDRSH    R8,[SP, #+28]
   \   00000008   BDF92050           LDRSH    R5,[SP, #+32]
     68              *isminval = FALSE;
   \   0000000C   0026               MOVS     R6,#+0
   \   0000000E   1E70               STRB     R6,[R3, #+0]
     69          
     70          	INT8U __1dBStep = TRUE;
     71          	INT16S CurrPwr;
     72          
     73          	{
     74          		INT32S i = 0;
     75          		INT32S j = 0;
   \   00000010   0027               MOVS     R7,#+0
     76          
     77          		INT16U *dptr;
     78          		INT32S limit;
     79          		INT32S nsize;
     80          		INT32S rvalx10;
     81          
     82          
     83          //		__OutputTblStr *table = (__OutputTblStr *)&gEE_TABLE.OutputTbl[tIndex];
     84          //		__OutputTblStr *table =(__OutputTblStr *)&vEE_TABLE->OutputTbl[tIndex];
     85          #if 0
     86          		INT16U *dptr = table->Data;
     87          		INT32S limit = table->limit;
     88          		INT32S nsize = table->nsize;
     89          
     90          		INT32S rvalx10 = (limit/2)*10L;
     91          #endif		
     92          
     93          		if(tIndex == Local_FwdOutAvgPwr_2G)
   \   00000012   71B9               CBNZ.N   R1,??Dnr0_ReadPwrTable_0
     94          		{
     95          			dptr = OutputTable->FwdOutAvgPwr_2G.Data;
   \   00000014   ........           LDR.W    R1,??DataTable5_1
   \   00000018   0968               LDR      R1,[R1, #+0]
   \   0000001A   01F1020C           ADD      R12,R1,#+2
     96          			limit = OutputTable->FwdOutAvgPwr_2G.limit;
     97          			nsize = OutputTable->FwdOutAvgPwr_2G.nsize;
   \   0000001E   91F801E0           LDRB     LR,[R1, #+1]
     98          			rvalx10 = (limit/2)*10L;
   \   00000022   8957               LDRSB    R1,[R1, R6]
   \                     ??Dnr0_ReadPwrTable_1:
   \   00000024   01EBD171           ADD      R1,R1,R1, LSR #+31
   \   00000028   4910               ASRS     R1,R1,#+1
   \   0000002A   01EB8101           ADD      R1,R1,R1, LSL #+2
   \   0000002E   4C00               LSLS     R4,R1,#+1
   \   00000030   E4E0               B.N      ??Dnr0_ReadPwrTable_2
     99          		}
    100          		else if(tIndex == Local_RvsOutPwr_2G)
   \                     ??Dnr0_ReadPwrTable_0:
   \   00000032   0129               CMP      R1,#+1
   \   00000034   09D1               BNE.N    ??Dnr0_ReadPwrTable_3
    101          		{
    102          			dptr = OutputTable->RvsOutPwr_2G.Data;
   \   00000036   ........           LDR.W    R1,??DataTable5_1
   \   0000003A   0968               LDR      R1,[R1, #+0]
   \   0000003C   01F27C0C           ADDW     R12,R1,#+124
    103          			limit = OutputTable->RvsOutPwr_2G.limit;
    104          			nsize = OutputTable->RvsOutPwr_2G.nsize;
   \   00000040   91F87BE0           LDRB     LR,[R1, #+123]
    105          			rvalx10 = (limit/2)*10L;
   \   00000044   91F97A10           LDRSB    R1,[R1, #+122]
   \   00000048   ECE7               B.N      ??Dnr0_ReadPwrTable_1
    106          		}
    107          		else if(tIndex == Local_FwdOutAvgPwr_LTE)
   \                     ??Dnr0_ReadPwrTable_3:
   \   0000004A   0229               CMP      R1,#+2
   \   0000004C   09D1               BNE.N    ??Dnr0_ReadPwrTable_4
    108          		{
    109          			dptr = OutputTable->FwdOutAvgPwr_LTE.Data;
   \   0000004E   ........           LDR.W    R1,??DataTable5_1
   \   00000052   0968               LDR      R1,[R1, #+0]
   \   00000054   01F2F60C           ADDW     R12,R1,#+246
    110          			limit = OutputTable->FwdOutAvgPwr_LTE.limit;
    111          			nsize = OutputTable->FwdOutAvgPwr_LTE.nsize;
   \   00000058   91F8F5E0           LDRB     LR,[R1, #+245]
    112          			rvalx10 = (limit/2)*10L;
   \   0000005C   91F9F410           LDRSB    R1,[R1, #+244]
   \   00000060   E0E7               B.N      ??Dnr0_ReadPwrTable_1
    113          		}	
    114          		else if(tIndex == Local_RvsInPwr_LTE)
   \                     ??Dnr0_ReadPwrTable_4:
   \   00000062   0329               CMP      R1,#+3
   \   00000064   09D1               BNE.N    ??Dnr0_ReadPwrTable_5
    115          		{
    116          			dptr = OutputTable->RvsInPwr_LTE.Data;
   \   00000066   ........           LDR.W    R1,??DataTable5_1
   \   0000006A   0968               LDR      R1,[R1, #+0]
   \   0000006C   01F2701C           ADDW     R12,R1,#+368
    117          			limit = OutputTable->RvsInPwr_LTE.limit;
    118          			nsize = OutputTable->RvsInPwr_LTE.nsize;
   \   00000070   91F86FE1           LDRB     LR,[R1, #+367]
    119          			rvalx10 = (limit/2)*10L;
   \   00000074   91F96E11           LDRSB    R1,[R1, #+366]
   \   00000078   D4E7               B.N      ??Dnr0_ReadPwrTable_1
    120          		}	
    121          
    122          		else if(tIndex == Local_RvsOutPwr_LTE)
   \                     ??Dnr0_ReadPwrTable_5:
   \   0000007A   0429               CMP      R1,#+4
   \   0000007C   09D1               BNE.N    ??Dnr0_ReadPwrTable_6
    123          		{
    124          			dptr = OutputTable->RvsOutPwr_LTE.Data;
   \   0000007E   ........           LDR.W    R1,??DataTable5_1
   \   00000082   0968               LDR      R1,[R1, #+0]
   \   00000084   01F2EA1C           ADDW     R12,R1,#+490
    125          			limit = OutputTable->RvsOutPwr_LTE.limit;
    126          			nsize = OutputTable->RvsOutPwr_LTE.nsize;
   \   00000088   91F8E9E1           LDRB     LR,[R1, #+489]
    127          			rvalx10 = (limit/2)*10L;
   \   0000008C   91F9E811           LDRSB    R1,[R1, #+488]
   \   00000090   C8E7               B.N      ??Dnr0_ReadPwrTable_1
    128          		}	
    129          		else if(tIndex == Local_FwdInPwr_CDMALTE)
   \                     ??Dnr0_ReadPwrTable_6:
   \   00000092   0529               CMP      R1,#+5
   \   00000094   09D1               BNE.N    ??Dnr0_ReadPwrTable_7
    130          		{
    131          			dptr = OutputTable->FwdInPwr_CDMALTE.Data;
   \   00000096   ........           LDR.W    R1,??DataTable5_1
   \   0000009A   0968               LDR      R1,[R1, #+0]
   \   0000009C   01F2642C           ADDW     R12,R1,#+612
    132          			limit = OutputTable->FwdInPwr_CDMALTE.limit;
    133          			nsize = OutputTable->FwdInPwr_CDMALTE.nsize;
   \   000000A0   91F863E2           LDRB     LR,[R1, #+611]
    134          			rvalx10 = (limit/2)*10L;
   \   000000A4   91F96212           LDRSB    R1,[R1, #+610]
   \   000000A8   BCE7               B.N      ??Dnr0_ReadPwrTable_1
    135          		}	
    136           		else if(tIndex == Local_FwdOutAvgPwr_CDMALTE)
   \                     ??Dnr0_ReadPwrTable_7:
   \   000000AA   0629               CMP      R1,#+6
   \   000000AC   0FD1               BNE.N    ??Dnr0_ReadPwrTable_8
    137          		{
    138          			dptr = OutputTable->FwdOutAvgPwr_CDMALTE.Data;
   \   000000AE   ........           LDR.W    R1,??DataTable5_1
   \   000000B2   0968               LDR      R1,[R1, #+0]
   \   000000B4   01F2DE2C           ADDW     R12,R1,#+734
    139          			limit = OutputTable->FwdOutAvgPwr_CDMALTE.limit;
    140          			nsize = OutputTable->FwdOutAvgPwr_CDMALTE.nsize;
   \   000000B8   91F8DDE2           LDRB     LR,[R1, #+733]
    141          			rvalx10 = (limit/2)*10L;
   \   000000BC   91F9DC12           LDRSB    R1,[R1, #+732]
   \                     ??Dnr0_ReadPwrTable_9:
   \   000000C0   01EBD171           ADD      R1,R1,R1, LSR #+31
   \   000000C4   4910               ASRS     R1,R1,#+1
   \   000000C6   01EB8101           ADD      R1,R1,R1, LSL #+2
   \   000000CA   4C00               LSLS     R4,R1,#+1
   \   000000CC   96E0               B.N      ??Dnr0_ReadPwrTable_2
    142          		}
    143          		else if(tIndex == Local_RvsInPwr_CDMALTE)
   \                     ??Dnr0_ReadPwrTable_8:
   \   000000CE   0729               CMP      R1,#+7
   \   000000D0   09D1               BNE.N    ??Dnr0_ReadPwrTable_10
    144          		{
    145          			dptr = OutputTable->RvsInPwr_CDMALTE.Data;
   \   000000D2   ........           LDR.W    R1,??DataTable5_1
   \   000000D6   0968               LDR      R1,[R1, #+0]
   \   000000D8   01F2583C           ADDW     R12,R1,#+856
    146          			limit = OutputTable->RvsInPwr_CDMALTE.limit;
    147          			nsize = OutputTable->RvsInPwr_CDMALTE.nsize;
   \   000000DC   91F857E3           LDRB     LR,[R1, #+855]
    148          			rvalx10 = (limit/2)*10L;
   \   000000E0   91F95613           LDRSB    R1,[R1, #+854]
   \   000000E4   9EE7               B.N      ??Dnr0_ReadPwrTable_1
    149          		}	
    150          		else if(tIndex == Local_RvsOutPwr_CDMALTE)
   \                     ??Dnr0_ReadPwrTable_10:
   \   000000E6   0829               CMP      R1,#+8
   \   000000E8   09D1               BNE.N    ??Dnr0_ReadPwrTable_11
    151          		{
    152          			dptr = OutputTable->RvsOutPwr_CDMALTE.Data;
   \   000000EA   ........           LDR.W    R1,??DataTable5_1
   \   000000EE   0968               LDR      R1,[R1, #+0]
   \   000000F0   01F2D23C           ADDW     R12,R1,#+978
    153          			limit = OutputTable->RvsOutPwr_CDMALTE.limit;
    154          			nsize = OutputTable->RvsOutPwr_CDMALTE.nsize;
   \   000000F4   91F8D1E3           LDRB     LR,[R1, #+977]
    155          			rvalx10 = (limit/2)*10L;
   \   000000F8   91F9D013           LDRSB    R1,[R1, #+976]
   \   000000FC   92E7               B.N      ??Dnr0_ReadPwrTable_1
    156          		}	
    157          
    158          		else if(tIndex == Local_FwdOutAvgPwr_LTE_A2)
   \                     ??Dnr0_ReadPwrTable_11:
   \   000000FE   0929               CMP      R1,#+9
   \   00000100   09D1               BNE.N    ??Dnr0_ReadPwrTable_12
    159          		{
    160          			dptr = OutputTable->FwdOutAvgPwr_LTE_A2.Data;
   \   00000102   ........           LDR.W    R1,??DataTable5_1
   \   00000106   0968               LDR      R1,[R1, #+0]
   \   00000108   01F24C4C           ADDW     R12,R1,#+1100
    161          			limit = OutputTable->FwdOutAvgPwr_LTE_A2.limit;
    162          			nsize = OutputTable->FwdOutAvgPwr_LTE_A2.nsize;
   \   0000010C   91F84BE4           LDRB     LR,[R1, #+1099]
    163          			rvalx10 = (limit/2)*10L;
   \   00000110   91F94A14           LDRSB    R1,[R1, #+1098]
   \   00000114   86E7               B.N      ??Dnr0_ReadPwrTable_1
    164          		}	
    165          		else if(tIndex == Local_RvsOutPwr_LTE_A2)
   \                     ??Dnr0_ReadPwrTable_12:
   \   00000116   0A29               CMP      R1,#+10
   \   00000118   09D1               BNE.N    ??Dnr0_ReadPwrTable_13
    166          		{
    167          			dptr = OutputTable->RvsOutPwr_LTE_A2.Data;
   \   0000011A   ........           LDR.W    R1,??DataTable5_1
   \   0000011E   0968               LDR      R1,[R1, #+0]
   \   00000120   01F2C64C           ADDW     R12,R1,#+1222
    168          			limit = OutputTable->RvsOutPwr_LTE_A2.limit;
    169          			nsize = OutputTable->RvsOutPwr_LTE_A2.nsize;
   \   00000124   91F8C5E4           LDRB     LR,[R1, #+1221]
    170          			rvalx10 = (limit/2)*10L;
   \   00000128   91F9C414           LDRSB    R1,[R1, #+1220]
   \   0000012C   C8E7               B.N      ??Dnr0_ReadPwrTable_9
    171          		}
    172           		else if(tIndex == Local_FwdInPwr_LTE_A)
   \                     ??Dnr0_ReadPwrTable_13:
   \   0000012E   0B29               CMP      R1,#+11
   \   00000130   09D1               BNE.N    ??Dnr0_ReadPwrTable_14
    173          		{
    174          			dptr = OutputTable->FwdInPwr_LTE_A.Data;
   \   00000132   ........           LDR.W    R1,??DataTable5_1
   \   00000136   0968               LDR      R1,[R1, #+0]
   \   00000138   01F2405C           ADDW     R12,R1,#+1344
    175          			limit = OutputTable->FwdInPwr_LTE_A.limit;
    176          			nsize = OutputTable->FwdInPwr_LTE_A.nsize;
   \   0000013C   91F83FE5           LDRB     LR,[R1, #+1343]
    177          			rvalx10 = (limit/2)*10L;
   \   00000140   91F93E15           LDRSB    R1,[R1, #+1342]
   \   00000144   6EE7               B.N      ??Dnr0_ReadPwrTable_1
    178          		}
    179          		else if(tIndex == Local_FwdOutAvgPwr_LTE_A)
   \                     ??Dnr0_ReadPwrTable_14:
   \   00000146   0C29               CMP      R1,#+12
   \   00000148   09D1               BNE.N    ??Dnr0_ReadPwrTable_15
    180          		{
    181          			dptr = OutputTable->FwdOutAvgPwr_LTE_A.Data;
   \   0000014A   ........           LDR.W    R1,??DataTable5_1
   \   0000014E   0968               LDR      R1,[R1, #+0]
   \   00000150   01F2BA5C           ADDW     R12,R1,#+1466
    182          			limit = OutputTable->FwdOutAvgPwr_LTE_A.limit;
    183          			nsize = OutputTable->FwdOutAvgPwr_LTE_A.nsize;
   \   00000154   91F8B9E5           LDRB     LR,[R1, #+1465]
    184          			rvalx10 = (limit/2)*10L;
   \   00000158   91F9B815           LDRSB    R1,[R1, #+1464]
   \   0000015C   62E7               B.N      ??Dnr0_ReadPwrTable_1
    185          		}	
    186          		else if(tIndex == Local_RvsInPwr_LTE_A)
   \                     ??Dnr0_ReadPwrTable_15:
   \   0000015E   0D29               CMP      R1,#+13
   \   00000160   09D1               BNE.N    ??Dnr0_ReadPwrTable_16
    187          		{
    188          			dptr = OutputTable->RvsInPwr_LTE_A.Data;
   \   00000162   ........           LDR.W    R1,??DataTable5_1
   \   00000166   0968               LDR      R1,[R1, #+0]
   \   00000168   01F2346C           ADDW     R12,R1,#+1588
    189          			limit = OutputTable->RvsInPwr_LTE_A.limit;
    190          			nsize = OutputTable->RvsInPwr_LTE_A.nsize;
   \   0000016C   91F833E6           LDRB     LR,[R1, #+1587]
    191          			rvalx10 = (limit/2)*10L;
   \   00000170   91F93216           LDRSB    R1,[R1, #+1586]
   \   00000174   56E7               B.N      ??Dnr0_ReadPwrTable_1
    192          		}	
    193          		else if(tIndex == Local_RvsOutPwr_LTE_A)
   \                     ??Dnr0_ReadPwrTable_16:
   \   00000176   0E29               CMP      R1,#+14
   \   00000178   09D1               BNE.N    ??Dnr0_ReadPwrTable_17
    194          		{
    195          			dptr = OutputTable->RvsOutPwr_LTE_A.Data;
   \   0000017A   ........           LDR.W    R1,??DataTable5_1
   \   0000017E   0968               LDR      R1,[R1, #+0]
   \   00000180   01F2AE6C           ADDW     R12,R1,#+1710
    196          			limit = OutputTable->RvsOutPwr_LTE_A.limit;
    197          			nsize = OutputTable->RvsOutPwr_LTE_A.nsize;
   \   00000184   91F8ADE6           LDRB     LR,[R1, #+1709]
    198          			rvalx10 = (limit/2)*10L;
   \   00000188   91F9AC16           LDRSB    R1,[R1, #+1708]
   \   0000018C   4AE7               B.N      ??Dnr0_ReadPwrTable_1
    199          		}	
    200          		else if(tIndex == Local_Rvs1InPwr_LTE_A)
   \                     ??Dnr0_ReadPwrTable_17:
   \   0000018E   0F29               CMP      R1,#+15
   \   00000190   09D1               BNE.N    ??Dnr0_ReadPwrTable_18
    201          		{
    202          			dptr = OutputTable->Rvs1InPwr_LTE_A.Data;
   \   00000192   ........           LDR.W    R1,??DataTable5_1
   \   00000196   0968               LDR      R1,[R1, #+0]
   \   00000198   01F2287C           ADDW     R12,R1,#+1832
    203          			limit = OutputTable->Rvs1InPwr_LTE_A.limit;
    204          			nsize = OutputTable->Rvs1InPwr_LTE_A.nsize;
   \   0000019C   91F827E7           LDRB     LR,[R1, #+1831]
    205          			rvalx10 = (limit/2)*10L;
   \   000001A0   91F92617           LDRSB    R1,[R1, #+1830]
   \   000001A4   3EE7               B.N      ??Dnr0_ReadPwrTable_1
    206          		} 
    207          		else if(tIndex == Local_FwdInPwr_3G)
   \                     ??Dnr0_ReadPwrTable_18:
   \   000001A6   1029               CMP      R1,#+16
   \   000001A8   09D1               BNE.N    ??Dnr0_ReadPwrTable_19
    208          		{
    209          			dptr = OutputTable->FwdInPwr_3G.Data;
   \   000001AA   ........           LDR.W    R1,??DataTable5_1
   \   000001AE   0968               LDR      R1,[R1, #+0]
   \   000001B0   01F2A27C           ADDW     R12,R1,#+1954
    210          			limit = OutputTable->FwdInPwr_3G.limit;
    211          			nsize = OutputTable->FwdInPwr_3G.nsize;
   \   000001B4   91F8A1E7           LDRB     LR,[R1, #+1953]
    212          			rvalx10 = (limit/2)*10L;
   \   000001B8   91F9A017           LDRSB    R1,[R1, #+1952]
   \   000001BC   32E7               B.N      ??Dnr0_ReadPwrTable_1
    213          		}
    214          		else if(tIndex == Local_FwdOutAvgPwr_3G)
   \                     ??Dnr0_ReadPwrTable_19:
   \   000001BE   1129               CMP      R1,#+17
   \   000001C0   09D1               BNE.N    ??Dnr0_ReadPwrTable_20
    215          		{
    216          			dptr = OutputTable->FwdOutAvgPwr_3G.Data;
   \   000001C2   ........           LDR.W    R1,??DataTable5_1
   \   000001C6   0968               LDR      R1,[R1, #+0]
   \   000001C8   01F61C0C           ADDW     R12,R1,#+2076
    217          			limit = OutputTable->FwdOutAvgPwr_3G.limit;
    218          			nsize = OutputTable->FwdOutAvgPwr_3G.nsize;
   \   000001CC   91F81BE8           LDRB     LR,[R1, #+2075]
    219          			rvalx10 = (limit/2)*10L;
   \   000001D0   91F91A18           LDRSB    R1,[R1, #+2074]
   \   000001D4   26E7               B.N      ??Dnr0_ReadPwrTable_1
    220          		}	
    221          		else if(tIndex == Local_RvsInPwr_LTE_A)
    222          		{
    223          			dptr = OutputTable->RvsInPwr_3G.Data;
    224          			limit = OutputTable->RvsInPwr_3G.limit;
    225          			nsize = OutputTable->RvsInPwr_3G.nsize;
    226          			rvalx10 = (limit/2)*10L;
    227          		}	
    228          		else if(tIndex == Local_RvsOutPwr_3G)
   \                     ??Dnr0_ReadPwrTable_20:
   \   000001D6   1329               CMP      R1,#+19
   \   000001D8   10D1               BNE.N    ??Dnr0_ReadPwrTable_2
    229          		{
    230          			dptr = OutputTable->RvsOutPwr_3G.Data;
   \   000001DA   ........           LDR.W    R1,??DataTable5_1
   \   000001DE   0968               LDR      R1,[R1, #+0]
   \   000001E0   01F6101C           ADDW     R12,R1,#+2320
    231          			limit = OutputTable->RvsOutPwr_3G.limit;
    232          			nsize = OutputTable->RvsOutPwr_3G.nsize;
   \   000001E4   91F80FE9           LDRB     LR,[R1, #+2319]
    233          			rvalx10 = (limit/2)*10L;
   \   000001E8   91F90E19           LDRSB    R1,[R1, #+2318]
   \   000001EC   1AE7               B.N      ??Dnr0_ReadPwrTable_1
    234          		}	
    235          		 
    236          
    237          
    238          		for(i = 0; i < nsize && i < OutputTBL_Size; i++)
   \                     ??Dnr0_ReadPwrTable_21:
   \   000001EE   3C2E               CMP      R6,#+60
   \   000001F0   07DA               BGE.N    ??Dnr0_ReadPwrTable_22
    239          		{
    240          			if(AdcValue >= dptr[i]) break;
   \   000001F2   3CF81610           LDRH     R1,[R12, R6, LSL #+1]
   \   000001F6   8842               CMP      R0,R1
   \   000001F8   0BD2               BCS.N    ??Dnr0_ReadPwrTable_23
    241          		}
   \   000001FA   761C               ADDS     R6,R6,#+1
   \                     ??Dnr0_ReadPwrTable_2:
   \   000001FC   7645               CMP      R6,LR
   \   000001FE   F6DB               BLT.N    ??Dnr0_ReadPwrTable_21
    242          
    243          		if(i == nsize || i == OutputTBL_Size)
   \   00000200   01D0               BEQ.N    ??Dnr0_ReadPwrTable_24
   \                     ??Dnr0_ReadPwrTable_22:
   \   00000202   3C2E               CMP      R6,#+60
   \   00000204   05D1               BNE.N    ??Dnr0_ReadPwrTable_23
    244          		{
    245          			if(nsize != 0) i--;
   \                     ??Dnr0_ReadPwrTable_24:
   \   00000206   BEF1000F           CMP      LR,#+0
   \   0000020A   18BF               IT       NE 
   \   0000020C   761E               SUBNE    R6,R6,#+1
    246          			*isminval = TRUE;
   \   0000020E   0121               MOVS     R1,#+1
   \   00000210   1970               STRB     R1,[R3, #+0]
    247          		}
    248          
    249          		if(__1dBStep)
    250          		{
    251          			rvalx10 = rvalx10 - (i*10L);
   \                     ??Dnr0_ReadPwrTable_23:
   \   00000212   06EB8601           ADD      R1,R6,R6, LSL #+2
   \   00000216   A4EB4101           SUB      R1,R4,R1, LSL #+1
    252          		}
    253          		else
    254          		{
    255          			rvalx10 = rvalx10 - (i*5L);
    256          		}
    257          
    258          		if(i != 0 && *isminval == FALSE && __1dBStep == TRUE )
   \   0000021A   66B3               CBZ.N    R6,??Dnr0_ReadPwrTable_25
   \   0000021C   1C78               LDRB     R4,[R3, #+0]
   \   0000021E   5FEAC47E           LSLS     LR,R4,#+31
   \   00000222   28D4               BMI.N    ??Dnr0_ReadPwrTable_25
    259          		{
    260          			INT32U stepx10 = ((dptr[i-1] - dptr[i])*10L)/10L;
   \   00000224   0CEB4604           ADD      R4,R12,R6, LSL #+1
   \   00000228   34F802EC           LDRH     LR,[R4, #-2]
   \   0000022C   3CF81640           LDRH     R4,[R12, R6, LSL #+1]
   \   00000230   AEEB040E           SUB      LR,LR,R4
   \   00000234   0EEB8E04           ADD      R4,LR,LR, LSL #+2
   \   00000238   4FEA440E           LSL      LR,R4,#+1
   \   0000023C   0A24               MOVS     R4,#+10
   \   0000023E   9EFBF4FE           SDIV     LR,LR,R4
    261          			INT32U tmp;
    262          			
    263          			for(j = 0; j < 10; j++)
   \   00000242   00EB8004           ADD      R4,R0,R0, LSL #+2
   \   00000246   6000               LSLS     R0,R4,#+1
    264          			{
    265          				tmp = (dptr[i]*10 + j*stepx10);
    266          				if(tmp >= (AdcValue*10L)) break;			
   \                     ??Dnr0_ReadPwrTable_26:
   \   00000248   3CF81640           LDRH     R4,[R12, R6, LSL #+1]
   \   0000024C   04EB8409           ADD      R9,R4,R4, LSL #+2
   \   00000250   4FEA4904           LSL      R4,R9,#+1
   \   00000254   0EFB0744           MLA      R4,LR,R7,R4
   \   00000258   8442               CMP      R4,R0
   \   0000025A   02D2               BCS.N    ??Dnr0_ReadPwrTable_27
    267          			}		
   \   0000025C   7F1C               ADDS     R7,R7,#+1
   \   0000025E   0A2F               CMP      R7,#+10
   \   00000260   F2DB               BLT.N    ??Dnr0_ReadPwrTable_26
    268          			if(roundingoff == TRUE)// 반올림..
   \                     ??Dnr0_ReadPwrTable_27:
   \   00000262   012A               CMP      R2,#+1
   \   00000264   07D1               BNE.N    ??Dnr0_ReadPwrTable_25
    269          			{
    270          				     if(j >= 8)  j = 10;
   \   00000266   082F               CMP      R7,#+8
   \   00000268   A8BF               IT       GE 
   \   0000026A   0A27               MOVGE    R7,#+10
   \   0000026C   03DA               BGE.N    ??Dnr0_ReadPwrTable_25
    271          				else if(j >= 3)  j = 5;
   \   0000026E   032F               CMP      R7,#+3
   \   00000270   ACBF               ITE      GE 
   \   00000272   0527               MOVGE    R7,#+5
   \   00000274   0027               MOVLT    R7,#+0
    272          				else			 j = 0;
    273          			}		
    274          		}
    275          		
    276          		CurrPwr = (rvalx10 + j)*2L;
   \                     ??Dnr0_ReadPwrTable_25:
   \   00000276   7818               ADDS     R0,R7,R1
   \   00000278   4004               LSLS     R0,R0,#+17
   \   0000027A   0014               ASRS     R0,R0,#+16
    277          
    278          		if( tPwrLocation == _FwdOutPwr_Location)		
   \   0000027C   4DB9               CBNZ.N   R5,??Dnr0_ReadPwrTable_28
    279          		{
    280          			if(!*isminval)
   \   0000027E   1978               LDRB     R1,[R3, #+0]
   \   00000280   C907               LSLS     R1,R1,#+31
   \   00000282   04D4               BMI.N    ??Dnr0_ReadPwrTable_29
    281          			{
    282          				CurrPwr = CurrPwr/10L +  Offset;
   \                     ??Dnr0_ReadPwrTable_30:
   \   00000284   0A21               MOVS     R1,#+10
   \   00000286   90FBF1F0           SDIV     R0,R0,R1
   \   0000028A   4044               ADD      R0,R8,R0
   \   0000028C   1DE0               B.N      ??Dnr0_ReadPwrTable_31
    283          			}
    284          			else
    285          			{
    286          				CurrPwr =  LowOutPwrLmt;  // LowPwrLmt;
   \                     ??Dnr0_ReadPwrTable_29:
   \   0000028E   0020               MOVS     R0,#+0
   \   00000290   1BE0               B.N      ??Dnr0_ReadPwrTable_31
    287          			}
    288          		}
    289          		else if( tPwrLocation == _FwdInPwr_Location)
   \                     ??Dnr0_ReadPwrTable_28:
   \   00000292   012D               CMP      R5,#+1
   \   00000294   02D1               BNE.N    ??Dnr0_ReadPwrTable_32
    290          		{
    291          			if(!*isminval)
   \   00000296   0BE0               B.N      ??Dnr0_ReadPwrTable_33
    292          			{
    293          				CurrPwr = CurrPwr/10L +  Offset;
    294          				CurrPwr = abs(CurrPwr/2);
    295          			}
    296          			else
    297          			{
    298          				CurrPwr =  NoSignal;
   \                     ??Dnr0_ReadPwrTable_34:
   \   00000298   5A20               MOVS     R0,#+90
   \   0000029A   16E0               B.N      ??Dnr0_ReadPwrTable_31
    299          			}
    300          		}
    301          		else if( tPwrLocation == _RvsOutPwr_Location)		
   \                     ??Dnr0_ReadPwrTable_32:
   \   0000029C   022D               CMP      R5,#+2
   \   0000029E   05D1               BNE.N    ??Dnr0_ReadPwrTable_35
    302          		{
    303          			if(!*isminval)
   \   000002A0   1978               LDRB     R1,[R3, #+0]
   \   000002A2   C907               LSLS     R1,R1,#+31
   \   000002A4   EED5               BPL.N    ??Dnr0_ReadPwrTable_30
    304          			{
    305          				CurrPwr = CurrPwr/10L +  Offset;
    306          			}
    307          			else
    308          			{
    309          				CurrPwr =  LowPwrLmt;
   \   000002A6   6FF07700           MVN      R0,#+119
   \   000002AA   0EE0               B.N      ??Dnr0_ReadPwrTable_31
    310          			}
    311          		}
    312          		else if( tPwrLocation == _RvsInPwr_Location)		
   \                     ??Dnr0_ReadPwrTable_35:
   \   000002AC   032D               CMP      R5,#+3
   \   000002AE   0CD1               BNE.N    ??Dnr0_ReadPwrTable_31
    313          		{
    314          			if(!*isminval)
   \                     ??Dnr0_ReadPwrTable_33:
   \   000002B0   1978               LDRB     R1,[R3, #+0]
   \   000002B2   C907               LSLS     R1,R1,#+31
   \   000002B4   F0D4               BMI.N    ??Dnr0_ReadPwrTable_34
    315          			{
    316          				CurrPwr = CurrPwr/10L +  Offset;
    317          				CurrPwr = abs(CurrPwr/2);
   \   000002B6   0A21               MOVS     R1,#+10
   \   000002B8   90FBF1F0           SDIV     R0,R0,R1
   \   000002BC   4044               ADD      R0,R8,R0
   \   000002BE   00B2               SXTH     R0,R0
   \   000002C0   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   000002C4   4010               ASRS     R0,R0,#+1
   \   000002C6   48BF               IT       MI 
   \   000002C8   4042               RSBMI    R0,R0,#+0
    318          			}
    319          			else
    320          			{
    321          				CurrPwr =  NoSignal;
    322          			}
    323          		}
    324          
    325          		return CurrPwr;
   \                     ??Dnr0_ReadPwrTable_31:
   \   000002CA   00B2               SXTH     R0,R0
   \   000002CC   BDE8F083           POP      {R4-R9,PC}       ;; return
    326          	}
    327          }
    328          
    329          
    330          

   \                                 In section .text, align 2, keep-with-next
    331          INT8S AGCCheck(INT32S tmpx10,INT32S tlimitLow,INT8S tmpOnOff, INT8S *tmpALCAttn, INT8U AttMax, INT8U AttMin,INT8S AmpOnOff, INT8U Mode)
    332          {
   \                     AGCCheck:
   \   00000000   F0B4               PUSH     {R4-R7}
   \   00000002   049F               LDR      R7,[SP, #+16]
   \   00000004   059E               LDR      R6,[SP, #+20]
   \   00000006   9DF918C0           LDRSB    R12,[SP, #+24]
   \   0000000A   079D               LDR      R5,[SP, #+28]
    333          	INT32S gap;
    334          	INT16S tmpTotAttn;
    335          
    336          	tmpTotAttn = *tmpALCAttn;
   \   0000000C   93F90040           LDRSB    R4,[R3, #+0]
    337          
    338          
    339          	if(AmpOnOff == Disable) return tmpTotAttn;
   \   00000010   BCF1010F           CMP      R12,#+1
   \   00000014   08BF               IT       EQ 
   \   00000016   2046               MOVEQ    R0,R4
   \   00000018   38D0               BEQ.N    ??AGCCheck_0
    340          	if(tmpOnOff != Enable) return FALSE;
   \   0000001A   0AB1               CBZ.N    R2,??AGCCheck_1
   \                     ??AGCCheck_2:
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   35E0               B.N      ??AGCCheck_0
    341          	
    342          	gap = tmpx10 - tlimitLow;
   \                     ??AGCCheck_1:
   \   00000020   401A               SUBS     R0,R0,R1
    343          
    344          	if(abs(gap) <= 1) return FALSE;  //+/- 0.5dB
   \   00000022   0100               MOVS     R1,R0
   \   00000024   48BF               IT       MI 
   \   00000026   4942               RSBMI    R1,R1,#+0
   \   00000028   0229               CMP      R1,#+2
   \   0000002A   F7DB               BLT.N    ??AGCCheck_2
    345          
    346          	if(Mode ==_AGCMode)
   \   0000002C   012D               CMP      R5,#+1
   \   0000002E   0FD1               BNE.N    ??AGCCheck_3
    347          	{
    348          		if(gap > 0)
   \   00000030   0128               CMP      R0,#+1
   \   00000032   03DB               BLT.N    ??AGCCheck_4
    349          		{
    350          			  if(gap >=  2L)	gap = gap;
   \                     ??AGCCheck_5:
   \   00000034   0228               CMP      R0,#+2
   \   00000036   08DA               BGE.N    ??AGCCheck_6
    351          			else				gap = 1L;
   \   00000038   0120               MOVS     R0,#+1
   \   0000003A   06E0               B.N      ??AGCCheck_6
    352          		}
    353          		else
    354          		{
    355          			if(gap <= -2L)			gap = -2L;
   \                     ??AGCCheck_4:
   \   0000003C   10F1010F           CMN      R0,#+1
   \   00000040   B4BF               ITE      LT 
   \   00000042   6FF00100           MVNLT    R0,#+1
   \   00000046   4FF0FF30           MOVGE    R0,#-1
    356          			else					gap = -1L;
    357          		}
    358          		
    359          		tmpTotAttn	+= gap;
   \                     ??AGCCheck_6:
   \   0000004A   0419               ADDS     R4,R0,R4
   \   0000004C   24B2               SXTH     R4,R4
   \   0000004E   15E0               B.N      ??AGCCheck_7
    360          	}
    361          	
    362          	if(Mode ==_ALCMode)
   \                     ??AGCCheck_3:
   \   00000050   8DB9               CBNZ.N   R5,??AGCCheck_8
    363          	{
    364          		if(gap > 0)
   \   00000052   0128               CMP      R0,#+1
   \   00000054   03DB               BLT.N    ??AGCCheck_9
    365          		{
    366          			if(gap >=  8L)			gap = 20L;
   \   00000056   0828               CMP      R0,#+8
   \   00000058   ECDB               BLT.N    ??AGCCheck_5
   \   0000005A   1420               MOVS     R0,#+20
   \   0000005C   F5E7               B.N      ??AGCCheck_6
    367          			else if(gap >=  2L)		gap = gap;
    368          			else					gap = 1L;
    369          		}
    370          		else
    371          		{
    372          				  if(gap <= -10L)	gap = -10L;
   \                     ??AGCCheck_9:
   \   0000005E   10F1090F           CMN      R0,#+9
   \   00000062   B8BF               IT       LT 
   \   00000064   6FF00900           MVNLT    R0,#+9
   \   00000068   EFDB               BLT.N    ??AGCCheck_6
    373          			else if (gap <= -4L) 	gap = -4L;
   \   0000006A   10F1030F           CMN      R0,#+3
   \   0000006E   E5DA               BGE.N    ??AGCCheck_4
   \   00000070   6FF00300           MVN      R0,#+3
   \   00000074   E9E7               B.N      ??AGCCheck_6
    374          			else if(gap <= -2L)		gap = -2L;
    375          			else					gap = -1L;
    376          		}
    377          		
    378          		tmpTotAttn	+= gap;
    379          	}
    380          
    381          	if(Mode ==_InputALCMode)
   \                     ??AGCCheck_8:
   \   00000076   022D               CMP      R5,#+2
   \   00000078   08BF               IT       EQ 
   \   0000007A   04B2               SXTHEQ   R4,R0
    382          	{
    383          		tmpTotAttn  = gap;
    384          	}
    385          	
    386          	if(tmpTotAttn  > AttMax ) 	tmpTotAttn  = AttMax;
   \                     ??AGCCheck_7:
   \   0000007C   A742               CMP      R7,R4
   \   0000007E   B8BF               IT       LT 
   \   00000080   3C46               MOVLT    R4,R7
    387          	if(tmpTotAttn  < AttMin ) 	tmpTotAttn  = AttMin;
   \   00000082   B442               CMP      R4,R6
   \   00000084   B8BF               IT       LT 
   \   00000086   3446               MOVLT    R4,R6
    388          
    389          	*tmpALCAttn = tmpTotAttn;
   \   00000088   1C70               STRB     R4,[R3, #+0]
    390          
    391            	return tmpTotAttn;    
   \   0000008A   60B2               SXTB     R0,R4
   \                     ??AGCCheck_0:
   \   0000008C   F0BC               POP      {R4-R7}
   \   0000008E   7047               BX       LR               ;; return
    392          }
    393          

   \                                 In section .text, align 2, keep-with-next
    394          void AGCCheckFunction(void)
    395          {
   \                     AGCCheckFunction:
   \   00000000   80B5               PUSH     {R7,LR}
    396          	if(tDnrSts->LTE15MUse == __NOTUSE)
   \   00000002   ........           LDR.W    R0,??DataTable4
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   90F86C00           LDRB     R0,[R0, #+108]
   \   0000000C   10B9               CBNZ.N   R0,??AGCCheckFunction_0
    397          	{
    398          		FwdAGCCheck_CDMALTE();
   \   0000000E   ........           BL       FwdAGCCheck_CDMALTE
   \   00000012   01E0               B.N      ??AGCCheckFunction_1
    399          	}
    400          	else
    401          	{
    402          		FwdAGCCheck_CDMALTE_15M();
   \                     ??AGCCheckFunction_0:
   \   00000014   ........           BL       FwdAGCCheck_CDMALTE_15M
    403          	}
    404          	FwdAGCCheck_WCDMA();
   \                     ??AGCCheckFunction_1:
   \   00000018   ........           BL       FwdAGCCheck_WCDMA
    405          	FwdAGCCheck_LTE_A_0();
   \   0000001C   BDE80140           POP      {R0,LR}
   \   00000020   ........           B.W      FwdAGCCheck_LTE_A_0
    406          }
    407          
    408          

   \                                 In section .text, align 2, keep-with-next
    409          void FwdAGCCheck_CDMALTE_15M(void)
    410          {
   \                     FwdAGCCheck_CDMALTE_15M:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   85B0               SUB      SP,SP,#+20
    411          	INT8U CurrPwr_2G;
    412          	INT8U CurrPwr_LTE;
    413          	INT16U Sum_2G;
    414          	INT16U Sum_LTE;
    415          	INT16U Sum;
    416          	INT16U i;
    417          	INT16S tmppwrin = 0;
    418          	INT16S tmppwrout = 0;
    419          	INT16S tmppwr = 0;
    420          	INT16S tmpx10 = 0;
    421          	INT8S tRvsAGCMAX_LTE; 
    422          	INT8S tAgcAttn_LTE; 
    423          
    424          	__Dnr_Sts  *Sts = tDnrSts; 
   \   00000006   ........           LDR.W    R0,??DataTable4
   \   0000000A   D0F80080           LDR      R8,[R0, #+0]
    425          
    426          	if( Sts->DetPwr.RvsOutPwr_2G > 10)
   \   0000000E   08F2C009           ADDW     R9,R8,#+192
   \   00000012   99F97610           LDRSB    R1,[R9, #+118]
   \   00000016   ........           LDR.W    R0,??DataTable6
   \   0000001A   0B29               CMP      R1,#+11
   \   0000001C   A3BF               ITTTE    GE 
   \   0000001E   C1F13601           RSBGE    R1,R1,#+54
   \   00000022   C9B2               UXTBGE   R1,R1
   \   00000024   30F81120           LDRHGE   R2,[R0, R1, LSL #+1]
   \   00000028   0022               MOVLT    R2,#+0
    427          	{
    428          		CurrPwr_2G = 27*2 - Sts->DetPwr.RvsOutPwr_2G;
    429          		Sum_2G = dBmTomW[CurrPwr_2G];
    430          	}
    431          	else Sum_2G = 0;
    432          	
    433          	if( Sts->DetPwr.RvsOutPwr_LTE > 10)
   \   0000002A   98F93A11           LDRSB    R1,[R8, #+314]
   \   0000002E   0B29               CMP      R1,#+11
   \   00000030   A3BF               ITTTE    GE 
   \   00000032   C1F13603           RSBGE    R3,R1,#+54
   \   00000036   DBB2               UXTBGE   R3,R3
   \   00000038   30F81330           LDRHGE   R3,[R0, R3, LSL #+1]
   \   0000003C   0023               MOVLT    R3,#+0
    434          	{
    435          		CurrPwr_LTE = 27*2 - Sts->DetPwr.RvsOutPwr_LTE;
    436           		Sum_LTE = dBmTomW[CurrPwr_LTE];
    437          	}
    438          	else Sum_LTE = 0;	
    439          
    440          
    441          	Sum = Sum_2G + Sum_LTE;
   \   0000003E   9A18               ADDS     R2,R3,R2
   \   00000040   92B2               UXTH     R2,R2
    442          	
    443          	for(i = 0; i < sizeof(dBmTomW); i++)
   \   00000042   0023               MOVS     R3,#+0
    444          	{
    445          		if(Sum >= dBmTomW[i]) break;
   \                     ??FwdAGCCheck_CDMALTE_15M_0:
   \   00000044   30F8026B           LDRH     R6,[R0], #+2
   \   00000048   B242               CMP      R2,R6
   \   0000004A   BEBF               ITTT     LT 
   \   0000004C   5B1C               ADDLT    R3,R3,#+1
   \   0000004E   30F8026B           LDRHLT   R6,[R0], #+2
   \   00000052   B242               CMPLT    R2,R6
   \   00000054   BEBF               ITTT     LT 
   \   00000056   5B1C               ADDLT    R3,R3,#+1
   \   00000058   30F8026B           LDRHLT   R6,[R0], #+2
   \   0000005C   B242               CMPLT    R2,R6
   \   0000005E   17DA               BGE.N    ??FwdAGCCheck_CDMALTE_15M_1
   \   00000060   5B1C               ADDS     R3,R3,#+1
   \   00000062   30F8026B           LDRH     R6,[R0], #+2
   \   00000066   B242               CMP      R2,R6
   \   00000068   12DA               BGE.N    ??FwdAGCCheck_CDMALTE_15M_1
   \   0000006A   5B1C               ADDS     R3,R3,#+1
   \   0000006C   30F8026B           LDRH     R6,[R0], #+2
   \   00000070   B242               CMP      R2,R6
   \   00000072   0DDA               BGE.N    ??FwdAGCCheck_CDMALTE_15M_1
   \   00000074   5B1C               ADDS     R3,R3,#+1
   \   00000076   30F8026B           LDRH     R6,[R0], #+2
   \   0000007A   B242               CMP      R2,R6
   \   0000007C   08DA               BGE.N    ??FwdAGCCheck_CDMALTE_15M_1
   \   0000007E   5B1C               ADDS     R3,R3,#+1
   \   00000080   30F8026B           LDRH     R6,[R0], #+2
   \   00000084   B242               CMP      R2,R6
   \   00000086   03DA               BGE.N    ??FwdAGCCheck_CDMALTE_15M_1
    446          	}
   \   00000088   5B1C               ADDS     R3,R3,#+1
   \   0000008A   9BB2               UXTH     R3,R3
   \   0000008C   462B               CMP      R3,#+70
   \   0000008E   D9D3               BCC.N    ??FwdAGCCheck_CDMALTE_15M_0
    447          
    448          	tmppwr = 27*2 - i;
   \                     ??FwdAGCCheck_CDMALTE_15M_1:
   \   00000090   9BB2               UXTH     R3,R3
   \   00000092   C3F13600           RSB      R0,R3,#+54
    449          	
    450          	if(Sts->DetPwr.RvsOutPwr_LTE <= -60)
   \   00000096   6FF03A02           MVN      R2,#+58
   \   0000009A   9142               CMP      R1,R2
   \   0000009C   B8BF               IT       LT 
   \   0000009E   6FF07700           MVNLT    R0,#+119
    451          	{
    452          		tmppwr = LowPwrLmt;
    453          	}
    454          
    455          	tmppwr = tmppwr + Sts->RvsOutPwrOffset_LTE;
   \   000000A2   99F91310           LDRSB    R1,[R9, #+19]
   \   000000A6   0818               ADDS     R0,R1,R0
   \   000000A8   0490               STR      R0,[SP, #+16]
   \   000000AA   08F59D70           ADD      R0,R8,#+314
   \   000000AE   0499               LDR      R1,[SP, #+16]
   \   000000B0   8173               STRB     R1,[R0, #+14]
    456          
    457          	Sts->DetPwr.FwdOutPeakPwr_LTE_A  = tmppwr;
    458          
    459          	{
    460          		tmppwrout = tmppwr - CurrRvsAgcAttn_LTE;
    461          		TwoOutPwrConvINT((INT8S *)&dptr[0],tmppwrout);
   \   000000B2   ........           LDR.W    R4,??DataTable6_1
   \   000000B6   ........           LDR.W    R6,??DataTable6_2
   \   000000BA   0498               LDR      R0,[SP, #+16]
   \   000000BC   96F90010           LDRSB    R1,[R6, #+0]
   \   000000C0   411A               SUBS     R1,R0,R1
   \   000000C2   09B2               SXTH     R1,R1
   \   000000C4   2046               MOV      R0,R4
   \   000000C6   ........           BL       TwoOutPwrConvINT
    462          		Sts->RvsOutPwr_LTE[0] = dptr[0];
   \   000000CA   08F2DC17           ADDW     R7,R8,#+476
   \   000000CE   2078               LDRB     R0,[R4, #+0]
   \   000000D0   7875               STRB     R0,[R7, #+21]
    463          		Sts->RvsOutPwr_LTE[1] = dptr[1];
   \   000000D2   6078               LDRB     R0,[R4, #+1]
   \   000000D4   B875               STRB     R0,[R7, #+22]
    464          
    465          		tmpx10 = tmppwr - Gain_LTE + Sts->RvsAlcAttn_LTE;
   \   000000D6   0498               LDR      R0,[SP, #+16]
   \   000000D8   97F91010           LDRSB    R1,[R7, #+16]
   \   000000DC   0818               ADDS     R0,R1,R0
   \   000000DE   A0F1A201           SUB      R1,R0,#+162
    466          		Sts->CurrRvsInPwr_LTE =abs(tmpx10/2);
   \   000000E2   09B2               SXTH     R1,R1
   \   000000E4   01EBD170           ADD      R0,R1,R1, LSR #+31
   \   000000E8   4010               ASRS     R0,R0,#+1
   \   000000EA   48BF               IT       MI 
   \   000000EC   4042               RSBMI    R0,R0,#+0
   \   000000EE   08F2BC22           ADDW     R2,R8,#+700
   \   000000F2   D072               STRB     R0,[R2, #+11]
    467          		tmppwrin = tmpx10;
    468          			
    469          		ULTwoOutPwrConvINT((INT8S *)&dptr[0],tmppwrin);
   \   000000F4   2046               MOV      R0,R4
   \   000000F6   ........           BL       ULTwoOutPwrConvINT
    470          		Sts->RvsInPwr_LTE[0] = dptr[0];
   \   000000FA   2078               LDRB     R0,[R4, #+0]
   \   000000FC   7876               STRB     R0,[R7, #+25]
    471          		Sts->RvsInPwr_LTE[1] = dptr[1];
   \   000000FE   6078               LDRB     R0,[R4, #+1]
   \   00000100   B876               STRB     R0,[R7, #+26]
    472          	}
    473          
    474          	
    475          	{
    476          		iAGCOnOff= Sts->AGCOnOff_CDMALTE;
   \   00000102   08F24F04           ADDW     R4,R8,#+79
   \   00000106   ........           LDR.W    R5,??DataTable6_3
   \   0000010A   E07C               LDRB     R0,[R4, #+19]
   \   0000010C   2870               STRB     R0,[R5, #+0]
    477          		iAGClimit = OneOutPwrConv(Sts->FwdOutUpperLmt_LTE);
   \   0000010E   ........           LDR.W    R10,??DataTable6_4
   \   00000112   08F13600           ADD      R0,R8,#+54
   \   00000116   ........           BL       OneOutPwrConv
   \   0000011A   AAF80000           STRH     R0,[R10, #+0]
    478          
    479          		if( Sts->AGCMode_LTE == _AGCAvgMode)
   \   0000011E   E07D               LDRB     R0,[R4, #+23]
   \   00000120   0028               CMP      R0,#+0
   \   00000122   0CBF               ITE      EQ 
   \   00000124   08F13200           ADDEQ    R0,R8,#+50
   \   00000128   08F13400           ADDNE    R0,R8,#+52
    480          		{
    481          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwr_LTE);
    482          		}
    483          		else
    484          		{
    485          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwrPeak_LTE);
   \   0000012C   ........           BL       OneOutPwrConv
   \   00000130   ........           LDR.W    R11,??DataTable6_5
   \   00000134   ABF80000           STRH     R0,[R11, #+0]
    486          		}				
    487          
    488          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdAgcAttn_LTE, AGCMAX_LTE, ATTENMIN,Sts->FwdAmpOnOff_LTE,_AGCMode);
   \   00000138   0120               MOVS     R0,#+1
   \   0000013A   0390               STR      R0,[SP, #+12]
   \   0000013C   94F91000           LDRSB    R0,[R4, #+16]
   \   00000140   0290               STR      R0,[SP, #+8]
   \   00000142   0020               MOVS     R0,#+0
   \   00000144   0190               STR      R0,[SP, #+4]
   \   00000146   6420               MOVS     R0,#+100
   \   00000148   0090               STR      R0,[SP, #+0]
   \   0000014A   08F2E913           ADDW     R3,R8,#+489
   \   0000014E   95F90020           LDRSB    R2,[R5, #+0]
   \   00000152   BAF90010           LDRSH    R1,[R10, #+0]
   \   00000156   BBF90000           LDRSH    R0,[R11, #+0]
   \   0000015A   ........           BL       AGCCheck
    489          	}
    490          
    491          	{
    492          		iAGCOnOff= Sts->RvsAlcOnOff_LTE;
   \   0000015E   FA7C               LDRB     R2,[R7, #+19]
   \   00000160   2A70               STRB     R2,[R5, #+0]
    493          		iAGClimit = Sts->RvsALCLvl_LTE*2;
   \   00000162   97F92900           LDRSB    R0,[R7, #+41]
   \   00000166   4100               LSLS     R1,R0,#+1
   \   00000168   AAF80010           STRH     R1,[R10, #+0]
    494          		iAGCPwr = tmppwr;
   \   0000016C   0498               LDR      R0,[SP, #+16]
   \   0000016E   ABF80000           STRH     R0,[R11, #+0]
    495          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->RvsAlcAttn_LTE, tRvsALCMAX_LTE, ATTENMIN,Sts->FwdAmpOnOff_LTE, _ALCMode);
   \   00000172   0020               MOVS     R0,#+0
   \   00000174   0390               STR      R0,[SP, #+12]
   \   00000176   94F91000           LDRSB    R0,[R4, #+16]
   \   0000017A   0290               STR      R0,[SP, #+8]
   \   0000017C   0020               MOVS     R0,#+0
   \   0000017E   0190               STR      R0,[SP, #+4]
   \   00000180   5E20               MOVS     R0,#+94
   \   00000182   0090               STR      R0,[SP, #+0]
   \   00000184   08F2EC13           ADDW     R3,R8,#+492
   \   00000188   52B2               SXTB     R2,R2
   \   0000018A   09B2               SXTH     R1,R1
   \   0000018C   BBF90000           LDRSH    R0,[R11, #+0]
   \   00000190   ........           BL       AGCCheck
    496          	}
    497          
    498          	{
    499          		iAGCOnOff  = Enable;
   \   00000194   0020               MOVS     R0,#+0
   \   00000196   2870               STRB     R0,[R5, #+0]
    500          		iAGCAttnMAX = 25*2;
   \   00000198   ........           LDR.W    R0,??DataTable6_6
   \   0000019C   3221               MOVS     R1,#+50
   \   0000019E   0170               STRB     R1,[R0, #+0]
    501          		iAGClimit = OtherFwdOverInLmt_CDMALTE ; 		// -35*2dBm
   \   000001A0   6FF04700           MVN      R0,#+71
   \   000001A4   AAF80000           STRH     R0,[R10, #+0]
    502          		iAGCPwr = -Sts->DetPwr.FwdInPwr_CDMALTE*2;
   \   000001A8   08F59D70           ADD      R0,R8,#+314
   \   000001AC   90F90100           LDRSB    R0,[R0, #+1]
   \   000001B0   4042               RSBS     R0,R0,#+0
   \   000001B2   4000               LSLS     R0,R0,#+1
   \   000001B4   ABF80000           STRH     R0,[R11, #+0]
    503          	
    504          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdInAlcAttn_CDMALTE, iAGCAttnMAX, ATTENMIN, Sts->FwdAmpOnOff_LTE, _InputALCMode);	
   \   000001B8   0221               MOVS     R1,#+2
   \   000001BA   0391               STR      R1,[SP, #+12]
   \   000001BC   94F91010           LDRSB    R1,[R4, #+16]
   \   000001C0   0291               STR      R1,[SP, #+8]
   \   000001C2   0021               MOVS     R1,#+0
   \   000001C4   0191               STR      R1,[SP, #+4]
   \   000001C6   3221               MOVS     R1,#+50
   \   000001C8   0091               STR      R1,[SP, #+0]
   \   000001CA   08F2C323           ADDW     R3,R8,#+707
   \   000001CE   0022               MOVS     R2,#+0
   \   000001D0   6FF04701           MVN      R1,#+71
   \   000001D4   00B2               SXTH     R0,R0
   \   000001D6   ........           BL       AGCCheck
    505          	}
    506          
    507          	tRvsAGCMAX_LTE = AGCMAX_LTE + Sts->RvsGainBalance_LTE*2;
   \   000001DA   98F84F00           LDRB     R0,[R8, #+79]
   \   000001DE   4000               LSLS     R0,R0,#+1
   \   000001E0   00F16405           ADD      R5,R0,#+100
    508          
    509          	if( Sts->FwdAgcAttn_LTE > Sts->FwdInAlcAttn_CDMALTE)
   \   000001E4   97F90D00           LDRSB    R0,[R7, #+13]
   \   000001E8   08F2BC21           ADDW     R1,R8,#+700
   \   000001EC   91F90710           LDRSB    R1,[R1, #+7]
   \   000001F0   8142               CMP      R1,R0
   \   000001F2   B8BF               IT       LT 
   \   000001F4   401A               SUBLT    R0,R0,R1
    510          	{
    511          		tAgcAttn_LTE = Sts->FwdAgcAttn_LTE - Sts->FwdInAlcAttn_CDMALTE; 
    512          	}
    513          	else tAgcAttn_LTE = Sts->FwdAgcAttn_LTE;
    514          
    515          
    516          	if(tAgcAttn_LTE >= AGC25_ATTENMAX_LTE)
   \   000001F6   40B2               SXTB     R0,R0
   \   000001F8   3228               CMP      R0,#+50
   \   000001FA   A6BF               ITTE     GE 
   \   000001FC   A0F13202           SUBGE    R2,R0,#+50
   \   00000200   3220               MOVGE    R0,#+50
   \   00000202   0022               MOVLT    R2,#+0
    517          	{
    518          		Sts->FwdAttn1_CDMALTE = tAgcAttn_LTE - AGC25_ATTENMAX_LTE;
    519          		Sts->FwdAttn1_LTE = AGC25_ATTENMAX_LTE;
    520          	}
    521          	else
    522          	{
    523          		Sts->FwdAttn1_CDMALTE = 0;
    524          		Sts->FwdAttn1_LTE= tAgcAttn_LTE;
   \   00000204   B871               STRB     R0,[R7, #+6]
    525          	}
    526          
    527          	Sts->FwdAttn1_CDMALTE = Sts->FwdAttn1_CDMALTE + Sts->FwdInAlcAttn_CDMALTE;
   \   00000206   8818               ADDS     R0,R1,R2
   \   00000208   88F8DC01           STRB     R0,[R8, #+476]
    528          
    529          	CurrAgcAttn_LTE = Sts->FwdAttn1_LTE + Sts->FwdInAlcAttn_CDMALTE;
   \   0000020C   B879               LDRB     R0,[R7, #+6]
   \   0000020E   0818               ADDS     R0,R1,R0
   \   00000210   ........           LDR.W    R1,??DataTable6_7
   \   00000214   0870               STRB     R0,[R1, #+0]
    530          
    531          	if(Sts->AGCOnOff_CDMALTE == Enable)
   \   00000216   98F84F10           LDRB     R1,[R8, #+79]
   \   0000021A   4A00               LSLS     R2,R1,#+1
   \   0000021C   97F91030           LDRSB    R3,[R7, #+16]
   \   00000220   6DB2               SXTB     R5,R5
   \   00000222   2946               MOV      R1,R5
   \   00000224   E47C               LDRB     R4,[R4, #+19]
   \   00000226   002C               CMP      R4,#+0
   \   00000228   0CD1               BNE.N    ??FwdAGCCheck_CDMALTE_15M_2
    532          	{
    533          		Sts->RvsGainAttn_LTE = CurrAgcAttn_LTE - Sts->RvsAlcAttn_LTE + Sts->RvsGainBalance_LTE*2;
   \   0000022A   40B2               SXTB     R0,R0
   \   0000022C   C01A               SUBS     R0,R0,R3
   \   0000022E   1018               ADDS     R0,R2,R0
   \   00000230   88F8BC02           STRB     R0,[R8, #+700]
   \   00000234   0022               MOVS     R2,#+0
   \   00000236   98F9BC02           LDRSB    R0,[R8, #+700]
    534          		Sts->RvsGainAttn_LTE = MinMaxAttnCheck(Sts->RvsGainAttn_LTE,tRvsAGCMAX_LTE,ATTENMIN);
   \   0000023A   ........           BL       MinMaxAttnCheck
   \   0000023E   88F8BC02           STRB     R0,[R8, #+700]
    535          		CurrRvsAgcAttn_LTE = Sts->RvsGainAttn_LTE;
   \   00000242   08E0               B.N      ??FwdAGCCheck_CDMALTE_15M_3
    536          	}
    537          	else
    538          	{
    539          		CurrRvsAgcAttn_LTE = Sts->RvsGainAttn_LTE - Sts->RvsAlcAttn_LTE + Sts->RvsGainBalance_LTE*2;
   \                     ??FwdAGCCheck_CDMALTE_15M_2:
   \   00000244   98F9BC02           LDRSB    R0,[R8, #+700]
   \   00000248   C01A               SUBS     R0,R0,R3
   \   0000024A   1018               ADDS     R0,R2,R0
   \   0000024C   3070               STRB     R0,[R6, #+0]
    540          		CurrRvsAgcAttn_LTE = MinMaxAttnCheck(CurrRvsAgcAttn_LTE,tRvsAGCMAX_LTE,ATTENMIN);
   \   0000024E   0022               MOVS     R2,#+0
   \   00000250   B056               LDRSB    R0,[R6, R2]
   \   00000252   ........           BL       MinMaxAttnCheck
   \                     ??FwdAGCCheck_CDMALTE_15M_3:
   \   00000256   3070               STRB     R0,[R6, #+0]
    541          	}
    542          
    543          	if(Sts->AlmSts.FwdAmpOnOff_LTE == Disable)
   \   00000258   98F80E00           LDRB     R0,[R8, #+14]
   \   0000025C   C006               LSLS     R0,R0,#+27
   \   0000025E   48BF               IT       MI 
   \   00000260   3570               STRBMI   R5,[R6, #+0]
    544          	{
    545          		CurrRvsAgcAttn_LTE = tRvsAGCMAX_LTE;
    546          	}
    547          	
    548          
    549          	tAGC_ATTENMAX_LTE = RVSAGC20_ATTENMAX_2G + Sts->RvsGainBalance_LTE*2;
   \   00000262   ........           LDR.W    R0,??DataTable7
   \   00000266   98F84F10           LDRB     R1,[R8, #+79]
   \   0000026A   4900               LSLS     R1,R1,#+1
   \   0000026C   2831               ADDS     R1,R1,#+40
   \   0000026E   0170               STRB     R1,[R0, #+0]
    550          	if(CurrRvsAgcAttn_LTE < tAGC_ATTENMAX_LTE) 
   \   00000270   96F90010           LDRSB    R1,[R6, #+0]
   \   00000274   0278               LDRB     R2,[R0, #+0]
   \   00000276   9142               CMP      R1,R2
   \   00000278   BCBF               ITT      LT 
   \   0000027A   3972               STRBLT   R1,[R7, #+8]
   \   0000027C   0020               MOVLT    R0,#+0
    551          	{
    552          		Sts->RvsAttn2_LTE = CurrRvsAgcAttn_LTE;
    553          		Sts->RvsAttn3_LTE = 0;
   \   0000027E   04DB               BLT.N    ??FwdAGCCheck_CDMALTE_15M_4
    554          	}
    555          	else
    556          	{
    557          		Sts->RvsAttn2_LTE = tAGC_ATTENMAX_LTE;
   \   00000280   3A72               STRB     R2,[R7, #+8]
    558          		Sts->RvsAttn3_LTE = CurrRvsAgcAttn_LTE - tAGC_ATTENMAX_LTE;
   \   00000282   96F90010           LDRSB    R1,[R6, #+0]
   \   00000286   0078               LDRB     R0,[R0, #+0]
   \   00000288   081A               SUBS     R0,R1,R0
   \                     ??FwdAGCCheck_CDMALTE_15M_4:
   \   0000028A   7872               STRB     R0,[R7, #+9]
    559          	}	
    560          
    561          	if(Sts->RvsAlcAttn_LTE < RVSALC25_ATTENMAX_LTE)
   \   0000028C   97F91000           LDRSB    R0,[R7, #+16]
   \   00000290   3228               CMP      R0,#+50
   \   00000292   B9BF               ITTEE    LT 
   \   00000294   0146               MOVLT    R1,R0
   \   00000296   0020               MOVLT    R0,#+0
   \   00000298   3221               MOVGE    R1,#+50
   \   0000029A   3238               SUBGE    R0,R0,#+50
    562          	{
    563          		Sts->RvsAttn1_CDMALTE = Sts->RvsAlcAttn_LTE;
    564          		Sts->RvsAttn1_LTE  = 0;
    565          	}
    566          	else
    567          	{
    568          		Sts->RvsAttn1_CDMALTE = RVSALC25_ATTENMAX_LTE;
    569          		Sts->RvsAttn1_LTE  = Sts->RvsAlcAttn_LTE - RVSALC25_ATTENMAX_LTE;
   \   0000029C   F871               STRB     R0,[R7, #+7]
   \   0000029E   7970               STRB     R1,[R7, #+1]
    570          	}
    571          	
    572          	Sts->FwdAttn1_2G  = Sts->FwdAttn1_LTE;
   \   000002A0   B879               LDRB     R0,[R7, #+6]
   \   000002A2   88F8C000           STRB     R0,[R8, #+192]
    573          
    574          	Sts->RvsAttn1_2G = Sts->RvsAttn1_LTE;
   \   000002A6   F879               LDRB     R0,[R7, #+7]
   \   000002A8   89F80300           STRB     R0,[R9, #+3]
    575          	Sts->RvsAttn2_2G = Sts->RvsAttn2_LTE;
   \   000002AC   387A               LDRB     R0,[R7, #+8]
   \   000002AE   89F80400           STRB     R0,[R9, #+4]
    576          	Sts->RvsAttn3_2G = Sts->RvsAttn3_LTE;
   \   000002B2   787A               LDRB     R0,[R7, #+9]
   \   000002B4   89F80600           STRB     R0,[R9, #+6]
    577          }
   \   000002B8   ....               B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   05B0               ADD      SP,SP,#+20
   \   00000002   BDE8F08F           POP      {R4-R11,PC}      ;; return
    578          
    579          

   \                                 In section .text, align 2, keep-with-next
    580          void FwdAGCCheck_CDMALTE(void)
    581          {
   \                     FwdAGCCheck_CDMALTE:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   85B0               SUB      SP,SP,#+20
    582          	INT8S CurrAttn = 0;
    583          	INT8U tAmpOnOff = 0;
   \   00000006   4FF00008           MOV      R8,#+0
    584          
    585          	INT8S tAgcAttn_2G; 
    586          	INT8S tAgcAttn_LTE; 
    587          	
    588          	INT8S tRvsAGCMAX_2G; 
    589          	INT8S tRvsAGCMAX_LTE; 
    590          
    591          	__Dnr_Sts  *Sts = tDnrSts; 
   \   0000000A   ........           LDR.W    R0,??DataTable4
   \   0000000E   D0F80090           LDR      R9,[R0, #+0]
    592          
    593          	{
    594          		{
    595          			iAGCOnOff= Sts->AGCOnOff_CDMALTE;
   \   00000012   09F24C0A           ADDW     R10,R9,#+76
   \   00000016   ........           LDR.W    R4,??DataTable6_3
   \   0000001A   9AF81600           LDRB     R0,[R10, #+22]
   \   0000001E   2070               STRB     R0,[R4, #+0]
    596          			iAGClimit = OneOutPwrConv(Sts->FwdOutUpperLmt_2G);
   \   00000020   ........           LDR.W    R5,??DataTable6_4
   \   00000024   09F12B00           ADD      R0,R9,#+43
   \   00000028   ........           BL       OneOutPwrConv
   \   0000002C   2880               STRH     R0,[R5, #+0]
    597          			if( Sts->AGCMode_2G == _AGCAvgMode)
   \   0000002E   9AF81900           LDRB     R0,[R10, #+25]
   \   00000032   0028               CMP      R0,#+0
   \   00000034   0CBF               ITE      EQ 
   \   00000036   09F12700           ADDEQ    R0,R9,#+39
   \   0000003A   09F12900           ADDNE    R0,R9,#+41
    598          			{
    599          				iAGCPwr = OneOutPwrConv(Sts->FwdOutPwr_2G);
    600          			}
    601          			else
    602          			{
    603          				iAGCPwr = OneOutPwrConv(Sts->FwdOutPwrPeak_2G);
   \   0000003E   ........           BL       OneOutPwrConv
   \   00000042   ........           LDR.W    R7,??DataTable6_5
   \   00000046   3880               STRH     R0,[R7, #+0]
    604          			}	
    605          
    606          			AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdAgcAttn_2G, AGCMAX_2G, ATTENMIN,Sts->FwdAmpOnOff_2G,_AGCMode);
   \   00000048   0120               MOVS     R0,#+1
   \   0000004A   0390               STR      R0,[SP, #+12]
   \   0000004C   9AF91200           LDRSB    R0,[R10, #+18]
   \   00000050   0290               STR      R0,[SP, #+8]
   \   00000052   0020               MOVS     R0,#+0
   \   00000054   0190               STR      R0,[SP, #+4]
   \   00000056   6420               MOVS     R0,#+100
   \   00000058   0090               STR      R0,[SP, #+0]
   \   0000005A   09F2E813           ADDW     R3,R9,#+488
   \   0000005E   94F90020           LDRSB    R2,[R4, #+0]
   \   00000062   B5F90010           LDRSH    R1,[R5, #+0]
   \   00000066   B7F90000           LDRSH    R0,[R7, #+0]
   \   0000006A   ........           BL       AGCCheck
    607          		}
    608          
    609          		{
    610          			iAGCOnOff= Sts->RvsAlcOnOff_2G;
   \   0000006E   09F2DC16           ADDW     R6,R9,#+476
   \   00000072   B27C               LDRB     R2,[R6, #+18]
   \   00000074   2270               STRB     R2,[R4, #+0]
    611          			iAGClimit = Sts->RvsALCLvl_2G*2;
   \   00000076   96F92700           LDRSB    R0,[R6, #+39]
   \   0000007A   4100               LSLS     R1,R0,#+1
   \   0000007C   2980               STRH     R1,[R5, #+0]
    612          			iAGCPwr = Sts->DetPwr.RvsOutPwr_2G;
   \   0000007E   09F2C00B           ADDW     R11,R9,#+192
   \   00000082   9BF97600           LDRSB    R0,[R11, #+118]
   \   00000086   3880               STRH     R0,[R7, #+0]
    613          
    614          			AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->RvsAlcAttn_2G, tRvsALCMAX_2G, ATTENMIN,Enable, _ALCMode);
   \   00000088   4346               MOV      R3,R8
   \   0000008A   0393               STR      R3,[SP, #+12]
   \   0000008C   0293               STR      R3,[SP, #+8]
   \   0000008E   0193               STR      R3,[SP, #+4]
   \   00000090   5A23               MOVS     R3,#+90
   \   00000092   0093               STR      R3,[SP, #+0]
   \   00000094   09F2EB13           ADDW     R3,R9,#+491
   \   00000098   52B2               SXTB     R2,R2
   \   0000009A   09B2               SXTH     R1,R1
   \   0000009C   ........           BL       AGCCheck
    615          		}
    616          
    617          		{
    618          			iAGCOnOff= Sts->AGCOnOff_CDMALTE;
   \   000000A0   9AF81600           LDRB     R0,[R10, #+22]
   \   000000A4   2070               STRB     R0,[R4, #+0]
    619          			iAGClimit = OneOutPwrConv(Sts->FwdOutUpperLmt_LTE);
   \   000000A6   09F13600           ADD      R0,R9,#+54
   \   000000AA   ........           BL       OneOutPwrConv
   \   000000AE   2880               STRH     R0,[R5, #+0]
    620          
    621          			if( Sts->AGCMode_LTE == _AGCAvgMode)
   \   000000B0   9AF81A00           LDRB     R0,[R10, #+26]
   \   000000B4   0028               CMP      R0,#+0
   \   000000B6   0CBF               ITE      EQ 
   \   000000B8   09F13200           ADDEQ    R0,R9,#+50
   \   000000BC   09F13400           ADDNE    R0,R9,#+52
    622          			{
    623          				iAGCPwr = OneOutPwrConv(Sts->FwdOutPwr_LTE);
    624          			}
    625          			else
    626          			{
    627          				iAGCPwr = OneOutPwrConv(Sts->FwdOutPwrPeak_LTE);
   \   000000C0   ........           BL       OneOutPwrConv
   \   000000C4   3880               STRH     R0,[R7, #+0]
    628          			}	
    629          			
    630          			AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdAgcAttn_LTE, AGCMAX_LTE, ATTENMIN,Sts->FwdAmpOnOff_LTE,_AGCMode);
   \   000000C6   0120               MOVS     R0,#+1
   \   000000C8   0390               STR      R0,[SP, #+12]
   \   000000CA   9AF91300           LDRSB    R0,[R10, #+19]
   \   000000CE   0290               STR      R0,[SP, #+8]
   \   000000D0   0020               MOVS     R0,#+0
   \   000000D2   0190               STR      R0,[SP, #+4]
   \   000000D4   6420               MOVS     R0,#+100
   \   000000D6   0090               STR      R0,[SP, #+0]
   \   000000D8   09F2E913           ADDW     R3,R9,#+489
   \   000000DC   94F90020           LDRSB    R2,[R4, #+0]
   \   000000E0   B5F90010           LDRSH    R1,[R5, #+0]
   \   000000E4   B7F90000           LDRSH    R0,[R7, #+0]
   \   000000E8   ........           BL       AGCCheck
    631          		}
    632          
    633          		{
    634          			iAGCOnOff= Sts->RvsAlcOnOff_LTE;
   \   000000EC   F27C               LDRB     R2,[R6, #+19]
   \   000000EE   2270               STRB     R2,[R4, #+0]
    635          			iAGClimit = Sts->RvsALCLvl_LTE*2;
   \   000000F0   96F92900           LDRSB    R0,[R6, #+41]
   \   000000F4   4100               LSLS     R1,R0,#+1
   \   000000F6   2980               STRH     R1,[R5, #+0]
    636          			iAGCPwr = Sts->DetPwr.RvsOutPwr_LTE;
   \   000000F8   99F93A01           LDRSB    R0,[R9, #+314]
   \   000000FC   3880               STRH     R0,[R7, #+0]
    637          			AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->RvsAlcAttn_LTE, tRvsALCMAX_LTE, ATTENMIN,Sts->FwdAmpOnOff_LTE, _ALCMode);
   \   000000FE   4346               MOV      R3,R8
   \   00000100   0393               STR      R3,[SP, #+12]
   \   00000102   9AF91330           LDRSB    R3,[R10, #+19]
   \   00000106   0293               STR      R3,[SP, #+8]
   \   00000108   4346               MOV      R3,R8
   \   0000010A   0193               STR      R3,[SP, #+4]
   \   0000010C   5E23               MOVS     R3,#+94
   \   0000010E   0093               STR      R3,[SP, #+0]
   \   00000110   09F2EC13           ADDW     R3,R9,#+492
   \   00000114   52B2               SXTB     R2,R2
   \   00000116   09B2               SXTH     R1,R1
   \   00000118   ........           BL       AGCCheck
    638          		}
    639          			
    640          
    641          		{
    642          			iAGCOnOff  = Enable;
   \   0000011C   84F80080           STRB     R8,[R4, #+0]
    643          			iAGCAttnMAX = 25*2;
   \   00000120   ........           LDR.W    R0,??DataTable6_6
   \   00000124   3221               MOVS     R1,#+50
   \   00000126   0170               STRB     R1,[R0, #+0]
    644          			iAGClimit = OtherFwdOverInLmt_CDMALTE ; 		// -35*2dBm
   \   00000128   6FF04700           MVN      R0,#+71
   \   0000012C   2880               STRH     R0,[R5, #+0]
    645          			iAGCPwr = -Sts->DetPwr.FwdInPwr_CDMALTE*2;
   \   0000012E   99F93B01           LDRSB    R0,[R9, #+315]
   \   00000132   4042               RSBS     R0,R0,#+0
   \   00000134   4000               LSLS     R0,R0,#+1
   \   00000136   3880               STRH     R0,[R7, #+0]
    646          			if((Sts->FwdAmpOnOff_2G)||(Sts->FwdAmpOnOff_LTE))	tAmpOnOff = Disable;
   \   00000138   9AF81210           LDRB     R1,[R10, #+18]
   \   0000013C   11B9               CBNZ.N   R1,??FwdAGCCheck_CDMALTE_0
   \   0000013E   9AF81310           LDRB     R1,[R10, #+19]
   \   00000142   09B1               CBZ.N    R1,??FwdAGCCheck_CDMALTE_1
   \                     ??FwdAGCCheck_CDMALTE_0:
   \   00000144   4FF00108           MOV      R8,#+1
    647          			else												tAmpOnOff = Enable;
    648          
    649          			AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdInAlcAttn_CDMALTE, iAGCAttnMAX, ATTENMIN, tAmpOnOff, _InputALCMode);	
   \                     ??FwdAGCCheck_CDMALTE_1:
   \   00000148   0221               MOVS     R1,#+2
   \   0000014A   0391               STR      R1,[SP, #+12]
   \   0000014C   CDF80880           STR      R8,[SP, #+8]
   \   00000150   0021               MOVS     R1,#+0
   \   00000152   0191               STR      R1,[SP, #+4]
   \   00000154   3221               MOVS     R1,#+50
   \   00000156   0091               STR      R1,[SP, #+0]
   \   00000158   09F2C323           ADDW     R3,R9,#+707
   \   0000015C   0022               MOVS     R2,#+0
   \   0000015E   6FF04701           MVN      R1,#+71
   \   00000162   00B2               SXTH     R0,R0
   \   00000164   ........           BL       AGCCheck
    650          		}
    651          	}
    652          
    653          	if( Sts->FwdAgcAttn_2G > Sts->FwdInAlcAttn_CDMALTE)
   \   00000168   96F90C40           LDRSB    R4,[R6, #+12]
   \   0000016C   09F2BB28           ADDW     R8,R9,#+699
   \   00000170   98F90800           LDRSB    R0,[R8, #+8]
   \   00000174   A042               CMP      R0,R4
   \   00000176   BCBF               ITT      LT 
   \   00000178   211A               SUBLT    R1,R4,R0
   \   0000017A   4CB2               SXTBLT   R4,R1
    654          	{
    655          		tAgcAttn_2G = Sts->FwdAgcAttn_2G - Sts->FwdInAlcAttn_CDMALTE; 
    656          	}
    657          	else tAgcAttn_2G = Sts->FwdAgcAttn_2G;
    658          
    659          	if( Sts->FwdAgcAttn_LTE > Sts->FwdInAlcAttn_CDMALTE)
   \   0000017C   96F90D50           LDRSB    R5,[R6, #+13]
   \   00000180   A842               CMP      R0,R5
   \   00000182   BCBF               ITT      LT 
   \   00000184   291A               SUBLT    R1,R5,R0
   \   00000186   4DB2               SXTBLT   R5,R1
    660          	{
    661          		tAgcAttn_LTE = Sts->FwdAgcAttn_LTE - Sts->FwdInAlcAttn_CDMALTE;
    662          	}
    663          	else tAgcAttn_LTE = Sts->FwdAgcAttn_LTE;
    664          
    665          
    666          	if((Sts->AlmSts.FwdAmpOnOff_2G == Disable)&&(Sts->AlmSts.FwdAmpOnOff_LTE == Enable))
   \   00000188   99F80E10           LDRB     R1,[R9, #+14]
   \   0000018C   01F03002           AND      R2,R1,#0x30
   \   00000190   202A               CMP      R2,#+32
   \   00000192   08BF               IT       EQ 
   \   00000194   3224               MOVEQ    R4,#+50
    667          	{
    668          		tAgcAttn_2G = DIGATTENMAX_2G;
   \   00000196   06D0               BEQ.N    ??FwdAGCCheck_CDMALTE_2
    669          	}
    670          
    671          	if((Sts->AlmSts.FwdAmpOnOff_LTE == Disable)&&(Sts->AlmSts.FwdAmpOnOff_2G == Enable))
   \   00000198   01F03001           AND      R1,R1,#0x30
   \   0000019C   1029               CMP      R1,#+16
   \   0000019E   08BF               IT       EQ 
   \   000001A0   3225               MOVEQ    R5,#+50
    672          	{
    673          		tAgcAttn_LTE = DIGATTENMAX_2G;
    674          	}
    675          
    676          	if(tAgcAttn_2G >= AGC25_ATTENMAX_2G)
   \   000001A2   322C               CMP      R4,#+50
   \   000001A4   02DB               BLT.N    ??FwdAGCCheck_CDMALTE_3
    677          	{
    678          		Sts->cFwdAttn_CDMA = tAgcAttn_2G - AGC25_ATTENMAX_2G;
   \                     ??FwdAGCCheck_CDMALTE_2:
   \   000001A6   2146               MOV      R1,R4
   \   000001A8   3239               SUBS     R1,R1,#+50
   \   000001AA   00E0               B.N      ??FwdAGCCheck_CDMALTE_4
    679          	}
    680          	else
    681          	{
    682          		Sts->cFwdAttn_CDMA = 0;
   \                     ??FwdAGCCheck_CDMALTE_3:
   \   000001AC   0021               MOVS     R1,#+0
   \                     ??FwdAGCCheck_CDMALTE_4:
   \   000001AE   B170               STRB     R1,[R6, #+2]
    683          	}
    684          
    685          	if(tAgcAttn_LTE >= AGC25_ATTENMAX_2G)
   \   000001B0   322D               CMP      R5,#+50
   \   000001B2   A6BF               ITTE     GE 
   \   000001B4   2946               MOVGE    R1,R5
   \   000001B6   3239               SUBGE    R1,R1,#+50
   \   000001B8   0021               MOVLT    R1,#+0
    686          	{
    687          		Sts->cFwdAttn_LTE = tAgcAttn_LTE - AGC25_ATTENMAX_2G;
    688          	}
    689          	else
    690          	{
    691          		Sts->cFwdAttn_LTE = 0;
   \   000001BA   F170               STRB     R1,[R6, #+3]
    692          	}
    693          
    694          	if( Sts->cFwdAttn_LTE >  Sts->cFwdAttn_CDMA)	
   \   000001BC   B178               LDRB     R1,[R6, #+2]
   \   000001BE   F278               LDRB     R2,[R6, #+3]
   \   000001C0   9142               CMP      R1,R2
   \   000001C2   38BF               IT       CC 
   \   000001C4   1146               MOVCC    R1,R2
    695          	{
    696          		Sts->FwdAttn1_CDMALTE = Sts->cFwdAttn_LTE;
    697          	}
    698          	else											
    699          	{
    700          		Sts->FwdAttn1_CDMALTE = Sts->cFwdAttn_CDMA;
    701          	}
    702          
    703          	Sts->FwdAttn1_CDMALTE = Sts->FwdAttn1_CDMALTE + Sts->FwdInAlcAttn_CDMALTE;
   \   000001C6   4018               ADDS     R0,R0,R1
   \   000001C8   89F8DC01           STRB     R0,[R9, #+476]
    704          	Sts->FwdAttn1_CDMALTE = MinMaxAttnCheck(Sts->FwdAttn1_CDMALTE ,AGC25_ATTENMAX_2G,ATTENMIN);
   \   000001CC   0022               MOVS     R2,#+0
   \   000001CE   3221               MOVS     R1,#+50
   \   000001D0   C0B2               UXTB     R0,R0
   \   000001D2   ........           BL       MinMaxAttnCheck
   \   000001D6   89F8DC01           STRB     R0,[R9, #+476]
    705          
    706          
    707          	if(tAgcAttn_2G <= AGC25_ATTENMAX_2G)
   \   000001DA   B078               LDRB     R0,[R6, #+2]
   \   000001DC   F178               LDRB     R1,[R6, #+3]
   \   000001DE   332C               CMP      R4,#+51
   \   000001E0   06DA               BGE.N    ??FwdAGCCheck_CDMALTE_5
    708          	{
    709          		CurrAttn = Sts->cFwdAttn_LTE - Sts->cFwdAttn_CDMA;
   \   000001E2   0A1A               SUBS     R2,R1,R0
   \   000001E4   52B2               SXTB     R2,R2
    710          
    711          		if( Sts->cFwdAttn_LTE >=  Sts->cFwdAttn_CDMA)
   \   000001E6   0BD3               BCC.N    ??FwdAGCCheck_CDMALTE_6
    712          		{
    713          			if(tAgcAttn_2G > CurrAttn)
   \   000001E8   A242               CMP      R2,R4
   \   000001EA   09DA               BGE.N    ??FwdAGCCheck_CDMALTE_6
    714          			{
    715          				Sts->AttOffset.FwdAttn1_2G  = tAgcAttn_2G - CurrAttn;
   \   000001EC   A21A               SUBS     R2,R4,R2
   \   000001EE   05E0               B.N      ??FwdAGCCheck_CDMALTE_7
    716          			}
    717          			else
    718          			{
    719          
    720          			}
    721          		}
    722          	}
    723          	else
    724          	{
    725          		CurrAttn = Sts->cFwdAttn_LTE - Sts->cFwdAttn_CDMA;
    726          
    727          		if( Sts->cFwdAttn_LTE <=  Sts->cFwdAttn_CDMA)	
   \                     ??FwdAGCCheck_CDMALTE_5:
   \   000001F0   8842               CMP      R0,R1
   \   000001F2   2EBF               ITEE     CS 
   \   000001F4   3222               MOVCS    R2,#+50
   \   000001F6   C1F13202           RSBCC    R2,R1,#+50
   \   000001FA   8218               ADDCC    R2,R0,R2
    728          		{
    729          			Sts->AttOffset.FwdAttn1_2G  = AGC25_ATTENMAX_2G;
    730          		}
    731          		else
    732          		{
    733          			Sts->AttOffset.FwdAttn1_2G  = AGC25_ATTENMAX_2G - CurrAttn;
   \                     ??FwdAGCCheck_CDMALTE_7:
   \   000001FC   89F8AB21           STRB     R2,[R9, #+427]
    734          		}
    735          		
    736          	}
    737          	
    738          	Sts->FwdAttn1_2G  = Sts->AttOffset.FwdAttn1_2G;
   \                     ??FwdAGCCheck_CDMALTE_6:
   \   00000200   99F9AB21           LDRSB    R2,[R9, #+427]
   \   00000204   89F8C020           STRB     R2,[R9, #+192]
    739          	
    740          ////////////////////////
    741          	if(tAgcAttn_LTE <= AGC25_ATTENMAX_2G)
   \   00000208   332D               CMP      R5,#+51
   \   0000020A   09DA               BGE.N    ??FwdAGCCheck_CDMALTE_8
    742          	{
    743          		CurrAttn = Sts->cFwdAttn_CDMA - Sts->cFwdAttn_LTE;
   \   0000020C   421A               SUBS     R2,R0,R1
   \   0000020E   52B2               SXTB     R2,R2
    744          
    745          		if( Sts->cFwdAttn_LTE <=  Sts->cFwdAttn_CDMA)
   \   00000210   0FD3               BCC.N    ??FwdAGCCheck_CDMALTE_9
    746          		{
    747          			if(tAgcAttn_LTE > CurrAttn)
   \   00000212   09F2AB14           ADDW     R4,R9,#+427
   \   00000216   AA42               CMP      R2,R5
   \   00000218   ACBF               ITE      GE 
   \   0000021A   0020               MOVGE    R0,#+0
   \   0000021C   A81A               SUBLT    R0,R5,R2
    748          			{
    749          				Sts->AttOffset.FwdAttn1_LTE = tAgcAttn_LTE- CurrAttn;
   \   0000021E   07E0               B.N      ??FwdAGCCheck_CDMALTE_10
    750          			}
    751          			else
    752          			{
    753          				Sts->AttOffset.FwdAttn1_LTE = 0;
    754          
    755          			}
    756          		}
    757          	}
    758          	else
    759          	{
    760          		CurrAttn = Sts->cFwdAttn_CDMA - Sts->cFwdAttn_LTE;
    761          
    762          		if( Sts->cFwdAttn_LTE >=  Sts->cFwdAttn_CDMA)	
   \                     ??FwdAGCCheck_CDMALTE_8:
   \   00000220   09F2AB14           ADDW     R4,R9,#+427
   \   00000224   8142               CMP      R1,R0
   \   00000226   2EBF               ITEE     CS 
   \   00000228   3220               MOVCS    R0,#+50
   \   0000022A   C0F13200           RSBCC    R0,R0,#+50
   \   0000022E   0818               ADDCC    R0,R1,R0
    763          		{
    764          			Sts->AttOffset.FwdAttn1_LTE = AGC25_ATTENMAX_LTE;
    765          		}
    766          		else
    767          		{
    768          			Sts->AttOffset.FwdAttn1_LTE = AGC25_ATTENMAX_LTE- CurrAttn;
   \                     ??FwdAGCCheck_CDMALTE_10:
   \   00000230   E071               STRB     R0,[R4, #+7]
    769          		}
    770          	}
    771          	
    772          	Sts->FwdAttn1_LTE = Sts->AttOffset.FwdAttn1_LTE;
   \                     ??FwdAGCCheck_CDMALTE_9:
   \   00000232   09F2AB14           ADDW     R4,R9,#+427
   \   00000236   94F90700           LDRSB    R0,[R4, #+7]
   \   0000023A   B071               STRB     R0,[R6, #+6]
    773          
    774          	
    775          	tRvsAGCMAX_2G  = AGCMAX_2G  + Sts->RvsGainBalance_2G *2;
   \   0000023C   99F84C00           LDRB     R0,[R9, #+76]
   \   00000240   4000               LSLS     R0,R0,#+1
   \   00000242   00F16407           ADD      R7,R0,#+100
    776          	tRvsAGCMAX_LTE = AGCMAX_LTE + Sts->RvsGainBalance_LTE *2;
   \   00000246   9AF80300           LDRB     R0,[R10, #+3]
   \   0000024A   4000               LSLS     R0,R0,#+1
   \   0000024C   6430               ADDS     R0,R0,#+100
   \   0000024E   8DF80000           STRB     R0,[SP, #+0]
    777          
    778          	CurrAgcAttn_2G = Sts->FwdAttn1_CDMALTE + Sts->FwdAttn1_2G;
   \   00000252   99F9DC01           LDRSB    R0,[R9, #+476]
   \   00000256   99F8C010           LDRB     R1,[R9, #+192]
   \   0000025A   0818               ADDS     R0,R1,R0
   \   0000025C   ........           LDR.W    R1,??DataTable8
   \   00000260   0870               STRB     R0,[R1, #+0]
    779          
    780          	if(Sts->AGCOnOff_CDMALTE == Enable)
   \   00000262   99F84C10           LDRB     R1,[R9, #+76]
   \   00000266   4A00               LSLS     R2,R1,#+1
   \   00000268   96F90F30           LDRSB    R3,[R6, #+15]
   \   0000026C   7FB2               SXTB     R7,R7
   \   0000026E   3946               MOV      R1,R7
   \   00000270   ........           LDR.W    R5,??DataTable8_1
   \   00000274   9AF816C0           LDRB     R12,[R10, #+22]
   \   00000278   BCF1000F           CMP      R12,#+0
   \   0000027C   0CD1               BNE.N    ??FwdAGCCheck_CDMALTE_11
    781          	{
    782          		Sts->RvsGainAttn_2G = CurrAgcAttn_2G - Sts->RvsAlcAttn_2G + Sts->RvsGainBalance_2G*2;
   \   0000027E   40B2               SXTB     R0,R0
   \   00000280   C01A               SUBS     R0,R0,R3
   \   00000282   1018               ADDS     R0,R2,R0
   \   00000284   89F8BB02           STRB     R0,[R9, #+699]
   \   00000288   0022               MOVS     R2,#+0
   \   0000028A   99F9BB02           LDRSB    R0,[R9, #+699]
    783          		Sts->RvsGainAttn_2G = MinMaxAttnCheck(Sts->RvsGainAttn_2G,tRvsAGCMAX_2G,ATTENMIN);
   \   0000028E   ........           BL       MinMaxAttnCheck
   \   00000292   89F8BB02           STRB     R0,[R9, #+699]
    784          		CurrRvsAgcAttn_2G = Sts->RvsGainAttn_2G;
   \   00000296   08E0               B.N      ??FwdAGCCheck_CDMALTE_12
    785          	}
    786          	else
    787          	{
    788          		CurrRvsAgcAttn_2G = Sts->RvsGainAttn_2G - Sts->RvsAlcAttn_2G + Sts->RvsGainBalance_2G *2;
   \                     ??FwdAGCCheck_CDMALTE_11:
   \   00000298   99F9BB02           LDRSB    R0,[R9, #+699]
   \   0000029C   C01A               SUBS     R0,R0,R3
   \   0000029E   1018               ADDS     R0,R2,R0
   \   000002A0   2870               STRB     R0,[R5, #+0]
    789          		CurrRvsAgcAttn_2G = MinMaxAttnCheck(CurrRvsAgcAttn_2G,tRvsAGCMAX_2G,ATTENMIN);
   \   000002A2   0022               MOVS     R2,#+0
   \   000002A4   A856               LDRSB    R0,[R5, R2]
   \   000002A6   ........           BL       MinMaxAttnCheck
   \                     ??FwdAGCCheck_CDMALTE_12:
   \   000002AA   2870               STRB     R0,[R5, #+0]
    790          	}
    791          
    792          	if(Sts->AlmSts.FwdAmpOnOff_2G == Disable)
   \   000002AC   99F80E00           LDRB     R0,[R9, #+14]
   \   000002B0   8006               LSLS     R0,R0,#+26
   \   000002B2   48BF               IT       MI 
   \   000002B4   2F70               STRBMI   R7,[R5, #+0]
    793          	{
    794          		CurrRvsAgcAttn_2G = tRvsAGCMAX_2G;
    795          	}
    796          
    797          	CurrAgcAttn_LTE = Sts->FwdAttn1_CDMALTE + Sts->FwdAttn1_LTE;
   \   000002B6   99F9DC01           LDRSB    R0,[R9, #+476]
   \   000002BA   B179               LDRB     R1,[R6, #+6]
   \   000002BC   0818               ADDS     R0,R1,R0
   \   000002BE   ........           LDR.W    R1,??DataTable6_7
   \   000002C2   0870               STRB     R0,[R1, #+0]
    798          	
    799          	if(Sts->AGCOnOff_CDMALTE == Enable)
   \   000002C4   9AF80310           LDRB     R1,[R10, #+3]
   \   000002C8   4A00               LSLS     R2,R1,#+1
   \   000002CA   96F91030           LDRSB    R3,[R6, #+16]
   \   000002CE   9DF90010           LDRSB    R1,[SP, #+0]
   \   000002D2   ........           LDR.W    R7,??DataTable6_2
   \   000002D6   9AF816C0           LDRB     R12,[R10, #+22]
   \   000002DA   BCF1000F           CMP      R12,#+0
   \   000002DE   0CD1               BNE.N    ??FwdAGCCheck_CDMALTE_13
    800          	{
    801          		Sts->RvsGainAttn_LTE = CurrAgcAttn_LTE - Sts->RvsAlcAttn_LTE + Sts->RvsGainBalance_LTE*2;
   \   000002E0   40B2               SXTB     R0,R0
   \   000002E2   C01A               SUBS     R0,R0,R3
   \   000002E4   1018               ADDS     R0,R2,R0
   \   000002E6   88F80100           STRB     R0,[R8, #+1]
   \   000002EA   0022               MOVS     R2,#+0
   \   000002EC   98F90100           LDRSB    R0,[R8, #+1]
    802          		Sts->RvsGainAttn_LTE = MinMaxAttnCheck(Sts->RvsGainAttn_LTE,tRvsAGCMAX_LTE,ATTENMIN);
   \   000002F0   ........           BL       MinMaxAttnCheck
   \   000002F4   88F80100           STRB     R0,[R8, #+1]
    803          		CurrRvsAgcAttn_LTE = Sts->RvsGainAttn_LTE;
   \   000002F8   08E0               B.N      ??FwdAGCCheck_CDMALTE_14
    804          	}
    805          	else
    806          	{
    807          		CurrRvsAgcAttn_LTE = Sts->RvsGainAttn_LTE - Sts->RvsAlcAttn_LTE + Sts->RvsGainBalance_LTE*2;
   \                     ??FwdAGCCheck_CDMALTE_13:
   \   000002FA   98F90100           LDRSB    R0,[R8, #+1]
   \   000002FE   C01A               SUBS     R0,R0,R3
   \   00000300   1018               ADDS     R0,R2,R0
   \   00000302   3870               STRB     R0,[R7, #+0]
    808          		CurrRvsAgcAttn_LTE = MinMaxAttnCheck(CurrRvsAgcAttn_LTE,tRvsAGCMAX_LTE,ATTENMIN);
   \   00000304   0022               MOVS     R2,#+0
   \   00000306   B856               LDRSB    R0,[R7, R2]
   \   00000308   ........           BL       MinMaxAttnCheck
   \                     ??FwdAGCCheck_CDMALTE_14:
   \   0000030C   3870               STRB     R0,[R7, #+0]
    809          	}
    810          
    811          	if(Sts->AlmSts.FwdAmpOnOff_LTE == Disable)
   \   0000030E   99F80E00           LDRB     R0,[R9, #+14]
   \   00000312   C006               LSLS     R0,R0,#+27
   \   00000314   44BF               ITT      MI 
   \   00000316   9DF80000           LDRBMI   R0,[SP, #+0]
   \   0000031A   3870               STRBMI   R0,[R7, #+0]
    812          	{
    813          		CurrRvsAgcAttn_LTE = tRvsAGCMAX_LTE;
    814          	}
    815          	
    816          	///////////////////////////////////////////////2013.03.19
    817          	if(chkSleepMode[PATH_2G] == SET)
   \   0000031C   ........           LDR.W    R0,??DataTable8_2
   \   00000320   0178               LDRB     R1,[R0, #+0]
   \   00000322   0129               CMP      R1,#+1
   \   00000324   07D1               BNE.N    ??FwdAGCCheck_CDMALTE_15
    818          	{
    819          //		Sts->Rvs0GainSet_2G =  FwdMinGain_2G;
    820          
    821          		Sts->RvsGainAttn_2G = GainATTENMAX;
   \   00000326   6421               MOVS     R1,#+100
   \   00000328   89F8BB12           STRB     R1,[R9, #+699]
    822          		CurrRvsAgcAttn_2G = Sts->RvsGainAttn_2G;
   \   0000032C   2970               STRB     R1,[R5, #+0]
    823          
    824          		Sts->RvsAttn2_2G = ATTENMAX;
   \   0000032E   3C21               MOVS     R1,#+60
   \   00000330   8BF80410           STRB     R1,[R11, #+4]
    825          		Sts->RvsAttn3_2G = ATTENMAX;
   \   00000334   16E0               B.N      ??FwdAGCCheck_CDMALTE_16
    826          	}
    827          	else
    828          	{
    829          		tAGC_ATTENMAX_2G = RVSAGC20_ATTENMAX_2G + Sts->RvsGainBalance_2G*2;
   \                     ??FwdAGCCheck_CDMALTE_15:
   \   00000336   ........           LDR.W    R1,??DataTable8_3
   \   0000033A   99F84C20           LDRB     R2,[R9, #+76]
   \   0000033E   5200               LSLS     R2,R2,#+1
   \   00000340   2832               ADDS     R2,R2,#+40
   \   00000342   0A70               STRB     R2,[R1, #+0]
    830          		if(CurrRvsAgcAttn_2G < tAGC_ATTENMAX_2G)
   \   00000344   95F90020           LDRSB    R2,[R5, #+0]
   \   00000348   0B78               LDRB     R3,[R1, #+0]
   \   0000034A   9E46               MOV      LR,R3
   \   0000034C   7245               CMP      R2,LR
   \   0000034E   BCBF               ITT      LT 
   \   00000350   8BF80420           STRBLT   R2,[R11, #+4]
   \   00000354   0021               MOVLT    R1,#+0
    831          		{
    832          			Sts->RvsAttn2_2G = CurrRvsAgcAttn_2G;
    833          			Sts->RvsAttn3_2G = 0;
   \   00000356   05DB               BLT.N    ??FwdAGCCheck_CDMALTE_16
    834          		}
    835          		else
    836          		{
    837          			Sts->RvsAttn2_2G = tAGC_ATTENMAX_2G;
   \   00000358   8BF80430           STRB     R3,[R11, #+4]
    838          			Sts->RvsAttn3_2G = CurrRvsAgcAttn_2G - tAGC_ATTENMAX_2G;
   \   0000035C   95F90020           LDRSB    R2,[R5, #+0]
   \   00000360   0978               LDRB     R1,[R1, #+0]
   \   00000362   511A               SUBS     R1,R2,R1
   \                     ??FwdAGCCheck_CDMALTE_16:
   \   00000364   8BF80610           STRB     R1,[R11, #+6]
    839          		}
    840          	}
    841          
    842          
    843          	if(chkSleepMode[PATH_LTE] == SET)
   \   00000368   4078               LDRB     R0,[R0, #+1]
   \   0000036A   0128               CMP      R0,#+1
   \   0000036C   06D1               BNE.N    ??FwdAGCCheck_CDMALTE_17
    844          	{
    845          		Sts->RvsGainAttn_LTE = GainATTENMAX;
   \   0000036E   6420               MOVS     R0,#+100
   \   00000370   88F80100           STRB     R0,[R8, #+1]
    846          		CurrRvsAgcAttn_LTE = Sts->RvsGainAttn_LTE;
   \   00000374   3870               STRB     R0,[R7, #+0]
    847          		Sts->RvsAttn2_LTE = ATTENMAX;
   \   00000376   3C20               MOVS     R0,#+60
   \   00000378   3072               STRB     R0,[R6, #+8]
    848          		Sts->RvsAttn3_LTE = ATTENMAX;
   \   0000037A   13E0               B.N      ??FwdAGCCheck_CDMALTE_18
    849          	}
    850          	else
    851          	{
    852          		tAGC_ATTENMAX_LTE = RVSAGC20_ATTENMAX_2G + Sts->RvsGainBalance_LTE*2;
   \                     ??FwdAGCCheck_CDMALTE_17:
   \   0000037C   ........           LDR.W    R0,??DataTable7
   \   00000380   9AF80310           LDRB     R1,[R10, #+3]
   \   00000384   4900               LSLS     R1,R1,#+1
   \   00000386   2831               ADDS     R1,R1,#+40
   \   00000388   0170               STRB     R1,[R0, #+0]
    853          		if(CurrRvsAgcAttn_LTE < tAGC_ATTENMAX_LTE) 
   \   0000038A   97F90010           LDRSB    R1,[R7, #+0]
   \   0000038E   0278               LDRB     R2,[R0, #+0]
   \   00000390   9142               CMP      R1,R2
   \   00000392   BCBF               ITT      LT 
   \   00000394   3172               STRBLT   R1,[R6, #+8]
   \   00000396   0020               MOVLT    R0,#+0
    854          		{
    855          			Sts->RvsAttn2_LTE = CurrRvsAgcAttn_LTE;
    856          			Sts->RvsAttn3_LTE = 0;
   \   00000398   04DB               BLT.N    ??FwdAGCCheck_CDMALTE_18
    857          		}
    858          		else
    859          		{
    860          			Sts->RvsAttn2_LTE = tAGC_ATTENMAX_LTE;
   \   0000039A   3272               STRB     R2,[R6, #+8]
    861          			Sts->RvsAttn3_LTE = CurrRvsAgcAttn_LTE - tAGC_ATTENMAX_LTE;
   \   0000039C   97F90010           LDRSB    R1,[R7, #+0]
   \   000003A0   0078               LDRB     R0,[R0, #+0]
   \   000003A2   081A               SUBS     R0,R1,R0
   \                     ??FwdAGCCheck_CDMALTE_18:
   \   000003A4   7072               STRB     R0,[R6, #+9]
    862          		}	
    863          	}
    864          //////////////////////////////////////////////////////////////////////////////////////////
    865          	tALC_ATTENMAX_2G = RVSALC20_ATTENMAX_2G;
   \   000003A6   ........           LDR.W    R0,??DataTable8_4
   \   000003AA   2821               MOVS     R1,#+40
   \   000003AC   0170               STRB     R1,[R0, #+0]
    866          
    867          	if(Sts->RvsAlcAttn_2G > tALC_ATTENMAX_2G)
   \   000003AE   96F90F00           LDRSB    R0,[R6, #+15]
   \   000003B2   2928               CMP      R0,#+41
   \   000003B4   ACBF               ITE      GE 
   \   000003B6   2838               SUBGE    R0,R0,#+40
   \   000003B8   0020               MOVLT    R0,#+0
    868          	{
    869          		Sts->cRvsAttn_CDMA = Sts->RvsAlcAttn_2G - tALC_ATTENMAX_2G;
    870          	}
    871          	else Sts->cRvsAttn_CDMA = 0;
   \   000003BA   3071               STRB     R0,[R6, #+4]
    872          		
    873          	if(Sts->RvsAlcAttn_LTE > RVSALC25_ATTENMAX_LTE)
   \   000003BC   96F91000           LDRSB    R0,[R6, #+16]
   \   000003C0   3328               CMP      R0,#+51
   \   000003C2   ACBF               ITE      GE 
   \   000003C4   3238               SUBGE    R0,R0,#+50
   \   000003C6   0020               MOVLT    R0,#+0
    874          	{
    875          		Sts->cRvsAttn_LTE = Sts->RvsAlcAttn_LTE - RVSALC25_ATTENMAX_LTE;
    876          	}
    877          	else Sts->cRvsAttn_LTE = 0;
   \   000003C8   7071               STRB     R0,[R6, #+5]
    878          	
    879          	if( Sts->cRvsAttn_LTE >  Sts->cRvsAttn_CDMA)	Sts->RvsAttn1_CDMALTE = Sts->cRvsAttn_LTE;
   \   000003CA   3079               LDRB     R0,[R6, #+4]
   \   000003CC   7179               LDRB     R1,[R6, #+5]
   \   000003CE   8842               CMP      R0,R1
   \   000003D0   38BF               IT       CC 
   \   000003D2   0846               MOVCC    R0,R1
    880          	else											Sts->RvsAttn1_CDMALTE = Sts->cRvsAttn_CDMA;
    881          	if (Sts->RvsAttn1_CDMALTE >= DIGATTENMAX_2G) 	Sts->RvsAttn1_CDMALTE = DIGATTENMAX_2G;
   \   000003D4   3228               CMP      R0,#+50
   \   000003D6   28BF               IT       CS 
   \   000003D8   3220               MOVCS    R0,#+50
   \   000003DA   7070               STRB     R0,[R6, #+1]
    882          
    883          	if(Sts->RvsAlcAttn_2G <= RVSALC20_ATTENMAX_2G)
   \   000003DC   96F90F00           LDRSB    R0,[R6, #+15]
   \   000003E0   ........           LDR.W    R1,??DataTable8_5
   \   000003E4   2928               CMP      R0,#+41
   \   000003E6   BEBF               ITTT     LT 
   \   000003E8   8BF80300           STRBLT   R0,[R11, #+3]
   \   000003EC   0878               LDRBLT   R0,[R1, #+0]
   \   000003EE   A070               STRBLT   R0,[R4, #+2]
    884          	{
    885          		Sts->RvsAttn1_2G  = Sts->RvsAlcAttn_2G;
    886          		Sts->AttOffset.RvsAttn1_2G	= tmpRvsAttn1_2G;
   \   000003F0   A4BF               ITT      GE 
   \   000003F2   2820               MOVGE    R0,#+40
   \   000003F4   8BF80300           STRBGE   R0,[R11, #+3]
    887          	}
    888          	else
    889          	{
    890          		Sts->RvsAttn1_2G  = RVSALC20_ATTENMAX_2G;
    891          	}
    892          
    893          	if(Sts->RvsAlcAttn_LTE <= RVSALC25_ATTENMAX_LTE)
   \   000003F8   96F91000           LDRSB    R0,[R6, #+16]
   \   000003FC   3328               CMP      R0,#+51
   \   000003FE   BCBF               ITT      LT 
   \   00000400   F071               STRBLT   R0,[R6, #+7]
   \   00000402   91F90000           LDRSBLT  R0,[R1, #+0]
    894          	{
    895          		Sts->RvsAttn1_LTE  = Sts->RvsAlcAttn_LTE;
    896          
    897          		Sts->AttOffset.RvsAttn1_2G	= tmpRvsAttn1_2G;
   \   00000406   0DDB               BLT.N    ??FwdAGCCheck_CDMALTE_19
    898          	}
    899          	else
    900          	{
    901          		Sts->RvsAttn1_LTE  = RVSALC25_ATTENMAX_LTE;
   \   00000408   3220               MOVS     R0,#+50
   \   0000040A   F071               STRB     R0,[R6, #+7]
    902          
    903          		if( Sts->cRvsAttn_LTE >= Sts->cRvsAttn_CDMA)
   \   0000040C   3279               LDRB     R2,[R6, #+4]
   \   0000040E   7379               LDRB     R3,[R6, #+5]
   \   00000410   91F90000           LDRSB    R0,[R1, #+0]
   \   00000414   9342               CMP      R3,R2
   \   00000416   05D3               BCC.N    ??FwdAGCCheck_CDMALTE_19
    904          		{
    905          			Sts->AttOffset.RvsAttn1_2G	= tmpRvsAttn1_2G - (Sts->cRvsAttn_LTE - Sts->cRvsAttn_CDMA);
   \   00000418   C01A               SUBS     R0,R0,R3
   \   0000041A   1018               ADDS     R0,R2,R0
    906          			if(Sts->AttOffset.RvsAttn1_2G <= 0)	Sts->AttOffset.RvsAttn1_2G = 0;
   \   0000041C   40B2               SXTB     R0,R0
   \   0000041E   0128               CMP      R0,#+1
   \   00000420   B8BF               IT       LT 
   \   00000422   0020               MOVLT    R0,#+0
    907          		}
    908          		else
    909          		{
    910          			Sts->AttOffset.RvsAttn1_2G	= tmpRvsAttn1_2G;
   \                     ??FwdAGCCheck_CDMALTE_19:
   \   00000424   A070               STRB     R0,[R4, #+2]
    911          		}
    912          	}
    913          }
   \   00000426                      REQUIRE ?Subroutine0
   \   00000426                      ;; // Fall through to label ?Subroutine0
    914          
    915          

   \                                 In section .text, align 2, keep-with-next
    916          void FwdAGCCheck_WCDMA(void)
    917          {
   \                     FwdAGCCheck_WCDMA:
   \   00000000   2DE9F043           PUSH     {R4-R9,LR}
   \   00000004   85B0               SUB      SP,SP,#+20
    918          	INT8S tmpAgcAttn_3G; 
    919          	INT8S tAgcAttn_3G; 
    920          	INT8S tRvsAGCMAX_3G; 
    921          
    922          	__Dnr_Sts  *Sts = tDnrSts; 
   \   00000006   ....               LDR.N    R0,??DataTable4
   \   00000008   0568               LDR      R5,[R0, #+0]
    923          
    924          		////자사 
    925          	{
    926          		iAGCOnOff = Sts->AGCOnOff_3G;
   \   0000000A   05F24906           ADDW     R6,R5,#+73
   \   0000000E   ........           LDR.W    R4,??DataTable6_3
   \   00000012   307E               LDRB     R0,[R6, #+24]
   \   00000014   2070               STRB     R0,[R4, #+0]
    927          		iAGClimit = OneOutPwrConv(Sts->FwdOutUpperLmt_3G);
   \   00000016   ........           LDR.W    R9,??DataTable6_4
   \   0000001A   05F12000           ADD      R0,R5,#+32
   \   0000001E   ........           BL       OneOutPwrConv
   \   00000022   A9F80000           STRH     R0,[R9, #+0]
    928          
    929          		if( Sts->AGCMode_3G == _AGCAvgMode)
   \   00000026   F07E               LDRB     R0,[R6, #+27]
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   0CBF               ITE      EQ 
   \   0000002C   05F11C00           ADDEQ    R0,R5,#+28
   \   00000030   05F11E00           ADDNE    R0,R5,#+30
    930          		{
    931          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwr_3G);
    932          		}
    933          		else
    934          		{
    935          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwrPeak_3G);
   \   00000034   ........           BL       OneOutPwrConv
   \   00000038   ........           LDR.W    R7,??DataTable6_5
   \   0000003C   3880               STRH     R0,[R7, #+0]
    936          		}	
    937          		
    938          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdAgcAttn_3G, AGCMAX_3G, ATTENMIN,Sts->FwdAmpOnOff_3G,_AGCMode);
   \   0000003E   0120               MOVS     R0,#+1
   \   00000040   0390               STR      R0,[SP, #+12]
   \   00000042   96F91400           LDRSB    R0,[R6, #+20]
   \   00000046   0290               STR      R0,[SP, #+8]
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   0190               STR      R0,[SP, #+4]
   \   0000004C   5620               MOVS     R0,#+86
   \   0000004E   0090               STR      R0,[SP, #+0]
   \   00000050   05F5F573           ADD      R3,R5,#+490
   \   00000054   94F90020           LDRSB    R2,[R4, #+0]
   \   00000058   B9F90010           LDRSH    R1,[R9, #+0]
   \   0000005C   B7F90000           LDRSH    R0,[R7, #+0]
   \   00000060   ........           BL       AGCCheck
    939          	}
    940          		
    941          	{
    942          		iAGCOnOff= Sts->RvsAlcOnOff_3G;
   \   00000064   05F2DB18           ADDW     R8,R5,#+475
   \   00000068   98F81500           LDRB     R0,[R8, #+21]
   \   0000006C   2070               STRB     R0,[R4, #+0]
    943          		iAGCPwr = Sts->DetPwr.RvsOutPwr_3G;
   \   0000006E   05F24C10           ADDW     R0,R5,#+332
   \   00000072   90F90410           LDRSB    R1,[R0, #+4]
   \   00000076   3980               STRH     R1,[R7, #+0]
    944          
    945          		if((Sts->AlmSts.FwdAmpOnOff_3G == Disable)||( Sts->DetPwr.FwdOutAvgPwr_3G <= 0)||(Sts->AGCOnOff_3G == Disable))
   \   00000078   A97B               LDRB     R1,[R5, #+14]
   \   0000007A   4906               LSLS     R1,R1,#+25
   \   0000007C   06D4               BMI.N    ??FwdAGCCheck_WCDMA_0
   \   0000007E   90F90100           LDRSB    R0,[R0, #+1]
   \   00000082   0128               CMP      R0,#+1
   \   00000084   02DB               BLT.N    ??FwdAGCCheck_WCDMA_0
   \   00000086   307E               LDRB     R0,[R6, #+24]
   \   00000088   0128               CMP      R0,#+1
   \   0000008A   05D1               BNE.N    ??FwdAGCCheck_WCDMA_1
    946          		{
    947          			iAGClimit = (tmpRvsALCLvl_3G)*2 ;
   \                     ??FwdAGCCheck_WCDMA_0:
   \   0000008C   ........           LDR.W    R0,??DataTable8_6
   \   00000090   90F90000           LDRSB    R0,[R0, #+0]
   \   00000094   4000               LSLS     R0,R0,#+1
   \   00000096   07E0               B.N      ??FwdAGCCheck_WCDMA_2
    948          		}
    949          		else
    950          		{
    951          			iAGClimit = (tmpRvsALCLvl_3G*2 - Sts->RvsGainAttn_3G);
   \                     ??FwdAGCCheck_WCDMA_1:
   \   00000098   ........           LDR.W    R0,??DataTable8_6
   \   0000009C   90F90000           LDRSB    R0,[R0, #+0]
   \   000000A0   95F9BE12           LDRSB    R1,[R5, #+702]
   \   000000A4   C1EB4000           RSB      R0,R1,R0, LSL #+1
   \                     ??FwdAGCCheck_WCDMA_2:
   \   000000A8   A9F80000           STRH     R0,[R9, #+0]
    952          		}
    953          		Sts->AttOffset.RvsAttn5_3G = iAGClimit/2;
   \   000000AC   B9F90000           LDRSH    R0,[R9, #+0]
   \   000000B0   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   000000B4   4010               ASRS     R0,R0,#+1
   \   000000B6   85F8DB01           STRB     R0,[R5, #+475]
    954          
    955          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->RvsAlcAttn_3G, tRvsALCMAX_3G, ATTENMIN,Sts->FwdAmpOnOff_3G, _ALCMode);
   \   000000BA   0020               MOVS     R0,#+0
   \   000000BC   0390               STR      R0,[SP, #+12]
   \   000000BE   96F91400           LDRSB    R0,[R6, #+20]
   \   000000C2   0290               STR      R0,[SP, #+8]
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   0190               STR      R0,[SP, #+4]
   \   000000C8   5A20               MOVS     R0,#+90
   \   000000CA   0090               STR      R0,[SP, #+0]
   \   000000CC   05F2ED13           ADDW     R3,R5,#+493
   \   000000D0   94F90020           LDRSB    R2,[R4, #+0]
   \   000000D4   B9F90010           LDRSH    R1,[R9, #+0]
   \   000000D8   B7F90000           LDRSH    R0,[R7, #+0]
   \   000000DC   ........           BL       AGCCheck
    956          	}
    957          
    958          
    959          	{
    960          		iAGCOnOff  = Enable;
   \   000000E0   0020               MOVS     R0,#+0
   \   000000E2   2070               STRB     R0,[R4, #+0]
    961          		iAGCAttnMAX = 25*2;
   \   000000E4   ........           LDR.W    R0,??DataTable6_6
   \   000000E8   3221               MOVS     R1,#+50
   \   000000EA   0170               STRB     R1,[R0, #+0]
    962          		iAGClimit = OtherFwdOverInLmt_3G ; 		// -36*2dBm
   \   000000EC   6FF04900           MVN      R0,#+73
   \   000000F0   A9F80000           STRH     R0,[R9, #+0]
    963          		iAGCPwr = -Sts->DetPwr.FwdInPwr_3G*2;
   \   000000F4   95F94C01           LDRSB    R0,[R5, #+332]
   \   000000F8   4042               RSBS     R0,R0,#+0
   \   000000FA   4000               LSLS     R0,R0,#+1
   \   000000FC   3880               STRH     R0,[R7, #+0]
    964          	
    965          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdInAlcAttn_3G, iAGCAttnMAX, ATTENMIN, Sts->FwdAmpOnOff_3G, _InputALCMode);	
   \   000000FE   0221               MOVS     R1,#+2
   \   00000100   0391               STR      R1,[SP, #+12]
   \   00000102   96F91410           LDRSB    R1,[R6, #+20]
   \   00000106   0291               STR      R1,[SP, #+8]
   \   00000108   0021               MOVS     R1,#+0
   \   0000010A   0191               STR      R1,[SP, #+4]
   \   0000010C   3221               MOVS     R1,#+50
   \   0000010E   0091               STR      R1,[SP, #+0]
   \   00000110   05F2C423           ADDW     R3,R5,#+708
   \   00000114   0022               MOVS     R2,#+0
   \   00000116   6FF04901           MVN      R1,#+73
   \   0000011A   00B2               SXTH     R0,R0
   \   0000011C   ........           BL       AGCCheck
    966          	}
    967          
    968          	tRvsAGCMAX_3G = AGCMAX_3G + Sts->RvsGainBalance_3G*2;
   \   00000120   95F94900           LDRSB    R0,[R5, #+73]
   \   00000124   4000               LSLS     R0,R0,#+1
   \   00000126   00F15601           ADD      R1,R0,#+86
   \   0000012A   49B2               SXTB     R1,R1
    969          
    970          	if( Sts->FwdAgcAttn_3G > Sts->FwdInAlcAttn_3G)
   \   0000012C   98F90F00           LDRSB    R0,[R8, #+15]
   \   00000130   05F2BE22           ADDW     R2,R5,#+702
   \   00000134   92F90620           LDRSB    R2,[R2, #+6]
   \   00000138   8242               CMP      R2,R0
   \   0000013A   B8BF               IT       LT 
   \   0000013C   801A               SUBLT    R0,R0,R2
    971          	{
    972          		tAgcAttn_3G = Sts->FwdAgcAttn_3G - Sts->FwdInAlcAttn_3G; 
    973          	}
    974          	else tAgcAttn_3G = Sts->FwdAgcAttn_3G;
    975          
    976          
    977          	if(tAgcAttn_3G >= AGC20_ATTENMAX_3G)
   \   0000013E   40B2               SXTB     R0,R0
   \   00000140   2828               CMP      R0,#+40
   \   00000142   A6BF               ITTE     GE 
   \   00000144   A0F12803           SUBGE    R3,R0,#+40
   \   00000148   2820               MOVGE    R0,#+40
   \   0000014A   0023               MOVLT    R3,#+0
    978          	{
    979          		Sts->FwdAttn1_3G = tAgcAttn_3G - AGC20_ATTENMAX_3G;
    980          		Sts->FwdAttn2_3G = AGC20_ATTENMAX_3G;
    981          	}
    982          	else
    983          	{
    984          		Sts->FwdAttn1_3G = 0;
    985          		Sts->FwdAttn2_3G = tAgcAttn_3G;
   \   0000014C   05F2C107           ADDW     R7,R5,#+193
   \   00000150   7870               STRB     R0,[R7, #+1]
    986          	}
    987          
    988          	Sts->FwdAttn1_3G = Sts->FwdAttn1_3G + Sts->FwdInAlcAttn_3G;
   \   00000152   D018               ADDS     R0,R2,R3
   \   00000154   85F8C100           STRB     R0,[R5, #+193]
    989          
    990          	CurrAgcAttn_3G = Sts->FwdAttn1_3G + Sts->FwdAttn2_3G;
   \   00000158   7A78               LDRB     R2,[R7, #+1]
   \   0000015A   1018               ADDS     R0,R2,R0
   \   0000015C   ........           LDR.W    R2,??DataTable8_7
   \   00000160   1070               STRB     R0,[R2, #+0]
    991          
    992          	if(Sts->AGCOnOff_3G == Enable)
   \   00000162   98F91230           LDRSB    R3,[R8, #+18]
   \   00000166   95F84940           LDRB     R4,[R5, #+73]
   \   0000016A   327E               LDRB     R2,[R6, #+24]
   \   0000016C   62B9               CBNZ.N   R2,??FwdAGCCheck_WCDMA_3
    993          	{
    994          		Sts->RvsGainAttn_3G = CurrAgcAttn_3G - Sts->RvsAlcAttn_3G + Sts->RvsGainBalance_3G*2;
   \   0000016E   40B2               SXTB     R0,R0
   \   00000170   C01A               SUBS     R0,R0,R3
   \   00000172   00EB4400           ADD      R0,R0,R4, LSL #+1
   \   00000176   85F8BE02           STRB     R0,[R5, #+702]
   \   0000017A   95F9BE02           LDRSB    R0,[R5, #+702]
    995          		Sts->RvsGainAttn_3G = MinMaxAttnCheck(Sts->RvsGainAttn_3G,tRvsAGCMAX_3G,ATTENMIN);
   \   0000017E   ........           BL       MinMaxAttnCheck
   \   00000182   85F8BE02           STRB     R0,[R5, #+702]
    996          		tmpAgcAttn_3G = Sts->RvsGainAttn_3G;
   \   00000186   08E0               B.N      ??FwdAGCCheck_WCDMA_4
    997          	}
    998          	else
    999          	{
   1000          		tmpAgcAttn_3G = Sts->RvsGainAttn_3G - Sts->RvsAlcAttn_3G + Sts->RvsGainBalance_3G*2;
   1001          		tmpAgcAttn_3G = MinMaxAttnCheck(tmpAgcAttn_3G,tRvsAGCMAX_3G,ATTENMIN);
   \                     ??FwdAGCCheck_WCDMA_3:
   \   00000188   0022               MOVS     R2,#+0
   \   0000018A   95F8BE02           LDRB     R0,[R5, #+702]
   \   0000018E   C01A               SUBS     R0,R0,R3
   \   00000190   00EB4400           ADD      R0,R0,R4, LSL #+1
   \   00000194   40B2               SXTB     R0,R0
   \   00000196   ........           BL       MinMaxAttnCheck
   1002          	}
   1003          
   1004          	if(Sts->AlmSts.FwdAmpOnOff_3G== Disable)
   \                     ??FwdAGCCheck_WCDMA_4:
   \   0000019A   A97B               LDRB     R1,[R5, #+14]
   \   0000019C   4906               LSLS     R1,R1,#+25
   \   0000019E   48BF               IT       MI 
   \   000001A0   5620               MOVMI    R0,#+86
   1005          	{
   1006          		tmpAgcAttn_3G = AGCMAX_3G;
   1007          	}
   1008          
   1009          	{
   1010          		tAGC10_ATTENMAX_3G  = AGC10_ATTENMAX_3G + Sts->RvsGainBalance_3G*2;
   \   000001A2   ........           LDR.W    R1,??DataTable8_8
   \   000001A6   95F84920           LDRB     R2,[R5, #+73]
   \   000001AA   5200               LSLS     R2,R2,#+1
   \   000001AC   1432               ADDS     R2,R2,#+20
   \   000001AE   0A70               STRB     R2,[R1, #+0]
   1011          		if(tmpAgcAttn_3G <= tAGC10_ATTENMAX_3G)	
   \   000001B0   0A78               LDRB     R2,[R1, #+0]
   \   000001B2   8242               CMP      R2,R0
   \   000001B4   A4BF               ITT      GE 
   \   000001B6   3872               STRBGE   R0,[R7, #+8]
   \   000001B8   0020               MOVGE    R0,#+0
   1012          		{
   1013          			Sts->RvsAttn3_3G = tmpAgcAttn_3G;
   1014          			Sts->RvsAttn4_3G = 0;
   \   000001BA   03DA               BGE.N    ??FwdAGCCheck_WCDMA_5
   1015          		}
   1016          		else
   1017          		{
   1018          			Sts->RvsAttn3_3G = tAGC10_ATTENMAX_3G;
   \   000001BC   3A72               STRB     R2,[R7, #+8]
   1019          			Sts->RvsAttn4_3G = tmpAgcAttn_3G - tAGC10_ATTENMAX_3G;
   \   000001BE   91F90010           LDRSB    R1,[R1, #+0]
   \   000001C2   401A               SUBS     R0,R0,R1
   \                     ??FwdAGCCheck_WCDMA_5:
   \   000001C4   7872               STRB     R0,[R7, #+9]
   1020          		}
   1021          		Sts->RvsAttn4_3G = MinMaxAttnCheck(Sts->RvsAttn4_3G,AGCATTENMAX_3G,ATTENMIN);
   \   000001C6   0022               MOVS     R2,#+0
   \   000001C8   3C21               MOVS     R1,#+60
   \   000001CA   97F90900           LDRSB    R0,[R7, #+9]
   \   000001CE   ........           BL       MinMaxAttnCheck
   \   000001D2   7872               STRB     R0,[R7, #+9]
   1022          
   1023          		CurrRvsAgcAttn_3G = Sts->RvsAttn3_3G +Sts->RvsAttn4_3G;
   \   000001D4   97F90810           LDRSB    R1,[R7, #+8]
   \   000001D8   4018               ADDS     R0,R0,R1
   \   000001DA   ........           LDR.W    R1,??DataTable8_9
   \   000001DE   0870               STRB     R0,[R1, #+0]
   1024          
   1025          		if(Sts->RvsAlcAttn_3G <= RVSALC25_ATTENMAX_3G) 
   \   000001E0   98F91200           LDRSB    R0,[R8, #+18]
   \   000001E4   3328               CMP      R0,#+51
   \   000001E6   B9BF               ITTEE    LT 
   \   000001E8   0146               MOVLT    R1,R0
   \   000001EA   0020               MOVLT    R0,#+0
   \   000001EC   3221               MOVGE    R1,#+50
   \   000001EE   3238               SUBGE    R0,R0,#+50
   1026          		{
   1027          			Sts->RvsAttn1_3G = Sts->RvsAlcAttn_3G;
   1028          			Sts->RvsAttn2_3G = 0;
   1029          		}
   1030          		else
   1031          		{
   1032          			Sts->RvsAttn1_3G = RVSALC25_ATTENMAX_3G;
   1033          			Sts->RvsAttn2_3G = Sts->RvsAlcAttn_3G - RVSALC25_ATTENMAX_3G;
   \   000001F0   F871               STRB     R0,[R7, #+7]
   \   000001F2   B971               STRB     R1,[R7, #+6]
   1034          		}
   1035          	}
   1036          }
   \   000001F4   05B0               ADD      SP,SP,#+20
   \   000001F6   BDE8F083           POP      {R4-R9,PC}       ;; return
   1037          

   \                                 In section .text, align 2, keep-with-next
   1038          void FwdAGCCheck_LTE_A_0(void)
   1039          {
   \                     FwdAGCCheck_LTE_A_0:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   84B0               SUB      SP,SP,#+16
   1040          	INT8S tmpAttn_LTE_A1 = 0;
   1041          	INT8S tmpAttn_LTE_A2 = 0;
   1042          	INT8S CurrAttn = 0;
   1043          	INT8U tAmpOnOff = 0;
   \   00000006   0024               MOVS     R4,#+0
   1044          
   1045          	INT8S tAgcAttn_LTE_A1 = 0; 
   1046          	INT8S tAgcAttn_LTE_A2 = 0; 
   1047          	INT8S tRvsAGCMAX_LTE_A2 = 0; 
   1048          
   1049          	__Dnr_Sts  *Sts = tDnrSts; 
   \   00000008   ........           LDR.W    R0,??DataTable8_10
   \   0000000C   D0F80080           LDR      R8,[R0, #+0]
   1050          
   1051              tmpAttn_LTE_A1 = tmpAttn_LTE_A1;
   1052              tmpAttn_LTE_A2 = tmpAttn_LTE_A2;
   1053          
   1054              CurrAttn = CurrAttn;
   1055              tAgcAttn_LTE_A1 = tAgcAttn_LTE_A1;
   1056              
   1057              tAgcAttn_LTE_A2 = tAgcAttn_LTE_A2;
   1058              
   1059              tRvsAGCMAX_LTE_A2 = tRvsAGCMAX_LTE_A2;
   1060          //자사 
   1061          	{
   1062          		iAGCOnOff = Sts->AGCOnOff_LTE_A_0;
   \   00000010   08F26005           ADDW     R5,R8,#+96
   \   00000014   ....               LDR.N    R6,??DataTable6_3
   \   00000016   E878               LDRB     R0,[R5, #+3]
   \   00000018   3070               STRB     R0,[R6, #+0]
   1063          		iAGClimit = OneOutPwrConv(Sts->FwdOutUpperLmt_LTE_A2);
   \   0000001A   ....               LDR.N    R7,??DataTable6_4
   \   0000001C   08F14100           ADD      R0,R8,#+65
   \   00000020   ........           BL       OneOutPwrConv
   \   00000024   3880               STRH     R0,[R7, #+0]
   1064          		if( Sts->AGCMode_LTE_A2 == _AGCAvgMode)
   \   00000026   E879               LDRB     R0,[R5, #+7]
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   0CBF               ITE      EQ 
   \   0000002C   08F13D00           ADDEQ    R0,R8,#+61
   \   00000030   08F13F00           ADDNE    R0,R8,#+63
   1065          		{
   1066          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwr_LTE_A2);
   1067          		}
   1068          		else
   1069          		{
   1070          			iAGCPwr = OneOutPwrConv(Sts->FwdOutPwrPeak_LTE_A2);
   \   00000034   ........           BL       OneOutPwrConv
   \   00000038   ....               LDR.N    R5,??DataTable6_5
   \   0000003A   2880               STRH     R0,[R5, #+0]
   1071          		}	
   1072          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdAgcAttn_LTE_A2, AGCMAX_LTE_A1, ATTENMIN,Sts->FwdAmpOnOff_LTE_A2,_AGCMode);
   \   0000003C   0120               MOVS     R0,#+1
   \   0000003E   0390               STR      R0,[SP, #+12]
   \   00000040   98F96000           LDRSB    R0,[R8, #+96]
   \   00000044   0290               STR      R0,[SP, #+8]
   \   00000046   0194               STR      R4,[SP, #+4]
   \   00000048   5A20               MOVS     R0,#+90
   \   0000004A   0090               STR      R0,[SP, #+0]
   \   0000004C   08F21423           ADDW     R3,R8,#+532
   \   00000050   3257               LDRSB    R2,[R6, R4]
   \   00000052   395F               LDRSH    R1,[R7, R4]
   \   00000054   285F               LDRSH    R0,[R5, R4]
   \   00000056   ........           BL       AGCCheck
   1073          
   1074          	}
   1075          	{
   1076          		iAGCOnOff= Sts->RvsAlcOnOff_LTE_A2;
   \   0000005A   98F81622           LDRB     R2,[R8, #+534]
   \   0000005E   3270               STRB     R2,[R6, #+0]
   1077          		iAGClimit = Sts->RvsALCLvl_LTE_A2*2;
   \   00000060   98F92302           LDRSB    R0,[R8, #+547]
   \   00000064   4100               LSLS     R1,R0,#+1
   \   00000066   3980               STRH     R1,[R7, #+0]
   1078          		iAGCPwr = Sts->DetPwr.RvsOutPwr_LTE_A2;
   \   00000068   98F94501           LDRSB    R0,[R8, #+325]
   \   0000006C   2880               STRH     R0,[R5, #+0]
   1079          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->RvsAlcAttn_LTE_A2, tRvsALCMAX_LTE_A1, ATTENMIN,Sts->FwdAmpOnOff_LTE_A2, _ALCMode);
   \   0000006E   0394               STR      R4,[SP, #+12]
   \   00000070   98F96030           LDRSB    R3,[R8, #+96]
   \   00000074   0293               STR      R3,[SP, #+8]
   \   00000076   0194               STR      R4,[SP, #+4]
   \   00000078   6423               MOVS     R3,#+100
   \   0000007A   0093               STR      R3,[SP, #+0]
   \   0000007C   08F21523           ADDW     R3,R8,#+533
   \   00000080   52B2               SXTB     R2,R2
   \   00000082   09B2               SXTH     R1,R1
   \   00000084   ........           BL       AGCCheck
   1080          	}
   1081          
   1082          
   1083          	{
   1084          		iAGCOnOff  = Enable;
   \   00000088   3470               STRB     R4,[R6, #+0]
   1085          		iAGCAttnMAX = 25*2;
   \   0000008A   ....               LDR.N    R0,??DataTable6_6
   \   0000008C   3221               MOVS     R1,#+50
   \   0000008E   0170               STRB     R1,[R0, #+0]
   1086          		iAGClimit = OtherFwdOverInLmt_LTE_A ; 		// -37*2dBm
   \   00000090   6FF04B00           MVN      R0,#+75
   \   00000094   3880               STRH     R0,[R7, #+0]
   1087          		iAGCPwr = -Sts->DetPwr.FwdInPwr_LTE_A*2;
   \   00000096   98F94601           LDRSB    R0,[R8, #+326]
   \   0000009A   4042               RSBS     R0,R0,#+0
   \   0000009C   4000               LSLS     R0,R0,#+1
   \   0000009E   2880               STRH     R0,[R5, #+0]
   1088          		if((Sts->FwdAmpOnOff_LTE_A2)||(Sts->FwdAmpOnOff_LTE_A2))	tAmpOnOff = Disable;
   \   000000A0   98F86010           LDRB     R1,[R8, #+96]
   \   000000A4   01B1               CBZ.N    R1,??FwdAGCCheck_LTE_A_0_0
   \   000000A6   0124               MOVS     R4,#+1
   1089          		else 														tAmpOnOff = Enable;
   1090          
   1091          
   1092          		AGCCheck(iAGCPwr, iAGClimit,iAGCOnOff, &Sts->FwdInAlcAttn_LTE_A_0, iAGCAttnMAX, ATTENMIN, tAmpOnOff, _InputALCMode);	
   \                     ??FwdAGCCheck_LTE_A_0_0:
   \   000000A8   0221               MOVS     R1,#+2
   \   000000AA   0391               STR      R1,[SP, #+12]
   \   000000AC   0294               STR      R4,[SP, #+8]
   \   000000AE   0021               MOVS     R1,#+0
   \   000000B0   0191               STR      R1,[SP, #+4]
   \   000000B2   3221               MOVS     R1,#+50
   \   000000B4   0091               STR      R1,[SP, #+0]
   \   000000B6   08F2C523           ADDW     R3,R8,#+709
   \   000000BA   0022               MOVS     R2,#+0
   \   000000BC   6FF04B01           MVN      R1,#+75
   \   000000C0   00B2               SXTH     R0,R0
   \   000000C2   ........           BL       AGCCheck
   1093          	}
   1094          	
   1095          ///////////////////////////////////////////////////////////////////////////////////////////////
   1096          	if( Sts->FwdAgcAttn_LTE_A2 > Sts->FwdInAlcAttn_LTE_A_0)
   1097          	{
   1098          		tAgcAttn_LTE_A2 = Sts->FwdAgcAttn_LTE_A2 - Sts->FwdInAlcAttn_LTE_A_0;
   1099          	}
   1100          	else tAgcAttn_LTE_A2 = Sts->FwdAgcAttn_LTE_A2;
   1101          
   1102          
   1103          	if((Sts->AlmSts.FwdAmpOnOff_LTE_A1 == Disable)&&(Sts->AlmSts.FwdAmpOnOff_LTE_A2 == Enable))
   1104          	{
   1105          		tAgcAttn_LTE_A1 = DIGATTENMAX_2G;
   1106          	}
   1107          	
   1108          	if((Sts->AlmSts.FwdAmpOnOff_LTE_A2 == Disable)&&(Sts->AlmSts.FwdAmpOnOff_LTE_A1 == Enable))
   1109          	{
   1110          		tAgcAttn_LTE_A2 = DIGATTENMAX_2G;
   1111          	}
   1112          
   1113          
   1114          #if 0
   1115          	if(tAgcAttn_LTE_A1 >= AGC25_ATTENMAX_LTE_A1)
   1116          	{
   1117          		Sts->cFwdAttn_LTE_A1 = tAgcAttn_LTE_A1 - AGC25_ATTENMAX_LTE_A1;
   1118          	}
   1119          	else
   1120          	{
   1121          		Sts->cFwdAttn_LTE_A1 = 0;
   1122          	}
   1123          
   1124          	if(tAgcAttn_LTE_A2 >= AGC25_ATTENMAX_LTE_A1)
   1125          	{
   1126          		Sts->cFwdAttn_LTE_A2 = tAgcAttn_LTE_A2 - AGC25_ATTENMAX_LTE_A1;
   1127          	}
   1128          	else
   1129          	{
   1130          		Sts->cFwdAttn_LTE_A2 = 0;
   1131          	}
   1132          
   1133          	if( Sts->cFwdAttn_LTE_A2 >  Sts->cFwdAttn_LTE_A1)	
   1134          	{
   1135          		Sts->FwdAttn1_LTE_A = Sts->cFwdAttn_LTE_A2 + Sts->FwdInAlcAttn_LTE_A_0;
   1136          	}
   1137          	else											
   1138          	{
   1139          		Sts->FwdAttn1_LTE_A = Sts->cFwdAttn_LTE_A1 + Sts->FwdInAlcAttn_LTE_A_0;
   1140          	}
   1141          
   1142          	tmpAttn_LTE_A1 = tAgcAttn_LTE_A1 - Sts->FwdAttn1_LTE_A;
   1143          	tmpAttn_LTE_A2 = tAgcAttn_LTE_A2 - Sts->FwdAttn1_LTE_A;
   1144          
   1145          
   1146          	if(tAgcAttn_LTE_A1 <= AGC25_ATTENMAX_LTE_A1)
   1147          	{
   1148          		CurrAttn = Sts->cFwdAttn_LTE_A2 - Sts->cFwdAttn_LTE_A1;
   1149          
   1150          		if( Sts->cFwdAttn_LTE_A2 >=  Sts->cFwdAttn_LTE_A1)
   1151          		{
   1152          			if(tAgcAttn_LTE_A1 > CurrAttn)
   1153          			{
   1154          				Sts->AttOffset.FwdAttn1_LTE_A1 = tAgcAttn_LTE_A1 - CurrAttn;
   1155          				Sts->FwdAttn2_LTE_A1  = ToggleFwdAttn_LTE_A1;
   1156          			}
   1157          			else
   1158          			{
   1159          				Sts->AttOffset.FwdAttn1_LTE_A1 = 0;
   1160          
   1161          				if((Sts->AlmSts.FwdAmpOnOff_LTE_A1 == Disable)||( Sts->DetPwr.FwdOutAvgPwr_LTE_A1 <= 0))
   1162          				{
   1163          					Sts->FwdAttn2_LTE_A1  = ToggleFwdAttn_LTE_A1;
   1164          				}
   1165          				else
   1166          				{
   1167          					Sts->FwdAttn2_LTE_A1  = ToggleFwdAttn_LTE_A1 - ( CurrAttn - tAgcAttn_LTE_A1) ;
   1168          				}
   1169          			}
   1170          			
   1171          			Sts->FwdAttn2_LTE_A1 = MinMaxAttnCheck(Sts->FwdAttn2_LTE_A1 ,ATTENMAX,ATTENMIN);
   1172          		}
   1173          	}
   1174          	else
   1175          	{
   1176           		CurrAttn = Sts->cFwdAttn_LTE_A2 - Sts->cFwdAttn_LTE_A1;
   1177          
   1178          		if( Sts->cFwdAttn_LTE_A2 <=  Sts->cFwdAttn_LTE_A1)	
   1179          		{
   1180          			Sts->AttOffset.FwdAttn1_LTE_A1  = AGC25_ATTENMAX_LTE_A1;
   1181          		}
   1182          		else
   1183          		{
   1184          			Sts->AttOffset.FwdAttn1_LTE_A1  = AGC25_ATTENMAX_LTE_A1 - CurrAttn;
   1185          		}
   1186          		
   1187          		Sts->FwdAttn2_LTE_A1	= ToggleFwdAttn_LTE_A1;
   1188          	}
   1189          
   1190          	Sts->FwdAttn1_LTE_A1  = Sts->AttOffset.FwdAttn1_LTE_A1;
   1191          
   1192          
   1193          	if(tAgcAttn_LTE_A2 <= AGC25_ATTENMAX_LTE_A1)
   1194          	{
   1195          		CurrAttn = Sts->cFwdAttn_LTE_A1 - Sts->cFwdAttn_LTE_A2;
   1196          
   1197          		if( Sts->cFwdAttn_LTE_A2 <=  Sts->cFwdAttn_LTE_A1)
   1198          		{
   1199          			if(tAgcAttn_LTE_A2 > CurrAttn)
   1200          			{
   1201          				Sts->AttOffset.FwdAttn1_LTE_A2 = tAgcAttn_LTE_A2 - CurrAttn;
   1202          				Sts->FwdAttn2_LTE_A2 = ToggleFwdAttn_LTE_A2;
   1203          			}
   1204          			else
   1205          			{
   1206          				Sts->AttOffset.FwdAttn1_LTE_A2 = 0;
   1207          
   1208          				if((Sts->AlmSts.FwdAmpOnOff_LTE_A2 == Disable)||( Sts->DetPwr.FwdOutAvgPwr_LTE_A2<= 0))
   1209          				{
   1210          					Sts->FwdAttn2_LTE_A2 = ToggleFwdAttn_LTE_A2;
   1211          				}
   1212          				else
   1213          				{
   1214          					Sts->FwdAttn2_LTE_A2 = ToggleFwdAttn_LTE_A2 - ( CurrAttn - tAgcAttn_LTE_A2) ;
   1215          				}
   1216          			}
   1217          			
   1218          			Sts->FwdAttn2_LTE_A2 = MinMaxAttnCheck(Sts->FwdAttn2_LTE_A2 ,ATTENMAX,ATTENMIN);
   1219          		}
   1220          	}
   1221          	else
   1222          	{
   1223          		CurrAttn = Sts->cFwdAttn_LTE_A1 - Sts->cFwdAttn_LTE_A2;
   1224          
   1225          		if( Sts->cFwdAttn_LTE_A2 >=  Sts->cFwdAttn_LTE_A1)	
   1226          		{
   1227          			Sts->AttOffset.FwdAttn1_LTE_A2 = AGC25_ATTENMAX_LTE_A1;
   1228          		}
   1229          		else
   1230          		{
   1231          			Sts->AttOffset.FwdAttn1_LTE_A2 = AGC25_ATTENMAX_LTE_A1- CurrAttn;
   1232          		}
   1233          		
   1234          		Sts->FwdAttn2_LTE_A2 = ToggleFwdAttn_LTE_A2;
   1235          	}
   1236          	
   1237          	Sts->FwdAttn1_LTE_A2  = Sts->AttOffset.FwdAttn1_LTE_A2;
   1238          
   1239          	///////////////////////////////////////////////////////////////////////////////////////////////
   1240          
   1241          
   1242          
   1243          
   1244          	tRvsAGCMAX_LTE_A2 = AGCMAX_LTE_A1 + Sts->RvsGainBalance_LTE_A2*2;
   1245          	CurrAgcAttn_LTE_A2 = Sts->FwdAttn1_LTE_A + Sts->FwdAttn1_LTE_A2;
   1246          
   1247          	if(Sts->AGCOnOff_LTE_A_0 == Enable)
   1248          	{
   1249          		Sts->RvsGainAttn_LTE_A2 = Sts->FwdAgcAttn_LTE_A2 - Sts->RvsAlcAttn_LTE_A2 + Sts->RvsGainBalance_LTE_A2*2;
   1250          		Sts->RvsGainAttn_LTE_A2 = MinMaxAttnCheck(Sts->RvsGainAttn_LTE_A2,tRvsAGCMAX_LTE_A2,ATTENMIN);
   1251          		CurrRvsAgcAttn_LTE_A2 = Sts->RvsGainAttn_LTE_A2;
   1252          	}
   1253          	else
   1254          	{
   1255          		CurrRvsAgcAttn_LTE_A2 = Sts->RvsGainAttn_LTE_A2 - Sts->RvsAlcAttn_LTE_A2+  Sts->RvsGainBalance_LTE_A2*2;
   1256          		CurrRvsAgcAttn_LTE_A2	= MinMaxAttnCheck(CurrRvsAgcAttn_LTE_A2, tRvsAGCMAX_LTE_A2,ATTENMIN);
   1257          	}
   1258          
   1259          	if(Sts->AlmSts.FwdAmpOnOff_LTE_A2 == Disable)
   1260          	{
   1261          		CurrRvsAgcAttn_LTE_A2 = tRvsAGCMAX_LTE_A2;
   1262          	}
   1263          
   1264          
   1265          	if(chkSleepMode[PATH_LTE_A2] == SET)
   1266          	{
   1267          //		Sts->Rvs0GainSet_LTE_A2 =  FwdMinGain_LTE_A;
   1268          
   1269          		Sts->RvsGainAttn_LTE_A2 = GainATTENMAX;
   1270          		CurrRvsAgcAttn_LTE_A2 = Sts->RvsGainAttn_LTE_A2;
   1271          
   1272          		Sts->RvsAttn2_LTE_A2 = ATTENMAX;
   1273          		Sts->RvsAttn3_LTE_A2 = ATTENMAX;
   1274          	}
   1275          	else
   1276          	{
   1277          		tAGC_ATTENMAX_LTE_A2 = RVSAGC15_ATTENMAX_LTE_A2 + Sts->RvsGainBalance_LTE_A2*2;
   1278          		if(CurrRvsAgcAttn_LTE_A2 < tAGC_ATTENMAX_LTE_A2) 
   1279          		{
   1280          			Sts->RvsAttn2_LTE_A2 = CurrRvsAgcAttn_LTE_A2;
   1281          			Sts->RvsAttn3_LTE_A2 = 0;
   1282          		}
   1283          		else
   1284          		{
   1285          			Sts->RvsAttn2_LTE_A2 = tAGC_ATTENMAX_LTE_A2;
   1286          			Sts->RvsAttn3_LTE_A2 = CurrRvsAgcAttn_LTE_A2 - tAGC_ATTENMAX_LTE_A2;
   1287          		}	
   1288          		Sts->RvsAttn3_LTE_A2	= MinMaxAttnCheck(Sts->RvsAttn3_LTE_A2, DIGATTENMAX,ATTENMIN);
   1289          	}
   1290          
   1291          /////////////////////////////////////////////////////////////////////////////////
   1292          	if(Sts->RvsAlcAttn_LTE_A2 > ALCATTENMAX_LTE)
   1293          	{
   1294          		Sts->cRvsAttn_LTE_A2 = Sts->RvsAlcAttn_LTE_A2 - ALCATTENMAX_LTE;
   1295          	}
   1296          	else Sts->cRvsAttn_LTE_A2 = 0;
   1297          	
   1298          	if( Sts->cRvsAttn_LTE_A2 >  Sts->cRvsAttn_LTE_A1)	Sts->RvsAttn1_LTE_A = Sts->cRvsAttn_LTE_A2;
   1299          	else												Sts->RvsAttn1_LTE_A = Sts->cRvsAttn_LTE_A1;
   1300          	if (Sts->RvsAttn1_LTE_A >= ALCATTENMAX_LTE) 		Sts->RvsAttn1_LTE_A = ALCATTENMAX_LTE;
   1301          
   1302          	tmpAttn_LTE_A1 = Sts->RvsAlcAttn_LTE_A1 - Sts->RvsAttn1_LTE_A;
   1303          	tmpAttn_LTE_A2 = Sts->RvsAlcAttn_LTE_A2 - Sts->RvsAttn1_LTE_A;
   1304          
   1305          	if( Sts->RvsAlcAttn_LTE_A1 >= Sts->RvsAlcAttn_LTE_A2)
   1306          	{
   1307          		Sts->RvsAttn1_LTE_A1  = tmpAttn_LTE_A1;
   1308          
   1309          		if( Sts->RvsAttn1_LTE_A < tmpAttn_LTE_A2 )
   1310          		{
   1311          			Sts->RvsAttn1_LTE_A2 = tmpAttn_LTE_A2 - Sts->RvsAttn1_LTE_A;
   1312          		}
   1313          		else
   1314          		{
   1315          			Sts->RvsAttn1_LTE_A2 = 0;
   1316          		}
   1317          		
   1318          		Sts->RvsAttn1_LTE_A2	= MinMaxAttnCheck(Sts->RvsAttn1_LTE_A2, DIGATTENMAX,ATTENMIN);
   1319          	}
   1320          	else if( Sts->RvsAlcAttn_LTE_A1 < (Sts->RvsAlcAttn_LTE_A2 ))
   1321          	{
   1322          		Sts->RvsAttn1_LTE_A2  = tmpAttn_LTE_A2;
   1323          		if( Sts->RvsAttn1_LTE_A < tmpAttn_LTE_A1)
   1324          		{
   1325          			Sts->RvsAttn1_LTE_A1  = tmpAttn_LTE_A1 - Sts->RvsAttn1_LTE_A;
   1326          		}
   1327          		else
   1328          		{
   1329          			Sts->RvsAttn1_LTE_A1 = 0;
   1330          		}
   1331          		
   1332          		Sts->RvsAttn1_LTE_A1	= MinMaxAttnCheck(Sts->RvsAttn1_LTE_A1, DIGATTENMAX,ATTENMIN);
   1333          	}
   1334          #endif   
   1335          }
   \   000000C6   04B0               ADD      SP,SP,#+16
   \   000000C8   BDE8F081           POP      {R4-R8,PC}       ;; return
   1336          
   1337          

   \                                 In section .text, align 2, keep-with-next
   1338          void TRIO_AlarmCheck(void)
   1339          {
   \                     TRIO_AlarmCheck:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   1340          	__Dnr_Sts  *Sts = tDnrSts; 
   \   00000002   ........           LDR.W    R4,??DataTable8_10
   \   00000006   2068               LDR      R0,[R4, #+0]
   \   00000008   0546               MOV      R5,R0
   1341          	INT8U AlmSts = 0;
   \   0000000A   0026               MOVS     R6,#+0
   1342          
   1343          	if(Sts->FwdAmpOnOff_3G == Disable)
   \   0000000C   95F85D10           LDRB     R1,[R5, #+93]
   \   00000010   0129               CMP      R1,#+1
   \   00000012   06D1               BNE.N    ??TRIO_AlarmCheck_0
   1344          	{
   1345          		Sts->AlmSts.FwdAmpOnOff_3G = Disable;
   \   00000014   05F20C00           ADDW     R0,R5,#+12
   \   00000018   8178               LDRB     R1,[R0, #+2]
   \   0000001A   41F04001           ORR      R1,R1,#0x40
   \   0000001E   8170               STRB     R1,[R0, #+2]
   \   00000020   2AE0               B.N      ??TRIO_AlarmCheck_1
   1346          	}
   1347          	else
   1348          	{
   1349          		if(tDnrSts->ShutDownOnOff_3G == Enable) 
   \                     ??TRIO_AlarmCheck_0:
   \   00000022   90F8D800           LDRB     R0,[R0, #+216]
   \   00000026   B0B9               CBNZ.N   R0,??TRIO_AlarmCheck_2
   1350          		{
   1351          			AlmSts  = Sts->AlmSts.LocalFail_3G;
   \   00000028   287B               LDRB     R0,[R5, #+12]
   \   0000002A   C0F38016           UBFX     R6,R0,#+6,#+1
   1352          		}
   1353          		if(AlmSts)
   \   0000002E   F007               LSLS     R0,R6,#+31
   \   00000030   11D5               BPL.N    ??TRIO_AlarmCheck_2
   1354          		{
   1355          			Sts->AlmSts.FwdAmpOnOff_3G = Disable;
   \   00000032   05F20C00           ADDW     R0,R5,#+12
   \   00000036   8178               LDRB     R1,[R0, #+2]
   \   00000038   41F04001           ORR      R1,R1,#0x40
   \   0000003C   8170               STRB     R1,[R0, #+2]
   1356          			FlagAmpOnOff_3G = SET;
   \   0000003E   ........           LDR.W    R0,??DataTable8_11
   \   00000042   0121               MOVS     R1,#+1
   \   00000044   0170               STRB     R1,[R0, #+0]
   1357          			if(Sts->AlmSts.LocalFail_3G)		tDnrSts->AmpOffCase_3G = __PllFail;
   \   00000046   287B               LDRB     R0,[R5, #+12]
   \   00000048   4006               LSLS     R0,R0,#+25
   \   0000004A   15D5               BPL.N    ??TRIO_AlarmCheck_1
   \   0000004C   2068               LDR      R0,[R4, #+0]
   \   0000004E   0C21               MOVS     R1,#+12
   \   00000050   80F85910           STRB     R1,[R0, #+89]
   \   00000054   10E0               B.N      ??TRIO_AlarmCheck_1
   1358          		}
   1359          		else
   1360          		{
   1361          			Sts->AlmSts.FwdAmpOnOff_3G = Enable;
   \                     ??TRIO_AlarmCheck_2:
   \   00000056   05F20C00           ADDW     R0,R5,#+12
   \   0000005A   8178               LDRB     R1,[R0, #+2]
   \   0000005C   01F0BF01           AND      R1,R1,#0xBF
   \   00000060   8170               STRB     R1,[R0, #+2]
   1362          			if(FlagAmpOnOff_3G)
   \   00000062   ........           LDR.W    R0,??DataTable8_11
   \   00000066   0178               LDRB     R1,[R0, #+0]
   \   00000068   31B1               CBZ.N    R1,??TRIO_AlarmCheck_1
   1363          			{
   1364          
   1365          				tDnrSts->AmpOffCase_3G = __UsrCtrl;
   \   0000006A   2168               LDR      R1,[R4, #+0]
   \   0000006C   0022               MOVS     R2,#+0
   \   0000006E   81F85920           STRB     R2,[R1, #+89]
   1366          				FlagAmpOnOff_3G = RESET;
   \   00000072   0270               STRB     R2,[R0, #+0]
   1367          				AttnOutBufferInit();
   \   00000074   ........           BL       AttnOutBufferInit
   1368          			}
   1369          		}
   1370          	}
   1371          
   1372          	if(Sts->FwdAmpOnOff_2G == Disable)
   \                     ??TRIO_AlarmCheck_1:
   \   00000078   05F25D07           ADDW     R7,R5,#+93
   \   0000007C   7878               LDRB     R0,[R7, #+1]
   \   0000007E   0128               CMP      R0,#+1
   \   00000080   06D1               BNE.N    ??TRIO_AlarmCheck_3
   1373          	{
   1374          		Sts->AlmSts.FwdAmpOnOff_2G = Disable;
   \   00000082   05F20C00           ADDW     R0,R5,#+12
   \   00000086   8178               LDRB     R1,[R0, #+2]
   \   00000088   41F02001           ORR      R1,R1,#0x20
   \   0000008C   8170               STRB     R1,[R0, #+2]
   \   0000008E   26E0               B.N      ??TRIO_AlarmCheck_4
   1375          	}
   1376          	else
   1377          	{
   1378          		if(tDnrSts->ShutDownOnOff_2G == Enable) 
   \                     ??TRIO_AlarmCheck_3:
   \   00000090   2068               LDR      R0,[R4, #+0]
   \   00000092   90F8D900           LDRB     R0,[R0, #+217]
   \   00000096   10B9               CBNZ.N   R0,??TRIO_AlarmCheck_5
   1379          		{
   1380          			AlmSts  = Sts->AlmSts.LocalFail_CDMALTE;	
   \   00000098   287B               LDRB     R0,[R5, #+12]
   \   0000009A   C0F34016           UBFX     R6,R0,#+5,#+1
   1381          		}
   1382          		if(AlmSts)
   \                     ??TRIO_AlarmCheck_5:
   \   0000009E   05F20C00           ADDW     R0,R5,#+12
   \   000000A2   ........           LDR.W    R1,??DataTable8_12
   \   000000A6   F207               LSLS     R2,R6,#+31
   \   000000A8   8278               LDRB     R2,[R0, #+2]
   \   000000AA   0CD5               BPL.N    ??TRIO_AlarmCheck_6
   1383          		{
   1384          			Sts->AlmSts.FwdAmpOnOff_2G = Disable;
   \   000000AC   42F02002           ORR      R2,R2,#0x20
   \   000000B0   8270               STRB     R2,[R0, #+2]
   1385          			FlagAmpOnOff_2G = SET;
   \   000000B2   0120               MOVS     R0,#+1
   \   000000B4   0870               STRB     R0,[R1, #+0]
   1386          			
   1387          			if(Sts->AlmSts.LocalFail_CDMALTE)		tDnrSts->AmpOffCase_2G = __PllFail;
   \   000000B6   287B               LDRB     R0,[R5, #+12]
   \   000000B8   8006               LSLS     R0,R0,#+26
   \   000000BA   10D5               BPL.N    ??TRIO_AlarmCheck_4
   \   000000BC   2068               LDR      R0,[R4, #+0]
   \   000000BE   0C21               MOVS     R1,#+12
   \   000000C0   80F85A10           STRB     R1,[R0, #+90]
   \   000000C4   0BE0               B.N      ??TRIO_AlarmCheck_4
   1388          
   1389          		}
   1390          		else
   1391          		{
   1392          			Sts->AlmSts.FwdAmpOnOff_2G = Enable;
   \                     ??TRIO_AlarmCheck_6:
   \   000000C6   02F0DF02           AND      R2,R2,#0xDF
   \   000000CA   8270               STRB     R2,[R0, #+2]
   1393          
   1394          			if(FlagAmpOnOff_2G)
   \   000000CC   0878               LDRB     R0,[R1, #+0]
   \   000000CE   30B1               CBZ.N    R0,??TRIO_AlarmCheck_4
   1395          			{
   1396          				tDnrSts->AmpOffCase_2G = __UsrCtrl;
   \   000000D0   2068               LDR      R0,[R4, #+0]
   \   000000D2   0022               MOVS     R2,#+0
   \   000000D4   80F85A20           STRB     R2,[R0, #+90]
   1397          				FlagAmpOnOff_2G = RESET;
   \   000000D8   0A70               STRB     R2,[R1, #+0]
   1398          				AttnOutBufferInit();
   \   000000DA   ........           BL       AttnOutBufferInit
   1399          			}
   1400          		}
   1401          	}
   1402          
   1403          	
   1404          	if(Sts->FwdAmpOnOff_LTE == Disable)
   \                     ??TRIO_AlarmCheck_4:
   \   000000DE   B878               LDRB     R0,[R7, #+2]
   \   000000E0   0128               CMP      R0,#+1
   \   000000E2   06D1               BNE.N    ??TRIO_AlarmCheck_7
   1405          	{
   1406          		Sts->AlmSts.FwdAmpOnOff_LTE = Disable;
   \   000000E4   05F20C00           ADDW     R0,R5,#+12
   \   000000E8   8178               LDRB     R1,[R0, #+2]
   \   000000EA   41F01001           ORR      R1,R1,#0x10
   \   000000EE   8170               STRB     R1,[R0, #+2]
   \   000000F0   2CE0               B.N      ??TRIO_AlarmCheck_8
   1407          	}
   1408          	else
   1409          	{
   1410          		if(tDnrSts->ShutDownOnOff_LTE == Enable) 
   \                     ??TRIO_AlarmCheck_7:
   \   000000F2   2068               LDR      R0,[R4, #+0]
   \   000000F4   90F8F901           LDRB     R0,[R0, #+505]
   \   000000F8   38B9               CBNZ.N   R0,??TRIO_AlarmCheck_9
   1411          		{
   1412          			AlmSts  = Sts->AlmSts.LocalFail_CDMALTE;
   \   000000FA   287B               LDRB     R0,[R5, #+12]
   \   000000FC   C0F34016           UBFX     R6,R0,#+5,#+1
   1413          			if(AlarmCheck_LTE == 0) AlmSts  += 1;
   \   00000100   ........           LDR.W    R0,??DataTable8_13
   \   00000104   0078               LDRB     R0,[R0, #+0]
   \   00000106   00B9               CBNZ.N   R0,??TRIO_AlarmCheck_9
   \   00000108   761C               ADDS     R6,R6,#+1
   1414          		}
   1415          		if(AlmSts)
   \                     ??TRIO_AlarmCheck_9:
   \   0000010A   05F20C00           ADDW     R0,R5,#+12
   \   0000010E   ........           LDR.W    R1,??DataTable8_14
   \   00000112   F6B2               UXTB     R6,R6
   \   00000114   002E               CMP      R6,#+0
   \   00000116   8278               LDRB     R2,[R0, #+2]
   \   00000118   0CD0               BEQ.N    ??TRIO_AlarmCheck_10
   1416          		{
   1417          			Sts->AlmSts.FwdAmpOnOff_LTE = Disable;
   \   0000011A   42F01002           ORR      R2,R2,#0x10
   \   0000011E   8270               STRB     R2,[R0, #+2]
   1418          			FlagAmpOnOff_LTE = SET;
   \   00000120   0120               MOVS     R0,#+1
   \   00000122   0870               STRB     R0,[R1, #+0]
   1419          			if(Sts->AlmSts.LocalFail_CDMALTE)		tDnrSts->AmpOffCase_LTE = __PllFail;
   \   00000124   287B               LDRB     R0,[R5, #+12]
   \   00000126   8006               LSLS     R0,R0,#+26
   \   00000128   10D5               BPL.N    ??TRIO_AlarmCheck_8
   \   0000012A   2068               LDR      R0,[R4, #+0]
   \   0000012C   0C21               MOVS     R1,#+12
   \   0000012E   80F85B10           STRB     R1,[R0, #+91]
   \   00000132   0BE0               B.N      ??TRIO_AlarmCheck_8
   1420          		}
   1421          		else
   1422          		{
   1423          			Sts->AlmSts.FwdAmpOnOff_LTE= Enable;
   \                     ??TRIO_AlarmCheck_10:
   \   00000134   02F0EF02           AND      R2,R2,#0xEF
   \   00000138   8270               STRB     R2,[R0, #+2]
   1424          
   1425          			if(FlagAmpOnOff_LTE)
   \   0000013A   0878               LDRB     R0,[R1, #+0]
   \   0000013C   30B1               CBZ.N    R0,??TRIO_AlarmCheck_8
   1426          			{
   1427          				tDnrSts->AmpOffCase_LTE = __UsrCtrl;
   \   0000013E   2068               LDR      R0,[R4, #+0]
   \   00000140   0022               MOVS     R2,#+0
   \   00000142   80F85B20           STRB     R2,[R0, #+91]
   1428          				FlagAmpOnOff_LTE = RESET;
   \   00000146   0A70               STRB     R2,[R1, #+0]
   1429          				AttnOutBufferInit();
   \   00000148   ........           BL       AttnOutBufferInit
   1430          			}
   1431          		}
   1432          	}
   1433          
   1434          	if(Sts->FwdAmpOnOff_LTE_A2 == Disable)
   \                     ??TRIO_AlarmCheck_8:
   \   0000014C   F878               LDRB     R0,[R7, #+3]
   \   0000014E   0128               CMP      R0,#+1
   \   00000150   06D1               BNE.N    ??TRIO_AlarmCheck_11
   1435          	{
   1436          		Sts->AlmSts.FwdAmpOnOff_LTE_A2 = Disable;
   \   00000152   05F20C00           ADDW     R0,R5,#+12
   \   00000156   8178               LDRB     R1,[R0, #+2]
   \   00000158   41F00401           ORR      R1,R1,#0x4
   \   0000015C   8170               STRB     R1,[R0, #+2]
   \   0000015E   F1BD               POP      {R0,R4-R7,PC}
   1437          	}
   1438          	else
   1439          	{
   1440          		if(tDnrSts->ShutDownOnOff_LTE_A2 == Enable) 
   \                     ??TRIO_AlarmCheck_11:
   \   00000160   2068               LDR      R0,[R4, #+0]
   \   00000162   90F81B02           LDRB     R0,[R0, #+539]
   \   00000166   50B9               CBNZ.N   R0,??TRIO_AlarmCheck_12
   1441          		{
   1442          			AlmSts	= Sts->AlmSts.LocalFail_LTE_A1;
   1443          			AlmSts	+= Sts->AlmSts.LocalFail_LTE_A2;
   \   00000168   287B               LDRB     R0,[R5, #+12]
   \   0000016A   C0F30011           UBFX     R1,R0,#+4,#+1
   \   0000016E   C0F3C000           UBFX     R0,R0,#+3,#+1
   \   00000172   4618               ADDS     R6,R0,R1
   1444          			if(AlarmCheck_LTE_A2 == 0) AlmSts  += 1;
   \   00000174   ........           LDR.W    R0,??DataTable8_15
   \   00000178   0078               LDRB     R0,[R0, #+0]
   \   0000017A   00B9               CBNZ.N   R0,??TRIO_AlarmCheck_12
   \   0000017C   761C               ADDS     R6,R6,#+1
   1445          		}
   1446          		if(AlmSts)
   \                     ??TRIO_AlarmCheck_12:
   \   0000017E   05F20C00           ADDW     R0,R5,#+12
   \   00000182   ........           LDR.W    R1,??DataTable8_16
   \   00000186   F6B2               UXTB     R6,R6
   \   00000188   002E               CMP      R6,#+0
   \   0000018A   8278               LDRB     R2,[R0, #+2]
   \   0000018C   0CD0               BEQ.N    ??TRIO_AlarmCheck_13
   1447          		{
   1448          			Sts->AlmSts.FwdAmpOnOff_LTE_A2 = Disable;
   \   0000018E   42F00402           ORR      R2,R2,#0x4
   \   00000192   8270               STRB     R2,[R0, #+2]
   1449          			FlagAmpOnOff_LTE_A2 = SET;
   \   00000194   0120               MOVS     R0,#+1
   \   00000196   0870               STRB     R0,[R1, #+0]
   1450          			
   1451          			if(Sts->AlmSts.LocalFail_LTE_A2)		
   \   00000198   287B               LDRB     R0,[R5, #+12]
   \   0000019A   0007               LSLS     R0,R0,#+28
   \   0000019C   11D5               BPL.N    ??TRIO_AlarmCheck_14
   1452          			{
   1453          				tDnrSts->AmpOffCase_LTE_A2 = __PllFail;
   \   0000019E   2068               LDR      R0,[R4, #+0]
   \   000001A0   0C21               MOVS     R1,#+12
   \   000001A2   80F85C10           STRB     R1,[R0, #+92]
   \   000001A6   F1BD               POP      {R0,R4-R7,PC}
   1454          			}
   1455          		}
   1456          		else
   1457          		{
   1458          			Sts->AlmSts.FwdAmpOnOff_LTE_A2= Enable;
   \                     ??TRIO_AlarmCheck_13:
   \   000001A8   02F0FB02           AND      R2,R2,#0xFB
   \   000001AC   8270               STRB     R2,[R0, #+2]
   1459          
   1460          			if(FlagAmpOnOff_LTE_A2)
   \   000001AE   0878               LDRB     R0,[R1, #+0]
   \   000001B0   0028               CMP      R0,#+0
   \   000001B2   06D0               BEQ.N    ??TRIO_AlarmCheck_14
   1461          			{
   1462          				
   1463          				tDnrSts->AmpOffCase_LTE_A2 = __UsrCtrl;
   \   000001B4   2068               LDR      R0,[R4, #+0]
   \   000001B6   0022               MOVS     R2,#+0
   \   000001B8   80F85C20           STRB     R2,[R0, #+92]
   1464          				FlagAmpOnOff_LTE_A2 = RESET;
   \   000001BC   0A70               STRB     R2,[R1, #+0]
   1465          				AttnOutBufferInit();
   \   000001BE   ........           BL       AttnOutBufferInit
   1466          			}
   1467          		}
   1468          	}	
   1469          }
   \                     ??TRIO_AlarmCheck_14:
   \   000001C2   F1BD               POP      {R0,R4-R7,PC}    ;; return
   1470          

   \                                 In section .text, align 4, keep-with-next
   1471          void ShutdownFunc(INT8U SysPath, INT8U Path)
   1472          {
   \                     ShutdownFunc:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   8046               MOV      R8,R0
   \   00000006   0E46               MOV      R6,R1
   \   00000008   ........           LDR.W    R0,??DataTable8_10
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   8346               MOV      R11,R0
   1473          	INT8U	OffReason, OffTime;
   1474          	INT16U	SdTimer;
   1475          	INT16S	DetValue, LmtValue;
   1476          	
   1477          	INT8U	*AmpOnOff;
   1478          	
   1479          	__Dnr_Sts  *Sts = tDnrSts; 
   1480          
   1481          	if(Ac_Sd_Flag == 1)	return;
   \   00000010   ........           LDR.W    R1,??DataTable8_17
   \   00000014   0978               LDRB     R1,[R1, #+0]
   \   00000016   0129               CMP      R1,#+1
   \   00000018   00F04082           BEQ.W    ??ShutdownFunc_1
   1482          	//---------------------------------------------------------------------//
   1483          	switch(Path)
   \   0000001C   0B2E               CMP      R6,#+11
   \   0000001E   00F21E81           BHI.W    ??ShutdownFunc_2
   \   00000022   DFE816F0           TBH      [PC, R6, LSL #+1]
   \                     ??ShutdownFunc_0:
   \   00000026   0C0051009600       DC16     0xC,0x51,0x96,0xDB
   \              DB00        
   \   0000002E   1F006600A900       DC16     0x1F,0x66,0xA9,0xEE
   \              EE00        
   \   00000036   38007F00C200       DC16     0x38,0x7F,0xC2,0x105
   \              0501        
   1484          	{
   1485          		//---------------------------------------------------------------------//
   1486          		// 2G
   1487          		case SD_FI_2G:
   1488          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_3:
   \   0000003E   0421               MOVS     R1,#+4
   \   00000040   8DF80010           STRB     R1,[SP, #+0]
   1489          			SdTimer = TimerSD_2G;
   \   00000044   2925               MOVS     R5,#+41
   1490          			DetValue = -tDnrSts->FwdInPwr_2G;
   \   00000046   00F11B01           ADD      R1,R0,#+27
   \   0000004A   91F90B10           LDRSB    R1,[R1, #+11]
   \   0000004E   C1F10009           RSB      R9,R1,#+0
   1491          			LmtValue = tDnrSts->OverInAlarmLmt_2G/2;	//과입력 Shutdown -11±2dBm
   \   00000052   90F90002           LDRSB    R0,[R0, #+512]
   \   00000056   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   0000005A   4FEA600A           ASR      R10,R0,#+1
   1492          
   1493          			AmpOnOff = &Sts->FwdAmpOnOff_2G;
   \                     ??ShutdownFunc_4:
   \   0000005E   0BF25E04           ADDW     R4,R11,#+94
   1494          			break;
   \   00000062   FCE0               B.N      ??ShutdownFunc_2
   1495          
   1496          		case SD_FO_2G:
   1497          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_5:
   \   00000064   0420               MOVS     R0,#+4
   \   00000066   8DF80000           STRB     R0,[SP, #+0]
   1498          			SdTimer = TimerSD_2G;
   \   0000006A   2925               MOVS     R5,#+41
   1499          			DetValue = Sts->FwdOutPwr_2G[0]*10 + Sts->FwdOutPwr_2G[1];
   \   0000006C   0BF21C00           ADDW     R0,R11,#+28
   \   00000070   90F90B10           LDRSB    R1,[R0, #+11]
   \   00000074   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000078   90F90C00           LDRSB    R0,[R0, #+12]
   \   0000007C   00EB4209           ADD      R9,R0,R2, LSL #+1
   1500          			LmtValue = Sts->FwdOutHighLmt_2G[0]*10 + Sts->FwdOutHighLmt_2G[1];
   \   00000080   0BF2DA00           ADDW     R0,R11,#+218
   \   00000084   90F90E10           LDRSB    R1,[R0, #+14]
   \   00000088   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   0000008C   90F90F00           LDRSB    R0,[R0, #+15]
   \   00000090   00EB420A           ADD      R10,R0,R2, LSL #+1
   1501          
   1502          			AmpOnOff = &Sts->FwdAmpOnOff_2G;
   \   00000094   E3E7               B.N      ??ShutdownFunc_4
   1503          //			if((Sts->AGCOnOff_CDMALTE == Enable)&&( Sts->FwdAgcAttn_2G  < 20*2))return;
   1504          			break;
   1505          
   1506          		case SD_RO_2G:
   1507          			OffReason = CASE_RvsFail;
   \                     ??ShutdownFunc_6:
   \   00000096   0220               MOVS     R0,#+2
   \   00000098   8DF80000           STRB     R0,[SP, #+0]
   1508          			SdTimer = TimerSD_2G;
   \   0000009C   2925               MOVS     R5,#+41
   1509          			DetValue = Sts->RvsOutPwr_2G[0]*10 + Sts->RvsOutPwr_2G[1];
   \   0000009E   0BF25E04           ADDW     R4,R11,#+94
   \   000000A2   94F97800           LDRSB    R0,[R4, #+120]
   \   000000A6   00EB8001           ADD      R1,R0,R0, LSL #+2
   \   000000AA   94F97900           LDRSB    R0,[R4, #+121]
   \   000000AE   00EB4109           ADD      R9,R0,R1, LSL #+1
   1510          			LmtValue = Sts->RvsOutUpperLmt_2G[0]*10 + Sts->RvsOutUpperLmt_2G[1];
   \   000000B2   0BF2DA00           ADDW     R0,R11,#+218
   \   000000B6   90F90210           LDRSB    R1,[R0, #+2]
   \   000000BA   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   000000BE   90F90300           LDRSB    R0,[R0, #+3]
   \   000000C2   00EB420A           ADD      R10,R0,R2, LSL #+1
   1511          
   1512          			AmpOnOff = &Sts->FwdAmpOnOff_2G;
   1513          			
   1514          			break;
   \   000000C6   CAE0               B.N      ??ShutdownFunc_2
   1515          
   1516          		//---------------------------------------------------------------------//
   1517          		// LTE
   1518          		case SD_FI_LTE:
   1519          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_7:
   \   000000C8   0421               MOVS     R1,#+4
   \   000000CA   8DF80010           STRB     R1,[SP, #+0]
   1520          			SdTimer = TimerSD_LTE;
   \   000000CE   2B25               MOVS     R5,#+43
   1521          			DetValue = -tDnrSts->FwdInPwr_LTE;
   \   000000D0   00F11B01           ADD      R1,R0,#+27
   \   000000D4   91F91610           LDRSB    R1,[R1, #+22]
   \   000000D8   C1F10009           RSB      R9,R1,#+0
   1522          			LmtValue = tDnrSts->OverInAlarmLmt_LTE/2;	 //과입력 Shutdown -8dBm
   \   000000DC   00F20020           ADDW     R0,R0,#+512
   \   000000E0   90F90100           LDRSB    R0,[R0, #+1]
   \   000000E4   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   000000E8   4FEA600A           ASR      R10,R0,#+1
   1523          
   1524          			AmpOnOff = &Sts->FwdAmpOnOff_LTE;
   \                     ??ShutdownFunc_8:
   \   000000EC   0BF25F04           ADDW     R4,R11,#+95
   1525          			break;
   \   000000F0   B5E0               B.N      ??ShutdownFunc_2
   1526          
   1527          		case SD_FO_LTE:
   1528          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_9:
   \   000000F2   0420               MOVS     R0,#+4
   \   000000F4   8DF80000           STRB     R0,[SP, #+0]
   1529          			SdTimer = TimerSD_LTE;
   \   000000F8   2B25               MOVS     R5,#+43
   1530          			DetValue = Sts->FwdOutPwr_LTE[0]*10 + Sts->FwdOutPwr_LTE[1];
   \   000000FA   0BF21C00           ADDW     R0,R11,#+28
   \   000000FE   90F91610           LDRSB    R1,[R0, #+22]
   \   00000102   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000106   90F91700           LDRSB    R0,[R0, #+23]
   \   0000010A   00EB4209           ADD      R9,R0,R2, LSL #+1
   1531          			LmtValue = Sts->FwdOutHighLmt_LTE[0]*10 + Sts->FwdOutHighLmt_LTE[1];
   \   0000010E   0BF2F110           ADDW     R0,R11,#+497
   \   00000112   90F90D10           LDRSB    R1,[R0, #+13]
   \   00000116   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   0000011A   90F90E00           LDRSB    R0,[R0, #+14]
   \   0000011E   00EB420A           ADD      R10,R0,R2, LSL #+1
   1532          
   1533          			AmpOnOff = &Sts->FwdAmpOnOff_LTE;
   \   00000122   E3E7               B.N      ??ShutdownFunc_8
   1534          			break;
   1535          
   1536          		case SD_RO_LTE:
   1537          			OffReason = CASE_RvsFail;
   \                     ??ShutdownFunc_10:
   \   00000124   0220               MOVS     R0,#+2
   \   00000126   8DF80000           STRB     R0,[SP, #+0]
   1538          			SdTimer = TimerSD_LTE;
   \   0000012A   2B25               MOVS     R5,#+43
   1539          			DetValue = Sts->RvsOutPwr_LTE[0]*10 + Sts->RvsOutPwr_LTE[1];
   \   0000012C   0BF2F110           ADDW     R0,R11,#+497
   \   00000130   9BF9F111           LDRSB    R1,[R11, #+497]
   \   00000134   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000138   90F90110           LDRSB    R1,[R0, #+1]
   \   0000013C   01EB4209           ADD      R9,R1,R2, LSL #+1
   1540          			LmtValue = Sts->RvsOutUpperLmt_LTE[0]*10 + Sts->RvsOutUpperLmt_LTE[1];
   \   00000140   90F90910           LDRSB    R1,[R0, #+9]
   \   00000144   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000148   90F90A00           LDRSB    R0,[R0, #+10]
   \   0000014C   00EB420A           ADD      R10,R0,R2, LSL #+1
   1541          
   1542          			AmpOnOff = &Sts->FwdAmpOnOff_LTE;
   \   00000150   CCE7               B.N      ??ShutdownFunc_8
   1543          			break;
   1544          
   1545          		//---------------------------------------------------------------------//
   1546          		// 3G
   1547          		case SD_FI_3G:
   1548          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_11:
   \   00000152   0421               MOVS     R1,#+4
   \   00000154   8DF80010           STRB     R1,[SP, #+0]
   1549          			SdTimer = TimerSD_3G;
   \   00000158   2A25               MOVS     R5,#+42
   1550          			DetValue		= - tDnrSts->FwdInPwr_3G;
   \   0000015A   90F91B10           LDRSB    R1,[R0, #+27]
   \   0000015E   C1F10009           RSB      R9,R1,#+0
   1551          			LmtValue		= tDnrSts->OverInAlarmLmt_3G/2;	//과입력 Shutdown  -19dBm
   \   00000162   00F20020           ADDW     R0,R0,#+512
   \   00000166   90F90200           LDRSB    R0,[R0, #+2]
   \   0000016A   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   0000016E   4FEA600A           ASR      R10,R0,#+1
   1552          
   1553          			AmpOnOff = &Sts->FwdAmpOnOff_3G;
   \                     ??ShutdownFunc_12:
   \   00000172   0BF25D04           ADDW     R4,R11,#+93
   1554          			break;
   \   00000176   72E0               B.N      ??ShutdownFunc_2
   1555          
   1556          		case SD_FO_3G:
   1557          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_13:
   \   00000178   0420               MOVS     R0,#+4
   \   0000017A   8DF80000           STRB     R0,[SP, #+0]
   1558          			SdTimer = TimerSD_3G;
   \   0000017E   2A25               MOVS     R5,#+42
   1559          			DetValue = Sts->FwdOutPwr_3G[0]*10 + Sts->FwdOutPwr_3G[1];
   \   00000180   9BF91C00           LDRSB    R0,[R11, #+28]
   \   00000184   00EB8001           ADD      R1,R0,R0, LSL #+2
   \   00000188   0BF11C00           ADD      R0,R11,#+28
   \   0000018C   90F90100           LDRSB    R0,[R0, #+1]
   \   00000190   00EB4109           ADD      R9,R0,R1, LSL #+1
   1560          			LmtValue = Sts->FwdOutHighLmt_3G[0]*10 + Sts->FwdOutHighLmt_3G[1];
   \   00000194   0BF2DA00           ADDW     R0,R11,#+218
   \   00000198   90F90C10           LDRSB    R1,[R0, #+12]
   \   0000019C   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   000001A0   90F90D00           LDRSB    R0,[R0, #+13]
   \   000001A4   00EB420A           ADD      R10,R0,R2, LSL #+1
   1561          
   1562          			AmpOnOff = &Sts->FwdAmpOnOff_3G;
   \   000001A8   E3E7               B.N      ??ShutdownFunc_12
   1563          			
   1564          			break;
   1565          
   1566          		case SD_RO_3G:
   1567          			OffReason = CASE_RvsFail;
   \                     ??ShutdownFunc_14:
   \   000001AA   0220               MOVS     R0,#+2
   \   000001AC   8DF80000           STRB     R0,[SP, #+0]
   1568          			SdTimer = TimerSD_3G;
   \   000001B0   2A25               MOVS     R5,#+42
   1569          			DetValue = Sts->RvsOutPwr_3G[0]*10 + Sts->RvsOutPwr_3G[1];
   \   000001B2   0BF25E04           ADDW     R4,R11,#+94
   \   000001B6   94F97600           LDRSB    R0,[R4, #+118]
   \   000001BA   00EB8001           ADD      R1,R0,R0, LSL #+2
   \   000001BE   94F97700           LDRSB    R0,[R4, #+119]
   \   000001C2   00EB4109           ADD      R9,R0,R1, LSL #+1
   1570          			LmtValue = Sts->RvsOutUpperLmt_3G[0]*10 + Sts->RvsOutUpperLmt_3G[1];
   \   000001C6   9BF9DA00           LDRSB    R0,[R11, #+218]
   \   000001CA   00EB8001           ADD      R1,R0,R0, LSL #+2
   \   000001CE   0BF1DA00           ADD      R0,R11,#+218
   \   000001D2   90F90100           LDRSB    R0,[R0, #+1]
   \   000001D6   00EB410A           ADD      R10,R0,R1, LSL #+1
   1571          
   1572          			AmpOnOff = &Sts->FwdAmpOnOff_3G;
   \   000001DA   CAE7               B.N      ??ShutdownFunc_12
   1573          			break;
   1574          
   1575          		//---------------------------------------------------------------------//
   1576          		// LTE-A2
   1577          		case SD_FI_LTE_A2:
   1578          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_15:
   \   000001DC   0421               MOVS     R1,#+4
   \   000001DE   8DF80010           STRB     R1,[SP, #+0]
   1579          			SdTimer = TimerSD_LTE_A2;
   \   000001E2   2C25               MOVS     R5,#+44
   1580          			DetValue		= -tDnrSts->FwdInPwr_LTE_A2;
   \   000001E4   00F11B01           ADD      R1,R0,#+27
   \   000001E8   91F92110           LDRSB    R1,[R1, #+33]
   \   000001EC   C1F10009           RSB      R9,R1,#+0
   1581          			LmtValue		= tDnrSts->OverInAlarmLmt_LTE_A2/2;	// 과입력 Shutdown -15dBm
   \   000001F0   00F20020           ADDW     R0,R0,#+512
   \   000001F4   90F92200           LDRSB    R0,[R0, #+34]
   \   000001F8   00EBD070           ADD      R0,R0,R0, LSR #+31
   \   000001FC   4FEA600A           ASR      R10,R0,#+1
   1582          
   1583          			AmpOnOff = &Sts->FwdAmpOnOff_LTE_A2;
   \   00000200   2BE0               B.N      ??ShutdownFunc_16
   1584          			break;
   1585          
   1586          		case SD_FO_LTE_A2:
   1587          			OffReason = CASE_OverPwr;
   \                     ??ShutdownFunc_17:
   \   00000202   0420               MOVS     R0,#+4
   \   00000204   8DF80000           STRB     R0,[SP, #+0]
   1588          			SdTimer = TimerSD_LTE_A2;
   \   00000208   2C25               MOVS     R5,#+44
   1589          			DetValue = Sts->FwdOutPwr_LTE_A2[0]*10 + Sts->FwdOutPwr_LTE_A2[1];
   \   0000020A   0BF21C00           ADDW     R0,R11,#+28
   \   0000020E   90F92110           LDRSB    R1,[R0, #+33]
   \   00000212   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000216   90F92200           LDRSB    R0,[R0, #+34]
   \   0000021A   00EB4209           ADD      R9,R0,R2, LSL #+1
   1590          			LmtValue = Sts->FwdOutHighLmt_LTE_A2[0]*10 + Sts->FwdOutHighLmt_LTE_A2[1];
   \   0000021E   0BF2F110           ADDW     R0,R11,#+497
   \   00000222   90F92F10           LDRSB    R1,[R0, #+47]
   \   00000226   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   0000022A   90F93000           LDRSB    R0,[R0, #+48]
   \   0000022E   12E0               B.N      ??ShutdownFunc_18
   1591          
   1592          			AmpOnOff = &Sts->FwdAmpOnOff_LTE_A2;
   1593          			break;
   1594          
   1595          		case SD_RO_LTE_A2:
   1596          			OffReason = CASE_RvsFail;
   \                     ??ShutdownFunc_19:
   \   00000230   0220               MOVS     R0,#+2
   \   00000232   8DF80000           STRB     R0,[SP, #+0]
   1597          			SdTimer = TimerSD_LTE_A2;
   \   00000236   2C25               MOVS     R5,#+44
   1598          			DetValue = Sts->RvsOutPwr_LTE_A2[0]*10 + Sts->RvsOutPwr_LTE_A2[1];
   \   00000238   0BF2F110           ADDW     R0,R11,#+497
   \   0000023C   90F92610           LDRSB    R1,[R0, #+38]
   \   00000240   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000244   90F92710           LDRSB    R1,[R0, #+39]
   \   00000248   01EB4209           ADD      R9,R1,R2, LSL #+1
   1599          			LmtValue = (Sts->RvsOutUpperLmt_LTE_A2[0]*10 + Sts->RvsOutUpperLmt_LTE_A2[1]);
   \   0000024C   90F92B10           LDRSB    R1,[R0, #+43]
   \   00000250   01EB8102           ADD      R2,R1,R1, LSL #+2
   \   00000254   4057               LDRSB    R0,[R0, R5]
   \                     ??ShutdownFunc_18:
   \   00000256   00EB420A           ADD      R10,R0,R2, LSL #+1
   1600          
   1601          			AmpOnOff = &Sts->FwdAmpOnOff_LTE_A2;
   \                     ??ShutdownFunc_16:
   \   0000025A   0BF26004           ADDW     R4,R11,#+96
   1602          			break;
   1603           	}
   1604          
   1605          	//---------------------------------------------------------------------//
   1606          	switch(Sd_Step[Path])
   \                     ??ShutdownFunc_2:
   \   0000025E   ....               LDR.N    R7,??DataTable8_18
   \   00000260   F05D               LDRB     R0,[R6, R7]
   \   00000262   98B1               CBZ.N    R0,??ShutdownFunc_20
   \   00000264   0128               CMP      R0,#+1
   \   00000266   31D0               BEQ.N    ??ShutdownFunc_21
   \   00000268   0228               CMP      R0,#+2
   \   0000026A   58D0               BEQ.N    ??ShutdownFunc_22
   \   0000026C   0328               CMP      R0,#+3
   \   0000026E   00F08080           BEQ.W    ??ShutdownFunc_23
   \   00000272   0428               CMP      R0,#+4
   \   00000274   00F09280           BEQ.W    ??ShutdownFunc_24
   \   00000278   0A28               CMP      R0,#+10
   \   0000027A   00F0A580           BEQ.W    ??ShutdownFunc_25
   \   0000027E   1428               CMP      R0,#+20
   \   00000280   00F0B680           BEQ.W    ??ShutdownFunc_26
   \   00000284   1E28               CMP      R0,#+30
   \   00000286   00F0C780           BEQ.W    ??ShutdownFunc_27
   \   0000028A   25E0               B.N      ??ShutdownFunc_28
   1607          	{
   1608          		case 0:
   1609          			Sd_Step[Path] = 0;
   \                     ??ShutdownFunc_20:
   \   0000028C   F055               STRB     R0,[R6, R7]
   1610          			Sd_Cnt[Path] = 0;
   \   0000028E   ....               LDR.N    R0,??DataTable8_19
   \   00000290   0021               MOVS     R1,#+0
   \   00000292   3154               STRB     R1,[R6, R0]
   1611          
   1612          			if(DetValue >= LmtValue)
   \   00000294   0FFA89F0           SXTH     R0,R9
   \   00000298   0FFA8AF1           SXTH     R1,R10
   \   0000029C   8842               CMP      R0,R1
   \   0000029E   C0F2FD80           BLT.W    ??ShutdownFunc_1
   1613          			{
   1614          				if((Sd_Path[SysPath] == 0)&&(*AmpOnOff == _Enable))
   \   000002A2   ........           LDR.W    R11,??DataTable8_20
   \   000002A6   18F80B00           LDRB     R0,[R8, R11]
   \   000002AA   0028               CMP      R0,#+0
   \   000002AC   40F0F680           BNE.W    ??ShutdownFunc_1
   \   000002B0   2078               LDRB     R0,[R4, #+0]
   \   000002B2   0028               CMP      R0,#+0
   \   000002B4   40F0F280           BNE.W    ??ShutdownFunc_1
   1615          				{
   1616          					TimerRegist(SdTimer, Time1Sec*5);
   \   000002B8   41F28831           MOVW     R1,#+5000
   \   000002BC   2846               MOV      R0,R5
   \   000002BE   ........           BL       TimerRegist
   1617          					Sd_Step[Path] = 1;
   \   000002C2   0120               MOVS     R0,#+1
   \   000002C4   F055               STRB     R0,[R6, R7]
   1618          					Sd_Path[SysPath] = 1;
   \   000002C6   08F80B00           STRB     R0,[R8, R11]
   \   000002CA   E7E0               B.N      ??ShutdownFunc_1
   1619          				}
   1620          			}
   1621          			break;
   1622          
   1623          		case 1:	// Amp Off Check
   1624          			if(DetValue < (LmtValue))	// 정상...
   \                     ??ShutdownFunc_21:
   \   000002CC   0FFA89F0           SXTH     R0,R9
   \   000002D0   0FFA8AF1           SXTH     R1,R10
   \   000002D4   8842               CMP      R0,R1
   \   000002D6   06DA               BGE.N    ??ShutdownFunc_29
   1625          			{
   1626          				Sd_Step[Path] = 0;
   \                     ??ShutdownFunc_28:
   \   000002D8   0020               MOVS     R0,#+0
   \   000002DA   F055               STRB     R0,[R6, R7]
   1627          				Sd_Path[SysPath] = 0;
   \   000002DC   ....               LDR.N    R0,??DataTable8_20
   \   000002DE   0021               MOVS     R1,#+0
   \   000002E0   08F80010           STRB     R1,[R8, R0]
   1628          				break;
   \   000002E4   DAE0               B.N      ??ShutdownFunc_1
   1629          			}
   1630          			
   1631          			if(!TimeOverCheck(SdTimer)) return;
   \                     ??ShutdownFunc_29:
   \   000002E6   2846               MOV      R0,R5
   \   000002E8   ........           BL       TimeOverCheck
   \   000002EC   0028               CMP      R0,#+0
   \   000002EE   00F0D580           BEQ.W    ??ShutdownFunc_1
   1632          			*AmpOnOff = _Disable;
   \   000002F2   0120               MOVS     R0,#+1
   \   000002F4   2070               STRB     R0,[R4, #+0]
   1633          			if(Sd_Cnt[Path] == 2)	OffTime = SD_AMP_OFF_30M;
   \   000002F6   ....               LDR.N    R0,??DataTable8_19
   \   000002F8   305C               LDRB     R0,[R6, R0]
   \   000002FA   0228               CMP      R0,#+2
   \   000002FC   0CBF               ITE      EQ 
   \   000002FE   0223               MOVEQ    R3,#+2
   \   00000300   0123               MOVNE    R3,#+1
   1634          			else					OffTime = SD_AMP_OFF_5S;
   1635          			AmpBitReason(SysPath, _Disable, OffReason, OffTime);
   \   00000302   9DF80020           LDRB     R2,[SP, #+0]
   \   00000306   0121               MOVS     R1,#+1
   \   00000308   4046               MOV      R0,R8
   \   0000030A   ........           BL       AmpBitReason
   1636          			
   1637          			TimerRegist(SdTimer, Time1Sec*5);		// 5Sec
   \   0000030E   41F28831           MOVW     R1,#+5000
   \   00000312   2846               MOV      R0,R5
   \   00000314   ........           BL       TimerRegist
   1638          			Sd_Step[Path] = 2;
   \   00000318   0220               MOVS     R0,#+2
   \                     ??ShutdownFunc_30:
   \   0000031A   F055               STRB     R0,[R6, R7]
   1639          			
   1640          			break;
   \   0000031C   BEE0               B.N      ??ShutdownFunc_1
   1641          			
   1642          		case 2:  // Amp On Check = After 5sec
   1643          			if(!TimeOverCheck(SdTimer))	return;
   \                     ??ShutdownFunc_22:
   \   0000031E   2846               MOV      R0,R5
   \   00000320   ........           BL       TimeOverCheck
   \   00000324   0028               CMP      R0,#+0
   \   00000326   00F0B980           BEQ.W    ??ShutdownFunc_1
   1644          
   1645          			Sd_Cnt[Path]++; // Off Count
   \   0000032A   ....               LDR.N    R0,??DataTable8_19
   \   0000032C   315C               LDRB     R1,[R6, R0]
   \   0000032E   491C               ADDS     R1,R1,#+1
   \   00000330   3154               STRB     R1,[R6, R0]
   1646          			if(Sd_Cnt[Path] >= 3)
   \   00000332   C9B2               UXTB     R1,R1
   \   00000334   0329               CMP      R1,#+3
   \   00000336   0DD3               BCC.N    ??ShutdownFunc_31
   1647          			{
   1648          				if(tDnrSts->ShunDownTime == 0)		TimerRegist(SdTimer, Time1Sec*60L*30L);	
   \   00000338   ....               LDR.N    R0,??DataTable8_10
   \   0000033A   0068               LDR      R0,[R0, #+0]
   \   0000033C   90F80602           LDRB     R0,[R0, #+518]
   \   00000340   0028               CMP      R0,#+0
   \   00000342   0CBF               ITE      EQ 
   \   00000344   ....               LDREQ.N  R1,??DataTable8_21  ;; 0x1b7740
   \   00000346   44F62061           MOVWNE   R1,#+20000
   1649          				else								TimerRegist(SdTimer, Time1Sec*20L);	
   \   0000034A   2846               MOV      R0,R5
   \   0000034C   ........           BL       TimerRegist
   1650          				
   1651          				Sd_Step[Path] = 3;
   \   00000350   0320               MOVS     R0,#+3
   \   00000352   E2E7               B.N      ??ShutdownFunc_30
   1652          			}
   1653          			else
   1654          			{  
   1655          				*AmpOnOff = _Enable;
   \                     ??ShutdownFunc_31:
   \   00000354   0020               MOVS     R0,#+0
   \   00000356   2070               STRB     R0,[R4, #+0]
   1656          				AmpBitReason(SysPath, _Enable, 127, SD_AMP_ON);
   \   00000358   0023               MOVS     R3,#+0
   \   0000035A   7F22               MOVS     R2,#+127
   \   0000035C   0146               MOV      R1,R0
   \   0000035E   4046               MOV      R0,R8
   \   00000360   ........           BL       AmpBitReason
   1657          
   1658          				TimerRegist(SdTimer, Time1Sec*1);
   \   00000364   4FF47A71           MOV      R1,#+1000
   \   00000368   2846               MOV      R0,R5
   \   0000036A   ........           BL       TimerRegist
   1659          
   1660          				Sd_Step[Path] = 10; 
   \   0000036E   0A20               MOVS     R0,#+10
   \   00000370   D3E7               B.N      ??ShutdownFunc_30
   1661          			}
   1662          			break;
   1663          
   1664          		case 3:	// Amp On Check - After 30min
   1665          			if(!TimeOverCheck(SdTimer))	return;
   \                     ??ShutdownFunc_23:
   \   00000372   2846               MOV      R0,R5
   \   00000374   ........           BL       TimeOverCheck
   \   00000378   0028               CMP      R0,#+0
   \   0000037A   00F08F80           BEQ.W    ??ShutdownFunc_1
   1666          			
   1667          			*AmpOnOff = _Enable;
   \   0000037E   0020               MOVS     R0,#+0
   \   00000380   2070               STRB     R0,[R4, #+0]
   1668          			AmpBitReason(SysPath, _Enable, 127, SD_AMP_ON);
   \   00000382   0023               MOVS     R3,#+0
   \   00000384   7F22               MOVS     R2,#+127
   \   00000386   0146               MOV      R1,R0
   \   00000388   4046               MOV      R0,R8
   \   0000038A   ........           BL       AmpBitReason
   1669          			
   1670          			TimerRegist(SdTimer, Time1Sec*1);
   \   0000038E   4FF47A71           MOV      R1,#+1000
   \   00000392   2846               MOV      R0,R5
   \   00000394   ........           BL       TimerRegist
   1671          
   1672          			Sd_Step[Path] = 20;
   \   00000398   1420               MOVS     R0,#+20
   \   0000039A   BEE7               B.N      ??ShutdownFunc_30
   1673          			break;
   1674          
   1675          		case 4:	// Amp Off Check
   1676          			if(!TimeOverCheck(SdTimer))
   \                     ??ShutdownFunc_24:
   \   0000039C   2846               MOV      R0,R5
   \   0000039E   ........           BL       TimeOverCheck
   \   000003A2   30B9               CBNZ.N   R0,??ShutdownFunc_32
   1677          			{   // Timer  동안 유지 Check
   1678          				if(DetValue<LmtValue)	Sd_Step[Path] = 0;
   \   000003A4   0FFA89F1           SXTH     R1,R9
   \   000003A8   0FFA8AF2           SXTH     R2,R10
   \   000003AC   9142               CMP      R1,R2
   \   000003AE   75DA               BGE.N    ??ShutdownFunc_1
   \   000003B0   B3E7               B.N      ??ShutdownFunc_30
   1679          				break;
   1680          			}
   1681          
   1682          			*AmpOnOff = _Disable;
   \                     ??ShutdownFunc_32:
   \   000003B2   0120               MOVS     R0,#+1
   \   000003B4   2070               STRB     R0,[R4, #+0]
   1683          			AmpBitReason(SysPath, _Disable, OffReason, SD_AMP_OFF_INF);
   \   000003B6   0323               MOVS     R3,#+3
   \   000003B8   9DF80020           LDRB     R2,[SP, #+0]
   \   000003BC   0121               MOVS     R1,#+1
   \   000003BE   4046               MOV      R0,R8
   \   000003C0   ........           BL       AmpBitReason
   1684          
   1685          			Sd_Step[Path] = 30;	// 완전 Shutdown
   \   000003C4   1E20               MOVS     R0,#+30
   \   000003C6   A8E7               B.N      ??ShutdownFunc_30
   1686          			break;
   1687          
   1688          		//---------------------------------------------------------------------//
   1689          		case 10:	// Amp On 시간 Total 5sec 유지...(5Sec Off시)
   1690          			if(!TimeOverCheck(SdTimer))	return;
   \                     ??ShutdownFunc_25:
   \   000003C8   2846               MOV      R0,R5
   \   000003CA   ........           BL       TimeOverCheck
   \   000003CE   0028               CMP      R0,#+0
   \   000003D0   64D0               BEQ.N    ??ShutdownFunc_1
   1691          			
   1692          			*AmpOnOff = _Enable;
   \   000003D2   0020               MOVS     R0,#+0
   \   000003D4   2070               STRB     R0,[R4, #+0]
   1693          			AmpBitReason(SysPath, _Enable, 127, SD_AMP_ON);
   \   000003D6   0023               MOVS     R3,#+0
   \   000003D8   7F22               MOVS     R2,#+127
   \   000003DA   0146               MOV      R1,R0
   \   000003DC   4046               MOV      R0,R8
   \   000003DE   ........           BL       AmpBitReason
   1694          			
   1695          			TimerRegist(SdTimer, Time1Sec*4);
   \   000003E2   4FF47A61           MOV      R1,#+4000
   \   000003E6   2846               MOV      R0,R5
   \   000003E8   ........           BL       TimerRegist
   1696          
   1697          			Sd_Step[Path] = 1; 
   \   000003EC   0120               MOVS     R0,#+1
   \   000003EE   94E7               B.N      ??ShutdownFunc_30
   1698          			
   1699          			break;
   1700          
   1701          		//---------------------------------------------------------------------//
   1702          		case 20:	// Amp On 시간 Total 5sec 유지...(30Min Off시)
   1703          			if(!TimeOverCheck(SdTimer))	return;
   \                     ??ShutdownFunc_26:
   \   000003F0   2846               MOV      R0,R5
   \   000003F2   ........           BL       TimeOverCheck
   \   000003F6   0028               CMP      R0,#+0
   \   000003F8   50D0               BEQ.N    ??ShutdownFunc_1
   1704          
   1705          			*AmpOnOff = _Enable;
   \   000003FA   0020               MOVS     R0,#+0
   \   000003FC   2070               STRB     R0,[R4, #+0]
   1706          			AmpBitReason(SysPath, _Enable, 127, SD_AMP_ON);
   \   000003FE   0023               MOVS     R3,#+0
   \   00000400   7F22               MOVS     R2,#+127
   \   00000402   0146               MOV      R1,R0
   \   00000404   4046               MOV      R0,R8
   \   00000406   ........           BL       AmpBitReason
   1707          			
   1708          			TimerRegist(SdTimer, Time1Sec*4);
   \   0000040A   4FF47A61           MOV      R1,#+4000
   \   0000040E   2846               MOV      R0,R5
   \   00000410   ........           BL       TimerRegist
   1709          
   1710          			Sd_Step[Path] = 4; 
   \   00000414   0420               MOVS     R0,#+4
   \   00000416   80E7               B.N      ??ShutdownFunc_30
   1711          			break;
   1712          
   1713          		//---------------------------------------------------------------------//
   1714          		case 30:	// 완전 Shutdown 상태...
   1715          
   1716          			if((SysPath == PATH_2G)&&((Path == SD_FO_2G)||(Path == SD_FI_2G)||(Path == SD_RO_2G)))
   \                     ??ShutdownFunc_27:
   \   00000418   B8F1000F           CMP      R8,#+0
   \   0000041C   1DD1               BNE.N    ??ShutdownFunc_33
   \   0000041E   042E               CMP      R6,#+4
   \   00000420   02D0               BEQ.N    ??ShutdownFunc_34
   \   00000422   0EB1               CBZ.N    R6,??ShutdownFunc_34
   \   00000424   082E               CMP      R6,#+8
   \   00000426   39D1               BNE.N    ??ShutdownFunc_1
   1717          			{
   1718          				AmpBitReason(PATH_LTE, _Disable, OffReason, SD_AMP_OFF_INF);
   \                     ??ShutdownFunc_34:
   \   00000428   0323               MOVS     R3,#+3
   \   0000042A   9DF80020           LDRB     R2,[SP, #+0]
   \   0000042E   0121               MOVS     R1,#+1
   \   00000430   0120               MOVS     R0,#+1
   \   00000432   ........           BL       AmpBitReason
   1719          
   1720          				Sts->FwdAmpOnOff_LTE = Disable;
   \   00000436   0BF15E00           ADD      R0,R11,#+94
   \   0000043A   0121               MOVS     R1,#+1
   \   0000043C   4170               STRB     R1,[R0, #+1]
   1721          				
   1722          				if( Path == SD_FO_2G)	Sd_Step[SD_FO_LTE] = 30;
   \   0000043E   042E               CMP      R6,#+4
   \   00000440   04BF               ITT      EQ 
   \   00000442   1E20               MOVEQ    R0,#+30
   \   00000444   7871               STRBEQ   R0,[R7, #+5]
   \   00000446   29D0               BEQ.N    ??ShutdownFunc_1
   1723          				if( Path == SD_FI_2G)	Sd_Step[SD_FI_LTE] = 30;
   \   00000448   16B9               CBNZ.N   R6,??ShutdownFunc_35
   \   0000044A   1E20               MOVS     R0,#+30
   \   0000044C   7870               STRB     R0,[R7, #+1]
   \   0000044E   25E0               B.N      ??ShutdownFunc_1
   1724          				if( Path == SD_RO_2G)	Sd_Step[SD_RO_LTE] = 30;
   \                     ??ShutdownFunc_35:
   \   00000450   082E               CMP      R6,#+8
   \   00000452   23D1               BNE.N    ??ShutdownFunc_1
   \   00000454   1E20               MOVS     R0,#+30
   \   00000456   7872               STRB     R0,[R7, #+9]
   \   00000458   20E0               B.N      ??ShutdownFunc_1
   1725          			}
   1726          			
   1727          			if((SysPath == PATH_LTE)&&((Path == SD_FO_LTE)||(Path == SD_FI_LTE)||(Path == SD_RO_LTE)))
   \                     ??ShutdownFunc_33:
   \   0000045A   B8F1010F           CMP      R8,#+1
   \   0000045E   1DD1               BNE.N    ??ShutdownFunc_1
   \   00000460   052E               CMP      R6,#+5
   \   00000462   03D0               BEQ.N    ??ShutdownFunc_36
   \   00000464   012E               CMP      R6,#+1
   \   00000466   01D0               BEQ.N    ??ShutdownFunc_36
   \   00000468   092E               CMP      R6,#+9
   \   0000046A   17D1               BNE.N    ??ShutdownFunc_1
   1728          			{
   1729          				AmpBitReason(PATH_2G, _Disable, OffReason, SD_AMP_OFF_INF);
   \                     ??ShutdownFunc_36:
   \   0000046C   0323               MOVS     R3,#+3
   \   0000046E   9DF80020           LDRB     R2,[SP, #+0]
   \   00000472   0121               MOVS     R1,#+1
   \   00000474   0020               MOVS     R0,#+0
   \   00000476   ........           BL       AmpBitReason
   1730          				
   1731          				Sts->FwdAmpOnOff_2G = Disable;
   \   0000047A   0120               MOVS     R0,#+1
   \   0000047C   8BF85E00           STRB     R0,[R11, #+94]
   1732          				if( Path == SD_FO_LTE)	Sd_Step[SD_FO_2G] = 30;
   \   00000480   052E               CMP      R6,#+5
   \   00000482   04BF               ITT      EQ 
   \   00000484   1E20               MOVEQ    R0,#+30
   \   00000486   3871               STRBEQ   R0,[R7, #+4]
   \   00000488   08D0               BEQ.N    ??ShutdownFunc_1
   1733          				if( Path == SD_FI_LTE)	Sd_Step[SD_FI_2G] = 30;
   \   0000048A   012E               CMP      R6,#+1
   \   0000048C   04BF               ITT      EQ 
   \   0000048E   1E20               MOVEQ    R0,#+30
   \   00000490   3870               STRBEQ   R0,[R7, #+0]
   \   00000492   03D0               BEQ.N    ??ShutdownFunc_1
   1734          				if( Path == SD_RO_LTE)	Sd_Step[SD_RO_2G] = 30;
   \   00000494   092E               CMP      R6,#+9
   \   00000496   04BF               ITT      EQ 
   \   00000498   1E20               MOVEQ    R0,#+30
   \   0000049A   3872               STRBEQ   R0,[R7, #+8]
   \                     ??ShutdownFunc_1:
   \   0000049C   BDE8F18F           POP      {R0,R4-R11,PC}   ;; return
   1735          			}
   1736          #if 0
   1737          			if((SysPath == PATH_LTE_A1)&&((Path == SD_FO_LTE_A1)||(Path == SD_FI_LTE_A1)||(Path == SD_RO_LTE_A1)))
   1738          			{
   1739          				AmpBitReason(PATH_LTE_A2, _Disable, OffReason, SD_AMP_OFF_INF);
   1740          				Sts->FwdAmpOnOff_LTE_A2 = Disable;
   1741          				if( Path == SD_FO_LTE_A1)	Sd_Step[SD_FO_LTE_A2] = 30;
   1742          				if( Path == SD_FI_LTE_A1)	Sd_Step[SD_FI_LTE_A2] = 30;
   1743          				if( Path == SD_RO_LTE_A1)	Sd_Step[SD_RO_LTE_A2] = 30;
   1744          			}
   1745          			
   1746          			if((SysPath == PATH_LTE_A2)&&((Path == SD_FO_LTE_A2)||(Path == SD_FI_LTE_A2)||(Path == SD_RO_LTE_A2)))
   1747          			{
   1748          				AmpBitReason(PATH_LTE_A1, _Disable, OffReason, SD_AMP_OFF_INF);
   1749          				Sts->FwdAmpOnOff_LTE_A1 = Disable;
   1750          				if( Path == SD_FO_LTE_A2)	Sd_Step[SD_FO_LTE_A1] = 30;
   1751          				if( Path == SD_FI_LTE_A2)	Sd_Step[SD_FI_LTE_A1] = 30;
   1752          				if( Path == SD_RO_LTE_A2)	Sd_Step[SD_RO_LTE_A1] = 30;
   1753          			}
   1754          #endif
   1755           			break;
   1756          
   1757          		//---------------------------------------------------------------------//
   1758          		default :
   1759          			Sd_Step[Path] = 0;
   1760          			Sd_Path[SysPath] = 0;
   1761          		break;
   1762          	}
   1763          }
   1764          
   1765          //=============================================================================//
   1766          // Shutdown

   \                                 In section .text, align 2, keep-with-next
   1767          void AmpBitReason(INT8U SysPath, INT8U EnSts, INT8U Reason, INT8U AmpSts)
   1768          {
   \                     AmpBitReason:
   \   00000000   10B4               PUSH     {R4}
   1769          	__Dnr_Sts  *Sts = tDnrSts;
   \   00000002   ....               LDR.N    R4,??DataTable8_10
   \   00000004   2468               LDR      R4,[R4, #+0]
   1770          	
   1771          	switch(SysPath)
   \   00000006   28B1               CBZ.N    R0,??AmpBitReason_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   11D0               BEQ.N    ??AmpBitReason_1
   \   0000000C   1ED3               BCC.N    ??AmpBitReason_2
   \   0000000E   0328               CMP      R0,#+3
   \   00000010   2BD0               BEQ.N    ??AmpBitReason_3
   \   00000012   38E0               B.N      ??AmpBitReason_4
   1772          	{
   1773          		case PATH_2G:
   1774          			if(EnSts)	Sts->AlmSts.FwdAmpOnOff_2G = __SET;
   \                     ??AmpBitReason_0:
   \   00000014   0029               CMP      R1,#+0
   \   00000016   A07B               LDRB     R0,[R4, #+14]
   \   00000018   14BF               ITE      NE 
   \   0000001A   40F02000           ORRNE    R0,R0,#0x20
   \   0000001E   00F0DF00           ANDEQ    R0,R0,#0xDF
   1775          			else		Sts->AlmSts.FwdAmpOnOff_2G = __RESET;
   \   00000022   A073               STRB     R0,[R4, #+14]
   1776          			Sts->AmpOffCase_2G = Reason;
   \   00000024   04F15900           ADD      R0,R4,#+89
   \   00000028   4270               STRB     R2,[R0, #+1]
   1777          			Sts->SD_Status_2G = AmpSts;
   \   0000002A   84F88632           STRB     R3,[R4, #+646]
   1778          			break;
   \   0000002E   2AE0               B.N      ??AmpBitReason_4
   1779          		case PATH_3G:
   1780          			if(EnSts)	Sts->AlmSts.FwdAmpOnOff_3G = __SET;
   \                     ??AmpBitReason_1:
   \   00000030   0029               CMP      R1,#+0
   \   00000032   A07B               LDRB     R0,[R4, #+14]
   \   00000034   14BF               ITE      NE 
   \   00000036   40F04000           ORRNE    R0,R0,#0x40
   \   0000003A   00F0BF00           ANDEQ    R0,R0,#0xBF
   1781          			else		Sts->AlmSts.FwdAmpOnOff_3G = __RESET;
   \   0000003E   A073               STRB     R0,[R4, #+14]
   1782          			Sts->AmpOffCase_3G = Reason;
   \   00000040   84F85920           STRB     R2,[R4, #+89]
   1783          			Sts->SD_Status_3G = AmpSts;
   \   00000044   04F28620           ADDW     R0,R4,#+646
   \   00000048   4370               STRB     R3,[R0, #+1]
   1784          			break;
   \   0000004A   1CE0               B.N      ??AmpBitReason_4
   1785          
   1786          		case PATH_LTE:
   1787          			if(EnSts)	Sts->AlmSts.FwdAmpOnOff_LTE = __SET;
   \                     ??AmpBitReason_2:
   \   0000004C   0029               CMP      R1,#+0
   \   0000004E   A07B               LDRB     R0,[R4, #+14]
   \   00000050   14BF               ITE      NE 
   \   00000052   40F01000           ORRNE    R0,R0,#0x10
   \   00000056   00F0EF00           ANDEQ    R0,R0,#0xEF
   1788          			else		Sts->AlmSts.FwdAmpOnOff_LTE = __RESET;
   \   0000005A   A073               STRB     R0,[R4, #+14]
   1789          			Sts->AmpOffCase_LTE = Reason;
   \   0000005C   04F15900           ADD      R0,R4,#+89
   \   00000060   8270               STRB     R2,[R0, #+2]
   1790          			Sts->SD_Status_LTE = AmpSts;
   \   00000062   04F28620           ADDW     R0,R4,#+646
   \   00000066   8370               STRB     R3,[R0, #+2]
   1791          			break;
   \   00000068   0DE0               B.N      ??AmpBitReason_4
   1792          			
   1793          		case PATH_LTE_A2:
   1794          			if(EnSts)	Sts->AlmSts.FwdAmpOnOff_LTE_A2 = __SET;
   \                     ??AmpBitReason_3:
   \   0000006A   0029               CMP      R1,#+0
   \   0000006C   A07B               LDRB     R0,[R4, #+14]
   \   0000006E   14BF               ITE      NE 
   \   00000070   40F00400           ORRNE    R0,R0,#0x4
   \   00000074   00F0FB00           ANDEQ    R0,R0,#0xFB
   1795          			else		Sts->AlmSts.FwdAmpOnOff_LTE_A2 = __RESET;
   \   00000078   A073               STRB     R0,[R4, #+14]
   1796          			Sts->AmpOffCase_LTE_A2 = Reason;
   \   0000007A   04F15900           ADD      R0,R4,#+89
   \   0000007E   C270               STRB     R2,[R0, #+3]
   1797          			Sts->SD_Status_LTE_A2 = AmpSts;
   \   00000080   04F28620           ADDW     R0,R4,#+646
   \   00000084   C370               STRB     R3,[R0, #+3]
   1798          			break;
   1799          
   1800          	}
   1801          	
   1802          }
   \                     ??AmpBitReason_4:
   \   00000086   10BC               POP      {R4}
   \   00000088   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     tDnrSts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     tempIndexHys

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     FwdOutPwrTemp_LTE_A2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     RvsOutPwrTemp_LTE_A2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     OutputTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     dBmTomW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     dptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     CurrRvsAgcAttn_LTE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     iAGCOnOff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     iAGClimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     iAGCPwr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   ........           DC32     iAGCAttnMAX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   ........           DC32     CurrAgcAttn_LTE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     tAGC_ATTENMAX_LTE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     CurrAgcAttn_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   ........           DC32     CurrRvsAgcAttn_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   ........           DC32     chkSleepMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   ........           DC32     tAGC_ATTENMAX_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   ........           DC32     tALC_ATTENMAX_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   ........           DC32     tmpRvsAttn1_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   ........           DC32     tmpRvsALCLvl_3G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   ........           DC32     CurrAgcAttn_3G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   ........           DC32     tAGC10_ATTENMAX_3G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   ........           DC32     CurrRvsAgcAttn_3G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   ........           DC32     tDnrSts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   ........           DC32     FlagAmpOnOff_3G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   ........           DC32     FlagAmpOnOff_2G

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   ........           DC32     AlarmCheck_LTE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   ........           DC32     FlagAmpOnOff_LTE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   ........           DC32     AlarmCheck_LTE_A2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   ........           DC32     FlagAmpOnOff_LTE_A2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   ........           DC32     Ac_Sd_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   ........           DC32     Sd_Step

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   ........           DC32     Sd_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   ........           DC32     Sd_Path

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   40771B00           DC32     0x1b7740
   1803            
   1804          ////////////////////////

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     AGCCheck                    16
     AGCCheckFunction             8
     AmpBitReason                 4
     Dnr0_ReadPwrTable           28
     FwdAGCCheck_CDMALTE         56
     FwdAGCCheck_CDMALTE_15M     56
     FwdAGCCheck_LTE_A_0         40
     FwdAGCCheck_WCDMA           48
     PwrTableOffset              16
     ReadPwrTableDnr             40
     ShutdownFunc                40
     TRIO_AlarmCheck             24


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     PwrTableOffset            74
     ReadPwrTableDnr           54
     Dnr0_ReadPwrTable        720
     AGCCheck                 144
     AGCCheckFunction          36
     FwdAGCCheck_CDMALTE_15M  698
     ?Subroutine0               6
     FwdAGCCheck_CDMALTE     1062
     FwdAGCCheck_WCDMA        506
     FwdAGCCheck_LTE_A_0      204
     TRIO_AlarmCheck          452
     ShutdownFunc            1184
     AmpBitReason             138
     ??DataTable4               4
     ??DataTable4_1             4
     ??DataTable4_2             4
     ??DataTable5               4
     ??DataTable5_1             4
     ??DataTable6               4
     ??DataTable6_1             4
     ??DataTable6_2             4
     ??DataTable6_3             4
     ??DataTable6_4             4
     ??DataTable6_5             4
     ??DataTable6_6             4
     ??DataTable6_7             4
     ??DataTable7               4
     ??DataTable8               4
     ??DataTable8_1             4
     ??DataTable8_2             4
     ??DataTable8_3             4
     ??DataTable8_4             4
     ??DataTable8_5             4
     ??DataTable8_6             4
     ??DataTable8_7             4
     ??DataTable8_8             4
     ??DataTable8_9             4
     ??DataTable8_10            4
     ??DataTable8_11            4
     ??DataTable8_12            4
     ??DataTable8_13            4
     ??DataTable8_14            4
     ??DataTable8_15            4
     ??DataTable8_16            4
     ??DataTable8_17            4
     ??DataTable8_18            4
     ??DataTable8_19            4
     ??DataTable8_20            4
     ??DataTable8_21            4

 
 5 422 bytes in section .text
 
 5 422 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     19/May/2017  23:31:31 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    dev\iobus\PCA9555.c                                      #
#    Command line =  "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    dev\iobus\PCA9555.c" -lC "D:\Project\TRIO\3.TRIO-MD\2_1G #
#                     Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130 #
#                    \out\" -o "D:\Project\TRIO\3.TRIO-MD\2_1G                #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\" --endian=little --cpu=Cortex-M3 -e --fpu=None      #
#                    --dlib_config "D:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "D:\Project\TRIO\3.TRIO-MD\2_1G                #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    include\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G             #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\" -I                    #
#                    "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\inc\" -I                #
#                    "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-CPU\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G              #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-LIB\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G              #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uCOS-II\Ports\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G       #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uCOS-II\Source\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G      #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-Probe\" -Oh --use_c++_inline                          #
#    List file    =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\PCA9555.lst                                          #
#    Object file  =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\PCA9555.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.TRIO-MD\2_1G Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\dev\iobus\PCA9555.c
      1          #define PCA9555_C
      2          
      3          #include "../../include/main.h"

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Str pPCA9555StrB
   \                     pPCA9555StrB:
   \   00000000                      DS8 24

   \                                 In section .data, align 4
   \   __absolute _pPCA9555Str pPCA9555Str
   \                     pPCA9555Str:
   \   00000000   0x........         DC32 pPCA9555StrB

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Reg pLEDCSVal0B
   \                     pLEDCSVal0B:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute _PCA9555Reg *pLEDCSVal0
   \                     pLEDCSVal0:
   \   00000000   0x........         DC32 pLEDCSVal0B

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Reg pLEDCSVal1B
   \                     pLEDCSVal1B:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute _PCA9555Reg *pLEDCSVal1
   \                     pLEDCSVal1:
   \   00000000   0x........         DC32 pLEDCSVal1B

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Reg pAttnVal0B
   \                     pAttnVal0B:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute _PCA9555Reg *pAttnVal0
   \                     pAttnVal0:
   \   00000000   0x........         DC32 pAttnVal0B

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Reg pAttnVal1B
   \                     pAttnVal1B:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute _PCA9555Reg *pAttnVal1
   \                     pAttnVal1:
   \   00000000   0x........         DC32 pAttnVal1B

   \                                 In section .bss, align 4
   \   __absolute _PCA9555Reg pAttnVal2B
   \                     pAttnVal2B:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \   __absolute _PCA9555Reg *pAttnVal2
   \                     pAttnVal2:
   \   00000000   0x........         DC32 pAttnVal2B
      4          
      5          
      6          //#define pPCA9555_debug
      7          #define CLKDELAY	ForDelay(5)
      8          
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void PCA9555_Init(_pPCA9555Str ptr, 
     11          						void (*SetClk)(), void (*RstClk)(), 
     12          							void (*SetData)(), void (*RstData)())
     13          {
   \                     PCA9555_Init:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9F06             LDR      R7,[SP, #+24]
     14          	// Port Initialization
     15          #if 1
     16          	__PA8_PP_PP();			//_PCA9555_CLK;		PG12
   \   0000000E   0x2308             MOVS     R3,#+8
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x40020000
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2021             MOVS     R0,#+33
   \   00000018   0x.... 0x....      BL       GPIOPortInit
     17          	__PC9_IN_FL();			//_PCA9555_DATA;	PG15
   \   0000001C   0x2309             MOVS     R3,#+9
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable6_1  ;; 0x40020800
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       GPIOPortInit
     18          #endif
     19          
     20          
     21          #if 0
     22          	__PG12_PP_PP();			//_PCA9555_CLK;		PG12
     23          	__PG15_IN_FL();			//_PCA9555_DATA;	PG15
     24          #endif
     25          
     26          
     27              ptr->SetClk = SetClk;
   \   0000002A   0x60A5             STR      R5,[R4, #+8]
     28              ptr->RstClk = RstClk;
   \   0000002C   0x60E6             STR      R6,[R4, #+12]
     29              ptr->SetData = SetData;
   \   0000002E   0xF8C4 0x8010      STR      R8,[R4, #+16]
     30              ptr->RstData = RstData;
   \   00000032   0x6167             STR      R7,[R4, #+20]
     31          	
     32          	RstpPCA9555SCL();
   \   00000034   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000038   0x....             B.N      RstpPCA9555SCL
     33          }
     34           

   \                                 In section .text, align 2, keep-with-next
     35          void pPCA9555BitSet(INT32U Bitaddr, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     36          {
   \                     pPCA9555BitSet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     37          	INT16U	dAddr = Bitaddr%8;
     38          	INT16U	pSel = (Bitaddr/8)/8;
   \   00000002   0x....             B.N      ?Subroutine0
     39          	INT16U	BitNumber = (Bitaddr/8)%8;
     40          
     41          	BitSet(pVal->pData[pSel].Data, BitNumber);
     42          	pPCASetPortData(dAddr, pVal->Data,ptr,Path);
     43          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x0984             LSRS     R4,R0,#+6
   \   00000002   0xB2A4             UXTH     R4,R4
   \   00000004   0x5C65             LDRB     R5,[R4, R1]
   \   00000006   0x2601             MOVS     R6,#+1
   \   00000008   0xF3C0 0x07C2      UBFX     R7,R0,#+3,#+3
   \   0000000C   0x40BE             LSLS     R6,R6,R7
   \   0000000E   0x4335             ORRS     R5,R6,R5
   \   00000010                      REQUIRE ??Subroutine3_0
   \   00000010                      ;; // Fall through to label ??Subroutine3_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine3_0:
   \   00000000   0x5465             STRB     R5,[R4, R1]
   \   00000002   0x9300             STR      R3,[SP, #+0]
   \   00000004   0x4613             MOV      R3,R2
   \   00000006   0x880A             LDRH     R2,[R1, #+0]
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0xF000 0x0007      AND      R0,R0,#0x7
   \   0000000E   0x0040             LSLS     R0,R0,#+1
   \   00000010   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000014   0x.... 0x....      BL       Write_pPCA9555_8Addr_16Data
   \   00000018   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void pPCA9555BitRst(INT32U Bitaddr, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     46          {
   \                     pPCA9555BitRst:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     47          	INT16U	dAddr = Bitaddr%8;
     48          	INT16U	pSel = (Bitaddr/8)/8;
   \   00000002   0x0984             LSRS     R4,R0,#+6
   \   00000004   0xB2A4             UXTH     R4,R4
     49          	INT16U	BitNumber = (Bitaddr/8)%8;
     50          
     51          	BitRst(pVal->pData[pSel].Data, BitNumber);
   \   00000006   0x5C65             LDRB     R5,[R4, R1]
   \   00000008   0x2601             MOVS     R6,#+1
   \   0000000A   0xF3C0 0x07C2      UBFX     R7,R0,#+3,#+3
   \   0000000E   0x40BE             LSLS     R6,R6,R7
   \   00000010   0x43B5             BICS     R5,R5,R6
   \   00000012   0x....             B.N      ??Subroutine3_0
     52          	pPCASetPortData(dAddr, pVal->Data,ptr,Path);
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void _pPCA9555BitSet(INT32U Bitaddr, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     56          {
   \                     _pPCA9555BitSet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     57          	INT16U	dAddr = Bitaddr%8;
     58          	INT16U	pSel = (Bitaddr/8)/8;
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
     59          	INT16U	BitNumber = (Bitaddr/8)%8;
     60          
     61          	BitSet(pVal->pData[pSel].Data, BitNumber);
     62          	pPCASetPortData(dAddr, pVal->Data,ptr,Path);
     63          }
     64          
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void pPCA9555SetData(INT32U pSel, INT8U Data, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     67          {
   \                     pPCA9555SetData:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
     68          	INT16U	dAddr = pSel%8;
     69          
     70          	pSel = (pSel/8)/8;
     71          	pVal->pData[pSel].Data = Data;	
   \   00000004   0x0985             LSRS     R5,R0,#+6
   \   00000006   0x54A9             STRB     R1,[R5, R2]
     72          	pPCASetPortData(dAddr, pVal->Data,ptr,Path);
   \   00000008   0x9400             STR      R4,[SP, #+0]
   \   0000000A   0x8812             LDRH     R2,[R2, #+0]
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0xF000 0x0007      AND      R0,R0,#0x7
   \   00000012   0x0040             LSLS     R0,R0,#+1
   \   00000014   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000018   0x.... 0x....      BL       Write_pPCA9555_8Addr_16Data
     73          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          INT8U pPCA9555BitRead(INT32U Bitaddr, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     76          {
   \                     pPCA9555BitRead:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     77          	INT16U	dAddr = Bitaddr%8;
     78          	INT16U	pSel = (Bitaddr/8)/8;
     79          	INT16U	BitNumber = (Bitaddr/8)%8;
     80          
     81          	pVal->Data = pPCAReadPortData(dAddr,ptr,Path);
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF004 0x0007      AND      R0,R4,#0x7
   \   0000000C   0x0040             LSLS     R0,R0,#+1
   \   0000000E   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000012   0x.... 0x....      BL       Read_pPCA9555_8Addr_16Data
   \   00000016   0x8028             STRH     R0,[R5, #+0]
     82          	return (BitRead(pVal->pData[pSel].Data, BitNumber));
   \   00000018   0x09A0             LSRS     R0,R4,#+6
   \   0000001A   0xB280             UXTH     R0,R0
   \   0000001C   0x5D40             LDRB     R0,[R0, R5]
   \   0000001E   0xF3C4 0x01C2      UBFX     R1,R4,#+3,#+3
   \   00000022   0x40C8             LSRS     R0,R0,R1
   \   00000024   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          INT8U pPCA9555ReadData(INT32U pSel, _PCA9555Reg *pVal, _pPCA9555Str ptr,INT8U Path)
     86          {
   \                     pPCA9555ReadData:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     87          	INT16U	dAddr = pSel%8;
     88          
     89          	pSel = (pSel/8)/8;
     90          	pVal->Data = pPCAReadPortData(dAddr,ptr,Path);
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF004 0x0007      AND      R0,R4,#0x7
   \   0000000C   0x0040             LSLS     R0,R0,#+1
   \   0000000E   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000012   0x.... 0x....      BL       Read_pPCA9555_8Addr_16Data
   \   00000016   0x8028             STRH     R0,[R5, #+0]
     91          	return pVal->pData[pSel].Data;
   \   00000018   0x09A0             LSRS     R0,R4,#+6
   \   0000001A   0x5D40             LDRB     R0,[R0, R5]
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     92          }
     93          
     94          
     95          ////////////////////////////////////////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     96          void pPCASetConfiguration(INT8U DevAddr, _PCA9555Reg Reg, _pPCA9555Str ptr,INT8U Path)
     97          {
   \                     pPCASetConfiguration:
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     98          	Write_pPCA9555_8Addr_16Data(PCA9555Addr | (DevAddr << 1), _ConfigPort0, Reg.Data, ptr,Path);
   \   00000004   0xB2DB             UXTB     R3,R3
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0xF8BD 0x2008      LDRH     R2,[SP, #+8]
   \   0000000E   0x2106             MOVS     R1,#+6
   \   00000010   0x0040             LSLS     R0,R0,#+1
   \   00000012   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       Write_pPCA9555_8Addr_16Data
     99          }
   \   0000001C   0xB003             ADD      SP,SP,#+12
   \   0000001E   0xBD00             POP      {PC}             ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void pPCASetPortData(INT8U DevAddr, INT16U Data,_pPCA9555Str ptr,INT8U Path)
    102          {
   \                     pPCASetPortData:
   \   00000000   0xB580             PUSH     {R7,LR}
    103          	Write_pPCA9555_8Addr_16Data(PCA9555Addr | (DevAddr << 1), _OutputPort0, Data, ptr,Path);
   \   00000002   0x9300             STR      R3,[SP, #+0]
   \   00000004   0x4613             MOV      R3,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x2102             MOVS     R1,#+2
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x.... 0x....      BL       Write_pPCA9555_8Addr_16Data
    104          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    105          

   \                                 In section .text, align 2, keep-with-next
    106          INT16U pPCAReadPortData(INT16U DevAddr,_pPCA9555Str ptr,INT8U Path)
    107          {
    108          	return Read_pPCA9555_8Addr_16Data(PCA9555Addr | (DevAddr << 1), _InputPort0, ptr,Path);
   \                     pPCAReadPortData:
   \   00000000   0x4613             MOV      R3,R2
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x0040             LSLS     R0,R0,#+1
   \   00000008   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x....             B.N      Read_pPCA9555_8Addr_16Data
    109          }
    110          
    111          

   \                                 In section .text, align 2, keep-with-next
    112          INT16U Write_pPCA9555_8Addr_16Data(INT8U DevAddr, INT8U Command, INT16U Data, _pPCA9555Str ptr,INT8U Path)
    113          {
   \                     Write_pPCA9555_8Addr_16Data:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4688             MOV      R8,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x4699             MOV      R9,R3
   \   0000000A   0x9C08             LDR      R4,[SP, #+32]
    114          	INT8U cnt = pPCAWrTry;
   \   0000000C   0x2503             MOVS     R5,#+3
   \   0000000E   0x0A37             LSRS     R7,R6,#+8
   \   00000010   0xF000 0x0AFE      AND      R10,R0,#0xFE
   \                     ??Write_pPCA9555_8Addr_16Data_0:
   \   00000014   0x1E6D             SUBS     R5,R5,#+1
    115          	// Start Condition
    116          	// Write Protection Disable, Allows normal write operation
    117          	// 
    118          	// output 1(SDATA)
    119          	// START Conditon making
    120          
    121          	while(cnt--)
    122          	{
    123          
    124          //////////Start
    125          		StartpPCA9555(ptr,Path);
   \   00000016   0x4621             MOV      R1,R4
   \   00000018   0x4648             MOV      R0,R9
   \   0000001A   0x.... 0x....      BL       StartpPCA9555
    126          		
    127          		WritepPCA9555Data(DevAddr & (~0x01),ptr,Path);
   \   0000001E   0x4622             MOV      R2,R4
   \   00000020   0x4649             MOV      R1,R9
   \   00000022   0x4650             MOV      R0,R10
   \   00000024   0x.... 0x....      BL       WritepPCA9555Data
    128          		#ifndef pPCA9555_debug
    129          			if(ACKpPCA9555(ptr,Path)) continue;
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4648             MOV      R0,R9
   \   0000002C   0x.... 0x....      BL       ACKpPCA9555
   \   00000030   0xB9E8             CBNZ.N   R0,??Write_pPCA9555_8Addr_16Data_1
    130          		#else
    131          		{
    132          			INT8U _Ack = ACKpPCA9555(ptr);
    133          			SerPtr->printf("ACK: %d \n", _Ack);
    134          		}
    135          		#endif
    136          		WritepPCA9555Data((INT8U)(Command     ),ptr,Path);
   \   00000032   0x4622             MOV      R2,R4
   \   00000034   0x4649             MOV      R1,R9
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       WritepPCA9555Data
    137          		#ifndef pPCA9555_debug
    138          			if(ACKpPCA9555(ptr,Path)) continue;
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x4648             MOV      R0,R9
   \   00000040   0x.... 0x....      BL       ACKpPCA9555
   \   00000044   0xB998             CBNZ.N   R0,??Write_pPCA9555_8Addr_16Data_1
    139          		#else
    140          		{
    141          			INT8U _Ack = ACKpPCA9555(ptr);
    142          			SerPtr->printf("ACK: %d \n", _Ack);
    143          		}
    144          		#endif
    145          		WritepPCA9555Data((INT8U)(Data >> 8),ptr,Path);
   \   00000046   0x4622             MOV      R2,R4
   \   00000048   0x4649             MOV      R1,R9
   \   0000004A   0x4638             MOV      R0,R7
   \   0000004C   0x.... 0x....      BL       WritepPCA9555Data
    146          		#ifndef pPCA9555_debug
    147          			if(ACKpPCA9555(ptr,Path)) continue;
   \   00000050   0x4621             MOV      R1,R4
   \   00000052   0x4648             MOV      R0,R9
   \   00000054   0x.... 0x....      BL       ACKpPCA9555
   \   00000058   0xB948             CBNZ.N   R0,??Write_pPCA9555_8Addr_16Data_1
    148          		#else
    149          		{
    150          			INT8U _Ack = ACKpPCA9555(ptr);
    151          			SerPtr->printf("ACK: %d \n", _Ack);
    152          		}
    153          		#endif
    154          
    155          		WritepPCA9555Data((INT8U)(Data >> 0),ptr,Path);
   \   0000005A   0x4622             MOV      R2,R4
   \   0000005C   0x4649             MOV      R1,R9
   \   0000005E   0xB2F0             UXTB     R0,R6
   \   00000060   0x.... 0x....      BL       WritepPCA9555Data
    156          		#ifndef pPCA9555_debug
    157          			if(ACKpPCA9555(ptr,Path)) continue;
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0x4648             MOV      R0,R9
   \   00000068   0x.... 0x....      BL       ACKpPCA9555
   \   0000006C   0xB128             CBZ.N    R0,??Write_pPCA9555_8Addr_16Data_2
   \                     ??Write_pPCA9555_8Addr_16Data_1:
   \   0000006E   0xB2ED             UXTB     R5,R5
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD1CF             BNE.N    ??Write_pPCA9555_8Addr_16Data_0
    158          		#else
    159          		{
    160          			INT8U _Ack = ACKpPCA9555(ptr);
    161          			SerPtr->printf("ACK: %d \n", _Ack);
    162          		}
    163          		#endif
    164          
    165          		//////////Stop
    166          
    167          		StoppPCA9555(ptr,Path);
    168          //		SerPtr->printf("1: Write_pPCA9555_8Addr_16Data \n");
    169          
    170          		return TRUE;
    171          	}
    172          	return FALSE;
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??Write_pPCA9555_8Addr_16Data_3:
   \   00000076   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??Write_pPCA9555_8Addr_16Data_2:
   \   0000007A   0x4621             MOV      R1,R4
   \   0000007C   0x4648             MOV      R0,R9
   \   0000007E   0x.... 0x....      BL       StoppPCA9555
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xE7F7             B.N      ??Write_pPCA9555_8Addr_16Data_3
    173          }
    174          
    175          

   \                                 In section .text, align 2, keep-with-next
    176          INT16U Read_pPCA9555_8Addr_16Data(INT8U DevAddr, INT16U Command, _pPCA9555Str ptr,INT8U Path)
    177          {
   \                     Read_pPCA9555_8Addr_16Data:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    178          	INT16U rVal = 0;
    179          	
    180          	// Device Address Writing
    181          	StartpPCA9555(ptr,Path);
   \   0000000A   0x4639             MOV      R1,R7
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x.... 0x....      BL       StartpPCA9555
    182          	WritepPCA9555Data(DevAddr & (~0x01),ptr,Path);
   \   00000012   0x463A             MOV      R2,R7
   \   00000014   0x4631             MOV      R1,R6
   \   00000016   0xF004 0x00FE      AND      R0,R4,#0xFE
   \   0000001A   0x.... 0x....      BL       WritepPCA9555Data
    183          	#ifndef pPCA9555_debug
    184          		ACKpPCA9555(ptr,Path);
   \   0000001E   0x4639             MOV      R1,R7
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       ACKpPCA9555
    185          	#else
    186          	{
    187          		INT8U _Ack = ACKpPCA9555(ptr);
    188          		SerPtr->printf("ACK: %d \n", _Ack);
    189          	}
    190          	#endif
    191          
    192          	WritepPCA9555Data((INT8U)(Command),ptr,Path);
   \   00000026   0x463A             MOV      R2,R7
   \   00000028   0x4631             MOV      R1,R6
   \   0000002A   0xB2E8             UXTB     R0,R5
   \   0000002C   0x.... 0x....      BL       WritepPCA9555Data
    193          	#ifndef pPCA9555_debug
    194          		ACKpPCA9555(ptr,Path);
   \   00000030   0x4639             MOV      R1,R7
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       ACKpPCA9555
    195          	#else
    196          	{
    197          		INT8U _Ack = ACKpPCA9555(ptr);
    198          		SerPtr->printf("ACK: %d \n", _Ack);
    199          	}
    200          	#endif
    201          	
    202          	StartpPCA9555(ptr,Path);
   \   00000038   0x4639             MOV      R1,R7
   \   0000003A   0x4630             MOV      R0,R6
   \   0000003C   0x.... 0x....      BL       StartpPCA9555
    203          	WritepPCA9555Data(DevAddr | 0x01,ptr,Path);
   \   00000040   0x463A             MOV      R2,R7
   \   00000042   0x4631             MOV      R1,R6
   \   00000044   0xF044 0x0001      ORR      R0,R4,#0x1
   \   00000048   0x.... 0x....      BL       WritepPCA9555Data
    204          	#ifndef pPCA9555_debug
    205          		ACKpPCA9555(ptr,Path);
   \   0000004C   0x4639             MOV      R1,R7
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       ACKpPCA9555
    206          	#else
    207          	{
    208          		INT8U _Ack = ACKpPCA9555(ptr);
    209          		SerPtr->printf("ACK: %d \n", _Ack);
    210          	}
    211          	#endif	
    212          	rVal = (rVal << 8) | ReadpPCA9555Data(ptr,Path);
   \   00000054   0x4639             MOV      R1,R7
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       ReadpPCA9555Data
   \   0000005C   0x4604             MOV      R4,R0
    213          	rVal = (rVal << 8) | ReadpPCA9555Data(ptr,Path);
   \   0000005E   0x4639             MOV      R1,R7
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0x.... 0x....      BL       ReadpPCA9555Data
   \   00000066   0x4605             MOV      R5,R0
    214          
    215          	#ifndef pPCA9555_debug
    216          		ACKpPCA9555(ptr,Path);
   \   00000068   0x4639             MOV      R1,R7
   \   0000006A   0x4630             MOV      R0,R6
   \   0000006C   0x.... 0x....      BL       ACKpPCA9555
    217          	#else
    218          	{
    219          		INT8U _Ack = ACKpPCA9555(ptr);
    220          		SerPtr->printf("ACK: %d \n", _Ack);
    221          	}
    222          	#endif	
    223          
    224          	NACKpPCA9555(ptr,Path);
   \   00000070   0x4639             MOV      R1,R7
   \   00000072   0x4630             MOV      R0,R6
   \   00000074   0x.... 0x....      BL       NACKpPCA9555
    225           	StoppPCA9555(ptr,Path);
   \   00000078   0x4639             MOV      R1,R7
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       StoppPCA9555
    226          
    227          	return rVal;
   \   00000080   0xEA45 0x2004      ORR      R0,R5,R4, LSL #+8
   \   00000084   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    228          }
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void WritepPCA9555Data(INT8U Data, _pPCA9555Str ptr,INT8U Path)
    231          {
   \                     WritepPCA9555Data:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4610             MOV      R0,R2
    232          	INT8U i = 0;
    233          
    234           	SetpPCA9555SDAOutMode(Path);
   \   00000008   0x.... 0x....      BL       SetpPCA9555SDAOutMode
    235          	ForDelay(100L);			///20120407 Adder
   \   0000000C   0x2064             MOVS     R0,#+100
   \   0000000E   0x.... 0x....      BL       ForDelay
    236          
    237          	ptr->RstClk();
   \   00000012   0x68E8             LDR      R0,[R5, #+12]
   \   00000014   0x4780             BLX      R0
    238          	
    239          	for(i = 0; i < 8; i++)
   \   00000016   0x2608             MOVS     R6,#+8
    240          	{
    241          		if((Data & 0x80)) 	ptr->SetData();
   \                     ??WritepPCA9555Data_0:
   \   00000018   0x0620             LSLS     R0,R4,#+24
   \   0000001A   0xD502             BPL.N    ??WritepPCA9555Data_1
   \   0000001C   0x6928             LDR      R0,[R5, #+16]
   \   0000001E   0x4780             BLX      R0
   \   00000020   0xE001             B.N      ??WritepPCA9555Data_2
    242          		else				ptr->RstData();
   \                     ??WritepPCA9555Data_1:
   \   00000022   0x6968             LDR      R0,[R5, #+20]
   \   00000024   0x4780             BLX      R0
    243          
    244          		ptr->SetClk();
   \                     ??WritepPCA9555Data_2:
   \   00000026   0x68A8             LDR      R0,[R5, #+8]
   \   00000028   0x4780             BLX      R0
    245          		ptr->RstClk();
   \   0000002A   0x68E8             LDR      R0,[R5, #+12]
   \   0000002C   0x4780             BLX      R0
    246          		Data <<= 1;
   \   0000002E   0x0064             LSLS     R4,R4,#+1
    247          	}
   \   00000030   0x1E76             SUBS     R6,R6,#+1
   \   00000032   0xD1F1             BNE.N    ??WritepPCA9555Data_0
    248          }
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    249          

   \                                 In section .text, align 2, keep-with-next
    250          INT8U ReadpPCA9555Data(_pPCA9555Str ptr,INT8U Path)
    251          {
   \                     ReadpPCA9555Data:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    252          	INT8U Data = 0, i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    253          
    254          	SetpPCA9555SDAInMode(Path);
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       SetpPCA9555SDAInMode
    255          	ForDelay(100L);			///20120407 Adder
   \   0000000E   0x2064             MOVS     R0,#+100
   \   00000010   0x.... 0x....      BL       ForDelay
    256          
    257          	for(i = 0; i < 8; i++)
   \   00000014   0x2708             MOVS     R7,#+8
    258          	{
    259                  Data = (Data << 1);
   \                     ??ReadpPCA9555Data_0:
   \   00000016   0x0676             LSLS     R6,R6,#+25
   \   00000018   0x0E36             LSRS     R6,R6,#+24
    260          		ptr->SetClk();
   \   0000001A   0x68A0             LDR      R0,[R4, #+8]
   \   0000001C   0x4780             BLX      R0
    261          
    262                  if(ReadpPCA9555SDA(Path))	Data |= 0x01;
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       ReadpPCA9555SDA
   \   00000024   0xB108             CBZ.N    R0,??ReadpPCA9555Data_1
   \   00000026   0xF046 0x0601      ORR      R6,R6,#0x1
    263          
    264          		ptr->RstClk();
   \                     ??ReadpPCA9555Data_1:
   \   0000002A   0x68E0             LDR      R0,[R4, #+12]
   \   0000002C   0x4780             BLX      R0
    265          	}	
   \   0000002E   0x1E7F             SUBS     R7,R7,#+1
   \   00000030   0xD1F1             BNE.N    ??ReadpPCA9555Data_0
    266          	return Data;
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    267          }
    268          

   \                                 In section .text, align 2, keep-with-next
    269          void StartpPCA9555(_pPCA9555Str ptr,INT8U Path)
    270          {
   \                     StartpPCA9555:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    271          	// START Conditon making
    272           	SetpPCA9555SDAOutMode(Path);
   \   00000006   0x.... 0x....      BL       SetpPCA9555SDAOutMode
    273          
    274          	ptr->SetData();
   \   0000000A   0x6920             LDR      R0,[R4, #+16]
   \   0000000C   0x4780             BLX      R0
    275          	ptr->SetClk();
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x4780             BLX      R0
    276          	ptr->RstData();
   \   00000012   0x6960             LDR      R0,[R4, #+20]
   \   00000014   0x4780             BLX      R0
    277          	ptr->RstClk();
   \   00000016   0x....             B.N      ?Subroutine1
    278          
    279          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x68E0             LDR      R0,[R4, #+12]
   \   00000002   0xE8BD 0x4010      POP      {R4,LR}
   \   00000006   0x4700             BX       R0
    280          

   \                                 In section .text, align 2, keep-with-next
    281          void StoppPCA9555(_pPCA9555Str ptr,INT8U Path)
    282          {
   \                     StoppPCA9555:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    283          	// STOP
    284           	SetpPCA9555SDAOutMode(Path);
   \   00000006   0x.... 0x....      BL       SetpPCA9555SDAOutMode
    285          	
    286          	ptr->RstData();
   \   0000000A   0x6960             LDR      R0,[R4, #+20]
   \   0000000C   0x4780             BLX      R0
    287          	ptr->SetClk();
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x4780             BLX      R0
    288          	ptr->SetData();
   \   00000012   0x6920             LDR      R0,[R4, #+16]
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x4700             BX       R0
    289          }
    290          

   \                                 In section .text, align 2, keep-with-next
    291          INT8U ACKpPCA9555(_pPCA9555Str ptr,INT8U Path)
    292          {
   \                     ACKpPCA9555:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    293          	INT8U Data;
    294          
    295           	SetpPCA9555SDAInMode(Path);
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      BL       SetpPCA9555SDAInMode
    296          	// ACK Check
    297          	ptr->SetClk();
   \   0000000C   0x68A0             LDR      R0,[R4, #+8]
   \   0000000E   0x4780             BLX      R0
    298          	Data = ReadpPCA9555SDA(Path);
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       ReadpPCA9555SDA
   \   00000016   0x4605             MOV      R5,R0
    299          	ptr->RstClk();
   \   00000018   0x68E0             LDR      R0,[R4, #+12]
   \   0000001A   0x4780             BLX      R0
    300          	return Data;
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    301          }
    302          

   \                                 In section .text, align 2, keep-with-next
    303          void NACKpPCA9555(_pPCA9555Str ptr,INT8U Path)
    304          {
   \                     NACKpPCA9555:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    305          	// NACK
    306           	SetpPCA9555SDAOutMode(Path);
   \   00000006   0x.... 0x....      BL       SetpPCA9555SDAOutMode
    307          	
    308          	ptr->SetData();
   \   0000000A   0x6920             LDR      R0,[R4, #+16]
   \   0000000C   0x4780             BLX      R0
    309          	ptr->SetClk();
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x4780             BLX      R0
    310          	ptr->RstClk();	
   \   00000012                      REQUIRE ?Subroutine1
   \   00000012                      ;; // Fall through to label ?Subroutine1
    311          }
    312          
    313          ////////////////////////////////////////////////////////////////////////////////
    314          // Default Read/Write, Access F31xx Series
    315          //////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
    316          void SetpPCA9555SDAInMode(INT8U Path)
    317          {
    318          //	__PC9_IU_PD();
    319          //	__PC9_IN_PD();
    320          //	 SerPtr->printf("SetpPCA9555SDAInMode: %d \n", Path);
    321          
    322          	     if(Path == 0)	__PC9_IN_PU();
   \                     SetpPCA9555SDAInMode:
   \   00000000   0xB910             CBNZ.N   R0,??SetpPCA9555SDAInMode_0
   \   00000002   0x2309             MOVS     R3,#+9
   \   00000004   0x....             LDR.N    R2,??DataTable6_1  ;; 0x40020800
   \   00000006   0xE003             B.N      ??SetpPCA9555SDAInMode_1
    323          	else if(Path == 1)	__PG15_IN_PU();
   \                     ??SetpPCA9555SDAInMode_0:
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD105             BNE.N    ??SetpPCA9555SDAInMode_2
   \   0000000C   0x230F             MOVS     R3,#+15
   \   0000000E   0x....             LDR.N    R2,??DataTable6_2  ;; 0x40021800
   \                     ??SetpPCA9555SDAInMode_1:
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2040             MOVS     R0,#+64
   \   00000014   0x.... 0x....      B.W      GPIOPortInit
    324          
    325          #if 0
    326          	__PC9_IN_PU();
    327          #endif
    328          #if 1
    329          //	__PG15_IN_PU();
    330          #endif
    331          
    332          }
   \                     ??SetpPCA9555SDAInMode_2:
   \   00000018   0x4770             BX       LR               ;; return
    333          

   \                                 In section .text, align 2, keep-with-next
    334          void SetpPCA9555SDAOutMode(INT8U Path)
    335          {
    336          #if 0
    337          	__PC9_PP_PP();
    338          #endif
    339          #if 1
    340          //	__PG15_PP_PP();
    341          #endif
    342          //		 SerPtr->printf("SetpPCA9555SDAOutMode: %d \n", Path);
    343          
    344          		 if(Path == 0)	__PC9_PP_PP();
   \                     SetpPCA9555SDAOutMode:
   \   00000000   0xB910             CBNZ.N   R0,??SetpPCA9555SDAOutMode_0
   \   00000002   0x2309             MOVS     R3,#+9
   \   00000004   0x....             LDR.N    R2,??DataTable6_1  ;; 0x40020800
   \   00000006   0xE003             B.N      ??SetpPCA9555SDAOutMode_1
    345          	else if(Path == 1)	__PG15_PP_PP();
   \                     ??SetpPCA9555SDAOutMode_0:
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD105             BNE.N    ??SetpPCA9555SDAOutMode_2
   \   0000000C   0x230F             MOVS     R3,#+15
   \   0000000E   0x....             LDR.N    R2,??DataTable6_2  ;; 0x40021800
   \                     ??SetpPCA9555SDAOutMode_1:
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2021             MOVS     R0,#+33
   \   00000014   0x.... 0x....      B.W      GPIOPortInit
    346          }
   \                     ??SetpPCA9555SDAOutMode_2:
   \   00000018   0x4770             BX       LR               ;; return
    347          

   \                                 In section .text, align 2, keep-with-next
    348          void SetpPCA9555SDA(void)
    349          {
    350          	_PCA9555_DATA = 1;
   \                     SetpPCA9555SDA:
   \   00000000   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40021814
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000008   0x6001             STR      R1,[R0, #+0]
    351          	_I2C_DATA = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40020814
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF44F 0x7200      MOV      R2,#+512
   \   00000012   0x....             B.N      ?Subroutine2
    352          #if 0
    353          	GPIOC->__B.ODR.B9 = SET;
    354          #endif
    355          #if 0
    356          	GPIOG->__B.ODR.B15 = SET;
    357          #endif
    358          	CLKDELAY;
    359          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x4311             ORRS     R1,R2,R1
   \                     ??Subroutine2_0:
   \   00000002   0x6001             STR      R1,[R0, #+0]
   \   00000004   0x2005             MOVS     R0,#+5
   \   00000006   0x.... 0x....      B.W      ForDelay
    360          

   \                                 In section .text, align 2, keep-with-next
    361          void RstpPCA9555SDA(void)
    362          {
    363          	_PCA9555_DATA = 0;
   \                     RstpPCA9555SDA:
   \   00000000   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40021814
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF421 0x4100      BIC      R1,R1,#0x8000
   \   00000008   0x6001             STR      R1,[R0, #+0]
    364          	_I2C_DATA = 0;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40020814
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF421 0x7100      BIC      R1,R1,#0x200
   \   00000012   0x....             B.N      ??Subroutine2_0
    365          #if 0
    366          	GPIOC->__B.ODR.B9 = RESET;
    367          #endif
    368          #if 0
    369          	GPIOG->__B.ODR.B15 = RESET;
    370          #endif
    371          
    372          	CLKDELAY;
    373          }
    374          
    375          

   \                                 In section .text, align 2, keep-with-next
    376          void SetpPCA9555SCL(void)
    377          {
    378          	_PCA9555_CLK = 1;
   \                     SetpPCA9555SCL:
   \   00000000   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40021814
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF441 0x5180      ORR      R1,R1,#0x1000
   \   00000008   0x6001             STR      R1,[R0, #+0]
    379          	_I2C_CLK = 1;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40020014
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF44F 0x7280      MOV      R2,#+256
   \   00000012                      REQUIRE ?Subroutine2
   \   00000012                      ;; // Fall through to label ?Subroutine2
    380          #if 0
    381          	GPIOA->__B.ODR.B8 = SET;
    382          #endif
    383          #if 0
    384          	GPIOG->__B.ODR.B12 = SET;
    385          #endif
    386          
    387          
    388          	CLKDELAY;
    389          }
    390          

   \                                 In section .text, align 2, keep-with-next
    391          void RstpPCA9555SCL(void)
    392          {
    393          	_PCA9555_CLK = 0;
   \                     RstpPCA9555SCL:
   \   00000000   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40021814
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF421 0x5180      BIC      R1,R1,#0x1000
   \   00000008   0x6001             STR      R1,[R0, #+0]
    394          	_I2C_CLK = 0;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40020014
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0xF421 0x7180      BIC      R1,R1,#0x100
   \   00000012   0x....             B.N      ??Subroutine2_0
    395          #if 0 
    396          	GPIOA->__B.ODR.B8 = RESET;
    397          #endif
    398          #if 0
    399          		GPIOG->__B.ODR.B12 = RESET;
    400          #endif
    401          
    402          	CLKDELAY;
    403          }
    404          

   \                                 In section .text, align 2, keep-with-next
    405          INT8U ReadpPCA9555SDA(INT8U Path)
    406          {
   \                     ReadpPCA9555SDA:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    407          	INT8U	RetVal;
    408          
    409          	CLKDELAY;
   \   00000004   0x2005             MOVS     R0,#+5
   \   00000006   0x.... 0x....      BL       ForDelay
    410          #if 0	
    411          	RetVal = GPIOA->__B.IDR.B8;
    412          #endif
    413          #if 0
    414          	RetVal = GPIOG->__B.IDR.B15;
    415          #endif
    416          //	RetVal = _PCA9555_DATA_Read;
    417          		 if(Path == 0)	RetVal = _I2C_DATA_Read;
   \   0000000A   0xB91C             CBNZ.N   R4,??ReadpPCA9555SDA_0
   \   0000000C   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40020810
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0A40             LSRS     R0,R0,#+9
   \   00000012   0xE004             B.N      ??ReadpPCA9555SDA_1
    418          	else if(Path == 1)	RetVal = _PCA9555_DATA_Read;
   \                     ??ReadpPCA9555SDA_0:
   \   00000014   0x2C01             CMP      R4,#+1
   \   00000016   0xD104             BNE.N    ??ReadpPCA9555SDA_2
   \   00000018   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40021810
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x0BC0             LSRS     R0,R0,#+15
   \                     ??ReadpPCA9555SDA_1:
   \   0000001E   0xF000 0x0501      AND      R5,R0,#0x1
    419          	return	RetVal;
   \                     ??ReadpPCA9555SDA_2:
   \   00000022   0xB2E8             UXTB     R0,R5
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    420          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40021800         DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40021814         DC32     0x40021814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40020814         DC32     0x40020814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40020014         DC32     0x40020014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x40020810         DC32     0x40020810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40021810         DC32     0x40021810
    421          
    422          
    423          ////////////////////////////////////////////////////////////////////////////////
    424          // End of Source File
    425          /////////////////////
    426          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ACKpPCA9555
             16 -- Indirect call
             16 -> ReadpPCA9555SDA
             16 -> SetpPCA9555SDAInMode
        8  NACKpPCA9555
              0 -- Indirect call
              8 -- Indirect call
              8 -> SetpPCA9555SDAOutMode
       24  PCA9555_Init
             24 -> GPIOPortInit
              0 -> RstpPCA9555SCL
       24  Read_pPCA9555_8Addr_16Data
             24 -> ACKpPCA9555
             24 -> NACKpPCA9555
             24 -> ReadpPCA9555Data
             24 -> StartpPCA9555
             24 -> StoppPCA9555
             24 -> WritepPCA9555Data
       24  ReadpPCA9555Data
             24 -- Indirect call
             24 -> ForDelay
             24 -> ReadpPCA9555SDA
             24 -> SetpPCA9555SDAInMode
       16  ReadpPCA9555SDA
             16 -> ForDelay
        0  RstpPCA9555SCL
              0 -> ForDelay
        0  RstpPCA9555SDA
              0 -> ForDelay
        0  SetpPCA9555SCL
              0 -> ForDelay
        0  SetpPCA9555SDA
              0 -> ForDelay
        0  SetpPCA9555SDAInMode
              0 -> GPIOPortInit
        0  SetpPCA9555SDAOutMode
              0 -> GPIOPortInit
        8  StartpPCA9555
              0 -- Indirect call
              8 -- Indirect call
              8 -> SetpPCA9555SDAOutMode
        8  StoppPCA9555
              0 -- Indirect call
              8 -- Indirect call
              8 -> SetpPCA9555SDAOutMode
       32  Write_pPCA9555_8Addr_16Data
             32 -> ACKpPCA9555
             32 -> StartpPCA9555
             32 -> StoppPCA9555
             32 -> WritepPCA9555Data
       16  WritepPCA9555Data
             16 -- Indirect call
             16 -> ForDelay
             16 -> SetpPCA9555SDAOutMode
        0  _pPCA9555BitSet
             24 -> Write_pPCA9555_8Addr_16Data
       16  pPCA9555BitRead
             16 -> Read_pPCA9555_8Addr_16Data
       24  pPCA9555BitRst
             24 -> Write_pPCA9555_8Addr_16Data
       24  pPCA9555BitSet
             24 -> Write_pPCA9555_8Addr_16Data
       16  pPCA9555ReadData
             16 -> Read_pPCA9555_8Addr_16Data
       16  pPCA9555SetData
             16 -> Write_pPCA9555_8Addr_16Data
        0  pPCAReadPortData
              0 -> Read_pPCA9555_8Addr_16Data
       16  pPCASetConfiguration
             16 -> Write_pPCA9555_8Addr_16Data
        8  pPCASetPortData
              8 -> Write_pPCA9555_8Addr_16Data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      26  ??Subroutine3_0
      16  ?Subroutine0
       8  ?Subroutine1
      10  ?Subroutine2
      32  ACKpPCA9555
      18  NACKpPCA9555
      58  PCA9555_Init
     134  Read_pPCA9555_8Addr_16Data
      54  ReadpPCA9555Data
      38  ReadpPCA9555SDA
      20  RstpPCA9555SCL
      20  RstpPCA9555SDA
      18  SetpPCA9555SCL
      20  SetpPCA9555SDA
      26  SetpPCA9555SDAInMode
      26  SetpPCA9555SDAOutMode
      24  StartpPCA9555
      26  StoppPCA9555
     134  Write_pPCA9555_8Addr_16Data
      54  WritepPCA9555Data
       2  _pPCA9555BitSet
       4  pAttnVal0
       4  pAttnVal0B
       4  pAttnVal1
       4  pAttnVal1B
       4  pAttnVal2
       4  pAttnVal2B
       4  pLEDCSVal0
       4  pLEDCSVal0B
       4  pLEDCSVal1
       4  pLEDCSVal1B
      42  pPCA9555BitRead
      20  pPCA9555BitRst
       4  pPCA9555BitSet
      30  pPCA9555ReadData
      30  pPCA9555SetData
       4  pPCA9555Str
      24  pPCA9555StrB
      16  pPCAReadPortData
      32  pPCASetConfiguration
      24  pPCASetPortData

 
  44 bytes in section .bss
  24 bytes in section .data
 994 bytes in section .text
 
 994 bytes of CODE memory
  68 bytes of DATA memory

Errors: none
Warnings: none

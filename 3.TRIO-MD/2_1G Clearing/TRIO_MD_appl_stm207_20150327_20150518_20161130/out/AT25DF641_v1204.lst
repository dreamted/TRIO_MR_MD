###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     19/May/2017  23:31:25 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    dev\SFlash\AT25DF641_v1204.c                             #
#    Command line =  "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    dev\SFlash\AT25DF641_v1204.c" -lC                        #
#                    "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\" -o "D:\Project\TRIO\3.TRIO-MD\2_1G                 #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\" --endian=little --cpu=Cortex-M3 -e --fpu=None      #
#                    --dlib_config "D:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "D:\Project\TRIO\3.TRIO-MD\2_1G                #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    include\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G             #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\" -I                    #
#                    "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\inc\" -I                #
#                    "D:\Project\TRIO\3.TRIO-MD\2_1G                          #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-CPU\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G              #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-LIB\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G              #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uCOS-II\Ports\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G       #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uCOS-II\Source\" -I "D:\Project\TRIO\3.TRIO-MD\2_1G      #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    uC-Probe\" -Oh --use_c++_inline                          #
#    List file    =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\AT25DF641_v1204.lst                                  #
#    Object file  =  D:\Project\TRIO\3.TRIO-MD\2_1G                           #
#                    Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\ #
#                    out\AT25DF641_v1204.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.TRIO-MD\2_1G Clearing\TRIO_MD_appl_stm207_20150327_20150518_20161130\dev\SFlash\AT25DF641_v1204.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : spi_flash.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : This file provides a set of functions needed to manage the
      7          *                      communication between SPI peripheral and SPI AT25DF641 FLASH.
      8          ********************************************************************************
      9          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     11          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     12          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     13          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     14          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *******************************************************************************/
     16          #ifndef _SPI_FLASH_C
     17          #define _SPI_FLASH_C
     18          
     19          #define AD25DF_C
     20          
     21          #include "../include/main.h"
     22          
     23          #define SPI_FLASH_PageSize    0x100
     24          
     25          ////////////////////////////////////////////////////////////////////////////////
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void sFLASH_Init(DevSPIxStr *Devptr)
     28          {
   \                     sFLASH_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     29          	iDev_SPIxInit(Devptr->SPIx);
   \   00000004   0x7860             LDRB     R0,[R4, #+1]
   \   00000006   0x.... 0x....      BL       iDev_SPIxInit
     30          	iDev_SPIx_CS_SET(Devptr->nDevNo);
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       iDev_SPIx_CS_SET
     31          
     32          	OSTimeDly(10);
   \   00000010   0x200A             MOVS     R0,#+10
   \   00000012   0x.... 0x....      BL       OSTimeDly
     33          
     34          	// s_Flash Unprotect
     35          	sFLASH_Unprotected(Devptr);
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x....             B.N      sFLASH_Unprotected
     36          }
     37          
     38          

   \                                 In section .text, align 2, keep-with-next
     39          INT32S sFLASH_BL4kCheckErase(DevSPIxStr *Devptr, INT32U ADDR, INT32U nlen)
     40          {
   \                     sFLASH_BL4kCheckErase:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     41              INT32S rval = TRUE;
   \   00000008   0x2001             MOVS     R0,#+1
     42          	INT32U i = 0;
     43          	INT32U tmpAddr = ADDR;
     44          
     45          #define BLSIZE	(4*(1024))
     46          
     47          //	Ser3Ptr->printf("ADDR = %04x, nlen = %d \n", ADDR, nlen);
     48          
     49          	for(i = 0; i < nlen; i++)
   \   0000000A   0xB146             CBZ.N    R6,??sFLASH_BL4kCheckErase_0
     50          	{
     51          		if(!(tmpAddr%BLSIZE)){
   \                     ??sFLASH_BL4kCheckErase_1:
   \   0000000C   0x0529             LSLS     R1,R5,#+20
   \   0000000E   0xD103             BNE.N    ??sFLASH_BL4kCheckErase_2
     52          			rval = sFLASH_4kErase(Devptr, tmpAddr);//4KB erase
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       sFLASH_4kErase
     53          //			Ser3Ptr->printf("ERASE SECTOR = %d, ADDR = %08x \n", tmpAddr/BLSIZE, tmpAddr);
     54          		}
     55          		tmpAddr++;
   \                     ??sFLASH_BL4kCheckErase_2:
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
     56          	}
   \   0000001A   0x1E76             SUBS     R6,R6,#+1
   \   0000001C   0xD1F6             BNE.N    ??sFLASH_BL4kCheckErase_1
     57             
     58              return rval; 
   \                     ??sFLASH_BL4kCheckErase_0:
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return
     59          }
     60          
     61          

   \                                 In section .text, align 2, keep-with-next
     62          INT32S sFLASH_ReadStsRegister(DevSPIxStr *Devptr, INT8U *DATA)
     63          {
   \                     sFLASH_ReadStsRegister:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     64          	INT8U err = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     65          	INT32S nlen;
     66          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000000E   0xAA01             ADD      R2,SP,#+4
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x.... 0x....      BL       OSSemPend
     67          
     68          	nlen = sFLASH_SetRegister(Devptr, RDSR, NULL, DATA, 2);
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x462B             MOV      R3,R5
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x2105             MOVS     R1,#+5
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       sFLASH_SetRegister
   \   00000028   0x4605             MOV      R5,R0
     69          
     70          	OSSemPost(Devptr->OSSem);
   \   0000002A   0x....             B.N      ?Subroutine0
     71          
     72          	return nlen;
     73          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x6860             LDR      R0,[R4, #+4]
   \   00000002   0x.... 0x....      BL       OSSemPost
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0xB003             ADD      SP,SP,#+12
   \   0000000A   0xBD30             POP      {R4,R5,PC}       ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          INT32S sFLASH_Unprotected(DevSPIxStr *Devptr)
     76          {
   \                     sFLASH_Unprotected:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
     77          	INT8U rval = TRUE;
   \   00000006   0x2501             MOVS     R5,#+1
     78          	INT8U err = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0006      STRB     R0,[SP, #+6]
     79          //	INT8U nlen = 0;
     80          	INT8U tmp[2];
     81          	RDSts1Reg tmpreg;
     82              
     83          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000000E   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x.... 0x....      BL       OSSemPend
     84          
     85          	sFLASH_SetRegister(Devptr, WREN, NULL, tmp, 0);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAB01             ADD      R3,SP,#+4
   \   00000020   0x4602             MOV      R2,R0
   \   00000022   0x2106             MOVS     R1,#+6
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       sFLASH_SetRegister
     86          
     87          	//nlen = sFLASH_SetRegister(&AT25DFSpi, RDSR, NULL, tmp, 2);
     88          //	Ser3Ptr->printf("2. RDSTATUS [0] = %02x, [1] = %02x len = %d\n", tmp[0], tmp[1], nlen);
     89          	//OSTimeDly(10);
     90          
     91          	tmp[0] = 0x00;	// unprotect!!
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF88D 0x0004      STRB     R0,[SP, #+4]
     92          	sFLASH_SetRegister(Devptr, WRSR1, NULL, tmp, 1);
   \   00000030   0x9500             STR      R5,[SP, #+0]
   \   00000032   0xAB01             ADD      R3,SP,#+4
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       sFLASH_SetRegister
     93          
     94          	sFLASH_SetRegister(Devptr, RDSR, NULL, tmp, 2);
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0xAB01             ADD      R3,SP,#+4
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2105             MOVS     R1,#+5
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       sFLASH_SetRegister
     95          	{
     96          		tmpreg.Data = tmp[0];
     97          
     98          		if(tmpreg.SWP != 0) rval = FALSE;
   \   0000004E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000052   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000056   0xB100             CBZ.N    R0,??sFLASH_Unprotected_0
   \   00000058   0x2500             MOVS     R5,#+0
     99          	}
    100          	//	nlen = sFLASH_SetRegister(&AT25DFSpi, RDSR, NULL, tmp, 2);
    101          	//	pUSART5.printf("1. RDSTATUS [0] = %02x, [1] = %02x len = %d\n", tmp[0], tmp[1], nlen);
    102          	//	OSTimeDly(10);
    103          	OSSemPost(Devptr->OSSem);
   \                     ??sFLASH_Unprotected_0:
   \   0000005A                      REQUIRE ?Subroutine0
   \   0000005A                      ;; // Fall through to label ?Subroutine0
    104          
    105          	return rval;
    106          }
    107          

   \                                 In section .text, align 2, keep-with-next
    108          INT8U sFLASH_DataRead(DevSPIxStr *Devptr, INT32U ADDR)
    109          {
   \                     sFLASH_DataRead:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    110          	INT8U err = 0;
   \   00000008   0x2000             MOVS     R0,#+0
    111          	INT8U tmp = 0;
   \   0000000A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    112              
    113          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000000E   0xF10D 0x0205      ADD      R2,SP,#+5
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x.... 0x....      BL       OSSemPend
    114          
    115          	sFLASH_SetRegister(Devptr, READ, ADDR, &tmp, 1);	/* Read Data */
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAB01             ADD      R3,SP,#+4
   \   00000020   0x462A             MOV      R2,R5
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       sFLASH_SetRegister
    116          	
    117          	OSSemPost(Devptr->OSSem);
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x.... 0x....      BL       OSSemPost
    118          
    119          	return tmp;
   \   00000030   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000034   0xB003             ADD      SP,SP,#+12
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    120          }
    121          
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void sFLASH_BufferRead(DevSPIxStr *Devptr, INT32U ADDR, INT8U *DATA, INT32U nlen)
    124          {
   \                     sFLASH_BufferRead:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    125          	INT8U err = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    126          
    127          	OSSemPend(Devptr->OSSem, 0, &err);
   \   00000012   0xAA01             ADD      R2,SP,#+4
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x.... 0x....      BL       OSSemPend
    128          
    129          	sFLASH_SetRegister(Devptr, READ, ADDR, DATA, nlen);	/* Read Data */
   \   0000001C   0x9700             STR      R7,[SP, #+0]
   \   0000001E   0x4633             MOV      R3,R6
   \   00000020   0x462A             MOV      R2,R5
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       sFLASH_SetRegister
    130          	
    131          	OSSemPost(Devptr->OSSem);
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x.... 0x....      BL       OSSemPost
    132          
    133          }
   \   00000030   0xB003             ADD      SP,SP,#+12
   \   00000032   0xBDF0             POP      {R4-R7,PC}       ;; return
    134          
    135          

   \                                 In section .text, align 2, keep-with-next
    136          INT32S sFLASH_DataWrite(DevSPIxStr *Devptr, INT32U ADDR, INT8U *DATA, INT32U nlen)
    137          {
   \                     sFLASH_DataWrite:
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4698             MOV      R8,R3
    138          	INT8U rval = TRUE;
   \   0000000A   0x2501             MOVS     R5,#+1
    139          	INT8U err = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    140          	INT8U tmp[2];
    141          	
    142          	INT32U i = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    143          	INT32U tmpAddr = ADDR;
    144          	INT32U tmplen = nlen;
    145          	INT32U clen = 0;
    146          	INT32U tmpCnt = (tmpAddr % 256 + tmplen)/256;		// NO of Page for writing!!
   \   00000014   0xB2F0             UXTB     R0,R6
   \   00000016   0x4440             ADD      R0,R8,R0
   \   00000018   0xEA4F 0x2910      LSR      R9,R0,#+8
    147          	INT32U tmpptr = 0;
   \   0000001C   0x46BA             MOV      R10,R7
    148          	RDSts1Reg tmpReg;
    149          
    150          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000001E   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x.... 0x....      BL       OSSemPend
    151          
    152          	for(i = 0; i <= tmpCnt; i++)
    153          	{
    154          		sFLASH_SetRegister(Devptr, WREN, NULL, tmp, 0);			/* Enable the write access to the FLASH */
   \                     ??sFLASH_DataWrite_0:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2106             MOVS     R1,#+6
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       sFLASH_SetRegister
    155          		sFLASH_SetRegister(Devptr, RDSR, NULL, tmp, 2);			/* Read check WEL, SWP */
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x9000             STR      R0,[SP, #+0]
   \   0000003E   0xAB01             ADD      R3,SP,#+4
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x2105             MOVS     R1,#+5
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       sFLASH_SetRegister
    156          		tmpReg.Data = tmp[0];
   \   0000004A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    157          //		pUSART3.printf("tmpReg.Data	= %04x \n", tmpReg.Data);
    158          		
    159          		if(tmpReg.WEL != 1) rval = FALSE;
   \   00000052   0x0780             LSLS     R0,R0,#+30
   \   00000054   0xBF58             IT       PL 
   \   00000056   0x2500             MOVPL    R5,#+0
    160          		if(tmpReg.SWP != 0) rval = FALSE;
   \   00000058   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000060   0xB108             CBZ.N    R0,??sFLASH_DataWrite_1
   \   00000062   0x2500             MOVS     R5,#+0
   \   00000064   0xE01E             B.N      ??sFLASH_DataWrite_2
    161          
    162          		if(rval)
   \                     ??sFLASH_DataWrite_1:
   \   00000066   0xB2ED             UXTB     R5,R5
   \   00000068   0xB1E5             CBZ.N    R5,??sFLASH_DataWrite_2
    163          		{
    164          			clen = (256 - (tmpAddr % 256));
   \   0000006A   0xF44F 0x7080      MOV      R0,#+256
   \   0000006E   0xB2F1             UXTB     R1,R6
   \   00000070   0x1A40             SUBS     R0,R0,R1
    165          			if(clen > tmplen) clen = tmplen;
   \   00000072   0x46C3             MOV      R11,R8
   \   00000074   0x4580             CMP      R8,R0
   \   00000076   0xBF88             IT       HI 
   \   00000078   0x4683             MOVHI    R11,R0
    166          
    167          //			pUSART3.printf("START ADDR	= %04x, len = %d \n", ADDR, clen);
    168          
    169          			sFLASH_SetRegister(Devptr, WRITE, tmpAddr, &DATA[tmpptr], clen);		/* Wait the end of Flash writing */
   \   0000007A   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \   0000007E   0x9802             LDR      R0,[SP, #+8]
   \   00000080   0xEB0A 0x0300      ADD      R3,R10,R0
   \   00000084   0x4632             MOV      R2,R6
   \   00000086   0x2102             MOVS     R1,#+2
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       sFLASH_SetRegister
    170          			rval = sFLASH_WaitWriteEnd(Devptr);									/* Wait the end of Flash writing */
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       sFLASH_WaitWriteEnd
   \   00000094   0x4605             MOV      R5,R0
    171          
    172          //			pUSART3.printf("INCRE ADDR	= %04x, remain len = %d \n", tmpAddr, tmplen);
    173          			//OSTimeDly(10);
    174          
    175          			tmplen  -= clen;
   \   00000096   0xEBA8 0x080B      SUB      R8,R8,R11
    176          			tmpAddr += clen;
   \   0000009A   0x445E             ADD      R6,R11,R6
    177          			tmpptr  += clen;
   \   0000009C   0x44DA             ADD      R10,R11,R10
    178          		}
    179          		else break;
    180          	}
   \   0000009E   0x1C7F             ADDS     R7,R7,#+1
   \   000000A0   0x45B9             CMP      R9,R7
   \   000000A2   0xD2C2             BCS.N    ??sFLASH_DataWrite_0
    181          
    182          	OSSemPost(Devptr->OSSem);
   \                     ??sFLASH_DataWrite_2:
   \   000000A4   0x6860             LDR      R0,[R4, #+4]
   \   000000A6   0x.... 0x....      BL       OSSemPost
    183              
    184              return rval;
   \   000000AA   0xB2E8             UXTB     R0,R5
   \   000000AC   0xB003             ADD      SP,SP,#+12
   \   000000AE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    185          }
    186          
    187          

   \                                 In section .text, align 2, keep-with-next
    188          INT32S sFLASH_AllErase(DevSPIxStr *Devptr)
    189          {
   \                     sFLASH_AllErase:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    190          	INT8U rval = TRUE;
   \   00000006   0x2501             MOVS     R5,#+1
    191          	INT8U err = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    192          	INT8U tmp[2];
    193          	RDSts1Reg tmpReg;
    194          	
    195          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000000E   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x.... 0x....      BL       OSSemPend
    196          
    197          	sFLASH_SetRegister(Devptr, WREN, NULL, tmp, 0);			/* Send write enable instruction */
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAB01             ADD      R3,SP,#+4
   \   00000020   0x4602             MOV      R2,R0
   \   00000022   0x2106             MOVS     R1,#+6
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       sFLASH_SetRegister
    198          
    199          	sFLASH_SetRegister(Devptr, RDSR, NULL, tmp, 2);			/* Reah check WEL, SWP */
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2105             MOVS     R1,#+5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       sFLASH_SetRegister
    200              tmpReg.Data = tmp[0];
   \   0000003A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    201          	if(tmpReg.WEL != 1) rval = FALSE;
   \   00000042   0x0780             LSLS     R0,R0,#+30
   \   00000044   0xBF58             IT       PL 
   \   00000046   0x2500             MOVPL    R5,#+0
    202          	if(tmpReg.SWP != 0) rval = FALSE;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000050   0xB108             CBZ.N    R0,??sFLASH_AllErase_0
   \   00000052   0x2500             MOVS     R5,#+0
   \   00000054   0xE00D             B.N      ??sFLASH_AllErase_1
    203          
    204          	if(rval)
   \                     ??sFLASH_AllErase_0:
   \   00000056   0x07E8             LSLS     R0,R5,#+31
   \   00000058   0xD50B             BPL.N    ??sFLASH_AllErase_1
    205          	{
    206          		sFLASH_SetRegister(Devptr, AllErase, NULL, tmp, 0);	/* Bulk Erase */
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0xAB01             ADD      R3,SP,#+4
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0x21C7             MOVS     R1,#+199
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       sFLASH_SetRegister
    207          		rval = sFLASH_WaitWriteEnd(Devptr);					/* Wait the end of Flash writing */
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       sFLASH_WaitWriteEnd
   \   00000070   0x4605             MOV      R5,R0
    208          	}
    209          	OSSemPost(Devptr->OSSem);
   \                     ??sFLASH_AllErase_1:
   \   00000072   0x6860             LDR      R0,[R4, #+4]
   \   00000074   0x.... 0x....      BL       OSSemPost
    210          
    211          	return rval;
   \   00000078   0xB2E8             UXTB     R0,R5
   \   0000007A   0xB003             ADD      SP,SP,#+12
   \   0000007C   0xBD30             POP      {R4,R5,PC}       ;; return
    212          }
    213          

   \                                 In section .text, align 2, keep-with-next
    214          INT32S sFLASH_4kErase(DevSPIxStr *Devptr, INT32U ADDR)//4KB erase
    215          {
   \                     sFLASH_4kErase:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    216          	INT8U rval = TRUE;
   \   00000006   0x2601             MOVS     R6,#+1
    217          	INT8U err = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    218          	INT8U tmp[2];
    219          	RDSts1Reg tmpReg;
    220          	
    221          	OSSemPend(Devptr->OSSem, 0, &err);
   \   0000000E   0xF10D 0x0206      ADD      R2,SP,#+6
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x.... 0x....      BL       OSSemPend
    222          
    223          	sFLASH_SetRegister(Devptr, WREN, NULL, tmp, 0); 		/* Send write enable instruction */
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0xAB01             ADD      R3,SP,#+4
   \   00000020   0x4602             MOV      R2,R0
   \   00000022   0x2106             MOVS     R1,#+6
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       sFLASH_SetRegister
    224          
    225          	sFLASH_SetRegister(Devptr, RDSR, NULL, tmp, 2); 		/* Reah check WEL, SWP */
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2105             MOVS     R1,#+5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       sFLASH_SetRegister
    226          	tmpReg.Data = tmp[0];
   \   0000003A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    227          	if(tmpReg.WEL != 1) rval = FALSE;
   \   00000042   0x0780             LSLS     R0,R0,#+30
   \   00000044   0xBF58             IT       PL 
   \   00000046   0x2600             MOVPL    R6,#+0
    228          	if(tmpReg.SWP != 0) rval = FALSE;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000050   0xB108             CBZ.N    R0,??sFLASH_4kErase_0
   \   00000052   0x2600             MOVS     R6,#+0
   \   00000054   0xE00D             B.N      ??sFLASH_4kErase_1
    229          
    230          	if(rval)
   \                     ??sFLASH_4kErase_0:
   \   00000056   0x07F0             LSLS     R0,R6,#+31
   \   00000058   0xD50B             BPL.N    ??sFLASH_4kErase_1
    231          	{
    232          		sFLASH_SetRegister(Devptr, BlockE4K, ADDR, tmp, 0); /* Bulk Erase */
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0xAB01             ADD      R3,SP,#+4
   \   00000060   0x462A             MOV      R2,R5
   \   00000062   0x2120             MOVS     R1,#+32
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       sFLASH_SetRegister
    233          		rval = sFLASH_WaitWriteEnd(Devptr); 				/* Wait the end of Flash writing */
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       sFLASH_WaitWriteEnd
   \   00000070   0x4606             MOV      R6,R0
    234          	}
    235          	OSSemPost(Devptr->OSSem);
   \                     ??sFLASH_4kErase_1:
   \   00000072   0x6860             LDR      R0,[R4, #+4]
   \   00000074   0x.... 0x....      BL       OSSemPost
    236          
    237          	return rval;
   \   00000078   0xB2F0             UXTB     R0,R6
   \   0000007A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    238          }
    239          
    240          

   \                                 In section .text, align 2, keep-with-next
    241          INT32S sFLASH_WaitWriteEnd(DevSPIxStr *Devptr)
    242          {
   \                     sFLASH_WaitWriteEnd:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
    243          	INT8U rval = TRUE;
   \   00000004   0x2401             MOVS     R4,#+1
    244          	INT8U tmp[2];
    245          	INT32U tmpWait = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    246          	RDSts1Reg tmpReg;
    247          	
    248          	do
    249          	{
    250          		sFLASH_SetRegister(Devptr, RDSR, NULL, tmp, 2);
   \                     ??sFLASH_WaitWriteEnd_0:
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0xAB01             ADD      R3,SP,#+4
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2105             MOVS     R1,#+5
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       sFLASH_SetRegister
    251          		tmpReg.Data = tmp[0];
   \   00000018   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    252          		if(++tmpWait == 0)
   \   00000020   0x1C76             ADDS     R6,R6,#+1
   \   00000022   0xD101             BNE.N    ??sFLASH_WaitWriteEnd_1
    253          		{
    254          			return FALSE;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD76             POP      {R1,R2,R4-R6,PC}
    255          		}
    256          		WatchdogClear();
   \                     ??sFLASH_WaitWriteEnd_1:
   \   00000028   0x.... 0x....      BL       WatchdogClear
    257          			
    258          	}
    259          	while ((tmpReg.BUSY) == SET); 	/* Write in progress */
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0x07C0             LSLS     R0,R0,#+31
   \   00000032   0xD4E9             BMI.N    ??sFLASH_WaitWriteEnd_0
    260          
    261          	if(tmpReg.EPE) rval = FALSE;	/* Check Flash Error */
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0x0680             LSLS     R0,R0,#+26
   \   0000003A   0xBF48             IT       MI 
   \   0000003C   0x2400             MOVMI    R4,#+0
    262          
    263          
    264          	return rval;
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    265          }
    266          
    267          

   \                                 In section .text, align 2, keep-with-next
    268          INT32S sFLASH_SetRegister(DevSPIxStr *Devptr, INT8U OPCODE, INT32U ADDR, INT8U *DATA, INT32U nlen)
    269          {
   \                     sFLASH_SetRegister:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4699             MOV      R9,R3
   \   0000000C   0x9D08             LDR      R5,[SP, #+32]
    270          	INT32U i = 0;
   \   0000000E   0xF04F 0x0A00      MOV      R10,#+0
    271          	INT8U NeedAddr = FALSE;
   \   00000012   0x2700             MOVS     R7,#+0
    272          
    273          	
    274          		 if(OPCODE == READ)			{NeedAddr = TRUE;}
   \   00000014   0x2E03             CMP      R6,#+3
   \   00000016   0xBF14             ITE      NE 
   \   00000018   0x2E02             CMPNE    R6,#+2
    275          	else if(OPCODE == WRITE)		{NeedAddr = TRUE;}
   \   0000001A   0x2701             MOVEQ    R7,#+1
   \   0000001C   0xD016             BEQ.N    ??sFLASH_SetRegister_0
    276          	else {
    277          			 if(OPCODE == BlockE4K) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   0000001E   0x2E20             CMP      R6,#+32
   \   00000020   0xBF18             IT       NE 
   \   00000022   0x2E52             CMPNE    R6,#+82
    278          		else if(OPCODE == BlockE32K) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   00000024   0xD007             BEQ.N    ??sFLASH_SetRegister_1
    279          		else if(OPCODE == BlockE64K) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   00000026   0x2ED8             CMP      R6,#+216
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0x2E36             CMPNE    R6,#+54
    280          		
    281          		else if(OPCODE == ProtectSE) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   0000002C   0xD003             BEQ.N    ??sFLASH_SetRegister_1
    282          		else if(OPCODE == uProtectSE) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   0000002E   0x2E39             CMP      R6,#+57
   \   00000030   0xBF18             IT       NE 
   \   00000032   0x2E3C             CMPNE    R6,#+60
    283          		else if(OPCODE == RDProtectS) 	{NeedAddr = TRUE;	nlen = 0;	}
   \   00000034   0xD102             BNE.N    ??sFLASH_SetRegister_2
   \                     ??sFLASH_SetRegister_1:
   \   00000036   0x2701             MOVS     R7,#+1
   \   00000038   0x2500             MOVS     R5,#+0
   \   0000003A   0xE007             B.N      ??sFLASH_SetRegister_0
    284          
    285          		else if(OPCODE == RDSR)			{					nlen = 2;	}
   \                     ??sFLASH_SetRegister_2:
   \   0000003C   0x2E05             CMP      R6,#+5
   \   0000003E   0xBF08             IT       EQ 
   \   00000040   0x2502             MOVEQ    R5,#+2
   \   00000042   0xD003             BEQ.N    ??sFLASH_SetRegister_0
    286          		else if(OPCODE == WRSR1)		{					nlen = 1;	}
   \   00000044   0x2E01             CMP      R6,#+1
   \   00000046   0xBF14             ITE      NE 
   \   00000048   0x2E31             CMPNE    R6,#+49
    287          		else if(OPCODE == WRSR2)		{					nlen = 1;	}
   \   0000004A   0x2501             MOVEQ    R5,#+1
    288          	}
    289          
    290          //	pUSART3.printf("ADDR = %x \n", ADDR);
    291          	iDev_SPIx_CS_RST(Devptr->nDevNo);
   \                     ??sFLASH_SetRegister_0:
   \   0000004C   0x7820             LDRB     R0,[R4, #+0]
   \   0000004E   0x.... 0x....      BL       iDev_SPIx_CS_RST
    292          
    293          	SetSPIxCommand(Devptr->SPIx, OPCODE);
   \   00000052   0x4631             MOV      R1,R6
   \   00000054   0x7860             LDRB     R0,[R4, #+1]
   \   00000056   0x.... 0x....      BL       SetSPIxCommand
    294          
    295          	if(NeedAddr){
   \   0000005A   0xB1DF             CBZ.N    R7,??sFLASH_SetRegister_3
    296          
    297          		if((ADDR < SPI_FLASH_16MB_BOUN))
   \   0000005C   0xEA4F 0x4018      LSR      R0,R8,#+16
   \   00000060   0xB2C6             UXTB     R6,R0
   \   00000062   0xF008 0x07FF      AND      R7,R8,#0xFF
   \   00000066   0x7860             LDRB     R0,[R4, #+1]
   \   00000068   0xF1B8 0x7F80      CMP      R8,#+16777216
   \   0000006C   0xBF38             IT       CC 
   \   0000006E   0x4631             MOVCC    R1,R6
    298          		{
    299          			SetSPIxCommand(Devptr->SPIx, (ADDR >> 16) & 0xFF);
   \   00000070   0xD305             BCC.N    ??sFLASH_SetRegister_4
    300          			SetSPIxCommand(Devptr->SPIx, (ADDR >>  8) & 0xFF);
    301          			SetSPIxCommand(Devptr->SPIx, (ADDR >>  0) & 0xFF);
    302          
    303          		}
    304          		else
    305          		{
    306          			SetSPIxCommand(Devptr->SPIx, (ADDR >> 24) & 0xFF);
   \   00000072   0xEA4F 0x6118      LSR      R1,R8,#+24
   \   00000076   0x.... 0x....      BL       SetSPIxCommand
    307          			SetSPIxCommand(Devptr->SPIx, (ADDR >> 16) & 0xFF);
   \   0000007A   0x4631             MOV      R1,R6
   \   0000007C   0x7860             LDRB     R0,[R4, #+1]
   \                     ??sFLASH_SetRegister_4:
   \   0000007E   0x.... 0x....      BL       SetSPIxCommand
    308          			SetSPIxCommand(Devptr->SPIx, (ADDR >>  8) & 0xFF);
   \   00000082   0xF3C8 0x2107      UBFX     R1,R8,#+8,#+8
   \   00000086   0x7860             LDRB     R0,[R4, #+1]
   \   00000088   0x.... 0x....      BL       SetSPIxCommand
    309          			SetSPIxCommand(Devptr->SPIx, (ADDR >>  0) & 0xFF);
   \   0000008C   0x4639             MOV      R1,R7
   \   0000008E   0x7860             LDRB     R0,[R4, #+1]
   \   00000090   0x.... 0x....      BL       SetSPIxCommand
    310          		}
    311          		
    312          	}
    313          
    314          	for(i = 0; i < nlen; i++)
   \                     ??sFLASH_SetRegister_3:
   \   00000094   0xB155             CBZ.N    R5,??sFLASH_SetRegister_5
    315          	{
    316          		DATA[i] = SetSPIxCommand(Devptr->SPIx, DATA[i]);
   \                     ??sFLASH_SetRegister_6:
   \   00000096   0xF81A 0x1009      LDRB     R1,[R10, R9]
   \   0000009A   0x7860             LDRB     R0,[R4, #+1]
   \   0000009C   0x.... 0x....      BL       SetSPIxCommand
   \   000000A0   0xF80A 0x0009      STRB     R0,[R10, R9]
    317          	}
   \   000000A4   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000000A8   0x45AA             CMP      R10,R5
   \   000000AA   0xD3F4             BCC.N    ??sFLASH_SetRegister_6
    318          
    319          	iDev_SPIx_CS_SET(Devptr->nDevNo);
   \                     ??sFLASH_SetRegister_5:
   \   000000AC   0x7820             LDRB     R0,[R4, #+0]
   \   000000AE   0x.... 0x....      BL       iDev_SPIx_CS_SET
    320          
    321          	return i;
   \   000000B2   0x4650             MOV      R0,R10
   \   000000B4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    322          }
    323          
    324          #endif	////////////////// END OF "#ifndef _SPI_FLASH_C"
    325          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
    326          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  sFLASH_4kErase
             24 -> OSSemPend
             24 -> OSSemPost
             24 -> sFLASH_SetRegister
             24 -> sFLASH_WaitWriteEnd
       24  sFLASH_AllErase
             24 -> OSSemPend
             24 -> OSSemPost
             24 -> sFLASH_SetRegister
             24 -> sFLASH_WaitWriteEnd
       16  sFLASH_BL4kCheckErase
             16 -> sFLASH_4kErase
       32  sFLASH_BufferRead
             32 -> OSSemPend
             32 -> OSSemPost
             32 -> sFLASH_SetRegister
       24  sFLASH_DataRead
             24 -> OSSemPend
             24 -> OSSemPost
             24 -> sFLASH_SetRegister
       48  sFLASH_DataWrite
             48 -> OSSemPend
             48 -> OSSemPost
             48 -> sFLASH_SetRegister
             48 -> sFLASH_WaitWriteEnd
        8  sFLASH_Init
              8 -> OSTimeDly
              8 -> iDev_SPIxInit
              8 -> iDev_SPIx_CS_SET
              0 -> sFLASH_Unprotected
       24  sFLASH_ReadStsRegister
             24 -> OSSemPend
             24 -> OSSemPost
             24 -> sFLASH_SetRegister
       32  sFLASH_SetRegister
             32 -> SetSPIxCommand
             32 -> iDev_SPIx_CS_RST
             32 -> iDev_SPIx_CS_SET
       24  sFLASH_Unprotected
             24 -> OSSemPend
             24 -> OSSemPost
             24 -> sFLASH_SetRegister
       24  sFLASH_WaitWriteEnd
             24 -> WatchdogClear
             24 -> sFLASH_SetRegister


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?Subroutine0
     124  sFLASH_4kErase
     126  sFLASH_AllErase
      32  sFLASH_BL4kCheckErase
      52  sFLASH_BufferRead
      56  sFLASH_DataRead
     178  sFLASH_DataWrite
      30  sFLASH_Init
      44  sFLASH_ReadStsRegister
     184  sFLASH_SetRegister
      90  sFLASH_Unprotected
      66  sFLASH_WaitWriteEnd

 
 994 bytes in section .text
 
 994 bytes of CODE memory

Errors: none
Warnings: none

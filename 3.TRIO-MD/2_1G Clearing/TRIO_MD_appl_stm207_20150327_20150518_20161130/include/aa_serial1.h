
/******************** (C) COPYRIGHT 2008 PILOG, NSINFO *************************
* File Name          : usart1_vx.x.c
* Author             : Yoon Byong-Gyu(bgyoon@naver.com)
* Date First Issued  : 01/17/2008
* Description        : This file provides all the USART0 firmware functions.
* $Revision: 0.1 $
* $Revision date: 2008.01.__
********************************************************************************/

#define Ser0Bps		38400L
#define Ser0LCR		(_DATA8BIT | _1_STOP | _NONPARITY)


#ifdef SER1INT_C
	#define	_USER_SER1EXT
#else
	#define _USER_SER1EXT		extern
#endif

////////////////////////////////////////////////////////////////////////////////
// Definition
/////////////
#define ISDATA				0xA0
#define ISFIRST				0xA6

#define FLASH_PAGE_SIZE		(0x800*4)		//2k, 512K짜리 플래쉬 경우

#define Filter_PAGE_SIZE	(0x1024*10)		//2k, 512K짜리 플래쉬 경우

#define DataFrameMax		50000 

#define FilterFrameMax		5000 

#define HDLC_FCS_START 		0xffff /* Starting bit string for FCS*/
#define CRC_TAB_SIZE 		256 /* 2^CRC_TAB_BITS */


#define FilterCntMax		123 

////////////////////////////////////////////////////////////////////////////////
// Global Variable Declaration
///////////////////////////////
#ifdef	SER1INT_C
///////////////////////////////
	#define SER1_STK_SIZE	(128*3)
	OS_STK Ser1TaskStk[SER1_STK_SIZE] @ "iram";;
	
	__ProtocolPtr PcSerB, *PcSer = &PcSerB;
	
	INT32U downloadFlag = 0;
	BOOL SerialPadOnFlag = FALSE;
    

	INT8U m_writing = FALSE;

	__Dnr_Sts	 tDnrStsB, *tDnrSts = &tDnrStsB;

	INT8U FSKDebug = 0;
	INT8U ISODebug = 0;
	
	INT8U	DownPageData[FLASH_PAGE_SIZE];
	INT8U	FilterDownload[Filter_PAGE_SIZE] = {0,};

	INT32U	Flash_Data_Co = 0;
	INT32U	Flash_Data_Addr = 0;

	
	INT16U	WaveData[1024];
//	OS_EVENT *CtrlSem = NULL;

	INT8U DataFrame[DataFrameMax]={0,};

	INT8U	FilterDataBuff[FilterFrameMax] = {0,};
#if 1
	const INT8U Filter_2100MHz_20_10_L[ FilterCntMax ] = {
	0x05,0x12,0x06,0x87,0x2B,0x02,0x13,0xF9,0x78,0xD4,
	0xFE,0xEB,0xCD,0x04,0x66,0x34,0x9C,0x5B,0xCC,0x04,
	0x35,0x0C,0x44,0x04,0xB5,0xF2,0x49,0x06,0x5E,0x00,
	0x69,0xF8,0x7E,0xF9,0x64,0xFE,0xF9,0xFA,0xEB,0xFD,
	0x3A,0x03,0xD8,0xFC,0x77,0xFF,0x13,0x03,0x58,0x03,
	0xAA,0x00,0x16,0x02,0xC2,0x02,0x08,0xFE,0x6C,0x02,
	0x25,0x00,0xF4,0xFE,0x50,0xFD,0xA0,0x00,0x40,0xFE,
	0x72,0xFE,0x85,0x00,0x9E,0xFE,0xB8,0xFF,0x33,0x00,
	0xD5,0x01,0x8C,0xFF,0xAF,0x00,0xD7,0x01,0x04,0xFF,
	0xD5,0x00,0xB9,0x00,0x93,0xFF,0xA0,0xFF,0x0C,0x00,
	0x3F,0xFF,0x93,0xFF,0x5F,0xFF,0xFE,0xFF,0x9F,0xFF,
	0xA9,0x00,0x2A,0x00,0x89,0x00,0x00,0x00,0x42,0x00,
	0x53,0x00,0x02
	};
	
	const INT8U Filter_2100MHz_20_10_R[ FilterCntMax ] = {
	0x06,0x14,0xF3,0x53,0xF7,0xCF,0x15,0x0C,0xAC,0x08,
	0x31,0x13,0xBC,0x20,0xFF,0x2B,0xDA,0x31,0xF5,0xF5,
	0x48,0xF6,0xA4,0xFC,0x97,0x06,0xCC,0x04,0xBE,0x01,
	0x2C,0xFC,0x4B,0xF7,0xB4,0xFF,0x9D,0x02,0xA9,0x05,
	0x30,0x06,0x1A,0xFD,0xEC,0xFC,0x59,0xFB,0xFA,0xFD,
	0x22,0x02,0xB1,0x02,0xCE,0x01,0xD6,0x00,0x03,0xFE,
	0x02,0xFE,0xD0,0x00,0x2F,0x01,0xAA,0x00,0xC2,0xFF,
	0xB8,0xFE,0xA9,0xFD,0xFC,0x00,0x50,0x01,0x11,0x01,
	0x81,0x01,0x69,0xFF,0x2B,0xFE,0xE6,0xFF,0x05,0xFF,
	0x8B,0x00,0xC8,0x00,0xA8,0x00,0x41,0xFF,0xB1,0xFF,
	0x97,0xFF,0xE3,0x00,0x48,0x00,0xA0,0x00,0x02,0xFF,
	0xC3,0xFF,0x8D,0xFF,0x7A,0x00,0x00,0x00,0x44,0x00,
	0x4B,0x00,0x34
	};
#endif


	const INT8U Filter_2100MHz_10_10_L[ FilterCntMax ] = {
		0x05,0x12,0x00,0x20,0xc4,0x9c,0x13,0xff,0xdf,0x3b,
		0x64,0x13,0xf6,0x21,0x27,0x2b,0xea,0x31,0xf5,0xf5,
		0x26,0xf6,0xa9,0xfc,0xc0,0x07,0x08,0x04,0xbf,0x01,
		0x03,0xfc,0x0b,0xf7,0x77,0xff,0xc6,0x02,0xf0,0x05,
		0x77,0x06,0x46,0xfd,0x9d,0xfc,0x06,0xfb,0xc3,0xfd,
		0x1c,0x03,0x0f,0x03,0x0e,0x01,0xe1,0xff,0xd8,0xfd,
		0xbb,0xfe,0xc2,0x00,0x5d,0x02,0x01,0x00,0xd0,0xff,
		0x86,0xfe,0x4b,0xfd,0x96,0x00,0x86,0x01,0x75,0x01,
		0xec,0x01,0xb4,0xfe,0xc4,0xfe,0x78,0xfe,0xb9,0xff,
		0x7e,0x01,0x37,0x00,0xf2,0x00,0x4b,0xff,0x78,0xff,
		0x50,0xff,0xdb,0x00,0x83,0x01,0x09,0x00,0x0a,0xff,
		0x88,0xff,0x26,0xff,0x0e,0x00,0x00,0x00,0xaf,0x00,
		0xb9,0x00,0x7d

	};
	const INT8U Filter_2100MHz_10_10_R[ FilterCntMax ] = {
	0x06,0x14,0xf3,0x53,0xf7,0xcf,0x15,0x0c,0xac,0x08,
	0x31,0x13,0xbc,0x20,0xff,0x2b,0xda,0x31,0xf5,0xf5,
	0x48,0xf6,0xa4,0xfc,0x97,0x06,0xcc,0x04,0xbe,0x01,
	0x2c,0xfc,0x4b,0xf7,0xb4,0xff,0x9d,0x02,0xa9,0x05,
	0x30,0x06,0x1a,0xfd,0xec,0xfc,0x59,0xfb,0xfa,0xfd,
	0x22,0x02,0xb1,0x02,0xce,0x01,0xd6,0x00,0x03,0xfe,
	0x02,0xfe,0xd0,0x00,0x2f,0x01,0xaa,0x00,0xc2,0xff,
	0xb8,0xfe,0xa9,0xfd,0xfc,0x00,0x50,0x01,0x11,0x01,
	0x81,0x01,0x69,0xff,0x2b,0xfe,0xe6,0xff,0x05,0xff,
	0x8b,0x00,0xc8,0x00,0xa8,0x00,0x41,0xff,0xb1,0xff,
	0x97,0xff,0xe3,0x00,0x48,0x00,0xa0,0x00,0x02,0xff,
	0xc3,0xff,0x8d,0xff,0x7a,0x00,0x00,0x00,0x44,0x00,
	0x4b,0x00,0x34
	};

//////////////////////////20170417 2100MHz_15_05
#if 0/// 1 차 
	const INT8U Filter_2100MHz_15_05_L[ FilterCntMax ] = {
		0x05,0x12,0x09,0xCA,0xC0,0x83,0x13,0xF6,0x4F,0x76,
		0x60,0xFD,0x6D,0x16,0xDE,0x33,0xAB,0x46,0xB3,0x06,
		0x8B,0xFD,0x3E,0xF3,0x0A,0xF1,0x01,0xF9,0xE0,0xFD,
		0x98,0x04,0x5F,0x08,0xEB,0x04,0x4E,0x03,0xE6,0xFF,
		0xFB,0xFB,0x53,0xFD,0xDC,0xFC,0x72,0xFD,0xE8,0x01,
		0x6F,0x00,0x4E,0x02,0x54,0x02,0xA1,0x00,0xB2,0x00,
		0xD8,0xFF,0x13,0xFD,0xD9,0xFE,0x50,0xFE,0xC0,0xFF,
		0xD4,0x01,0x37,0x01,0xC0,0x01,0x17,0x00,0xC0,0xFF,
		0xB4,0xFE,0xC2,0xFF,0x5A,0xFF,0x2A,0xFF,0xAF,0x00,
		0x90,0x00,0x33,0x00,0x9C,0x00,0x8D,0xFF,0xFF,0x00,
		0x18,0xFF,0xB7,0xFF,0x83,0xFF,0xB5,0xFF,0xCE,0x00,
		0x08,0x00,0x49,0x00,0x56,0x00,0x28,0x00,0x16,0xFF,
		0xE9,0xFF,0xC5
	};

	const INT8U Filter_2100MHz_15_05_R[ FilterCntMax ] = {
		0x06,0x14,0xF6,0x97,0x8D,0x50,0x15,0x09,0x82,0xA9,
		0x93,0x13,0x7F,0x15,0x8D,0x16,0xFD,0x17,0xBB,0x07,
		0xD2,0x0A,0xF2,0x0E,0x0B,0x10,0xF2,0xFD,0xE5,0xFF,
		0xC4,0x02,0x1A,0x04,0xD4,0xFB,0x87,0xFB,0x66,0xFB,
		0xB8,0xFC,0x8B,0xFE,0xC2,0xFD,0xBF,0xFC,0xCD,0xFC,
		0x07,0x01,0xD2,0x01,0x53,0x00,0x9E,0xFF,0xBE,0x01,
		0xAF,0x01,0xFE,0x02,0x24,0x02,0x17,0xFF,0xDA,0x00,
		0x4D,0x00,0xCA,0x01,0x44,0xFE,0xF7,0xFF,0x06,0xFF,
		0x32,0xFF,0x79,0xFF,0x8D,0xFF,0x54,0xFF,0x23,0xFF,
		0x03,0x00,0x51,0x00,0x2E,0xFF,0xFF,0xFF,0xC8,0x00,
		0x5F,0x00,0x6C,0x00,0x70,0x00,0x67,0x00,0x06,0x00,
		0x1C,0x00,0x34,0x00,0x4B,0xFF,0xDF,0xFF,0xE1,0xFF,
		0xE8,0xFF,0xF4
	};
#endif

#if 0/// 2 차 
	const INT8U Filter_2100MHz_15_05_L[ FilterCntMax ] = {
		0x05,0x12,0x03,0x08,0x9A,0x02,0x13,0xEF,0xDB,0xF4,
		0x87,0xFD,0x6D,0x16,0xDE,0x33,0xAB,0x46,0xB3,0x06,
		0x8B,0xFD,0x3E,0xF3,0x0A,0xF1,0x01,0xF9,0xE0,0xFD,
		0x98,0x04,0x5F,0x08,0xEB,0x04,0x4E,0x03,0xE6,0xFF,
		0xFB,0xFB,0x53,0xFD,0xDC,0xFC,0x72,0xFD,0xE8,0x01,
		0x6F,0x00,0x4E,0x02,0x54,0x02,0xA1,0x00,0xB2,0x00,
		0xD8,0xFF,0x13,0xFD,0xD9,0xFE,0x50,0xFE,0xC0,0xFF,
		0xD4,0x01,0x37,0x01,0xC0,0x01,0x17,0x00,0xC0,0xFF,
		0xB4,0xFE,0xC2,0xFF,0x5A,0xFF,0x2A,0xFF,0xAF,0x00,
		0x90,0x00,0x33,0x00,0x9C,0x00,0x8D,0xFF,0xFF,0x00,
		0x18,0xFF,0xB7,0xFF,0x83,0xFF,0xB5,0xFF,0xCE,0x00,
		0x08,0x00,0x49,0x00,0x56,0x00,0x28,0x00,0x16,0xFF,
		0xE9,0xFF,0xC5
	};

	const INT8U Filter_2100MHz_15_05_R[ FilterCntMax ] = {
		0x06,0x14,0xE9,0xC4,0x32,0xC9,0x15,0x03,0x0F,0x27,
		0xBB,0x13,0x7F,0x15,0x8D,0x16,0xFD,0x17,0xBB,0x07,
		0xD2,0x0A,0xF2,0x0E,0x0B,0x10,0xF2,0xFD,0xE5,0xFF,
		0xC4,0x02,0x1A,0x04,0xD4,0xFB,0x87,0xFB,0x66,0xFB,
		0xB8,0xFC,0x8B,0xFE,0xC2,0xFD,0xBF,0xFC,0xCD,0xFC,
		0x07,0x01,0xD2,0x01,0x53,0x00,0x9E,0xFF,0xBE,0x01,
		0xAF,0x01,0xFE,0x02,0x24,0x02,0x17,0xFF,0xDA,0x00,
		0x4D,0x00,0xCA,0x01,0x44,0xFE,0xF7,0xFF,0x06,0xFF,
		0x32,0xFF,0x79,0xFF,0x8D,0xFF,0x54,0xFF,0x23,0xFF,
		0x03,0x00,0x51,0x00,0x2E,0xFF,0xFF,0xFF,0xC8,0x00,
		0x5F,0x00,0x6C,0x00,0x70,0x00,0x67,0x00,0x06,0x00,
		0x1C,0x00,0x34,0x00,0x4B,0xFF,0xDF,0xFF,0xE1,0xFF,
		0xE8,0xFF,0xF4
 	};
#endif

#if 1/// 2 차 
	const INT8U Filter_2100MHz_15_05_L[ FilterCntMax ] = {
		0x05,0x12,0xFC,0xED,0x91,0x67,0x13,0x03,0x12,0x6E,
		0x98,0xFD,0x6D,0x16,0xDE,0x33,0xAB,0x46,0xB3,0x06,
		0x8B,0xFD,0x3E,0xF3,0x0A,0xF1,0x01,0xF9,0xE0,0xFD,
		0x98,0x04,0x5F,0x08,0xEB,0x04,0x4E,0x03,0xE6,0xFF,
		0xFB,0xFB,0x53,0xFD,0xDC,0xFC,0x72,0xFD,0xE8,0x01,
		0x6F,0x00,0x4E,0x02,0x54,0x02,0xA1,0x00,0xB2,0x00,
		0xD8,0xFF,0x13,0xFD,0xD9,0xFE,0x50,0xFE,0xC0,0xFF,
		0xD4,0x01,0x37,0x01,0xC0,0x01,0x17,0x00,0xC0,0xFF,
		0xB4,0xFE,0xC2,0xFF,0x5A,0xFF,0x2A,0xFF,0xAF,0x00,
		0x90,0x00,0x33,0x00,0x9C,0x00,0x8D,0xFF,0xFF,0x00,
		0x18,0xFF,0xB7,0xFF,0x83,0xFF,0xB5,0xFF,0xCE,0x00,
		0x08,0x00,0x49,0x00,0x56,0x00,0x28,0x00,0x16,0xFF,
		0xE9,0xFF,0xC5
	};

	const INT8U Filter_2100MHz_15_05_R[ FilterCntMax ] = {
		0x06,0x14,0xF0,0x41,0x89,0x36,0x15,0x0F,0xBE,0x76,
		0xC9,0x13,0x7F,0x15,0x8D,0x16,0xFD,0x17,0xBB,0x07,
		0xD2,0x0A,0xF2,0x0E,0x0B,0x10,0xF2,0xFD,0xE5,0xFF,
		0xC4,0x02,0x1A,0x04,0xD4,0xFB,0x87,0xFB,0x66,0xFB,
		0xB8,0xFC,0x8B,0xFE,0xC2,0xFD,0xBF,0xFC,0xCD,0xFC,
		0x07,0x01,0xD2,0x01,0x53,0x00,0x9E,0xFF,0xBE,0x01,
		0xAF,0x01,0xFE,0x02,0x24,0x02,0x17,0xFF,0xDA,0x00,
		0x4D,0x00,0xCA,0x01,0x44,0xFE,0xF7,0xFF,0x06,0xFF,
		0x32,0xFF,0x79,0xFF,0x8D,0xFF,0x54,0xFF,0x23,0xFF,
		0x03,0x00,0x51,0x00,0x2E,0xFF,0xFF,0xFF,0xC8,0x00,
		0x5F,0x00,0x6C,0x00,0x70,0x00,0x67,0x00,0x06,0x00,
		0x1C,0x00,0x34,0x00,0x4B,0xFF,0xDF,0xFF,0xE1,0xFF,
		0xE8,0xFF,0xF4
 	};
#endif





////////////////////////////////////////////////////////////////////////////////

	const unsigned short int CRC_16_Table[ CRC_TAB_SIZE ] = {
		0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
		0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
		0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
		0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
		0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
		0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
		0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
		0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
		0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
		0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
		0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
		0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
		0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
		0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
		0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
		0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
		0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
		0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
		0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
		0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
		0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
		0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
		0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
		0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
		0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
		0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
		0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
		0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
		0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
		0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
		0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
		0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
	};

#else
//////////////////////
	extern __ProtocolPtr *PcSer;
	extern INT32U downloadFlag;
	extern BOOL	SerialPadOnFlag;
	
	extern INT8U m_writing;

	extern __Dnr_Sts *tDnrSts;
	
	extern INT8U FSKDebug;

	extern INT8U DownPageData[FLASH_PAGE_SIZE];
	extern INT8U FilterDownload[Filter_PAGE_SIZE];

	extern INT32U Flash_Data_Co;
	extern INT32U Flash_Data_Addr;
	extern INT16U	WaveData[1024];

	extern INT8U DataFrame[DataFrameMax];
	extern INT8U FilterDataBuff[FilterFrameMax];

	extern INT8U Filter_2100MHz_20_10_L[ FilterCntMax ];
	extern INT8U Filter_2100MHz_20_10_R[ FilterCntMax ];
	extern INT8U Filter_2100MHz_10_10_L[ FilterCntMax ];
	extern INT8U Filter_2100MHz_10_10_R[ FilterCntMax ];
	extern INT8U Filter_2100MHz_15_05_L[ FilterCntMax ];
	extern INT8U Filter_2100MHz_15_05_R[ FilterCntMax ];

////////////////////////////////////////////////////////////////////////////////
#endif
/////////////////////////////////
_USER_SER1EXT __WRCSSIO	SPcsksio, RPcsksio;

_USER_SER1EXT SIO	Ssio, Rsio;

_USER_SER1EXT INT8U iDebugCnt;
_USER_SER1EXT INT8U iUser_Value2;
_USER_SER1EXT INT8U iResetCase;
//_USER_SER1EXT INT8U Booting[2];

#define __ChangeDebug  	0x0d


////////////////////////////////////////////////////////
// Prototype Definition
///////////////////////

void Ser1Init(void);
void Ser1Task(void *pdata);

void ProtocolComCheck (__ProtocolPtr *nPtr);
INT16U WhatRxComm(__ProtocolPtr *nPtr);
INT32U ProtocolCheck_1(__ProtocolPtr *nPtr);

INT32U ProtocolCheck(__ProtocolPtr *nPtr);
// Download Related
void DownLoadGiveupTimerRst(void);
BOOL DownLoadGiveupTimerChk(__ProtocolPtr *nPtr);
INT32U DownLoadGiveupTimerSet(INT32U dnFlag);
INT8U DownloadFunc (__ProtocolPtr *nPtr);
INT8U FastDownloadFunc (__ProtocolPtr *nPtr);

void GenBodyFrame(INT8U* tid, INT8U *Data, INT16U nCnt,INT8U Comm, __ProtocolPtr *nPtr, INT8U BodyNo);
unsigned char WRCS_ProDataAckTx(__ProtocolPtr *nPtr);


INT16U makeFCS(INT8U *pBuffer,INT16U pSize,INT16U *pCalcFCS);



BOOL DnReceiveData(__ProtocolPtr *nPtr);


////////////////////////////////////////////////////////////////////////////////
// End of Header File
//////////////////////


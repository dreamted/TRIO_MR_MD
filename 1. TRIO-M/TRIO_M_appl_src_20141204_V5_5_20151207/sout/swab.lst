###############################################################################
#                                                                             #
#                                                       19/May/2017  23:29:54 #
# IAR ANSI C/C++ Compiler V5.50.5.21995/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\code\swab.c                                     #
#    Command line =  "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\code\swab.c" -D _MIMO_Type -D __2rd -D         #
#                    __PLLEnToggle -lcN "D:\Project\TRIO\1.                   #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\sout\" -o  #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\sout\" --endian=little --cpu=Cortex-M3 -e      #
#                    --require_prototypes --warnings_are_errors --fpu=None    #
#                    --dlib_config "D:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4                           #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\include\" -I "D:\Project\TRIO\1.               #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    inc\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    src\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-CPU\"   #
#                    -I "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V #
#                    5_5_20151207\uC-LIB\" -I "D:\Project\TRIO\1.             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\Po #
#                    rts\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\So #
#                    urce\" -I "D:\Project\TRIO\1.                            #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-Probe\" #
#                     -I "D:\Program Files (x86)\IAR Systems\Embedded         #
#                    Workbench 5.4 Evaluation\arm\INC\" -Oh                   #
#    List file    =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\swab.lst                                   #
#    Object file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\swab.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\code\swab.c
      1          
      2          #include "../include/main.h"
      3          
      4           
      5          unsigned short ___swab16(unsigned short x)
      6          {
      7          	unsigned short int __x = (x);
      8          	return ((unsigned short)((((unsigned short)(__x) & (unsigned short)0x00ffU) << 8) | (((unsigned short)(__x) & (unsigned short)0xff00U) >> 8) ));
      9          }
     10          
     11          unsigned int ___swab32(unsigned int x)
     12          {
     13          	unsigned int __x = (x);
     14          	return ((unsigned int)(
     15          				(((unsigned int)(__x) & (unsigned int)0x000000ffUL) << 24) |
     16          				(((unsigned int)(__x) & (unsigned int)0x0000ff00UL) <<  8) |
     17          				(((unsigned int)(__x) & (unsigned int)0x00ff0000UL) >>  8) |
     18          				(((unsigned int)(__x) & (unsigned int)0xff000000UL) >> 24) ));
     19          }
     20          
     21          /**
     22          unsigned long long ___swab64(unsigned long long x)
     23          {
     24          	unsigned long long __x = (x);
     25          	return ((unsigned long long)(
     26          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00000000000000ffULL) << 56) |
     27          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x000000000000ff00ULL) << 40) |
     28          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x0000000000ff0000ULL) << 24) |
     29          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00000000ff000000ULL) <<  8) |
     30          	    		(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x000000ff00000000ULL) >>  8) |
     31          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x0000ff0000000000ULL) >> 24) |
     32          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00ff000000000000ULL) >> 40) |
     33          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0xff00000000000000ULL) >> 56) ));
     34          }
     35          **/
     36          
     37          
     38          unsigned short __fswab16(unsigned short x)
     39          {
     40          	return __arch__swab16(x);
     41          }
     42          
     43          unsigned short __swab16p(unsigned short *x)
     44          {
     45          	return __arch__swab16p(x);
     46          }
     47          
     48          void __swab16s(unsigned short *addr)
     49          {
     50          	__arch__swab16s(addr);
     51          }
     52          
     53          unsigned int __fswab32(unsigned int x)
     54          {
     55          	return __arch__swab32(x);
     56          }
     57          
     58          unsigned int __swab32p(unsigned int *x)
     59          {
     60          	return __arch__swab32p(x);
     61          }
     62          
     63          void __swab32s(unsigned int *addr)
     64          {
     65          	__arch__swab32s(addr);
     66          }
     67          
     68          /**
     69          unsigned long long __fswab64(unsigned long long x)
     70          {
     71          
     72          	unsigned int h = x >> 32;
     73              unsigned int l = x & ((1ULL<<32)-1);
     74          
     75                  return (((unsigned long long)__swab32(l)) << 32) | ((unsigned long long)(__swab32(h)));
     76          }
     77          **/
     78          /**
     79          unsigned long long __swab64p(unsigned long long *x)
     80          {
     81          	return __arch__swab64p(x);
     82          }
     83          **/
     84          /**
     85          void __swab64s(unsigned long long *addr)
     86          {
     87          	__arch__swab64s(addr);
     88          }
     89          **/
     90          ////////////////////////////////////////////////////////////////////////////////
     91          // End of Source File
     92          /////////////////////
     93          

   Maximum stack usage in bytes:

     Function  .cstack
     --------  -------
     ___swab16      0
     ___swab32      0
     __fswab16      0
     __fswab32      8
     __swab16p      0
     __swab16s      0
     __swab32p      8
     __swab32s      8


   Section sizes:

     Function/Label Bytes
     -------------- -----
     ___swab16         2
     ?Subroutine0     10
     ___swab32        24
     __fswab16         0
     __swab16p         4
     __swab16s        12
     __fswab32         2
     __swab32p         4
     __swab32s        14

 
 72 bytes in section .text
 
 72 bytes of CODE memory

Errors: none
Warnings: none

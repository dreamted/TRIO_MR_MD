###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     08/Mar/2013  15:30:21 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uCOS-I #
#                    I\Source\os_mbox.c                                       #
#    Command line =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uCOS-I #
#                    I\Source\os_mbox.c -D _MIMO_Type -D __2rd -D             #
#                    __PLLEnToggle -lcN D:\Project\TRIO\3.F_W\TRIO_appl_src_2 #
#                    0121212_V5_5\sout\ -o D:\Project\TRIO\3.F_W\TRIO_appl_sr #
#                    c_20121212_V5_5\sout\ --endian=little --cpu=Cortex-M3    #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\includ #
#                    e\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\ #
#                    lib_stm32\inc\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20 #
#                    121212_V5_5\lib_stm32\src\ -I                            #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uC-CPU #
#                    \ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\u #
#                    C-LIB\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V #
#                    5_5\uCOS-II\Ports\ -I D:\Project\TRIO\3.F_W\TRIO_appl_sr #
#                    c_20121212_V5_5\uCOS-II\Source\ -I                       #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uC-Pro #
#                    be\ -Oh --use_c++_inline --require_prototypes            #
#    List file    =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\sout\o #
#                    s_mbox.lst                                               #
#    Object file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\sout\o #
#                    s_mbox.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uCOS-II\Source\os_mbox.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                       MESSAGE MAILBOX MANAGEMENT
      6          *
      7          *                          (c) Copyright 1992-2007, Jean J. Labrosse, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MBOX.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.85
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          
     26          #include <ucos_ii.h>
     27          #endif
     28          
     29          #if OS_MBOX_EN > 0
     30          /*
     31          *********************************************************************************************************
     32          *                                     ACCEPT MESSAGE FROM MAILBOX
     33          *
     34          * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
     35          *              OSMboxAccept() does not suspend the calling task if a message is not available.
     36          *
     37          * Arguments  : pevent        is a pointer to the event control block
     38          *
     39          * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
     40          *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
     41          *              == (void *)0  if the mailbox is empty or,
     42          *                            if 'pevent' is a NULL pointer or,
     43          *                            if you didn't pass the proper event pointer.
     44          *********************************************************************************************************
     45          */
     46          
     47          #if OS_MBOX_ACCEPT_EN > 0
     48          void  *OSMboxAccept (OS_EVENT *pevent)
     49          {
     50              void      *pmsg;
     51          #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
     52              OS_CPU_SR  cpu_sr = 0;
     53          #endif
     54          
     55          
     56          
     57          #if OS_ARG_CHK_EN > 0
     58              if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
     59                  return ((void *)0);
     60              }
     61          #endif
     62              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
     63                  return ((void *)0);
     64              }
     65              OS_ENTER_CRITICAL();
     66              pmsg               = pevent->OSEventPtr;
     67              pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
     68              OS_EXIT_CRITICAL();
     69              return (pmsg);                                        /* Return the message received (or NULL)     */
     70          }
     71          #endif
     72          /*$PAGE*/
     73          /*
     74          *********************************************************************************************************
     75          *                                        CREATE A MESSAGE MAILBOX
     76          *
     77          * Description: This function creates a message mailbox if free event control blocks are available.
     78          *
     79          * Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
     80          *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
     81          *                            will be considered empty.
     82          *
     83          * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
     84          *                                created mailbox
     85          *              == (OS_EVENT *)0  if no event control blocks were available
     86          *********************************************************************************************************
     87          */
     88          
     89          OS_EVENT  *OSMboxCreate (void *pmsg)
     90          {
     91              OS_EVENT  *pevent;
     92          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     93              OS_CPU_SR  cpu_sr = 0;
     94          #endif
     95          
     96          
     97          
     98              if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
     99                  return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    100              }
    101              OS_ENTER_CRITICAL();
    102              pevent = OSEventFreeList;                    /* Get next free event control block                  */
    103              if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    104                  OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    105              }
    106              OS_EXIT_CRITICAL();
    107              if (pevent != (OS_EVENT *)0) {
    108                  pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
    109                  pevent->OSEventCnt     = 0;
    110                  pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
    111          #if OS_EVENT_NAME_SIZE > 1
    112                  pevent->OSEventName[0] = '?';
    113                  pevent->OSEventName[1] = OS_ASCII_NUL;
    114          #endif
    115                  OS_EventWaitListInit(pevent);
    116              }
    117              return (pevent);                             /* Return pointer to event control block              */
    118          }
    119          /*$PAGE*/
    120          /*
    121          *********************************************************************************************************
    122          *                                         DELETE A MAIBOX
    123          *
    124          * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
    125          *
    126          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    127          *                            mailbox.
    128          *
    129          *              opt           determines delete options as follows:
    130          *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
    131          *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
    132          *                                                    In this case, all the tasks pending will be readied.
    133          *
    134          *              perr          is a pointer to an error code that can contain one of the following values:
    135          *                            OS_ERR_NONE             The call was successful and the mailbox was deleted
    136          *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
    137          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    138          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
    139          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
    140          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    141          *
    142          * Returns    : pevent        upon error
    143          *              (OS_EVENT *)0 if the mailbox was successfully deleted.
    144          *
    145          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    146          *                 the mailbox MUST check the return code of OSMboxPend().
    147          *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
    148          *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
    149          *                 time is directly proportional to the number of tasks waiting on the mailbox.
    150          *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
    151          *                 applications where the mailbox is used for mutual exclusion because the resource(s)
    152          *                 will no longer be guarded by the mailbox.
    153          *********************************************************************************************************
    154          */
    155          
    156          #if OS_MBOX_DEL_EN > 0
    157          OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
    158          {
    159              BOOLEAN    tasks_waiting;
    160              OS_EVENT  *pevent_return;
    161          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    162              OS_CPU_SR  cpu_sr = 0;
    163          #endif
    164          
    165          
    166          
    167          #if OS_ARG_CHK_EN > 0
    168              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    169                  return (pevent);
    170              }
    171              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    172                  *perr = OS_ERR_PEVENT_NULL;
    173                  return (pevent);
    174              }
    175          #endif
    176              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    177                  *perr = OS_ERR_EVENT_TYPE;
    178                  return (pevent);
    179              }
    180              if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    181                  *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    182                  return (pevent);
    183              }
    184              OS_ENTER_CRITICAL();
    185              if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
    186                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
    187              } else {
    188                  tasks_waiting = OS_FALSE;                          /* No                                       */
    189              }
    190              switch (opt) {
    191                  case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
    192                       if (tasks_waiting == OS_FALSE) {
    193          #if OS_EVENT_NAME_SIZE > 1
    194                           pevent->OSEventName[0] = '?';             /* Unknown name                             */
    195                           pevent->OSEventName[1] = OS_ASCII_NUL;
    196          #endif
    197                           pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    198                           pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    199                           pevent->OSEventCnt  = 0;
    200                           OSEventFreeList     = pevent;             /* Get next free event control block        */
    201                           OS_EXIT_CRITICAL();
    202                           *perr               = OS_ERR_NONE;
    203                           pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
    204                       } else {
    205                           OS_EXIT_CRITICAL();
    206                           *perr               = OS_ERR_TASK_WAITING;
    207                           pevent_return       = pevent;
    208                       }
    209                       break;
    210          
    211                  case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
    212                       while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
    213                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
    214                       }
    215          #if OS_EVENT_NAME_SIZE > 1
    216                       pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    217                       pevent->OSEventName[1] = OS_ASCII_NUL;
    218          #endif
    219                       pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    220                       pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    221                       pevent->OSEventCnt     = 0;
    222                       OSEventFreeList        = pevent;              /* Get next free event control block        */
    223                       OS_EXIT_CRITICAL();
    224                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    225                           OS_Sched();                               /* Find highest priority task ready to run  */
    226                       }
    227                       *perr         = OS_ERR_NONE;
    228                       pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
    229                       break;
    230          
    231                  default:
    232                       OS_EXIT_CRITICAL();
    233                       *perr         = OS_ERR_INVALID_OPT;
    234                       pevent_return = pevent;
    235                       break;
    236              }
    237              return (pevent_return);
    238          }
    239          #endif
    240          
    241          /*$PAGE*/
    242          /*
    243          *********************************************************************************************************
    244          *                                      PEND ON MAILBOX FOR A MESSAGE
    245          *
    246          * Description: This function waits for a message to be sent to a mailbox
    247          *
    248          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    249          *
    250          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    251          *                            wait for a message to arrive at the mailbox up to the amount of time
    252          *                            specified by this argument.  If you specify 0, however, your task will wait
    253          *                            forever at the specified mailbox or, until a message arrives.
    254          *
    255          *              perr          is a pointer to where an error message will be deposited.  Possible error
    256          *                            messages are:
    257          *
    258          *                            OS_ERR_NONE         The call was successful and your task received a
    259          *                                                message.
    260          *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
    261          *                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
    262          *                            OS_ERR_EVENT_TYPE   Invalid event type
    263          *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
    264          *                                                would lead to a suspension.
    265          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
    266          *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
    267          *
    268          * Returns    : != (void *)0  is a pointer to the message received
    269          *              == (void *)0  if no message was received or,
    270          *                            if 'pevent' is a NULL pointer or,
    271          *                            if you didn't pass the proper pointer to the event control block.
    272          *********************************************************************************************************
    273          */
    274          
    275          void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
    276          {
    277              void      *pmsg;
    278              INT8U      pend_stat;
    279          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    280              OS_CPU_SR  cpu_sr = 0;
    281          #endif
    282          
    283          
    284          
    285          #if OS_ARG_CHK_EN > 0
    286              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    287                  return ((void *)0);
    288              }
    289              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    290                  *perr = OS_ERR_PEVENT_NULL;
    291                  return ((void *)0);
    292              }
    293          #endif
    294              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    295                  *perr = OS_ERR_EVENT_TYPE;
    296                  return ((void *)0);
    297              }
    298              if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    299                  *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    300                  return ((void *)0);
    301              }
    302              if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    303                  *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    304                  return ((void *)0);
    305              }
    306              OS_ENTER_CRITICAL();
    307              pmsg = pevent->OSEventPtr;
    308              if (pmsg != (void *)0) {                          /* See if there is already a message             */
    309                  pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    310                  OS_EXIT_CRITICAL();
    311                  *perr = OS_ERR_NONE;
    312                  return (pmsg);                                /* Return the message received (or NULL)         */
    313              }
    314              OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    315              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    316              OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
    317              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    318              OS_EXIT_CRITICAL();
    319              OS_Sched();                                       /* Find next highest priority task ready to run  */
    320              OS_ENTER_CRITICAL();
    321              if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) { /* See if we weren't given the message           */
    322                  pend_stat = OSTCBCur->OSTCBStatPend;
    323                  OS_EventTOAbort(pevent);                      /* Timed out, Make task ready                    */
    324                  OS_EXIT_CRITICAL();
    325                  switch (pend_stat) {
    326                      case OS_STAT_PEND_TO:
    327                      default:
    328                           *perr = OS_ERR_TIMEOUT;              /* Indicate that a timeout occured               */
    329                           break;
    330          
    331                      case OS_STAT_PEND_ABORT:
    332                           *perr = OS_ERR_PEND_ABORT;           /* Indicate that we aborted                      */
    333                           break;
    334                  }
    335                  return ((void *)0);                           /* Return a NULL message                         */
    336              }
    337              pmsg                    = OSTCBCur->OSTCBMsg;
    338              OSTCBCur->OSTCBMsg      = (void *)0;              /* Yes, clear message received                   */
    339              OSTCBCur->OSTCBStat     = OS_STAT_RDY;
    340              OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;          /* No longer waiting for event                   */
    341              OS_EXIT_CRITICAL();
    342              *perr                   = OS_ERR_NONE;
    343              return (pmsg);                                    /* Return the message received                   */
    344          }
    345          /*$PAGE*/
    346          /*
    347          *********************************************************************************************************
    348          *                                      ABORT WAITING ON A MESSAGE MAILBOX
    349          *
    350          * Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function 
    351          *              should be used to fault-abort the wait on the mailbox, rather than to normally signal
    352          *              the mailbox via OSMboxPost() or OSMboxPostOpt().
    353          *
    354          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
    355          *
    356          *              opt           determines the type of ABORT performed:
    357          *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
    358          *                                                     mailbox
    359          *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
    360          *                                                     mailbox
    361          *
    362          *              perr          is a pointer to where an error message will be deposited.  Possible error
    363          *                            messages are:
    364          *
    365          *                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
    366          *                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
    367          *                                                and informed of the aborted wait; check return value 
    368          *                                                for the number of tasks whose wait on the mailbox 
    369          *                                                was aborted.
    370          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
    371          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    372          *
    373          * Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
    374          *              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
    375          *********************************************************************************************************
    376          */
    377          
    378          #if OS_MBOX_PEND_ABORT_EN > 0
    379          INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
    380          {
    381              INT8U      nbr_tasks;
    382          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    383              OS_CPU_SR  cpu_sr = 0;
    384          #endif
    385          
    386          
    387          
    388          #if OS_ARG_CHK_EN > 0
    389              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    390                  return (0);
    391              }
    392              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    393                  *perr = OS_ERR_PEVENT_NULL;
    394                  return (0);
    395              }
    396          #endif
    397              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    398                  *perr = OS_ERR_EVENT_TYPE;
    399                  return (0);
    400              }
    401              OS_ENTER_CRITICAL();
    402              if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
    403                  nbr_tasks = 0;
    404                  switch (opt) {
    405                      case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
    406                           while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    407                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    408                               nbr_tasks++;
    409                           }
    410                           break;
    411                       
    412                      case OS_PEND_OPT_NONE:                         /* No,  ready HPT       waiting on mailbox  */
    413                      default:    
    414                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    415                           nbr_tasks++;
    416                           break;
    417                  }
    418                  OS_EXIT_CRITICAL();
    419                  OS_Sched();                                        /* Find HPT ready to run                    */
    420                  *perr = OS_ERR_PEND_ABORT;
    421                  return (nbr_tasks);
    422              }
    423              OS_EXIT_CRITICAL();
    424              *perr = OS_ERR_NONE;
    425              return (0);                                            /* No tasks waiting on mailbox              */
    426          }
    427          #endif
    428          
    429          /*$PAGE*/
    430          /*
    431          *********************************************************************************************************
    432          *                                       POST MESSAGE TO A MAILBOX
    433          *
    434          * Description: This function sends a message to a mailbox
    435          *
    436          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    437          *
    438          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    439          *
    440          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    441          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    442          *                                   message at a time and thus, the message MUST be consumed before you
    443          *                                   are allowed to send another one.
    444          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    445          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    446          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    447          *
    448          * Note(s)    : 1) HPT means Highest Priority Task
    449          *********************************************************************************************************
    450          */
    451          
    452          #if OS_MBOX_POST_EN > 0
    453          INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
    454          {
    455          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    456              OS_CPU_SR  cpu_sr = 0;
    457          #endif
    458          
    459          
    460          
    461          #if OS_ARG_CHK_EN > 0
    462              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    463                  return (OS_ERR_PEVENT_NULL);
    464              }
    465              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    466                  return (OS_ERR_POST_NULL_PTR);
    467              }
    468          #endif
    469              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    470                  return (OS_ERR_EVENT_TYPE);
    471              }
    472              OS_ENTER_CRITICAL();
    473              if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    474                                                                /* Ready HPT waiting on event                    */
    475                  (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    476                  OS_EXIT_CRITICAL();
    477                  OS_Sched();                                   /* Find highest priority task ready to run       */
    478                  return (OS_ERR_NONE);
    479              }
    480              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    481                  OS_EXIT_CRITICAL();
    482                  return (OS_ERR_MBOX_FULL);
    483              }
    484              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    485              OS_EXIT_CRITICAL();
    486              return (OS_ERR_NONE);
    487          }
    488          #endif
    489          
    490          /*$PAGE*/
    491          /*
    492          *********************************************************************************************************
    493          *                                       POST MESSAGE TO A MAILBOX
    494          *
    495          * Description: This function sends a message to a mailbox
    496          *
    497          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    498          *
    499          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    500          *
    501          *              opt           determines the type of POST performed:
    502          *                            OS_POST_OPT_NONE         POST to a single waiting task
    503          *                                                     (Identical to OSMboxPost())
    504          *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
    505          *
    506          *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
    507          *
    508          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    509          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    510          *                                   message at a time and thus, the message MUST be consumed before you
    511          *                                   are allowed to send another one.
    512          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    513          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    514          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    515          *
    516          * Note(s)    : 1) HPT means Highest Priority Task
    517          *
    518          * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
    519          *              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
    520          *********************************************************************************************************
    521          */
    522          
    523          #if OS_MBOX_POST_OPT_EN > 0
    524          INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
    525          {
    526          #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    527              OS_CPU_SR  cpu_sr = 0;
    528          #endif
    529          
    530          
    531          
    532          #if OS_ARG_CHK_EN > 0
    533              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    534                  return (OS_ERR_PEVENT_NULL);
    535              }
    536              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    537                  return (OS_ERR_POST_NULL_PTR);
    538              }
    539          #endif
    540              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    541                  return (OS_ERR_EVENT_TYPE);
    542              }
    543              OS_ENTER_CRITICAL();
    544              if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    545                  if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    546                      while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    547                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    548                      }
    549                  } else {                                      /* No,  Post to HPT waiting on mbox              */
    550                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    551                  }
    552                  OS_EXIT_CRITICAL();
    553                  if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    554                      OS_Sched();                               /* Find HPT ready to run                         */
    555                  }
    556                  return (OS_ERR_NONE);
    557              }
    558              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    559                  OS_EXIT_CRITICAL();
    560                  return (OS_ERR_MBOX_FULL);
    561              }
    562              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    563              OS_EXIT_CRITICAL();
    564              return (OS_ERR_NONE);
    565          }
    566          #endif
    567          
    568          /*$PAGE*/
    569          /*
    570          *********************************************************************************************************
    571          *                                        QUERY A MESSAGE MAILBOX
    572          *
    573          * Description: This function obtains information about a message mailbox.
    574          *
    575          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    576          *
    577          *              p_mbox_data   is a pointer to a structure that will contain information about the message
    578          *                            mailbox.
    579          *
    580          * Returns    : OS_ERR_NONE         The call was successful and the message was sent
    581          *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
    582          *              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
    583          *              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
    584          *********************************************************************************************************
    585          */
    586          
    587          #if OS_MBOX_QUERY_EN > 0
    588          INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
    589          {
    590              INT8U      i;
    591          #if OS_LOWEST_PRIO <= 63
    592              INT8U     *psrc;
    593              INT8U     *pdest;
    594          #else
    595              INT16U    *psrc;
    596              INT16U    *pdest;
    597          #endif
    598          #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    599              OS_CPU_SR  cpu_sr = 0;
    600          #endif
    601          
    602          
    603          
    604          #if OS_ARG_CHK_EN > 0
    605              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    606                  return (OS_ERR_PEVENT_NULL);
    607              }
    608              if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
    609                  return (OS_ERR_PDATA_NULL);
    610              }
    611          #endif
    612              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    613                  return (OS_ERR_EVENT_TYPE);
    614              }
    615              OS_ENTER_CRITICAL();
    616              p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    617              psrc                    = &pevent->OSEventTbl[0];
    618              pdest                   = &p_mbox_data->OSEventTbl[0];
    619              for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    620                  *pdest++ = *psrc++;
    621              }
    622              p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
    623              OS_EXIT_CRITICAL();
    624              return (OS_ERR_NONE);
    625          }
    626          #endif                                                     /* OS_MBOX_QUERY_EN                         */
    627          #endif                                                     /* OS_MBOX_EN                               */

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     OSMboxAccept        16
     OSMboxCreate        16
     OSMboxDel           24
     OSMboxPend          32
     OSMboxPendAbort     24
     OSMboxPost          16
     OSMboxPostOpt       24
     OSMboxQuery         16


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     OSMboxAccept      32
     OSMboxCreate      60
     OSMboxDel        162
     OSMboxPend       172
     OSMboxPendAbort  108
     OSMboxPost        76
     OSMboxPostOpt    106
     OSMboxQuery       70
     ??DataTable2       4
     ??DataTable2_1     4
     ??DataTable2_2     4
     ??DataTable2_3     4

 
 802 bytes in section .text
 
 802 bytes of CODE memory

Errors: none
Warnings: none

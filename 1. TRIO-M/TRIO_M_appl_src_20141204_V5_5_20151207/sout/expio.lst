###############################################################################
#                                                                             #
#                                                       19/May/2017  23:29:52 #
# IAR ANSI C/C++ Compiler V5.50.5.21995/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\code\expio.c                                    #
#    Command line =  "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\code\expio.c" -D _MIMO_Type -D __2rd -D        #
#                    __PLLEnToggle -lcN "D:\Project\TRIO\1.                   #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\sout\" -o  #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\sout\" --endian=little --cpu=Cortex-M3 -e      #
#                    --require_prototypes --warnings_are_errors --fpu=None    #
#                    --dlib_config "D:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4                           #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\include\" -I "D:\Project\TRIO\1.               #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    inc\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    src\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-CPU\"   #
#                    -I "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V #
#                    5_5_20151207\uC-LIB\" -I "D:\Project\TRIO\1.             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\Po #
#                    rts\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\So #
#                    urce\" -I "D:\Project\TRIO\1.                            #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-Probe\" #
#                     -I "D:\Program Files (x86)\IAR Systems\Embedded         #
#                    Workbench 5.4 Evaluation\arm\INC\" -Oh                   #
#    List file    =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\expio.lst                                  #
#    Object file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\expio.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\code\expio.c
      1          
      2          /*********************************************
      3          * File Name          : exlib.c
      4          * Author             :
      5          * Date First Issued  : 02/01/2008
      6          * Description        : This file provides all the port/input/update firmware functions.
      7          * $Revision: 0.1 $
      8          * $Revision date: 2008.01.__
      9          ********************************************************************************/
     10          
     11          #define EXPIO_C
     12          
     13          #include "../include/main.h"
     14          
     15          #include <stdlib.h>
     16          
     17          void ExpioInit(void)
     18          {
     19          
     20          //	ExpioPortInit();
     21          	OSTaskCreate(ExpioTask, (void *)NULL, (OS_STK *)&ExpioTaskStk[EXPIO_START_STK_SIZE - 1], EXPIO_START_PRIO);
     22          }
     23          void ExpioPortInit(void)
     24          {
     25          	#ifndef __FSMC_SRAM_H
     26          		////////////////////////////////////////////////////////////////////////////
     27          		// 반드시 gpio init 에서 --> outputmode로 변경해야 한다...
     28          		// select 한핀은 반드시 모두다 high로 만들어줘야 한다.
     29          		//GPIOC->ODR.Bit.ODR6 = 1;	// CS0
     30          		//GPIOE->ODR.Bit.ODR10 = 1; // CS1
     31          		/***
     32          		GPIOB->ODR.Bit.ODR9 = 1;	// CS2
     33          		GPIOB->ODR.Bit.ODR12 = 1;	// CS3
     34          		GPIOB->ODR.Bit.ODR13 = 1;	// CS4
     35          		GPIOB->ODR.Bit.ODR14 = 1;	// CS5
     36          		GPIOB->ODR.Bit.ODR15 = 1;	// CS6
     37          		GPIOC->ODR.Bit.ODR14 = 1;	// CS7
     38          		GPIOC->ODR.Bit.ODR15 = 1;	// CS8
     39          		GPIOA->ODR.Bit.ODR11 = 1;	// CS9
     40          		GPIOA->ODR.Bit.ODR12 = 1;	// CS10
     41          	***/
     42          	#endif //__FSMC_SRAM_H
     43          	ExpioSem = OSSemCreate(1);
     44          }
     45          
     46          extern u32 CurrINT;
     47          
     48          void ExpioTask(void *p_arg)
     49          {
     50          	(void)p_arg;
     51          
     52          	pPCA9555Port_Init(0);
     53          	ADC_Select(0);
     54          	TypeCheck();
     55          	
     56          	pPCASetPortData(Attn_CS0, (0),pPCA9555Str);
     57          	pPCASetPortData(Attn_CS1, (0),pPCA9555Str);
     58          	pPCASetPortData(Attn_CS2, (0),pPCA9555Str);
     59          	pPCASetPortData(Attn_CS3, (0),pPCA9555Str);
     60          	SMS_PWR = 0;
     61          
     62          	_FWDRVS1PllInit();
     63          	_FWDRVS2PllInit();
     64          	_PllInit_LTE();
     65          
     66           	{
     67          		AmpOnOff_CDMA = 0;
     68          		AmpOnOff_WCDMA = 0;
     69          		AmpOnOff_LTE_0 = 0;
     70          		AmpOnOff_LTE_A1_0 = 0;
     71          		AmpOnOff_LTE_A2_0 = 0;
     72          
     73          		AmpOnOff_LTE_1 = 0;
     74          		AmpOnOff_LTE_A1_1 = 0;
     75          		AmpOnOff_LTE_A2_1 = 0;
     76          	}
     77          	OSTimeDly(500L);
     78          	TimerRegist(Timer_AttnOut, Time1Sec*10L);
     79          	TimerRegist(TimerAlmReport, Time1Sec*10L);	
     80          	TimerRegist(Timer_Period, Time1Sec*2L);
     81          
     82          	TimerRegist(Timer_ModemReset, Time1Day*1L);
     83          	TimerRegist(Timer_RvsOSCAlarmCount, Time1Day*1L);
     84          
     85           	while(1)
     86          	{
     87          		while((WRCS_DownLoadGiveupTimerSet(NULL)))
     88          		{
     89          			FrontLEDDisplay();
     90          			OSTimeDly(1000L);
     91          		}
     92          		while(!WRCS_DownLoadGiveupTimerSet(NULL) && !tTestFlag)
     93          		{
     94          			ReadAdcValue_TRIO();
     95          			if(ChkAttChange == RESET)	AGCCheckFunction();
     96          			
     97          			StatustoIO();
     98          			Period_Check();
     99          
    100          			if(TimeOverCheck(TimerAlmReport))
    101          			{
    102          				chkReport = SET;
    103          			}
    104          			
    105          
    106          //			OSTimeDly(200L);
    107          			OSTimeDly(400L);
    108          		}
    109          		OSTimeDly(500L);
    110          	}
    111          }
    112          
    113          void ResetStart(void)
    114          {
    115          	TimerRegist(TimerReset, Time1Sec);
    116          }
    117          
    118          INT8U F_RESET_IN_Read(void)
    119          {
    120              return 0;
    121          }
    122          
    123          void Period_Check(void)
    124          {
    125          	if(!TimeOverCheck(Timer_Period)) return;
    126          	TimerRegist(Timer_Period, Time100mSec*5L);
    127          //	RvsSleepMode(); 	//////////20130319
    128          
    129          	AlarmCheck();	//////
    130          	if((tDnrSts->ModuleAlarm.Main.DCFail == Normal)&&(PwrAlarm.ACFail == Normal))
    131          //	if((PwrAlarm.ACFail == Normal))
    132          	{
    133          		TRIO_AlarmCheck();
    134          	}
    135          	
    136          	ShutDownCheck();	
    137          	
    138          	if(chkReport)
    139          	{
    140          		AlarmStatusUpdate();
    141          		PeriodReportCheck();
    142          	}
    143          
    144          	TimerRelatedOperation();
    145          	
    146          //	FrontLEDDisplay();
    147          
    148          //	if(ChkAttChange == RESET)	AGCCheckFunction();
    149          	if(++PeriodCnt >= 2)
    150          	{
    151           		PeriodCnt = 0;
    152          //		ShutDownCheck();	
    153          		FrontLEDDisplay();
    154          		
    155          		if((PresentDay == 0)&&(PresentMonth == 0))
    156          		{
    157          			iSecCnt ++;
    158          			if( iSecCnt > 60 ) 
    159          			{
    160          				iPresentMinCnt ++;
    161          				iSecCnt = 0;
    162          			}
    163          			if( iPresentMinCnt > 24 ) iPresentHourCnt ++;
    164          		}
    165          	}
    166          	
    167          	if(TimeOverCheck(Timer_ModemReset))
    168          	{
    169          //		Chk_Reset = SET;
    170          #if 0		
    171          		ResetCaseBackup(EtcReset);
    172          		OSTimeDly(1000L);
    173          		DownLoadBootingJump();
    174          #endif		
    175          	}
    176          
    177          
    178          	if(TimeOverCheck(Timer_RvsOSCAlarmCount))
    179          	{
    180          		Chk_RvsOSCAlarmCount = SET;
    181          		
    182          		tDnrSts->RvsOSCAlarmCount_3G		= tDnrSts->CurrRvsOSCAlarmCount_3G;		
    183          		tDnrSts->RvsOSCAlarmCount_2G		= tDnrSts->CurrRvsOSCAlarmCount_2G;		
    184          		tDnrSts->RvsOSCAlarmCount_LTE		= tDnrSts->CurrRvsOSCAlarmCount_LTE; 	
    185          		tDnrSts->RvsOSCAlarmCount_LTE_A1	= tDnrSts->CurrRvsOSCAlarmCount_LTE_A1;	
    186          		tDnrSts->RvsOSCAlarmCount_LTE_A2	= tDnrSts->CurrRvsOSCAlarmCount_LTE_A2;	
    187          		tDnrSts->Rvs1OSCAlarmCount_LTE		= tDnrSts->CurrRvs1OSCAlarmCount_LTE;	
    188          		tDnrSts->Rvs1OSCAlarmCount_LTE_A1	= tDnrSts->CurrRvs1OSCAlarmCount_LTE_A1;	
    189          		tDnrSts->Rvs1OSCAlarmCount_LTE_A2	= tDnrSts->CurrRvs1OSCAlarmCount_LTE_A2;
    190          	}
    191          }
    192          
    193          
    194          void ShutDownCheck(void)
    195          {
    196          	if((tDnrSts->ModuleAlarm.Main.DCFail)||(PwrAlarm.ACFail))
    197          	{
    198          
    199          	}
    200          	else
    201          	{
    202          		if(tDnrSts->ShutDownOnOff_2G == _Enable)
    203          		{
    204          			if(tDnrSts->LTE15MUse == __NOTUSE)
    205          			{
    206          				ShutdownFunc(PATH_2G, SD_FI_2G);
    207          				ShutdownFunc(PATH_2G, SD_FO_2G);
    208          				ShutdownFunc(PATH_2G, SD_RO_2G);
    209          			}
    210          		}
    211          		if(tDnrSts->ShutDownOnOff_LTE == _Enable)
    212          		{
    213          			ShutdownFunc(PATH_LTE, SD_FI_LTE);
    214          			ShutdownFunc(PATH_LTE, SD_FO_LTE);
    215          			ShutdownFunc(PATH_LTE, SD_RO_LTE);
    216          		}
    217          
    218          		if(tDnrSts->ShutDownOnOff_3G == _Enable)
    219          		{
    220          			ShutdownFunc(PATH_3G, SD_FI_3G);
    221          			ShutdownFunc(PATH_3G, SD_FO_3G);
    222          			ShutdownFunc(PATH_3G, SD_RO_3G);
    223          		}
    224          
    225          		if((tDnrSts->ShutDownOnOff_LTE_A1 == _Enable)&&(tDnrSts->Band_Select_LTE_A1 == __USE))
    226          		{
    227          			ShutdownFunc(PATH_LTE_A1, SD_FI_LTE_A1);
    228          			ShutdownFunc(PATH_LTE_A1, SD_FO_LTE_A1);
    229          			ShutdownFunc(PATH_LTE_A1, SD_RO_LTE_A1);
    230          		}
    231          
    232          		if((tDnrSts->ShutDownOnOff_LTE_A2 == _Enable)&&(tDnrSts->Band_Select_LTE_A2[0] == __USE))
    233          		{
    234          			ShutdownFunc(PATH_LTE_A2, SD_FI_LTE_A2);
    235          			ShutdownFunc(PATH_LTE_A2, SD_FO_LTE_A2);
    236          			ShutdownFunc(PATH_LTE_A2, SD_RO_LTE_A2);
    237          		}
    238          
    239          		if(iRepeaterType == _TRIO_MM)
    240          		{
    241          			if(tDnrSts->ShutDownOnOff_LTE1 == _Enable)
    242          			{
    243          				ShutdownFunc(PATH_LTE_1, SD_FI_LTE_1);
    244          				ShutdownFunc(PATH_LTE_1, SD_FO_LTE_1);
    245          				ShutdownFunc(PATH_LTE_1, SD_RO_LTE_1);
    246          			}
    247          
    248          			if((tDnrSts->ShutDownOnOff_LTE_A1_1 == _Enable)&&(tDnrSts->Band_Select_LTE_A1 == __USE))
    249          			{
    250          				ShutdownFunc(PATH_LTE_A1_1, SD_FI_LTE_A1_1);
    251          				ShutdownFunc(PATH_LTE_A1_1, SD_FO_LTE_A1_1);
    252          				ShutdownFunc(PATH_LTE_A1_1, SD_RO_LTE_A1_1);
    253          			}
    254          			
    255          			if((tDnrSts->ShutDownOnOff_LTE_A2_1 == _Enable)&&(tDnrSts->Band_Select_LTE_A2[0] == __USE))
    256          			{
    257          				ShutdownFunc(PATH_LTE_A2_1, SD_FI_LTE_A2_1);
    258          				ShutdownFunc(PATH_LTE_A2_1, SD_FO_LTE_A2_1);
    259          				ShutdownFunc(PATH_LTE_A2_1, SD_RO_LTE_A2_1);
    260          			}
    261          		}
    262          	}
    263          }
    264          
    265          
    266          INT8S MinMaxAttnCheck(INT16S cAttn, INT16S tMax, INT16S tMin)
    267          {
    268          	INT8S retval = cAttn;
    269          	
    270          	if(cAttn > tMax)
    271          	{
    272          		retval = tMax;
    273          	}
    274          	else if(cAttn < tMin)
    275          	{
    276          		retval = tMin;
    277          	}
    278          	
    279          	return retval;
    280          }
    281          
    282          void FrontLEDSet(INT8U tindex, INT8U tstatus)
    283          {
    284          	LEDStatus[tindex%LED_SelMax] = tstatus;
    285          }
    286          
    287          void FrontLEDDisplay(void)
    288          {
    289          	__Dnr_Sts *Sts = tDnrSts;
    290          
    291          	if(tDnrSts->AlmSts.ACFail)
    292          	{
    293          		GreenLED_CDMA		= 0;
    294          		RedLED_CDMA 		= 0;
    295          
    296          		GreenLED_LTE		= 0;
    297          		RedLED_LTE			= 0;	
    298          
    299          		GreenLED_LTE_A1_0	= 0;
    300          		RedLED_LTE_A1_0		= 0;
    301          		
    302          		GreenLED_LTE_A2_0	= 0;
    303          		RedLED_LTE_A2_0		= 0;
    304          
    305          		GreenLED_WCDMA		= 0;
    306          		RedLED_WCDMA		= 0;
    307          		
    308          		GreenLED_LTE_1		= 0;
    309          		RedLED_LTE_1		= 0;	
    310          
    311          		GreenLED_LTE_A1_1	= 0;
    312          		RedLED_LTE_A1_1		= 0;
    313          		
    314          		GreenLED_LTE_A2_1	= 0;
    315          		RedLED_LTE_A2_1		= 0;
    316          	}	
    317          	else
    318          	{
    319          
    320          		if(tDnrSts->LTE15MUse == __NOTUSE)
    321          		{
    322          			if(((Sd_Step[SD_FI_2G]>= 1)&&(Sd_Step[SD_FI_2G]< 30))
    323          				||((Sd_Step[SD_FO_2G]>= 1)&&(Sd_Step[SD_FO_2G]< 30))
    324          				||((Sd_Step[SD_RO_2G]>= 1)&&(Sd_Step[SD_RO_2G]< 30)))
    325          			{
    326          				if(RedLEDFlag_2G)
    327          				{
    328          					GreenLED_CDMA		= 0;
    329          					RedLED_CDMA 		= 1;
    330          				}
    331          				else
    332          				{
    333          					GreenLED_CDMA		= 0;
    334          					RedLED_CDMA 		= 0;
    335          				}
    336          				RedLEDFlag_2G ^= 1;
    337          			}
    338          			else if(((Sd_Step[SD_FI_2G]== 30)||(Sd_Step[SD_FO_2G]== 30)||(Sd_Step[SD_RO_2G]== 30))
    339          				||(tDnrSts->AlmSts.FwdAmpOnOff_2G== Disable))
    340          			{
    341          				GreenLED_CDMA		= 0;
    342          				RedLED_CDMA 		= 1;
    343          			}
    344          			else
    345          			{
    346          				if((tDnrSts->AlmSts.FwdOutLowerLmtFail_2G == Alarm) &&(LimitAlarmCnt[PATH_2G]< AlarmCheckTime)
    347          				&&(LimitAlarmCnt[PATH_2G]> StartAlarmCheckTime))
    348          				{
    349          					if(YellowLEDFlag_2G)
    350          					{
    351          						GreenLED_CDMA		= 1;
    352          						RedLED_CDMA 		= 1;
    353          					}
    354          					else
    355          					{
    356          						GreenLED_CDMA		= 0;
    357          						RedLED_CDMA 		= 0;
    358          					}
    359          					YellowLEDFlag_2G ^= 1;
    360          				}
    361          				else if(((tDnrSts->AlmSts.FwdOutLowerLmtFail_2G == Alarm) &&(LimitAlarmCnt[PATH_2G]== AlarmCheckTime))
    362          					||((tDnrSts->AlmSts.OverInAlarm_CDMALTE == Alarm)&&(CurrAlarm.OverInAlarm_CDMALTE_1 == Alarm))
    363          
    364          					||(tDnrSts->AlmSts.FwdInUpperLmtFail_2G == Alarm))
    365          				{
    366          					GreenLED_CDMA		= 1;
    367          					RedLED_CDMA 		= 1;
    368          				}
    369          				else
    370          				{
    371          					GreenLED_CDMA		= 1;  
    372          					RedLED_CDMA 		= 0; 
    373          				}
    374          			}
    375          		}
    376          		else
    377          		{
    378          			GreenLED_CDMA		= 0;  
    379          			RedLED_CDMA 		= 0; 
    380          		}		
    381          		
    382          
    383          ///////////////  LTE
    384          		if(Sts->FemtocellUseOnOff.LTE == __NOTUSE)
    385          		{
    386          			if(((Sd_Step[SD_FI_LTE]>= 1)&&(Sd_Step[SD_FI_LTE]< 30))
    387          				||((Sd_Step[SD_FO_LTE]>= 1)&&(Sd_Step[SD_FO_LTE]< 30))
    388          				||((Sd_Step[SD_RO_LTE]>= 1)&&(Sd_Step[SD_RO_LTE]< 30)))
    389          			{
    390          				if(RedLEDFlag_LTE)
    391          				{
    392          					GreenLED_LTE	= 0;
    393          					RedLED_LTE		= 1;
    394          				}
    395          				else
    396          				{
    397          					GreenLED_LTE	= 0;
    398          					RedLED_LTE 		= 0;
    399          				}
    400          				RedLEDFlag_LTE ^= 1;
    401          			}
    402          			else if(((Sd_Step[SD_FI_LTE]== 30)||(Sd_Step[SD_FO_LTE]== 30)||(Sd_Step[SD_RO_LTE]== 30))
    403          				||(tDnrSts->AlmSts.FwdAmpOnOff_LTE== Disable))
    404          			{
    405          				GreenLED_LTE		= 0;
    406          				RedLED_LTE 			= 1;
    407          			}
    408          			else
    409          			{
    410          				if((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE == Alarm) &&(LimitAlarmCnt[PATH_LTE]< AlarmCheckTime)
    411          					&&(LimitAlarmCnt[PATH_LTE]> StartAlarmCheckTime))
    412          				{
    413          					if(YellowLEDFlag_LTE)
    414          					{
    415          						GreenLED_LTE	= 1;
    416          						RedLED_LTE 		= 1;
    417          					}
    418          					else
    419          					{
    420          						GreenLED_LTE	= 0;
    421          						RedLED_LTE 		= 0;
    422          					}
    423          					YellowLEDFlag_LTE ^= 1;
    424          				}
    425          				else if(((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE == Alarm) &&(LimitAlarmCnt[PATH_LTE]== AlarmCheckTime))
    426          					||((tDnrSts->AlmSts.OverInAlarm_CDMALTE == Alarm)&&(CurrAlarm.OverInAlarm_CDMALTE_2 == Alarm))
    427          					||(tDnrSts->AlmSts.FwdInUpperLmtFail_LTE == Alarm))
    428          				{
    429          					GreenLED_LTE	= 1;
    430          					RedLED_LTE 		= 1;
    431          				}
    432          				else
    433          				{
    434          					GreenLED_LTE	= 1;  
    435          					RedLED_LTE 		= 0; 
    436          				}
    437          			}
    438          		}
    439          		else
    440          		{
    441          			GreenLED_LTE	= 0;  
    442          			RedLED_LTE 		= 0; 
    443          		}
    444          ///////////////  LTE_A1
    445          		if(tDnrSts->Band_Select_LTE_A1 == __NOTUSE)
    446          		{
    447          			GreenLED_LTE_A1_0	= 0;  
    448          			RedLED_LTE_A1_0		= 0; 
    449          		}
    450          		else if((Sts->FemtocellUseOnOff.LTE_A1 == __NOTUSE))
    451          		{
    452          			if(((Sd_Step[SD_FI_LTE_A1]>= 1)&&(Sd_Step[SD_FI_LTE_A1]< 30))
    453          				||((Sd_Step[SD_FO_LTE_A1]>= 1)&&(Sd_Step[SD_FO_LTE_A1]< 30))
    454          				||((Sd_Step[SD_RO_LTE_A1]>= 1)&&(Sd_Step[SD_RO_LTE_A1]< 30)))
    455          			{
    456          				if(RedLEDFlag_LTE_A1)
    457          				{
    458          					GreenLED_LTE_A1_0	= 0;
    459          					RedLED_LTE_A1_0		= 1;
    460          				}
    461          				else
    462          				{
    463          					GreenLED_LTE_A1_0	= 0;
    464          					RedLED_LTE_A1_0		= 0;
    465          				}
    466          				RedLEDFlag_LTE_A1 ^= 1;
    467          			}
    468          			else if(((Sd_Step[SD_FI_LTE_A1]== 30)||(Sd_Step[SD_FO_LTE_A1]== 30)||(Sd_Step[SD_RO_LTE_A1]== 30))
    469          				||(tDnrSts->AlmSts.FwdAmpOnOff_LTE_A1== Disable))
    470          			{
    471          				GreenLED_LTE_A1_0		= 0;
    472          				RedLED_LTE_A1_0			= 1;
    473          			}
    474          			else
    475          			{
    476          				if((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE_A1 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A1]< AlarmCheckTime)
    477          				&&(LimitAlarmCnt[PATH_LTE_A1]> StartAlarmCheckTime))
    478          				{
    479          					if(YellowLEDFlag_LTE_A1)
    480          					{
    481          						GreenLED_LTE_A1_0	= 1;
    482          						RedLED_LTE_A1_0		= 1;
    483          					}
    484          					else
    485          					{
    486          						GreenLED_LTE_A1_0	= 0;
    487          						RedLED_LTE_A1_0		= 0;
    488          					}
    489          					YellowLEDFlag_LTE_A1 ^= 1;
    490          				}
    491          				else if(((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE_A1 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A1]== AlarmCheckTime))
    492          //					||(tDnrSts->AlmSts.OverInAlarm_LTE_A		== Alarm)
    493          					||((tDnrSts->AlmSts.OverInAlarm_LTE_A == Alarm)&&(CurrAlarm.OverInAlarm_LTE_A1 == Alarm))
    494          					||(tDnrSts->AlmSts.FwdInUpperLmtFail_LTE_A1 == Alarm))
    495          				{
    496          					GreenLED_LTE_A1_0	= 1;
    497          					RedLED_LTE_A1_0		= 1;
    498          				}
    499          				else
    500          				{
    501          					GreenLED_LTE_A1_0	= 1;  
    502          					RedLED_LTE_A1_0		= 0; 
    503          				}
    504          			}
    505          		}
    506          		else
    507          		{
    508          			GreenLED_LTE_A1_0	= 0;  
    509          			RedLED_LTE_A1_0		= 0; 
    510          		}		
    511          ///////////////
    512          ///////////////  LTE_A2
    513          		if(tDnrSts->Band_Select_LTE_A2[0] == __NOTUSE)
    514          		{
    515          			GreenLED_LTE_A2_0	= 0;  
    516          			RedLED_LTE_A2_0 	= 0; 
    517          		}
    518          		else if((Sts->FemtocellUseOnOff.LTE_A2 == __NOTUSE))
    519          		{
    520          			if(((Sd_Step[SD_FI_LTE_A2]>= 1)&&(Sd_Step[SD_FI_LTE_A2]< 30))
    521          				||((Sd_Step[SD_FO_LTE_A2]>= 1)&&(Sd_Step[SD_FO_LTE_A2]< 30))
    522          				||((Sd_Step[SD_RO_LTE_A2]>= 1)&&(Sd_Step[SD_RO_LTE_A2]< 30)))
    523          			{
    524          				if(RedLEDFlag_LTE_A2)
    525          				{
    526          					GreenLED_LTE_A2_0	= 0;
    527          					RedLED_LTE_A2_0 	= 1;
    528          				}
    529          				else
    530          				{
    531          					GreenLED_LTE_A2_0	= 0;
    532          					RedLED_LTE_A2_0 	= 0;
    533          				}
    534          				RedLEDFlag_LTE_A2 ^= 1;
    535          			}
    536          			else if(((Sd_Step[SD_FI_LTE_A2]== 30)||(Sd_Step[SD_FO_LTE_A2]== 30)||(Sd_Step[SD_RO_LTE_A2]== 30))
    537          				||(tDnrSts->AlmSts.FwdAmpOnOff_LTE_A2== Disable))
    538          			{
    539          				GreenLED_LTE_A2_0		= 0;
    540          				RedLED_LTE_A2_0 		= 1;
    541          			}
    542          			else
    543          			{
    544          				if((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE_A2 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A2]< AlarmCheckTime)
    545          				&&(LimitAlarmCnt[PATH_LTE_A2]> StartAlarmCheckTime))
    546          				{
    547          					if(YellowLEDFlag_LTE_A2)
    548          					{
    549          						GreenLED_LTE_A2_0	= 1;
    550          						RedLED_LTE_A2_0 	= 1;
    551          					}
    552          					else
    553          					{
    554          						GreenLED_LTE_A2_0	= 0;
    555          						RedLED_LTE_A2_0 	= 0;
    556          					}
    557          					YellowLEDFlag_LTE_A2 ^= 1;
    558          				}
    559          				else if(((tDnrSts->AlmSts.FwdOutLowerLmtFail_LTE_A2 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A2]== AlarmCheckTime))
    560          //					||(tDnrSts->AlmSts.OverInAlarm_LTE_A		== Alarm)
    561          
    562          					||((tDnrSts->AlmSts.OverInAlarm_LTE_A == Alarm)&&(CurrAlarm.OverInAlarm_LTE_A2	== Alarm))
    563          
    564          					||(tDnrSts->AlmSts.FwdInUpperLmtFail_LTE_A2 == Alarm))
    565          				{
    566          					GreenLED_LTE_A2_0	= 1;
    567          					RedLED_LTE_A2_0 	= 1;
    568          				}
    569          				else
    570          				{
    571          					GreenLED_LTE_A2_0	= 1;  
    572          					RedLED_LTE_A2_0 	= 0; 
    573          				}
    574          			}
    575          		}
    576          		else
    577          		{
    578          			GreenLED_LTE_A2_0	= 0;  
    579          			RedLED_LTE_A2_0 	= 0; 
    580          		}		
    581          ///////////////
    582          ///////////////  WCDMA
    583          		{
    584          			if(((Sd_Step[SD_FI_3G]>= 1)&&(Sd_Step[SD_FI_3G]< 30))
    585          				||((Sd_Step[SD_FO_3G]>= 1)&&(Sd_Step[SD_FO_3G]< 30))
    586          				||((Sd_Step[SD_RO_3G]>= 1)&&(Sd_Step[SD_RO_3G]< 30)))
    587          			{
    588          				if(RedLEDFlag_3G)
    589          				{
    590          					GreenLED_WCDMA	= 0;
    591          					RedLED_WCDMA 	= 1;
    592          				}
    593          				else
    594          				{
    595          					GreenLED_WCDMA	= 0;
    596          					RedLED_WCDMA 	= 0;
    597          				}
    598          				RedLEDFlag_3G ^= 1;
    599          			}
    600          			else if(((Sd_Step[SD_FI_3G]== 30)||(Sd_Step[SD_FO_3G]== 30)||(Sd_Step[SD_RO_3G]== 30))
    601          				||(tDnrSts->AlmSts.FwdAmpOnOff_3G== Disable))
    602          			{
    603          				GreenLED_WCDMA		= 0;
    604          				RedLED_WCDMA 		= 1;
    605          			}
    606          			else
    607          			{
    608          				if((tDnrSts->AlmSts.FwdOutLowerLmtFail_3G == Alarm) &&(LimitAlarmCnt[PATH_3G]< AlarmCheckTime)
    609          				&&(LimitAlarmCnt[PATH_3G]> StartAlarmCheckTime))
    610          				{
    611          					if(YellowLEDFlag_3G)
    612          					{
    613          						GreenLED_WCDMA	= 1;
    614          						RedLED_WCDMA 	= 1;
    615          					}
    616          					else
    617          					{
    618          						GreenLED_WCDMA	= 0;
    619          						RedLED_WCDMA 	= 0;
    620          					}
    621          					YellowLEDFlag_3G ^= 1;
    622          				}
    623          				else if(((tDnrSts->AlmSts.FwdOutLowerLmtFail_3G == Alarm) &&(LimitAlarmCnt[PATH_3G]== AlarmCheckTime))
    624          					||(tDnrSts->AlmSts.OverInAlarm_3G		== Alarm)
    625          					||(tDnrSts->AlmSts.FwdInUpperLmtFail_3G == Alarm))
    626          				{
    627          					GreenLED_WCDMA	= 1;
    628          					RedLED_WCDMA 	= 1;
    629          				}
    630          				else
    631          				{
    632          					GreenLED_WCDMA	= 1;  
    633          					RedLED_WCDMA 	= 0; 
    634          				}
    635          			}
    636          		}
    637          
    638          ///////////////
    639          		if(iRepeaterType == _TRIO_MM)
    640          		{
    641          			if((Sts->FemtocellUseOnOff.LTE_1 == __NOTUSE))
    642          			{
    643          				if(((Sd_Step[SD_FI_LTE_1]>= 1)&&(Sd_Step[SD_FI_LTE_1]< 30))
    644          					||((Sd_Step[SD_FO_LTE_1]>= 1)&&(Sd_Step[SD_FO_LTE_1]< 30))
    645          					||((Sd_Step[SD_RO_LTE_1]>= 1)&&(Sd_Step[SD_RO_LTE_1]< 30)))
    646          				{
    647          					if(RedLEDFlag_LTE_1)
    648          					{
    649          						GreenLED_LTE_1	= 0;
    650          						RedLED_LTE_1		= 1;
    651          					}
    652          					else
    653          					{
    654          						GreenLED_LTE_1	= 0;
    655          						RedLED_LTE_1		= 0;
    656          					}
    657          					RedLEDFlag_LTE_1 ^= 1;
    658          				}
    659          				else if(((Sd_Step[SD_FI_LTE_1]== 30)||(Sd_Step[SD_FO_LTE_1]== 30)||(Sd_Step[SD_RO_LTE_1]== 30))
    660          					||(tDnrSts->AlmSts.FwdAmp1OnOff_LTE== Disable))
    661          				{
    662          					GreenLED_LTE_1		= 0;
    663          					RedLED_LTE_1			= 1;
    664          				}
    665          				else
    666          				{
    667          					if((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE == Alarm) &&(LimitAlarmCnt[PATH_LTE_1]< AlarmCheckTime)
    668          						&&(LimitAlarmCnt[PATH_LTE_1]> StartAlarmCheckTime))
    669          					{
    670          						if(YellowLEDFlag_LTE_1)
    671          						{
    672          							GreenLED_LTE_1	= 1;
    673          							RedLED_LTE_1	= 1;
    674          						}
    675          						else
    676          						{
    677          							GreenLED_LTE_1	= 0;
    678          							RedLED_LTE_1		= 0;
    679          						}
    680          						YellowLEDFlag_LTE_1 ^= 1;
    681          					}
    682          					else if(((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE == Alarm) &&(LimitAlarmCnt[PATH_LTE_1]== AlarmCheckTime))
    683          						||(CurrAlarm.OverInAlarm_LTE_1				== Alarm)
    684          						||(tDnrSts->AlmSts.Fwd1InUpperLmtFail_LTE 	== Alarm))
    685          					{
    686          						GreenLED_LTE_1		= 1;
    687          						RedLED_LTE_1		= 1;
    688          					}
    689          					else
    690          					{
    691          						GreenLED_LTE_1		= 1;  
    692          						RedLED_LTE_1		= 0; 
    693          					}
    694          				}
    695          			}
    696          			else
    697          			{
    698          				GreenLED_LTE_1		= 0;  
    699          				RedLED_LTE_1		= 0; 
    700          			}
    701          
    702          	///////////////  LTE_A2
    703          			if(tDnrSts->Band_Select_LTE_A1 == __NOTUSE)
    704          			{
    705          				GreenLED_LTE_A1_1	= 0;  
    706          				RedLED_LTE_A1_1 	= 0; 
    707          			}
    708          			else if((Sts->FemtocellUseOnOff.LTE_A1_1 == __NOTUSE))
    709          			{
    710          				if(((Sd_Step[SD_FI_LTE_A1_1]>= 1)&&(Sd_Step[SD_FI_LTE_A1_1]< 30))
    711          					||((Sd_Step[SD_FO_LTE_A1_1]>= 1)&&(Sd_Step[SD_FO_LTE_A1_1]< 30))
    712          					||((Sd_Step[SD_RO_LTE_A1_1]>= 1)&&(Sd_Step[SD_RO_LTE_A1_1]< 30)))
    713          				{
    714          					if(RedLEDFlag_LTE_A1_1)
    715          					{
    716          						GreenLED_LTE_A1_1	= 0;
    717          						RedLED_LTE_A1_1 	= 1;
    718          					}
    719          					else
    720          					{
    721          						GreenLED_LTE_A1_1	= 0;
    722          						RedLED_LTE_A1_1 	= 0;
    723          					}
    724          					RedLEDFlag_LTE_A1_1 ^= 1;
    725          				}
    726          				else if(((Sd_Step[SD_FI_LTE_A1_1]== 30)||(Sd_Step[SD_FO_LTE_A1_1]== 30)||(Sd_Step[SD_RO_LTE_A1_1]== 30))
    727          					||(tDnrSts->AlmSts.FwdAmp1OnOff_LTE_A1== Disable))
    728          				{
    729          					GreenLED_LTE_A1_1		= 0;
    730          					RedLED_LTE_A1_1 		= 1;
    731          				}
    732          				else
    733          				{
    734          					if((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE_A1 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A1_1]< AlarmCheckTime)
    735          					&&(LimitAlarmCnt[PATH_LTE_A1_1]> StartAlarmCheckTime))
    736          					{
    737          						if(YellowLEDFlag_LTE_A1_1)
    738          						{
    739          							GreenLED_LTE_A1_1	= 1;
    740          							RedLED_LTE_A1_1 	= 1;
    741          						}
    742          						else
    743          						{
    744          							GreenLED_LTE_A1_1	= 0;
    745          							RedLED_LTE_A1_1 	= 0;
    746          						}
    747          						YellowLEDFlag_LTE_A1_1 ^= 1;
    748          					}
    749          					else if(((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE_A1 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A1_1]== AlarmCheckTime))
    750          						||((tDnrSts->AlmSts.OverInAlarm_LTE_A == Alarm)&&(CurrAlarm.OverInAlarm_LTE_A1_1 == Alarm))
    751          						||(tDnrSts->AlmSts.Fwd1InUpperLmtFail_LTE_A1 == Alarm))
    752          					{
    753          						GreenLED_LTE_A1_1	= 1;
    754          						RedLED_LTE_A1_1 	= 1;
    755          					}
    756          					else
    757          					{
    758          						GreenLED_LTE_A1_1	= 1;  
    759          						RedLED_LTE_A1_1 	= 0; 
    760          					}
    761          				}
    762          			}
    763          			else
    764          			{
    765          				GreenLED_LTE_A1_1	= 0;  
    766          				RedLED_LTE_A1_1 	= 0; 
    767          			}		
    768          	///////////////
    769          	///////////////  LTE_A2
    770          			if(tDnrSts->Band_Select_LTE_A2[0] == __NOTUSE)
    771          			{
    772          				GreenLED_LTE_A2_1	= 0;  
    773          				RedLED_LTE_A2_1 	= 0; 
    774          			}
    775          			else if((Sts->FemtocellUseOnOff.LTE_A2_1 == __NOTUSE))
    776          			{
    777          				if(((Sd_Step[SD_FI_LTE_A2_1]>= 1)&&(Sd_Step[SD_FI_LTE_A2_1]< 30))
    778          					||((Sd_Step[SD_FO_LTE_A2_1]>= 1)&&(Sd_Step[SD_FO_LTE_A2_1]< 30))
    779          					||((Sd_Step[SD_RO_LTE_A2_1]>= 1)&&(Sd_Step[SD_RO_LTE_A2_1]< 30)))
    780          				{
    781          					if(RedLEDFlag_LTE_A2_1)
    782          					{
    783          						GreenLED_LTE_A2_1	= 0;
    784          						RedLED_LTE_A2_1 	= 1;
    785          					}
    786          					else
    787          					{
    788          						GreenLED_LTE_A2_1	= 0;
    789          						RedLED_LTE_A2_1 	= 0;
    790          					}
    791          					RedLEDFlag_LTE_A2_1 ^= 1;
    792          				}
    793          				else if(((Sd_Step[SD_FI_LTE_A2_1]== 30)||(Sd_Step[SD_FO_LTE_A2_1]== 30)||(Sd_Step[SD_RO_LTE_A2_1]== 30))
    794          					||(tDnrSts->AlmSts.FwdAmp1OnOff_LTE_A2 == Disable))
    795          				{
    796          					GreenLED_LTE_A2_1		= 0;
    797          					RedLED_LTE_A2_1 		= 1;
    798          				}
    799          				else
    800          				{
    801          					if((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE_A2 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A2_1]< AlarmCheckTime)
    802          					&&(LimitAlarmCnt[PATH_LTE_A2_1]> StartAlarmCheckTime))
    803          					{
    804          						if(YellowLEDFlag_LTE_A2_1)
    805          						{
    806          							GreenLED_LTE_A2_1	= 1;
    807          							RedLED_LTE_A2_1 	= 1;
    808          						}
    809          						else
    810          						{
    811          							GreenLED_LTE_A2_1	= 0;
    812          							RedLED_LTE_A2_1 	= 0;
    813          						}
    814          						YellowLEDFlag_LTE_A2_1 ^= 1;
    815          					}
    816          					else if(((tDnrSts->AlmSts.Fwd1OutLowerLmtFail_LTE_A2 == Alarm) &&(LimitAlarmCnt[PATH_LTE_A2_1]== AlarmCheckTime))
    817          						||((tDnrSts->AlmSts.OverInAlarm_LTE_A == Alarm)&&(CurrAlarm.OverInAlarm_LTE_A2_1 == Alarm))
    818          						||(tDnrSts->AlmSts.Fwd1InUpperLmtFail_LTE_A2 == Alarm))
    819          					{
    820          						GreenLED_LTE_A2_1	= 1;
    821          						RedLED_LTE_A2_1 	= 1;
    822          					}
    823          					else
    824          					{
    825          						GreenLED_LTE_A2_1	= 1;  
    826          						RedLED_LTE_A2_1 	= 0; 
    827          					}
    828          				}
    829          			}
    830          			else
    831          			{
    832          				GreenLED_LTE_A2_1	= 0;  
    833          				RedLED_LTE_A2_1 	= 0; 
    834          			}
    835          		}
    836          	}
    837          }
    838          
    839          void ADC_Select(INT8U Index)
    840          {
    841          	switch(Index)
    842          	{
    843          		case 0 :
    844          			ADC_Sel0	= 0;
    845          			ADC_Sel1	= 0;
    846          		break;
    847          
    848          		case 1 :
    849          			ADC_Sel0	= 1;
    850          			ADC_Sel1	= 0;
    851          		break;
    852          		
    853          		case 2 :
    854          			ADC_Sel0	= 0;
    855          			ADC_Sel1	= 1;
    856          		break;
    857          
    858          		case 3 :
    859          			ADC_Sel0	= 1;
    860          			ADC_Sel1	= 1;
    861          		break;
    862          	}
    863          }
    864          
    865          void ChangeLvltoValue(INT16S CurLvl, INT16S *PreLvl, INT16S *Cnt, INT16S *Value, INT8S MaxCnt)
    866          {
    867          	if(*Value != CurLvl)
    868          	{
    869          		if(*PreLvl == CurLvl)
    870          		{
    871          			*Cnt = *Cnt + 1;
    872          			if(*Cnt >= MaxCnt)
    873          			{
    874          				*Value = CurLvl;
    875          				*Cnt = 0;
    876          			}
    877          		}
    878          		else
    879          		{
    880          			*PreLvl = CurLvl;
    881          			*Cnt = 0;
    882          		}
    883          	}
    884          	else *Cnt = 0;
    885          }
    886          
    887          INT8S DnrReferToTable(INT8U TblID,INT8U AttTemp,INT8U tAttAccuOnOff)
    888          {
    889          	INT8S tLocation = 0;
    890          
    891          	INT8S tAttTemp = 0;
    892          	INT8S AccuAttTemp = 0;
    893          	INT8S tIndex = 0;
    894          
    895          	tLocation = AttnTableLocation(TblID);
    896          	tIndex = TableIndex(TblID);
    897          
    898          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    899          	if(tAttAccuOnOff == Disable) return AttTemp;
    900          
    901          	
    902          	if(tLocation == _SvrAttn_Location)
    903          	{
    904          		AccuAttTemp = vEE_BACK1->SvrAttnTbl[tIndex].Data[AttMaxLimit- AttTemp];
    905          
    906          	}
    907          	else
    908          	{
    909          		AccuAttTemp = vSYS_TABLE->DnrAttnTbl[tIndex].Data[AttMaxLimit- AttTemp];
    910          		if(DnrAttnTblAlarm[tIndex])AccuAttTemp = 0;
    911          	}
    912          	
    913          	tAttTemp = AttTemp + AccuAttTemp;
    914          
    915          	tAttTemp = MinMaxAttnCheck(tAttTemp, DIGATTENMAX,ATTENMIN);
    916          	return tAttTemp;
    917          }
    918          
    919          void AttAccuChange(void)
    920          {
    921          	__Dnr_Sts  *Sts = tDnrSts;
    922          
    923          	INT8S AttTemp = 0;
    924          	
    925          	//////////////////////////////////CDMA
    926          	
    927          	AttTemp = Sts->FwdAttn1_2G;
    928          	Sts->AttValue.FwdAttn1_2G = Sts->CurrFwdAttn1_2G =DnrReferToTable(Index_FwdAttn1_2G,AttTemp,tAttAccu);
    929          
    930          	AttTemp = Sts->FwdAttn2_2G + Sts->FwdGainOffset_2G + Sts->FwdTemp_2G;
    931          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    932          	Sts->AttValue.FwdAttn2_2G = Sts->CurrFwdAttn2_2G =DnrReferToTable(Index_FwdAttn2_2G,AttTemp,tAttAccu);
    933          
    934          	AttTemp = Sts->RvsAttn1_2G + Sts->RvsTemp_2G + Sts->RvsGainOffset_2G + Sts->AttOffset.RvsAttn1_2G;
    935          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    936          	Sts->AttValue.RvsAttn1_2G = Sts->CurrRvsAttn1_2G = DnrReferToTable(Index_RvsAttn1_2G,AttTemp,tAttAccu);
    937          
    938          	AttTemp = Sts->RvsAttn2_2G;
    939          	Sts->AttValue.RvsAttn2_2G = Sts->CurrRvsAttn2_2G = DnrReferToTable(Index_RvsAttn2_2G,AttTemp,tAttAccu);
    940          	
    941          	AttTemp = Sts->RvsAttn3_2G;
    942          	Sts->AttValue.RvsAttn3_2G = Sts->CurrRvsAttn3_2G = DnrReferToTable(Index_RvsAttn3_2G,AttTemp,tAttAccu);
    943          	
    944          //////////////////////////////////LTE
    945          
    946          	AttTemp = Sts->FwdAttn1_LTE;
    947          	Sts->AttValue.FwdAttn1_LTE = Sts->CurrFwdAttn1_LTE = DnrReferToTable(Index_FwdAttn1_LTE,AttTemp,tAttAccu);
    948          
    949          	AttTemp = Sts->FwdAttn2_LTE + Sts->FwdGainOffset_LTE + Sts->FwdTemp_LTE ;
    950          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    951          	Sts->AttValue.FwdAttn2_LTE = Sts->CurrFwdAttn2_LTE = DnrReferToTable(Index_FwdAttn2_LTE,AttTemp,tAttAccu);
    952          
    953          
    954          	AttTemp = Sts->RvsAttn1_LTE + Sts->RvsTemp_LTE + Sts->RvsGainOffset_LTE;
    955          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    956          	Sts->AttValue.RvsAttn1_LTE = Sts->CurrRvsAttn1_LTE = DnrReferToTable(Index_RvsAttn1_LTE,AttTemp,tAttAccu);
    957          
    958          	AttTemp = Sts->RvsAttn2_LTE; 
    959          	Sts->AttValue.RvsAttn2_LTE = Sts->CurrRvsAttn2_LTE = DnrReferToTable(Index_RvsAttn2_LTE,AttTemp,tAttAccu);
    960          	
    961          	AttTemp = Sts->RvsAttn3_LTE;
    962          	Sts->AttValue.RvsAttn3_LTE = Sts->CurrRvsAttn3_LTE = DnrReferToTable(Index_RvsAttn3_LTE,AttTemp,tAttAccu);
    963          
    964          	//////////////////// CDMA/LTE Common
    965          	AttTemp = Sts->FwdAttn1_CDMALTE;
    966          	Sts->AttValue.FwdAttn1_CDMALTE = Sts->CurrFwdAttn1_CDMALTE = DnrReferToTable(Index_FwdAttn1_CDMALTE,AttTemp,tAttAccu);
    967          
    968          	AttTemp = Sts->RvsAttn1_CDMALTE;
    969          	Sts->AttValue.RvsAttn1_CDMALTE = Sts->CurrRvsAttn1_CDMALTE = DnrReferToTable(Index_RvsAttn1_CDMALTE,AttTemp,tAttAccu);
    970          
    971          	//////////////////// LTE-A1
    972          	AttTemp = Sts->FwdAttn1_LTE_A1;
    973          	Sts->AttValue.FwdAttn1_LTE_A1 = Sts->CurrFwdAttn1_LTE_A1 = DnrReferToTable(Index_FwdAttn1_LTE_A1,AttTemp,tAttAccu);
    974          	
    975          
    976          	AttTemp = Sts->FwdAttn2_LTE_A1 + Sts->FwdGainOffset_LTE_A1 + Sts->FwdTemp_LTE_A1;
    977          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    978          	Sts->AttValue.FwdAttn2_LTE_A1 = Sts->CurrFwdAttn2_LTE_A1 = DnrReferToTable(Index_FwdAttn2_LTE_A1,AttTemp,tAttAccu);
    979          	
    980          
    981          	AttTemp = Sts->RvsAttn1_LTE_A1 + Sts->RvsGainOffset_LTE_A1 + Sts->RvsTemp_LTE_A1;
    982          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
    983          	Sts->AttValue.RvsAttn1_LTE_A1 = Sts->CurrRvsAttn1_LTE_A1 = DnrReferToTable(Index_RvsAttn1_LTE_A1,AttTemp,tAttAccu);
    984          	
    985          	AttTemp = Sts->RvsAttn2_LTE_A1;
    986          	Sts->AttValue.RvsAttn2_LTE_A1 = Sts->CurrRvsAttn2_LTE_A1 = DnrReferToTable(Index_RvsAttn2_LTE_A1,AttTemp,tAttAccu);
    987          	
    988          
    989          	AttTemp = Sts->RvsAttn3_LTE_A1;
    990          	Sts->AttValue.RvsAttn3_LTE_A1 = Sts->CurrRvsAttn3_LTE_A1 = DnrReferToTable(Index_RvsAttn3_LTE_A1,AttTemp,tAttAccu);
    991          
    992          ////////////////////////////////////////////////////////////////////////////
    993          	//////////////////// LTE-A2
    994          	AttTemp = Sts->FwdAttn1_LTE_A2;
    995          	Sts->AttValue.FwdAttn1_LTE_A2 = Sts->CurrFwdAttn1_LTE_A2 = DnrReferToTable(Index_FwdAttn1_LTE_A2,AttTemp,tAttAccu);
    996          	
    997          
    998          	AttTemp = Sts->FwdAttn2_LTE_A2 + Sts->FwdGainOffset_LTE_A2 + Sts->FwdTemp_LTE_A2;
    999          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1000          	Sts->AttValue.FwdAttn2_LTE_A2 = Sts->CurrFwdAttn2_LTE_A2 = DnrReferToTable(Index_FwdAttn2_LTE_A2,AttTemp,tAttAccu);
   1001          	
   1002          
   1003          	AttTemp = Sts->RvsAttn1_LTE_A2+ Sts->RvsGainOffset_LTE_A2 + Sts->RvsTemp_LTE_A2;
   1004          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1005          	Sts->AttValue.RvsAttn1_LTE_A2 = Sts->CurrRvsAttn1_LTE_A2 = DnrReferToTable(Index_RvsAttn1_LTE_A2,AttTemp,tAttAccu);
   1006          	
   1007          	AttTemp = Sts->RvsAttn2_LTE_A2;
   1008          	Sts->AttValue.RvsAttn2_LTE_A2 = Sts->CurrRvsAttn2_LTE_A2 = DnrReferToTable(Index_RvsAttn2_LTE_A2,AttTemp,tAttAccu);
   1009          	
   1010          	AttTemp = Sts->RvsAttn3_LTE_A2;
   1011          	Sts->AttValue.RvsAttn3_LTE_A2 = Sts->CurrRvsAttn3_LTE_A2 = DnrReferToTable(Index_RvsAttn3_LTE_A2,AttTemp,tAttAccu);
   1012          
   1013          	//////////////////// LTE-A Common
   1014          	AttTemp = Sts->FwdAttn1_LTE_A;
   1015          	Sts->AttValue.FwdAttn1_LTE_A = Sts->CurrFwdAttn1_LTE_A = DnrReferToTable(Index_FwdAttn1_LTE_A,AttTemp,tAttAccu);
   1016          	
   1017          	AttTemp = Sts->RvsAttn1_LTE_A;
   1018          	Sts->AttValue.RvsAttn1_LTE_A = Sts->CurrRvsAttn1_LTE_A = DnrReferToTable(Index_RvsAttn1_LTE_A,AttTemp,tAttAccu);
   1019          	
   1020          	//////////////////////////////////WCDMA
   1021          	AttTemp = Sts->FwdAttn1_3G;
   1022          	Sts->AttValue.FwdAttn1_3G = Sts->CurrFwdAttn1_3G = DnrReferToTable(Index_FwdAttn1_3G,AttTemp,tAttAccu);
   1023          	
   1024          
   1025          	AttTemp = Sts->FwdAttn2_3G + Sts->FwdGainOffset_3G + Sts->FwdTemp_3G;
   1026          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1027          	Sts->AttValue.FwdAttn2_3G = Sts->CurrFwdAttn2_3G = DnrReferToTable(Index_FwdAttn2_3G,AttTemp,tAttAccu);
   1028          
   1029          
   1030          	AttTemp = Sts->RvsAttn1_3G;
   1031          	Sts->AttValue.RvsAttn1_3G = Sts->CurrRvsAttn1_3G = DnrReferToTable(Index_RvsAttn1_3G,AttTemp,tAttAccu);
   1032          
   1033          
   1034          	AttTemp = Sts->RvsAttn2_3G;
   1035          	Sts->AttValue.RvsAttn2_3G = Sts->CurrRvsAttn2_3G = DnrReferToTable(Index_RvsAttn2_3G,AttTemp,tAttAccu);
   1036          	
   1037          
   1038          	AttTemp = Sts->RvsAttn3_3G + Sts->RvsGainOffset_3G + Sts->RvsTemp_3G;
   1039          	AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1040          	Sts->AttValue.RvsAttn3_3G = Sts->CurrRvsAttn3_3G = DnrReferToTable(Index_RvsAttn3_3G,AttTemp,tAttAccu);
   1041          	
   1042          
   1043          	AttTemp = Sts->RvsAttn4_3G;
   1044          	Sts->AttValue.RvsAttn4_3G = Sts->CurrRvsAttn4_3G = DnrReferToTable(Index_RvsAttn4_3G,AttTemp,tAttAccu);
   1045          	
   1046          	if(iRepeaterType == _TRIO_MM)
   1047          	{
   1048          		//////////////////// LTE1
   1049          		AttTemp = Sts->Fwd1Attn1_LTE;
   1050          		Sts->Att1Value.Fwd1Attn1_LTE = Sts->CurrFwd1Attn1_LTE = DnrReferToTable(Index_Fwd1Attn1_LTE,AttTemp,tAttAccu);
   1051          
   1052          		AttTemp = Sts->Fwd1Attn2_LTE + Sts->Fwd1GainOffset_LTE + Sts->Fwd1Temp_LTE;
   1053          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1054          		Sts->Att1Value.Fwd1Attn2_LTE = Sts->CurrFwd1Attn2_LTE = DnrReferToTable(Index_Fwd1Attn2_LTE,AttTemp,tAttAccu);
   1055          
   1056          		AttTemp = Sts->Rvs1Attn1_LTE;
   1057          		Sts->Att1Value.Rvs1Attn1_LTE = Sts->CurrRvs1Attn1_LTE = DnrReferToTable(Index_Rvs1Attn1_LTE,AttTemp,tAttAccu);
   1058          
   1059          
   1060          		AttTemp = Sts->Rvs1Attn2_LTE + Sts->Rvs1GainOffset_LTE + Sts->Rvs1Temp_LTE;
   1061          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1062          		Sts->Att1Value.Rvs1Attn2_LTE = Sts->CurrRvs1Attn2_LTE = DnrReferToTable(Index_Rvs1Attn2_LTE,AttTemp,tAttAccu);
   1063          
   1064          		AttTemp = Sts->Rvs1Attn3_LTE;
   1065          		Sts->Att1Value.Rvs1Attn3_LTE = Sts->CurrRvs1Attn3_LTE = DnrReferToTable(Index_Rvs1Attn3_LTE,AttTemp,tAttAccu);
   1066          
   1067          		AttTemp = Sts->Rvs1Attn4_LTE;
   1068          		Sts->Att1Value.Rvs1Attn4_LTE = Sts->CurrRvs1Attn4_LTE = DnrReferToTable(Index_Rvs1Attn4_LTE,AttTemp,tAttAccu);
   1069          		
   1070          
   1071          		//////////////////// LTE-A1 
   1072          		AttTemp = Sts->Fwd1Attn1_LTE_A1;
   1073          		Sts->Att1Value.Fwd1Attn1_LTE_A1 = Sts->CurrFwd1Attn1_LTE_A1 = DnrReferToTable(Index_Fwd1Attn1_LTE_A1,AttTemp,tAttAccu);
   1074          		
   1075          		AttTemp = Sts->Fwd1Attn2_LTE_A1 + Sts->Fwd1GainOffset_LTE_A1 + Sts->Fwd1Temp_LTE_A1;
   1076          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1077          		Sts->Att1Value.Fwd1Attn2_LTE_A1 = Sts->CurrFwd1Attn2_LTE_A1 = DnrReferToTable(Index_Fwd1Attn2_LTE_A1,AttTemp,tAttAccu);
   1078          
   1079          		AttTemp = Sts->Rvs1Attn1_LTE_A1 + Sts->Rvs1GainOffset_LTE_A1 + Sts->Rvs1Temp_LTE_A1;
   1080          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1081          		Sts->Att1Value.Rvs1Attn1_LTE_A1 = Sts->CurrRvs1Attn1_LTE_A1 = DnrReferToTable(Index_Rvs1Attn1_LTE_A1,AttTemp,tAttAccu);
   1082          
   1083          		AttTemp = Sts->Rvs1Attn2_LTE_A1;
   1084          		Sts->Att1Value.Rvs1Attn2_LTE_A1 = Sts->CurrRvs1Attn2_LTE_A1 = DnrReferToTable(Index_Rvs1Attn2_LTE_A1,AttTemp,tAttAccu);
   1085          
   1086          		AttTemp = Sts->Rvs1Attn3_LTE_A1 ;
   1087          		Sts->Att1Value.Rvs1Attn3_LTE_A1 = Sts->CurrRvs1Attn3_LTE_A1 = DnrReferToTable(Index_Rvs1Attn3_LTE_A1,AttTemp,tAttAccu);
   1088          		//////////////////// LTE-A2
   1089          		AttTemp = Sts->Fwd1Attn1_LTE_A2;
   1090          		Sts->Att1Value.Fwd1Attn1_LTE_A2 = Sts->CurrFwd1Attn1_LTE_A2 = DnrReferToTable(Index_Fwd1Attn1_LTE_A2,AttTemp,tAttAccu);
   1091          		
   1092          		AttTemp = Sts->Fwd1Attn2_LTE_A2 + Sts->Fwd1GainOffset_LTE_A2 + Sts->Fwd1Temp_LTE_A2;
   1093          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1094          		Sts->Att1Value.Fwd1Attn2_LTE_A2 = Sts->CurrFwd1Attn2_LTE_A2 = DnrReferToTable(Index_Fwd1Attn2_LTE_A2,AttTemp,tAttAccu);
   1095          
   1096          		AttTemp = Sts->Rvs1Attn1_LTE_A2 + Sts->Rvs1GainOffset_LTE_A2 + Sts->Rvs1Temp_LTE_A2;
   1097          		AttTemp = MinMaxAttnCheck(AttTemp, DIGATTENMAX,ATTENMIN);
   1098          		Sts->Att1Value.Rvs1Attn1_LTE_A2 = Sts->CurrRvs1Attn1_LTE_A2 = DnrReferToTable(Index_Rvs1Attn1_LTE_A2,AttTemp,tAttAccu);
   1099          
   1100          		AttTemp = Sts->Rvs1Attn2_LTE_A2;
   1101          		Sts->Att1Value.Rvs1Attn2_LTE_A2 = Sts->CurrRvs1Attn2_LTE_A2 = DnrReferToTable(Index_Rvs1Attn2_LTE_A2,AttTemp,tAttAccu);
   1102          
   1103          		AttTemp = Sts->Rvs1Attn3_LTE_A2 ;
   1104          		Sts->Att1Value.Rvs1Attn3_LTE_A2 = Sts->CurrRvs1Attn3_LTE_A2 = DnrReferToTable(Index_Rvs1Attn3_LTE_A2,AttTemp,tAttAccu);
   1105          
   1106          		//////////////////// LTE-A Common
   1107          		AttTemp = Sts->Fwd1Attn1_LTE_A;
   1108          		Sts->Att1Value.Fwd1Attn1_LTE_A = Sts->CurrFwd1Attn1_LTE_A = DnrReferToTable(Index_FwdAttn1_LTE_A_1,AttTemp,tAttAccu);
   1109          	
   1110          		AttTemp = Sts->Rvs1Attn1_LTE_A;
   1111          		Sts->Att1Value.Rvs1Attn1_LTE_A = Sts->CurrRvs1Attn1_LTE_A = DnrReferToTable(Index_RvsAttn1_LTE_A_1,AttTemp,tAttAccu);
   1112          	}
   1113          }
   1114          
   1115          void StatustoIO(void)
   1116          {
   1117          	__Dnr_Sts  *Sts = tDnrSts;
   1118          
   1119          	AttAccuChange();
   1120          
   1121          	if(CurrFwdAttn1_2G != Sts->CurrFwdAttn1_2G)
   1122          	{
   1123          		CurrFwdAttn1_2G = Sts->CurrFwdAttn1_2G;
   1124          		AttnDataOutput(_FwdAttn1_2G_SEL, Sts->CurrFwdAttn1_2G);
   1125          	}
   1126          
   1127          	if(CurrFwdAttn2_2G != Sts->CurrFwdAttn2_2G)
   1128          	{
   1129          		CurrFwdAttn2_2G = Sts->CurrFwdAttn2_2G;
   1130          		AttnDataOutput(_FwdAttn2_2G_SEL, Sts->CurrFwdAttn2_2G);
   1131          	}
   1132          
   1133          	if(CurrRvsAttn1_2G != Sts->CurrRvsAttn1_2G)
   1134          	{
   1135          		CurrRvsAttn1_2G = Sts->CurrRvsAttn1_2G;
   1136          		AttnDataOutput(_RvsAttn1_2G_SEL, Sts->CurrRvsAttn1_2G);
   1137          	}
   1138          
   1139          	if(CurrRvsAttn2_2G != Sts->CurrRvsAttn2_2G)
   1140          	{
   1141          		CurrRvsAttn2_2G = Sts->CurrRvsAttn2_2G;
   1142          		AttnDataOutput(_RvsAttn2_2G_SEL, Sts->CurrRvsAttn2_2G);
   1143          	}
   1144          
   1145          	if(CurrRvsAttn3_2G != Sts->CurrRvsAttn3_2G)
   1146          	{
   1147          		CurrRvsAttn3_2G = Sts->CurrRvsAttn3_2G;
   1148          		AttnDataOutput(_RvsAttn3_2G_SEL, Sts->CurrRvsAttn3_2G);
   1149          	}
   1150          /////////////////////////////////////////////////////////// LTE Fwd
   1151          
   1152          	if(CurrFwdAttn1_LTE!= Sts->CurrFwdAttn1_LTE)
   1153          	{
   1154          		CurrFwdAttn1_LTE= Sts->CurrFwdAttn1_LTE;
   1155          		AttnDataOutput(_FwdAttn1_LTE_SEL, Sts->CurrFwdAttn1_LTE);
   1156          	}
   1157          
   1158          	if(CurrFwdAttn2_LTE != Sts->CurrFwdAttn2_LTE)
   1159          	{
   1160          		CurrFwdAttn2_LTE = Sts->CurrFwdAttn2_LTE;
   1161          		AttnDataOutput(_FwdAttn2_LTE_SEL, Sts->CurrFwdAttn2_LTE);
   1162          	}
   1163          
   1164          	if(CurrRvsAttn1_LTE != Sts->CurrRvsAttn1_LTE)
   1165          	{
   1166          		CurrRvsAttn1_LTE = Sts->CurrRvsAttn1_LTE;
   1167          		AttnDataOutput(_RvsAttn1_LTE_SEL, Sts->CurrRvsAttn1_LTE);
   1168          	}
   1169          
   1170          	if(CurrRvsAttn2_LTE != Sts->CurrRvsAttn2_LTE)
   1171          	{
   1172          		CurrRvsAttn2_LTE = Sts->CurrRvsAttn2_LTE;
   1173          		AttnDataOutput(_RvsAttn2_LTE_SEL, Sts->CurrRvsAttn2_LTE);
   1174          	}
   1175          
   1176          	if(CurrRvsAttn3_LTE != Sts->CurrRvsAttn3_LTE)
   1177          	{
   1178          		CurrRvsAttn3_LTE = Sts->CurrRvsAttn3_LTE;
   1179          		AttnDataOutput(_RvsAttn3_LTE_SEL, Sts->CurrRvsAttn3_LTE);
   1180          	}
   1181          
   1182          /////////////////////////////////////////////////////////// CDMA/LTE
   1183          
   1184          	if(CurrFwdAttn1_CDMALTE!= Sts->CurrFwdAttn1_CDMALTE)
   1185          	{
   1186          		CurrFwdAttn1_CDMALTE = Sts->CurrFwdAttn1_CDMALTE;
   1187          		AttnDataOutput(_FwdAttn1_Common_SEL, Sts->CurrFwdAttn1_CDMALTE);
   1188          	}
   1189          
   1190          	if(CurrRvsAttn1_CDMALTE!= Sts->CurrRvsAttn1_CDMALTE)
   1191          	{
   1192          		CurrRvsAttn1_CDMALTE = Sts->CurrRvsAttn1_CDMALTE;
   1193          		AttnDataOutput(_RvsAttn1_Common_SEL, Sts->CurrRvsAttn1_CDMALTE);
   1194          	}
   1195          
   1196          	
   1197          /////////////////////////////////////////////////////////// LTE-A1
   1198          
   1199          	if(CurrFwdAttn1_LTE_A1!= Sts->CurrFwdAttn1_LTE_A1)
   1200          	{
   1201          		CurrFwdAttn1_LTE_A1 = Sts->CurrFwdAttn1_LTE_A1;
   1202          		AttnDataOutput(_FwdAttn1_LTE_A1_SEL, Sts->CurrFwdAttn1_LTE_A1);
   1203          	}
   1204          	if(CurrFwdAttn2_LTE_A1 != Sts->CurrFwdAttn2_LTE_A1)
   1205          	{
   1206          		CurrFwdAttn2_LTE_A1 = Sts->CurrFwdAttn2_LTE_A1;
   1207          		AttnDataOutput(_FwdAttn2_LTE_A1_SEL, Sts->CurrFwdAttn2_LTE_A1);
   1208          	}
   1209          	
   1210          	if(CurrRvsAttn1_LTE_A1 != Sts->CurrRvsAttn1_LTE_A1)
   1211          	{
   1212          		CurrRvsAttn1_LTE_A1 = Sts->CurrRvsAttn1_LTE_A1;
   1213          		AttnDataOutput(_RvsAttn1_LTE_A1_SEL, Sts->CurrRvsAttn1_LTE_A1);
   1214          	}
   1215          	
   1216          	if(CurrRvsAttn2_LTE_A1 != Sts->CurrRvsAttn2_LTE_A1)
   1217          	{
   1218          		CurrRvsAttn2_LTE_A1 = Sts->CurrRvsAttn2_LTE_A1;
   1219          		AttnDataOutput(_RvsAttn2_LTE_A1_SEL, Sts->CurrRvsAttn2_LTE_A1);
   1220          	}
   1221          
   1222          	if(CurrRvsAttn3_LTE_A1 != Sts->CurrRvsAttn3_LTE_A1)
   1223          	{
   1224          		CurrRvsAttn3_LTE_A1 = Sts->CurrRvsAttn3_LTE_A1;
   1225          		AttnDataOutput(_RvsAttn3_LTE_A1_SEL, Sts->CurrRvsAttn3_LTE_A1);
   1226          	}
   1227          	
   1228          /////////////////////////////////////////////////////////// LTE-A2
   1229          
   1230          	if(CurrFwdAttn1_LTE_A2!= Sts->CurrFwdAttn1_LTE_A2)
   1231          	{
   1232          		CurrFwdAttn1_LTE_A2 = Sts->CurrFwdAttn1_LTE_A2;
   1233          		AttnDataOutput(_FwdAttn1_LTE_A2_SEL, Sts->CurrFwdAttn1_LTE_A2);
   1234          	}
   1235          	if(CurrFwdAttn2_LTE_A2 != Sts->CurrFwdAttn2_LTE_A2)
   1236          	{
   1237          		CurrFwdAttn2_LTE_A2 = Sts->CurrFwdAttn2_LTE_A2;
   1238          		AttnDataOutput(_FwdAttn2_LTE_A2_SEL, Sts->CurrFwdAttn2_LTE_A2);
   1239          	}
   1240          	
   1241          	if(CurrRvsAttn1_LTE_A2 != Sts->CurrRvsAttn1_LTE_A2)
   1242          	{
   1243          		CurrRvsAttn1_LTE_A2 = Sts->CurrRvsAttn1_LTE_A2;
   1244          		AttnDataOutput(_RvsAttn1_LTE_A2_SEL, Sts->CurrRvsAttn1_LTE_A2);
   1245          	}
   1246          	
   1247          	if(CurrRvsAttn2_LTE_A2 != Sts->CurrRvsAttn2_LTE_A2)
   1248          	{
   1249          		CurrRvsAttn2_LTE_A2 = Sts->CurrRvsAttn2_LTE_A2;
   1250          		AttnDataOutput(_RvsAttn2_LTE_A2_SEL, Sts->CurrRvsAttn2_LTE_A2);
   1251          	}
   1252          
   1253          	if(CurrRvsAttn3_LTE_A2 != Sts->CurrRvsAttn3_LTE_A2)
   1254          	{
   1255          		CurrRvsAttn3_LTE_A2 = Sts->CurrRvsAttn3_LTE_A2;
   1256          		AttnDataOutput(_RvsAttn3_LTE_A2_SEL, Sts->CurrRvsAttn3_LTE_A2);
   1257          	}
   1258          
   1259          /////////////////////////////////////////////////////////// LTE_A 공통
   1260          
   1261          	if(CurrFwdAttn1_LTE_A != Sts->CurrFwdAttn1_LTE_A)
   1262          	{
   1263          		CurrFwdAttn1_LTE_A = Sts->CurrFwdAttn1_LTE_A;
   1264          		AttnDataOutput(_FwdAttn1_LTE_A_SEL, Sts->CurrFwdAttn1_LTE_A);
   1265          	}
   1266          
   1267          	if(CurrRvsAttn1_LTE_A!= Sts->CurrRvsAttn1_LTE_A)
   1268          	{
   1269          		CurrRvsAttn1_LTE_A = Sts->CurrRvsAttn1_LTE_A;
   1270          		AttnDataOutput(_RvsAttn1_LTE_A_SEL, Sts->CurrRvsAttn1_LTE_A);
   1271          	}
   1272          
   1273          	/////////////////////////////////////////////////////////// 3G
   1274          
   1275          	if(CurrFwdAttn1_3G!= Sts->CurrFwdAttn1_3G)
   1276          	{
   1277          		CurrFwdAttn1_3G = Sts->CurrFwdAttn1_3G;
   1278          		AttnDataOutput(_FwdAttn1_3G_SEL, Sts->CurrFwdAttn1_3G);
   1279          	}
   1280          
   1281          	if(CurrFwdAttn2_3G != Sts->CurrFwdAttn2_3G)
   1282          	{
   1283          		CurrFwdAttn2_3G = Sts->CurrFwdAttn2_3G;
   1284          		AttnDataOutput(_FwdAttn2_3G_SEL, Sts->CurrFwdAttn2_3G);
   1285          	}
   1286          
   1287          	if(CurrRvsAttn1_3G != Sts->CurrRvsAttn1_3G)
   1288          	{
   1289          		CurrRvsAttn1_3G = Sts->CurrRvsAttn1_3G;
   1290          		AttnDataOutput(_RvsAttn1_3G_SEL, Sts->CurrRvsAttn1_3G);
   1291          	}
   1292          	
   1293          	if(CurrRvsAttn2_3G != Sts->CurrRvsAttn2_3G)
   1294          	{
   1295          		CurrRvsAttn2_3G = Sts->CurrRvsAttn2_3G;
   1296          		AttnDataOutput(_RvsAttn2_3G_SEL, Sts->CurrRvsAttn2_3G);
   1297          	}
   1298          
   1299          	if(CurrRvsAttn3_3G != Sts->CurrRvsAttn3_3G)
   1300          	{
   1301          		CurrRvsAttn3_3G = Sts->CurrRvsAttn3_3G;
   1302          		AttnDataOutput(_RvsAttn3_3G_SEL, Sts->CurrRvsAttn3_3G);
   1303          	}
   1304          
   1305          	if(CurrRvsAttn4_3G != Sts->CurrRvsAttn4_3G)
   1306          	{
   1307          		CurrRvsAttn4_3G = Sts->CurrRvsAttn4_3G;
   1308          		AttnDataOutput(_RvsAttn4_3G_SEL, Sts->CurrRvsAttn4_3G);
   1309          	}
   1310          
   1311          	if(iRepeaterType == _TRIO_MM)
   1312          	{
   1313          	/////////////////////////////////////////////////////////// LTE
   1314          		if(CurrFwd1Attn1_LTE!= Sts->CurrFwd1Attn1_LTE)
   1315          		{
   1316          			CurrFwd1Attn1_LTE = Sts->CurrFwd1Attn1_LTE;
   1317          			AttnDataOutput(_Fwd1Attn1_LTE_SEL, Sts->Fwd1Attn1_LTE);
   1318          		}
   1319          		
   1320          		if(CurrFwd1Attn2_LTE != Sts->CurrFwd1Attn2_LTE)
   1321          		{
   1322          			CurrFwd1Attn2_LTE = Sts->CurrFwd1Attn2_LTE;
   1323          			AttnDataOutput(_Fwd1Attn2_LTE_SEL, Sts->CurrFwd1Attn2_LTE);
   1324          		}
   1325          		
   1326          		if(CurrRvs1Attn1_LTE != Sts->CurrRvs1Attn1_LTE)
   1327          		{
   1328          			CurrRvs1Attn1_LTE = Sts->CurrRvs1Attn1_LTE;
   1329          			AttnDataOutput(_Rvs1Attn1_LTE_SEL, Sts->CurrRvs1Attn1_LTE);
   1330          		}
   1331          		
   1332          		if(CurrRvs1Attn2_LTE != Sts->CurrRvs1Attn2_LTE)
   1333          		{
   1334          			CurrRvs1Attn2_LTE = Sts->CurrRvs1Attn2_LTE;
   1335          			AttnDataOutput(_Rvs1Attn2_LTE_SEL, Sts->CurrRvs1Attn2_LTE);
   1336          		}
   1337          
   1338          		if(CurrRvs1Attn3_LTE != Sts->CurrRvs1Attn3_LTE)
   1339          		{
   1340          			CurrRvs1Attn3_LTE = Sts->CurrRvs1Attn3_LTE;
   1341          			AttnDataOutput(_Rvs1Attn3_LTE_SEL, Sts->CurrRvs1Attn3_LTE);
   1342          		}
   1343          		
   1344          		if(CurrRvs1Attn4_LTE != Sts->CurrRvs1Attn4_LTE)
   1345          		{
   1346          			CurrRvs1Attn4_LTE = Sts->CurrRvs1Attn4_LTE;
   1347          			AttnDataOutput(_Rvs1Attn4_LTE_SEL, Sts->CurrRvs1Attn4_LTE);
   1348          		}
   1349          
   1350          	/////////////////////////////////////////////////////////// LTE-A
   1351          
   1352          		if(CurrFwd1Attn1_LTE_A1!= Sts->CurrFwd1Attn1_LTE_A1)
   1353          		{
   1354          			CurrFwd1Attn1_LTE_A1 = Sts->CurrFwd1Attn1_LTE_A1;
   1355          			AttnDataOutput(_Fwd1Attn1_LTE_A1_SEL, Sts->CurrFwd1Attn1_LTE_A1);
   1356          		}
   1357          
   1358          		if(CurrFwd1Attn2_LTE_A1 != Sts->CurrFwd1Attn2_LTE_A1)
   1359          		{
   1360          			CurrFwd1Attn2_LTE_A1 = Sts->CurrFwd1Attn2_LTE_A1;
   1361          			AttnDataOutput(_Fwd1Attn2_LTE_A1_SEL, Sts->CurrFwd1Attn2_LTE_A1);
   1362          		}
   1363          
   1364          		if(CurrRvs1Attn1_LTE_A1 != Sts->CurrRvs1Attn1_LTE_A1)
   1365          		{
   1366          			CurrRvs1Attn1_LTE_A1 = Sts->CurrRvs1Attn1_LTE_A1;
   1367          			AttnDataOutput(_Rvs1Attn1_LTE_A1_SEL, Sts->CurrRvs1Attn1_LTE_A1);
   1368          		}
   1369          
   1370          		if(CurrRvs1Attn2_LTE_A1 != Sts->CurrRvs1Attn2_LTE_A1)
   1371          		{
   1372          			CurrRvs1Attn2_LTE_A1 = Sts->CurrRvs1Attn2_LTE_A1;
   1373          			AttnDataOutput(_Rvs1Attn2_LTE_A1_SEL, Sts->CurrRvs1Attn2_LTE_A1);
   1374          		}
   1375          
   1376          		if(CurrRvs1Attn3_LTE_A1 != Sts->CurrRvs1Attn3_LTE_A1)
   1377          		{
   1378          			CurrRvs1Attn3_LTE_A1 = Sts->CurrRvs1Attn3_LTE_A1;
   1379          			AttnDataOutput(_Rvs1Attn3_LTE_A1_SEL, Sts->CurrRvs1Attn3_LTE_A1);
   1380          		}
   1381          	/////////////////////////////////////////////////////////// LTE-A2
   1382          	
   1383          		if(CurrFwd1Attn1_LTE_A2!= Sts->CurrFwd1Attn1_LTE_A2)
   1384          		{
   1385          			CurrFwd1Attn1_LTE_A2 = Sts->CurrFwd1Attn1_LTE_A2;
   1386          			AttnDataOutput(_Fwd1Attn1_LTE_A2_SEL, Sts->CurrFwd1Attn1_LTE_A2);
   1387          		}
   1388          		
   1389          		if(CurrFwd1Attn2_LTE_A2 != Sts->CurrFwd1Attn2_LTE_A2)
   1390          		{
   1391          			CurrFwd1Attn2_LTE_A2 = Sts->CurrFwd1Attn2_LTE_A2;
   1392          			AttnDataOutput(_Fwd1Attn2_LTE_A2_SEL, Sts->CurrFwd1Attn2_LTE_A2);
   1393          		}
   1394          		
   1395          		if(CurrRvs1Attn1_LTE_A2 != Sts->CurrRvs1Attn1_LTE_A2)
   1396          		{
   1397          			CurrRvs1Attn1_LTE_A2 = Sts->CurrRvs1Attn1_LTE_A2;
   1398          			AttnDataOutput(_Rvs1Attn1_LTE_A2_SEL, Sts->CurrRvs1Attn1_LTE_A2);
   1399          		}
   1400          		
   1401          		if(CurrRvs1Attn2_LTE_A2 != Sts->CurrRvs1Attn2_LTE_A2)
   1402          		{
   1403          			CurrRvs1Attn2_LTE_A2 = Sts->CurrRvs1Attn2_LTE_A2;
   1404          			AttnDataOutput(_Rvs1Attn2_LTE_A2_SEL, Sts->CurrRvs1Attn2_LTE_A2);
   1405          		}
   1406          	
   1407          		if(CurrRvs1Attn3_LTE_A2 != Sts->CurrRvs1Attn3_LTE_A2)
   1408          		{
   1409          			CurrRvs1Attn3_LTE_A2 = Sts->CurrRvs1Attn3_LTE_A2;
   1410          			AttnDataOutput(_Rvs1Attn3_LTE_A2_SEL, Sts->CurrRvs1Attn3_LTE_A2);
   1411          		}
   1412          	
   1413          	/////////////////////////////////////////////////////////// LTE_A 공통
   1414          	
   1415          		if(CurrFwd1Attn1_LTE_A != Sts->CurrFwd1Attn1_LTE_A)
   1416          		{
   1417          			CurrFwd1Attn1_LTE_A = Sts->CurrFwd1Attn1_LTE_A;
   1418          			AttnDataOutput(_Fwd1Attn1_LTE_A_SEL, Sts->CurrFwd1Attn1_LTE_A);
   1419          		}
   1420          	
   1421          		if(CurrRvs1Attn1_LTE_A!= Sts->CurrRvs1Attn1_LTE_A)
   1422          		{
   1423          			CurrRvs1Attn1_LTE_A = Sts->CurrRvs1Attn1_LTE_A;
   1424          			AttnDataOutput(_Rvs1Attn1_LTE_A_SEL, Sts->CurrRvs1Attn1_LTE_A);
   1425          		}
   1426          	}
   1427          
   1428          	if(Chk_Reset)
   1429          	{
   1430          		ResetCaseBackup(UserReset);
   1431          		OSTimeDly(1000L);
   1432          		DownLoadBootingJump();
   1433          		Chk_Reset = RESET;
   1434          	}
   1435          
   1436          	{
   1437          		if((Sts->ModuleAlarm.Main.DCFail)||(PwrAlarm.ACFail))
   1438          		{
   1439          			AmpOnOff_LTE_0 = 0;
   1440          			AmpOnOff_CDMA = 0;
   1441          			AmpOnOff_LTE_A1_0 = 0;
   1442          			AmpOnOff_LTE_A2_0 = 0;
   1443          			AmpOnOff_WCDMA = 0;
   1444          
   1445          			AmpOnOff_LTE_1 = 0;
   1446          			AmpOnOff_LTE_A1_1 = 0;
   1447          			AmpOnOff_LTE_A2_1 = 0;
   1448          
   1449          			AmpBitReason(PATH_3G, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1450          			AmpBitReason(PATH_2G, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1451          			AmpBitReason(PATH_LTE, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1452          			AmpBitReason(PATH_LTE_A1, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1453          			AmpBitReason(PATH_LTE_A2, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1454          			AmpBitReason(PATH_LTE_1, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1455          			AmpBitReason(PATH_LTE_A1_1, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1456          			AmpBitReason(PATH_LTE_A2_1, _Disable, __DCAlarm, SD_AMP_OFF_INF);
   1457          		}
   1458          		else
   1459          		{
   1460          			if(Sts->LTE15MUse == __USE)
   1461          			{
   1462          
   1463          				if(AlarmCheck_LTE == SET)
   1464          				{
   1465          					if(Sts->AlmSts.FwdAmpOnOff_LTE== Enable)
   1466          					{
   1467          						AmpOnOff_LTE_0 = 1;
   1468          						AmpOnOff_CDMA = 1;
   1469          					}
   1470          					else
   1471          					{
   1472          						AmpOnOff_LTE_0 = 0;
   1473          						AmpOnOff_CDMA = 0;
   1474          					}
   1475          				}
   1476          				else
   1477          				{
   1478          //					Sts->FwdAmpOnOff_LTE = Disable;
   1479          //					Sts->FwdAmpOnOff_2G = Disable;
   1480          					AmpOnOff_LTE_0 = 0;
   1481          					AmpOnOff_CDMA = 0;
   1482          				}
   1483          				
   1484          			}
   1485          			else
   1486          			{
   1487          				if(Sts->AlmSts.FwdAmpOnOff_2G == Enable)		
   1488          				{
   1489          					AmpOnOff_CDMA = 1;
   1490          				}
   1491          				else
   1492          				{
   1493          					AmpOnOff_CDMA = 0;
   1494          				}
   1495          
   1496          				if(AlarmCheck_LTE == SET)
   1497          				{
   1498          					if(Sts->AlmSts.FwdAmpOnOff_LTE== Enable)		
   1499          					{
   1500          						AmpOnOff_LTE_0 = 1;
   1501          					}
   1502          					else
   1503          					{
   1504          						AmpOnOff_LTE_0 = 0;
   1505          					}
   1506          				}
   1507          				else
   1508          				{
   1509          //					Sts->FwdAmpOnOff_LTE = Disable;
   1510          					AmpOnOff_LTE_0 = 0;
   1511          				}				
   1512          			}
   1513          			if(AlarmCheck_LTE_A1 == SET)
   1514          			{
   1515          				if(Sts->AlmSts.FwdAmpOnOff_LTE_A1 == Enable)
   1516          				{
   1517          					AmpOnOff_LTE_A1_0 = 1;
   1518          				}
   1519          				else
   1520          				{
   1521          					AmpOnOff_LTE_A1_0 = 0;
   1522          				}
   1523          			}
   1524          			else
   1525          			{
   1526          //				Sts->FwdAmpOnOff_LTE_A1 = Disable;
   1527          				AmpOnOff_LTE_A1_0 = 0;
   1528          			}
   1529          
   1530          			if(AlarmCheck_LTE_A2 == SET)
   1531          			{
   1532          				if(Sts->AlmSts.FwdAmpOnOff_LTE_A2 == Enable)
   1533          				{
   1534          					AmpOnOff_LTE_A2_0 = 1;
   1535          				}
   1536          				else
   1537          				{
   1538          					AmpOnOff_LTE_A2_0 = 0;
   1539          				}
   1540          			}
   1541          			else
   1542          			{
   1543          //				Sts->FwdAmpOnOff_LTE_A2 = Disable;
   1544          				AmpOnOff_LTE_A2_0 = 0;
   1545          			}
   1546          			
   1547          			if(Sts->AlmSts.FwdAmpOnOff_3G == Enable)		
   1548          			{
   1549          				AmpOnOff_WCDMA = 1;
   1550          			}
   1551          			else
   1552          			{
   1553          				AmpOnOff_WCDMA = 0;
   1554          			}
   1555          		}
   1556          		
   1557          		if(iRepeaterType == _TRIO_MM)
   1558          		{
   1559          
   1560          			if(AlarmCheck_LTE_1 == SET)
   1561          			{
   1562          				if(Sts->AlmSts.FwdAmp1OnOff_LTE == Enable)
   1563          				{
   1564          					AmpOnOff_LTE_1 = 1;
   1565          				}
   1566          				else
   1567          				{
   1568          					AmpOnOff_LTE_1 = 0;
   1569          				}
   1570          			}
   1571          			else
   1572          			{
   1573          //				Sts->FwdAmp1OnOff_LTE= Disable;
   1574          				AmpOnOff_LTE_1 = 0;
   1575          			}
   1576          
   1577          
   1578          		
   1579          			if(AlarmCheck_LTE_A1_1 == SET)
   1580          			{
   1581          				if(Sts->AlmSts.FwdAmp1OnOff_LTE_A1 == Enable)
   1582          				{
   1583          					AmpOnOff_LTE_A1_1 = 1;
   1584          				}
   1585          				else
   1586          				{
   1587          					AmpOnOff_LTE_A1_1 = 0;
   1588          				}
   1589          			}
   1590          			else
   1591          			{
   1592          //				Sts->FwdAmp1OnOff_LTE_A1 = Disable;
   1593          				AmpOnOff_LTE_A1_1 = 0;
   1594          			}
   1595          		
   1596          			if(AlarmCheck_LTE_A2_1 == SET)
   1597          			{
   1598          				if(Sts->AlmSts.FwdAmp1OnOff_LTE_A2 == Enable)
   1599          				{
   1600          					AmpOnOff_LTE_A2_1 = 1;
   1601          				}
   1602          				else
   1603          				{
   1604          					AmpOnOff_LTE_A2_1 = 0;
   1605          				}
   1606          			}
   1607          			else
   1608          			{
   1609          //				Sts->FwdAmp1OnOff_LTE_A2 = Disable;
   1610          				AmpOnOff_LTE_A2_1 = 0;
   1611          			}
   1612          		}
   1613          	}
   1614          
   1615          	if( CurrLTE15MUse != Sts->LTE15MUse)
   1616          	{
   1617          		CurrLTE15MUse = Sts->LTE15MUse;
   1618          		if(Sts->LTE15MUse == __USE) 	PCA9555BitRst(_15M_Switch_LTE,&AttnCS1Val); 	
   1619          		else							PCA9555BitSet(_15M_Switch_LTE,&AttnCS1Val);
   1620          	}
   1621          	
   1622          	if( CurrModemOnOff != Sts->ModemOnOff)
   1623          	{
   1624          		if(Sts->ModemOnOff == Enable)	
   1625          		{
   1626          			SMS_PWR = 0;
   1627          		}
   1628          		else
   1629          		{
   1630          			if(SetSMS_PWR == RESET)
   1631          			{
   1632          				SMS_PWR = 1;
   1633          			}
   1634          		}
   1635          	}
   1636          	if(ChkBandSelet)
   1637          	{
   1638          		INT32U tLocal = 0;
   1639          
   1640          		if(Sts->Band_Select_LTE_A2[0] == __USE)
   1641          		{
   1642          			INT16U WordByte = 0;
   1643          
   1644          			WordByte = Sts->Band_Select_LTE_A2[1]*128 + Sts->Band_Select_LTE_A2[2];
   1645          			tLocal = 1814000 + WordByte*25;
   1646          
   1647          			iBand_Freq = tLocal - 240000;
   1648          
   1649          			_FWDRVS1_PllOut(iBand_Freq*1000);
   1650          			OSTimeDly(50);
   1651          			_FWDRVS2_PllOut(iBand_Freq*1000);
   1652          		}
   1653          
   1654          		ChkBandSelet = RESET;
   1655          	}
   1656          
   1657          	if(ChkPllFregOffset_LTE)
   1658          	{
   1659          		INT32U tLocal = 0;
   1660          
   1661          		tLocal = 1097000 + Sts->PllFregOffset_LTE *25;
   1662          		_PllOut_LTE(tLocal*1000);
   1663          	
   1664          		ChkPllFregOffset_LTE = RESET;
   1665          	}
   1666          }
   1667          
   1668          
   1669          void AttnDataOutput(unsigned short int Sel, unsigned char Data)
   1670          {
   1671          	INT8U i = 0;
   1672          
   1673          	Data = (~Data )& 0x3f;
   1674          //	Data = Data & 0x3f;
   1675          
   1676          	_ATTN_DATA = 0;
   1677          	_ATTN_CLK = 0;
   1678          	
   1679          	for(i = 0; i < 6; i++)
   1680          	{
   1681          		if (Data & 0x20)		_ATTN_DATA = 1;
   1682          		else					_ATTN_DATA = 0;
   1683          		
   1684          		Data = Data << 1;
   1685          		ForDelay(100L);
   1686          
   1687          		_ATTN_CLK = 1;
   1688          		ForDelay(100L);
   1689          		_ATTN_CLK = 0;
   1690          	}
   1691          
   1692           	{
   1693          		switch(Sel)
   1694          		{
   1695          			case _FwdAttn1_2G_SEL:			
   1696          				PCA9555BitSet(Fwd_Att1_CDMA,&AttnCS2Val); 
   1697          				ForDelay(100L);
   1698          				PCA9555BitRst(Fwd_Att1_CDMA,&AttnCS2Val); 		
   1699          			break;
   1700          			
   1701          			case _FwdAttn2_2G_SEL:			
   1702          				PCA9555BitSet(Fwd_Att2_CDMA,&AttnCS2Val); 		
   1703          				ForDelay(100L);
   1704          				PCA9555BitRst(Fwd_Att2_CDMA,&AttnCS2Val); 		
   1705          			break;
   1706          			
   1707          			case _RvsAttn1_2G_SEL:			
   1708          				PCA9555BitSet(Rvs_Att1_CDMA,&AttnCS2Val); 		
   1709          				ForDelay(100L);
   1710          				PCA9555BitRst(Rvs_Att1_CDMA,&AttnCS2Val); 		
   1711          			break;
   1712          			
   1713          			case _RvsAttn2_2G_SEL:			
   1714          				PCA9555BitSet(Rvs_Att2_CDMA,&AttnCS0Val); 		
   1715          				ForDelay(100L);
   1716          				PCA9555BitRst(Rvs_Att2_CDMA,&AttnCS0Val);		
   1717          			break;
   1718          			
   1719          			case _RvsAttn3_2G_SEL:			
   1720          				PCA9555BitSet(Rvs_Att3_CDMA,&AttnCS0Val); 		
   1721          				ForDelay(100L);
   1722          				PCA9555BitRst(Rvs_Att3_CDMA,&AttnCS0Val); 
   1723          			break;
   1724          			
   1725          			case _FwdAttn1_LTE_SEL: 		
   1726          				PCA9555BitSet(Fwd_Att1_LTE_0,&AttnCS2Val);		
   1727          				ForDelay(100L);
   1728          				PCA9555BitRst(Fwd_Att1_LTE_0,&AttnCS2Val);	
   1729          			break;
   1730          			
   1731          			case _FwdAttn2_LTE_SEL: 		
   1732          				PCA9555BitSet(Fwd_Att2_LTE_0,&AttnCS2Val);		
   1733          				ForDelay(100L);
   1734          				PCA9555BitRst(Fwd_Att2_LTE_0,&AttnCS2Val); 
   1735          			break;
   1736          			
   1737          			case _RvsAttn1_LTE_SEL: 		
   1738          				PCA9555BitSet(Rvs_Att1_LTE_0,&AttnCS2Val);		
   1739          				ForDelay(100L);
   1740          				PCA9555BitRst(Rvs_Att1_LTE_0,&AttnCS2Val);		
   1741          			break;
   1742          			
   1743          			case _RvsAttn2_LTE_SEL: 		
   1744          				PCA9555BitSet(Rvs_Att2_LTE_0,&AttnCS0Val);
   1745          				ForDelay(100L);
   1746          				PCA9555BitRst(Rvs_Att2_LTE_0,&AttnCS0Val); 	
   1747          			break;
   1748          			
   1749          			case _RvsAttn3_LTE_SEL: 		
   1750          				PCA9555BitSet(Rvs_Att3_LTE_0,&AttnCS0Val);		
   1751          				ForDelay(100L);
   1752          				PCA9555BitRst(Rvs_Att3_LTE_0,&AttnCS0Val); 
   1753          			break;
   1754          
   1755          			case _FwdAttn1_Common_SEL:		
   1756          				PCA9555BitSet(Fwd_Att1_CDMALTE,&AttnCS0Val); 	
   1757          				ForDelay(100L);
   1758          				PCA9555BitRst(Fwd_Att1_CDMALTE,&AttnCS0Val); 	
   1759          			break;
   1760          			
   1761          			case _RvsAttn1_Common_SEL:		
   1762          				PCA9555BitSet(Rvs_Att1_CDMALTE,&AttnCS2Val); 	
   1763          				ForDelay(100L);
   1764          				PCA9555BitRst(Rvs_Att1_CDMALTE,&AttnCS2Val); 				
   1765          			break;
   1766          
   1767          			case _FwdAttn1_LTE_A1_SEL:		
   1768          				PCA9555BitSet(Fwd_Att1_LTE_A1_0,&AttnCS0Val); 	
   1769          				ForDelay(100L);
   1770          				PCA9555BitRst(Fwd_Att1_LTE_A1_0,&AttnCS0Val); 	
   1771          			break;
   1772          
   1773          			case _FwdAttn2_LTE_A1_SEL:		
   1774          				PCA9555BitSet(Fwd_Att2_LTE_A1_0,&AttnCS0Val); 	
   1775          				ForDelay(100L);
   1776          				PCA9555BitRst(Fwd_Att2_LTE_A1_0,&AttnCS0Val); 	
   1777          			break;
   1778          			
   1779          			case _RvsAttn1_LTE_A1_SEL:		
   1780          				PCA9555BitSet(Rvs_Att1_LTE_A1_0,&AttnCS0Val); 	
   1781          				ForDelay(100L);
   1782          				PCA9555BitRst(Rvs_Att1_LTE_A1_0,&AttnCS0Val); 	
   1783          			break;
   1784          			
   1785          			case _RvsAttn2_LTE_A1_SEL:		
   1786          				PCA9555BitSet(Rvs_Att2_LTE_A1_0,&AttnCS1Val); 	
   1787          				ForDelay(100L);
   1788          				PCA9555BitRst(Rvs_Att2_LTE_A1_0,&AttnCS1Val); 	
   1789          			break;
   1790          			
   1791          			case _RvsAttn3_LTE_A1_SEL:		
   1792          				PCA9555BitSet(Rvs_Att3_LTE_A1_0,&AttnCS0Val);		
   1793          				ForDelay(100L);
   1794          				PCA9555BitRst(Rvs_Att3_LTE_A1_0,&AttnCS0Val);	
   1795          			break;
   1796          ////////////////////////////////////////////////////////////////			
   1797          			case _FwdAttn1_LTE_A2_SEL:		
   1798          				PCA9555BitSet(Fwd_Att1_LTE_A2_0,&AttnCS0Val); 	
   1799          				ForDelay(100L);
   1800          				PCA9555BitRst(Fwd_Att1_LTE_A2_0,&AttnCS0Val);
   1801          			break;
   1802          
   1803          			case _FwdAttn2_LTE_A2_SEL:		
   1804          				PCA9555BitSet(Fwd_Att2_LTE_A2_0,&AttnCS0Val); 	
   1805          				ForDelay(100L);
   1806          				PCA9555BitRst(Fwd_Att2_LTE_A2_0,&AttnCS0Val); 	
   1807          			break;
   1808          	////////////////////////////////////////////////////////////////			
   1809          			case _RvsAttn1_LTE_A2_SEL:		
   1810          				PCA9555BitSet(Rvs_Att1_LTE_A2_0,&AttnCS1Val); 	
   1811          				ForDelay(100L);
   1812          				PCA9555BitRst(Rvs_Att1_LTE_A2_0,&AttnCS1Val); 	
   1813          			break;
   1814          			
   1815          			case _RvsAttn2_LTE_A2_SEL:		
   1816          				PCA9555BitSet(Rvs_Att2_LTE_A2_0,&AttnCS1Val); 	
   1817          				ForDelay(100L);
   1818          				PCA9555BitRst(Rvs_Att2_LTE_A2_0,&AttnCS1Val); 	
   1819          			break;
   1820          			
   1821          			case _RvsAttn3_LTE_A2_SEL:		
   1822          				PCA9555BitSet(Rvs_Att3_LTE_A2_0,&AttnCS1Val);		
   1823          				ForDelay(100L);
   1824          				PCA9555BitRst(Rvs_Att3_LTE_A2_0,&AttnCS1Val);	
   1825          			break;
   1826          ///////////////////////////////////////////////////////////////////
   1827          			case _FwdAttn1_LTE_A_SEL:		
   1828          				PCA9555BitSet(Fwd_Att1_LTE_A_0,&AttnCS0Val); 	
   1829          				ForDelay(100L);
   1830          				PCA9555BitRst(Fwd_Att1_LTE_A_0,&AttnCS0Val); 	
   1831          			break;
   1832          			
   1833          			case _RvsAttn1_LTE_A_SEL:		
   1834          				PCA9555BitSet(Rvs_Att1_LTE_A_0,&AttnCS2Val); 	
   1835          				ForDelay(100L);
   1836          				PCA9555BitRst(Rvs_Att1_LTE_A_0,&AttnCS2Val); 				
   1837          			break;	
   1838          /////////////////////////////////////////////////////////////
   1839          
   1840          			case _FwdAttn1_3G_SEL:			
   1841          				PCA9555BitSet(Fwd_Att1_WCDMA,&AttnCS0Val); 		
   1842          				ForDelay(100L);
   1843          				PCA9555BitRst(Fwd_Att1_WCDMA,&AttnCS0Val); 		
   1844          			break;
   1845          			
   1846          			case _FwdAttn2_3G_SEL:			
   1847          				PCA9555BitSet(Fwd_Att2_WCDMA,&AttnCS0Val); 		
   1848          				ForDelay(100L);
   1849          				PCA9555BitRst(Fwd_Att2_WCDMA,&AttnCS0Val); 		
   1850          			break;
   1851          			
   1852          			case _RvsAttn1_3G_SEL:			
   1853          				PCA9555BitSet(Rvs_Att1_WCDMA,&AttnCS2Val); 		
   1854          				ForDelay(100L);
   1855          				PCA9555BitRst(Rvs_Att1_WCDMA,&AttnCS2Val); 		
   1856          			break;
   1857          			
   1858          			case _RvsAttn2_3G_SEL:			
   1859          				PCA9555BitSet(Rvs_Att2_WCDMA,&AttnCS2Val); 		
   1860          				ForDelay(100L);
   1861          				PCA9555BitRst(Rvs_Att2_WCDMA,&AttnCS2Val); 		
   1862          			break;
   1863          			
   1864          			case _RvsAttn3_3G_SEL:			
   1865          				PCA9555BitSet(Rvs_Att3_WCDMA,&AttnCS1Val); 		
   1866          				ForDelay(100L);
   1867          				PCA9555BitRst(Rvs_Att3_WCDMA,&AttnCS1Val); 		
   1868          			break;
   1869          			
   1870          			case _RvsAttn4_3G_SEL:			
   1871          				PCA9555BitSet(Rvs_Att4_WCDMA,&AttnCS1Val); 		
   1872          				ForDelay(100L);
   1873          				PCA9555BitRst(Rvs_Att4_WCDMA,&AttnCS1Val); 
   1874          			break;
   1875          			
   1876          
   1877          			case _Fwd1Attn1_LTE_SEL:		
   1878          				PCA9555BitSet(Fwd_Att1_LTE_1,&AttnCS3Val);	
   1879          				ForDelay(100L);
   1880          				PCA9555BitRst(Fwd_Att1_LTE_1,&AttnCS3Val);	
   1881          			break;
   1882          			
   1883          			case _Fwd1Attn2_LTE_SEL:		
   1884          				PCA9555BitSet(Fwd_Att2_LTE_1,&AttnCS3Val);	
   1885          				ForDelay(100L);
   1886          				PCA9555BitRst(Fwd_Att2_LTE_1,&AttnCS3Val);	
   1887          			break;
   1888          			
   1889          			case _Rvs1Attn1_LTE_SEL:		
   1890          				PCA9555BitSet(Rvs_Att1_LTE_1,&AttnCS1Val);	
   1891          				ForDelay(100L);
   1892          				PCA9555BitRst(Rvs_Att1_LTE_1,&AttnCS1Val);	
   1893          			break;
   1894          			
   1895          			case _Rvs1Attn2_LTE_SEL:		
   1896          				PCA9555BitSet(Rvs_Att2_LTE_1,&AttnCS1Val);	
   1897          				ForDelay(100L);
   1898          				PCA9555BitRst(Rvs_Att2_LTE_1,&AttnCS1Val);	
   1899          			break;
   1900          			
   1901          			case _Rvs1Attn3_LTE_SEL:		
   1902          				PCA9555BitSet(Rvs_Att3_LTE_1,&AttnCS3Val);	
   1903          				ForDelay(100L);
   1904          				PCA9555BitRst(Rvs_Att3_LTE_1,&AttnCS3Val);	
   1905          			break;
   1906          			
   1907          			case _Rvs1Attn4_LTE_SEL:		
   1908          				PCA9555BitSet(Rvs_Att4_LTE_1,&AttnCS2Val);	
   1909          				ForDelay(100L);
   1910          				PCA9555BitRst(Rvs_Att4_LTE_1,&AttnCS2Val);	
   1911          			break;
   1912          			
   1913          			case _Fwd1Attn1_LTE_A1_SEL:		
   1914          				PCA9555BitSet(Fwd_Att1_LTE_A1_1,&AttnCS3Val);	
   1915          				ForDelay(100L);
   1916          				PCA9555BitRst(Fwd_Att1_LTE_A1_1,&AttnCS3Val); 
   1917          			break;
   1918          			
   1919          			case _Fwd1Attn2_LTE_A1_SEL:		
   1920          				PCA9555BitSet(Fwd_Att2_LTE_A1_1,&AttnCS3Val); 	
   1921          				ForDelay(100L);
   1922          				PCA9555BitRst(Fwd_Att2_LTE_A1_1,&AttnCS3Val); 	
   1923          			break;
   1924          			
   1925          			case _Rvs1Attn1_LTE_A1_SEL:		
   1926          				PCA9555BitSet(Rvs_Att1_LTE_A1_1,&AttnCS3Val); 
   1927          				ForDelay(100L);
   1928          				PCA9555BitRst(Rvs_Att1_LTE_A1_1,&AttnCS3Val); 	
   1929          			break;
   1930          			
   1931          			case _Rvs1Attn2_LTE_A1_SEL:		
   1932          				PCA9555BitSet(Rvs_Att2_LTE_A1_1,&AttnCS3Val); 
   1933          				ForDelay(100L);
   1934          				PCA9555BitRst(Rvs_Att2_LTE_A1_1,&AttnCS3Val); 	
   1935          			break;
   1936          			
   1937          			case _Rvs1Attn3_LTE_A1_SEL:		
   1938          				PCA9555BitSet(Rvs_Att3_LTE_A1_1,&AttnCS3Val); 	
   1939          				ForDelay(100L);
   1940          				PCA9555BitRst(Rvs_Att3_LTE_A1_1,&AttnCS3Val);	
   1941          			break;
   1942          
   1943          ////
   1944          			case _Fwd1Attn1_LTE_A2_SEL: 	
   1945          				PCA9555BitSet(Fwd_Att1_LTE_A2_1,&AttnCS3Val);	
   1946          				ForDelay(100L);
   1947          				PCA9555BitRst(Fwd_Att1_LTE_A2_1,&AttnCS3Val); 
   1948          			break;
   1949          
   1950          			case _Fwd1Attn2_LTE_A2_SEL: 	
   1951          				PCA9555BitSet(Fwd_Att2_LTE_A2_1,&AttnCS3Val);	
   1952          				ForDelay(100L);
   1953          				PCA9555BitRst(Fwd_Att2_LTE_A2_1,&AttnCS3Val);	
   1954          			break;
   1955          
   1956          			case _Rvs1Attn1_LTE_A2_SEL: 	
   1957          				PCA9555BitSet(Rvs_Att1_LTE_A2_1,&AttnCS3Val); 
   1958          				ForDelay(100L);
   1959          				PCA9555BitRst(Rvs_Att1_LTE_A2_1,&AttnCS3Val);	
   1960          			break;
   1961          
   1962          			case _Rvs1Attn2_LTE_A2_SEL: 	
   1963          				PCA9555BitSet(Rvs_Att2_LTE_A2_1,&AttnCS3Val); 
   1964          				ForDelay(100L);
   1965          				PCA9555BitRst(Rvs_Att2_LTE_A2_1,&AttnCS3Val);	
   1966          			break;
   1967          
   1968          			case _Rvs1Attn3_LTE_A2_SEL: 	
   1969          				PCA9555BitSet(Rvs_Att3_LTE_A2_1,&AttnCS3Val);	
   1970          				ForDelay(100L);
   1971          				PCA9555BitRst(Rvs_Att3_LTE_A2_1,&AttnCS3Val);	
   1972          			break;
   1973          			
   1974          			case _Fwd1Attn1_LTE_A_SEL:		
   1975          				PCA9555BitSet(Fwd_Att1_LTE_A_1,&AttnCS0Val); 	
   1976          				ForDelay(100L);
   1977          				PCA9555BitRst(Fwd_Att1_LTE_A_1,&AttnCS0Val); 	
   1978          			break;
   1979          			
   1980          			case _Rvs1Attn1_LTE_A_SEL:		
   1981          				PCA9555BitSet(Rvs_Att1_LTE_A_1,&AttnCS1Val); 	
   1982          				ForDelay(100L);
   1983          				PCA9555BitRst(Rvs_Att1_LTE_A_1,&AttnCS1Val); 				
   1984          			break;	
   1985          		}
   1986          	}
   1987          }
   1988          
   1989          void TimerRelatedOperation(void)
   1990          {
   1991          	if(TimeOverCheck(Timer_AttnOut))
   1992          	{
   1993          //		AttnOutBufferInit();
   1994          		TimerRegist(Timer_AttnOut, Time1Sec*5L); // 500msec 뒤에 다시 Attn!!
   1995          		iDebugCnt = 0; 
   1996          	}
   1997          }
   1998          
   1999          void TypeCheck(void)
   2000          {
   2001          	__Dnr_Sts	*Sts = tDnrSts;
   2002          
   2003          	if((RRTYPE == SET))
   2004          	{
   2005          		Sts->RepeaterType[0]	= hibyte(TRIO_M_TYPE);
   2006          		Sts->RepeaterType[1]	= lobyte(TRIO_M_TYPE);
   2007          		Sts->SWVer 				= TRIO_M_SystemVer;
   2008          		Sts->RCUAddVer 			= TRIO_M_PROGRAMVER;	
   2009          
   2010          		iRepeaterType = _TRIO_M;
   2011          	}
   2012          	else 
   2013          	{
   2014          		Sts->RepeaterType[0]	= hibyte(TRIO_MM_TYPE);
   2015          		Sts->RepeaterType[1]	= lobyte(TRIO_MM_TYPE);
   2016          		Sts->SWVer 				= TRIO_MM_SystemVer;
   2017          		Sts->RCUAddVer 			= TRIO_MM_PROGRAMVER;	
   2018          
   2019          		iRepeaterType = _TRIO_MM;
   2020          	}	 
   2021          //	iRepeaterType = _TRIO_MM;
   2022          }
   2023          
   2024          
   2025          void pPCA9555Port_Init(INT8U tIndex)
   2026          {
   2027          	_PCA9555Reg Reg;
   2028          	Reg.Data = tIndex;	// Output  0
   2029          
   2030          	PCASetConfiguration(Attn_CS0,Reg);
   2031          	PCASetConfiguration(Attn_CS1,Reg);
   2032          	PCASetConfiguration(Attn_CS2,Reg);
   2033          	PCASetConfiguration(Attn_CS3,Reg);
   2034          }
   2035          
   2036          
   2037          ///////////////////////////////////////////////////////////////////////////////
   2038          // End of Source File
   2039          
   2040          ////////////////////////

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     ADC_Select                 0
     AttAccuChange             40
     AttnDataOutput            24
     ChangeLvltoValue           8
     DnrReferToTable           24
     ExpioInit                  8
     ExpioPortInit              8
     ExpioTask                 48
     F_RESET_IN_Read            0
     FrontLEDDisplay           24
     FrontLEDSet                0
     MinMaxAttnCheck            0
     Period_Check              16
     ResetStart                 8
     ShutDownCheck              8
     StatustoIO                24
     TimerRelatedOperation      8
     TypeCheck                  0
     pPCA9555Port_Init         16


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     AttnCS0Val                16
     AttnCS1Val
     AttnCS2Val
     AttnCS3Val
     ExpioTaskStk            1024
     ExpioSem                   4
     ExpSem                     4
     LEDStatus                  8
     BlinkFlag                  1
     ResetCnt                   1
     Chk_Reset                 60
     ChkBandSelet
     ChkPllFregOffset_LTE
     SetSMS_PWR
     CurrFwdAttn1_2G
     CurrFwdAttn2_2G
     CurrRvsAttn1_2G
     CurrRvsAttn2_2G
     CurrRvsAttn3_2G
     CurrFwdAttn1_LTE
     CurrFwdAttn2_LTE
     CurrRvsAttn1_LTE
     CurrRvsAttn2_LTE
     CurrRvsAttn3_LTE
     CurrFwdAttn1_CDMALTE
     CurrRvsAttn1_CDMALTE
     CurrFwdAttn1_LTE_A1
     CurrFwdAttn2_LTE_A1
     CurrRvsAttn1_LTE_A1
     CurrRvsAttn2_LTE_A1
     CurrRvsAttn3_LTE_A1
     CurrFwdAttn1_LTE_A2
     CurrFwdAttn2_LTE_A2
     CurrRvsAttn1_LTE_A2
     CurrRvsAttn2_LTE_A2
     CurrRvsAttn3_LTE_A2
     CurrFwdAttn1_LTE_A
     CurrRvsAttn1_LTE_A
     CurrFwdAttn1_3G
     CurrFwdAttn2_3G
     CurrRvsAttn1_3G
     CurrRvsAttn2_3G
     CurrRvsAttn3_3G
     CurrRvsAttn4_3G
     CurrFwd1Attn1_LTE
     CurrFwd1Attn2_LTE
     CurrRvs1Attn1_LTE
     CurrRvs1Attn2_LTE
     CurrRvs1Attn3_LTE
     CurrRvs1Attn4_LTE
     CurrFwd1Attn1_LTE_A1
     CurrFwd1Attn2_LTE_A1
     CurrRvs1Attn1_LTE_A1
     CurrRvs1Attn2_LTE_A1
     CurrRvs1Attn3_LTE_A1
     CurrFwd1Attn1_LTE_A2
     CurrFwd1Attn2_LTE_A2
     CurrRvs1Attn1_LTE_A2
     CurrRvs1Attn2_LTE_A2
     CurrRvs1Attn3_LTE_A2
     CurrFwd1Attn1_LTE_A
     CurrRvs1Attn1_LTE_A
     CurrLTE15MUse
     CurrModemOnOff
     iBand_Freq
     Chk_Factory_default        1
     iResetCnt                  1
     PeriodCnt                  2
     Chk_RvsOSCAlarmCount
     ChkAttChange               1
     RedLEDFlag_2G             16
     RedLEDFlag_LTE
     RedLEDFlag_LTE_A1
     RedLEDFlag_LTE_A2
     RedLEDFlag_3G
     RedLEDFlag_LTE_1
     RedLEDFlag_LTE_A1_1
     RedLEDFlag_LTE_A2_1
     YellowLEDFlag_2G
     YellowLEDFlag_LTE
     YellowLEDFlag_LTE_A1
     YellowLEDFlag_LTE_A2
     YellowLEDFlag_3G
     YellowLEDFlag_LTE_1
     YellowLEDFlag_LTE_A1_1
     YellowLEDFlag_LTE_A2_1
     Pre_AC_Sts                 1
     SetAcRecovery              1
     RefFwdAmpOnOff_2G          1
     RefFwdAmpOnOff_LTE         1
     RefFwdAmpOnOff_LTE_A1      1
     RefFwdAmpOnOff_LTE_A2      1
     RefFwdAmpOnOff_3G          1
     RefFwdAmp1OnOff_LTE        1
     RefFwdAmp1OnOff_LTE_A1     1
     RefFwdAmp1OnOff_LTE_A2     1
     CurrACFail                 1
     CurrRvsOverInAlarm         1
     CurrRvsOtherOverInAlarm    1
     dptr                      12
     ExpioInit                 16
     ExpioPortInit             16
     ExpioTask                450
     ResetStart                10
     F_RESET_IN_Read            4
     Period_Check             264
     ShutDownCheck            332
     MinMaxAttnCheck           20
     FrontLEDSet               12
     FrontLEDDisplay         2430
     ADC_Select                82
     ChangeLvltoValue          48
     DnrReferToTable           98
     AttAccuChange           1348
     StatustoIO              1680
     AttnDataOutput          1742
     TimerRelatedOperation     28
     TypeCheck                 58
     pPCA9555Port_Init         56
     ??DataTable5               4
     ??DataTable5_1             4
     ??DataTable5_2             4
     ??DataTable5_3             4
     ??DataTable5_4             4
     ??DataTable5_5             4
     ??DataTable5_6             4
     ??DataTable5_7             4
     ??DataTable5_8             4
     ??DataTable5_9             4
     ??DataTable5_10            4
     ??DataTable5_11            4
     ??DataTable5_12            4
     ??DataTable5_13            4
     ??DataTable5_14            4
     ??DataTable5_15            4
     ??DataTable5_16            4
     ??DataTable5_17            4
     ??DataTable6               4
     ??DataTable6_1             4
     ??DataTable6_2             4
     ??DataTable6_3             4
     ??DataTable6_4             4
     ??DataTable7               4
     ??DataTable7_1             4
     ??DataTable7_2             4
     ??DataTable7_3             4
     ??DataTable8               4
     ??DataTable8_1             4
     ??DataTable8_2             4
     ??DataTable8_3             4
     ??DataTable8_4             4
     ??DataTable8_5             4
     ??DataTable8_6             4
     ??DataTable8_7             4
     ??DataTable8_8             4
     ??DataTable8_9             4
     ??DataTable8_10            4
     ??DataTable8_11            4
     ??DataTable8_12            4
     ??DataTable9               4
     ??DataTable10              4
     ??DataTable10_1            4
     ??DataTable10_2            4
     ??DataTable10_3            4
     ??DataTable10_4            4
     ??DataTable10_5            4
     ??DataTable11              4
     ??DataTable14              4
     ??DataTable14_1            4
     ??DataTable14_2            4
     ??DataTable14_3            4
     ??DataTable14_4            4
     ??DataTable14_5            4
     ??DataTable14_6            4
     ??DataTable14_7            4
     ??DataTable14_8            4
     ??DataTable14_9            4
     ??DataTable14_10           4
     ??DataTable14_11           4
     ??DataTable14_12           4
     ??DataTable14_13           4
     ??DataTable14_14           4
     ??DataTable14_15           4
     ??DataTable14_16           4
     ??DataTable14_17           4
     ??DataTable14_18           4
     ??DataTable14_19           4
     ??DataTable14_20           4

 
 1 164 bytes in section .bss
 8 970 bytes in section .text
 
 8 970 bytes of CODE memory
 1 164 bytes of DATA memory

Errors: none
Warnings: none

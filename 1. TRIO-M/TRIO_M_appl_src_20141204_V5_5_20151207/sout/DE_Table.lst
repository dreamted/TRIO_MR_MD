###############################################################################
#                                                                             #
#                                                       19/May/2017  23:29:22 #
# IAR ANSI C/C++ Compiler V5.50.5.21995/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\code\DE_Table.C                                 #
#    Command line =  "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\code\DE_Table.C" -D _MIMO_Type -D __2rd -D     #
#                    __PLLEnToggle -lcN "D:\Project\TRIO\1.                   #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\sout\" -o  #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\sout\" --endian=little --cpu=Cortex-M3 -e      #
#                    --require_prototypes --warnings_are_errors --fpu=None    #
#                    --dlib_config "D:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4                           #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5 #
#                    _20151207\include\" -I "D:\Project\TRIO\1.               #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    inc\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\lib_stm32\ #
#                    src\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-CPU\"   #
#                    -I "D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V #
#                    5_5_20151207\uC-LIB\" -I "D:\Project\TRIO\1.             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\Po #
#                    rts\" -I "D:\Project\TRIO\1.                             #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uCOS-II\So #
#                    urce\" -I "D:\Project\TRIO\1.                            #
#                    TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\uC-Probe\" #
#                     -I "D:\Program Files (x86)\IAR Systems\Embedded         #
#                    Workbench 5.4 Evaluation\arm\INC\" -Oh                   #
#    List file    =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\DE_Table.lst                               #
#    Object file  =  D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_ #
#                    20151207\sout\DE_Table.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\1. TRIO-M\TRIO_M_appl_src_20141204_V5_5_20151207\code\DE_Table.C
      1          /*********************************************
      2          * File Name          : DE_Table.c
      3          * Author             :
      4          * Date First Issued  : 10/20/2010
      5          * Description        : This file provides all the port/input/update firmware functions.
      6          * $Revision: 0.1 $
      7          * $Revision date: 2010.10.__
      8          ********************************************************************************/
      9          
     10          #define DE_Table_C
     11          
     12          #include "../include/main.h"
     13          
     14          
     15          
     16          void DefaultValueSet(void)
     17          {
     18          	__Dnr_Sts *Sts = tDnrSts;
     19          	
     20          	INT32U cpu_sr;
     21          
     22          	OS_ENTER_CRITICAL();
     23          
     24          	Sts->FwdOutUpperLmt_3G[0]		= FwdHighLmt_3G; 
     25          	Sts->FwdOutUpperLmt_3G[1]		= 0; 
     26          	Sts->FwdOutLowerLmt_3G[0]		= FwdHighLmt_3G - 10; 
     27          	Sts->FwdOutLowerLmt_3G[1]		= 0; 
     28          	Sts->FwdGainSet_3G				= DefaultGain_3G; 
     29          	Sts->Rvs0GainSet_3G 			= DefaultGain_3G;
     30          	Sts->RvsGainBalance_3G			= DefaultGainBalance;
     31          
     32          	Sts->OverInAlarmLmt_3G			= FwdOverInSDAlmLmt_3G; 
     33          
     34          	Sts->FwdOutUpperLmt_2G[0]		= FwdHighLmt_2G; 
     35          	Sts->FwdOutUpperLmt_2G[1]		= 0; 
     36          	Sts->FwdOutLowerLmt_2G[0]		= FwdHighLmt_2G - 10; 
     37          	Sts->FwdOutLowerLmt_2G[1]		= 0; 
     38          	Sts->FwdGainSet_2G				= DefaultGain_2G;
     39          	Sts->Rvs0GainSet_2G 			= DefaultGain_2G;
     40          	Sts->RvsGainBalance_2G			= DefaultGainBalance;
     41          
     42          	Sts->OverInAlarmLmt_2G			= FwdOverInSDAlmLmt_2G; 
     43          
     44          	Sts->FwdOutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
     45          	Sts->FwdOutUpperLmt_LTE[1]		= 0;
     46          	Sts->FwdOutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
     47          	Sts->FwdOutLowerLmt_LTE[1]		= 0;
     48          	Sts->FwdGainSet_LTE 			= DefaultGain_LTE;
     49          	Sts->Rvs0GainSet_LTE			= DefaultGain_LTE; 
     50          	Sts->RvsGainBalance_LTE 		= DefaultGainBalance; 
     51          
     52          	Sts->OverInAlarmLmt_LTE 		= FwdOverInSDAlmLmt_LTE; 
     53          
     54          	Sts->FwdOutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
     55          	Sts->FwdOutUpperLmt_LTE_A1[1]	= 0;
     56          	Sts->FwdOutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 -10;
     57          	Sts->FwdOutLowerLmt_LTE_A1[1]	= 0;
     58          	Sts->FwdGainSet_LTE_A1			= DefaultGain_LTE_A;
     59          	Sts->Rvs0GainSet_LTE_A1			= DefaultGain_LTE_A;
     60          	Sts->RvsGainBalance_LTE_A1		= DefaultGainBalance; 
     61          
     62          	Sts->OverInAlarmLmt_LTE_A1		= FwdOverInSDAlmLmt_LTE_A1; 
     63          
     64          	Sts->FwdOutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2;
     65          	Sts->FwdOutUpperLmt_LTE_A2[1]	= 0;
     66          	Sts->FwdOutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2 -10;
     67          	Sts->FwdOutLowerLmt_LTE_A2[1]	= 0;
     68          	Sts->FwdGainSet_LTE_A2			= DefaultGain_LTE_A;
     69          	Sts->Rvs0GainSet_LTE_A2			= DefaultGain_LTE_A;
     70          	Sts->RvsGainBalance_LTE_A2		= DefaultGainBalance; 
     71          
     72          	Sts->OverInAlarmLmt_LTE_A2		= FwdOverInSDAlmLmt_LTE_A2; 
     73          
     74          	Sts->Fwd1OutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
     75          	Sts->Fwd1OutUpperLmt_LTE[1]		= 0;
     76          	Sts->Fwd1OutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
     77          	Sts->Fwd1OutLowerLmt_LTE[1]		= 0;
     78          	Sts->Fwd1GainSet_LTE 			= DefaultGain_LTE;
     79          	Sts->Rvs1GainSet_LTE			= DefaultGain_LTE; 
     80          	Sts->Rvs1GainBalance_LTE 		= DefaultGainBalance;
     81          
     82          	Sts->Fwd1OutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
     83          	Sts->Fwd1OutUpperLmt_LTE_A1[1]	= 0;
     84          	Sts->Fwd1OutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 - 10;
     85          	Sts->Fwd1OutLowerLmt_LTE_A1[1]	= 0;
     86          	Sts->Fwd1GainSet_LTE_A1			= DefaultGain_LTE_A;
     87          	Sts->Rvs1GainSet_LTE_A1			= DefaultGain_LTE_A;
     88          	Sts->Rvs1GainBalance_LTE_A1		= DefaultGainBalance; 
     89          
     90          	Sts->Fwd1OutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1;
     91          	Sts->Fwd1OutUpperLmt_LTE_A2[1]	= 0;
     92          	Sts->Fwd1OutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1 - 10;
     93          	Sts->Fwd1OutLowerLmt_LTE_A2[1]	= 0;
     94          	Sts->Fwd1GainSet_LTE_A2			= DefaultGain_LTE_A;
     95          	Sts->Rvs1GainSet_LTE_A2			= DefaultGain_LTE_A;
     96          	Sts->Rvs1GainBalance_LTE_A2		= DefaultGainBalance; 
     97          
     98          	Sts->AmpOffCase_2G				= Enable; 
     99          	Sts->AmpOffCase_LTE				= Enable; 
    100          	Sts->AmpOffCase_3G				= Enable; 
    101          	Sts->AmpOffCase_LTE_A1			= Enable; 
    102          	Sts->AmpOffCase_LTE_A2			= Enable; 
    103          
    104          	Sts->LTE15MUse 					= __NOTUSE; 
    105          
    106          	Sts->AGCOnOff_3G				= Enable; 
    107          	Sts->AGCOnOff_CDMALTE			= Enable; 
    108          	Sts->AGCOnOff_LTE_A_0 			= Enable;
    109          	Sts->AGC1OnOff_LTE				= Enable;
    110          	Sts->AGCOnOff_LTE_A_1			= Enable;
    111          	
    112          	Sts->AGCMode_3G 				= _AGCAvgMode;
    113          	Sts->AGCMode_2G 				= _AGCAvgMode;
    114          	Sts->AGCMode_LTE				= _AGCPeakMode;
    115          	Sts->AGCMode_LTE_A1				= _AGCPeakMode;
    116          	Sts->AGCMode_LTE_A2				= _AGCPeakMode;
    117          	
    118          	Sts->AutoReportPriod			= 0;
    119          	Sts->AutoReportBasePer[0]		= 0;
    120          	Sts->AutoReportBasePer[1]		= 0;
    121          	Sts->TPTL_OnOff 				= Disable;
    122          	Sts->TempOffset 				= 0;
    123          	Sts->AlarmMask					= Enable;
    124          	Sts->VccDet_Lmt.Data			= 4200; 
    125          	Sts->FwdInPwrOffset_2G			= 0; 
    126          	Sts->FwdInPwrOffset_3G			= 0; 
    127          	Sts->Rvs0OutPwrOffset_2G		= 0; 
    128          	Sts->Rvs0OutPwrOffset_3G		= 0; 
    129          	Sts->FwdOutPwrOffset_2G 		= 0; 
    130          	Sts->FwdOutPwrOffset_3G 		= 0; 
    131          	Sts->ResetPeriodCountSet[0] 	= 1; 
    132          	Sts->ResetPeriodCountSet[1] 	= 0; 
    133          	Sts->ResetPeriodCountSet[2] 	= 0; 
    134          	Sts->FwdInPwrOffset_LTE 		= 0;
    135          	Sts->FwdOutPwrOffset_LTE		= 0;
    136          	Sts->RvsOutPwrOffset_LTE		= 0;
    137          	{
    138          		INT8U i;
    139          
    140          		for(i = 0; i < (sizeof(__DET)); i++)	 *((INT8U *)&(Sts->DetOffset.FwdOutAvgPwr_2G) + i) = 0;
    141          		
    142          		for(i = 0; i < (sizeof(__DET1)); i++)	 *((INT8U *)&(Sts->Det1Offset.Fwd1OutAvgPwr_LTE) + i) = 0;
    143          	}
    144          	Sts->FwdInPwrOffset_LTE_A1		= 0; 
    145          	Sts->FwdOutPwrOffset_LTE_A1		= 0; 
    146          	Sts->RvsOutPwrOffset_LTE_A1		= 0; 
    147          
    148          	Sts->FwdInPwrOffset_LTE_A2		= 0; 
    149          	Sts->FwdOutPwrOffset_LTE_A2		= 0; 
    150          	Sts->RvsOutPwrOffset_LTE_A2		= 0; 
    151          	Sts->WaveCtrl.RxMaxVal[0]				= 0x30;
    152          	Sts->WaveCtrl.RxMaxVal[1]				= 0x61;
    153          	Sts->WaveCtrl.RxMinVal[0]				= 0x39;
    154          	Sts->WaveCtrl.RxMinVal[1]				= 0x63;
    155          	Sts->WaveCtrl.TxMaxVal[0]				= 0x33;
    156          	Sts->WaveCtrl.TxMaxVal[1]				= 0x63;
    157          	Sts->WaveCtrl.TxMinVal[0]				= 0x62;
    158          	Sts->WaveCtrl.TxMinVal[1]				= 0x30;
    159          	Sts->WaveCtrl.EcIo						= 0x10;	//-10
    160          	Sts->WaveCtrl.Radio_ReportTime[0]		= 0;
    161          	Sts->WaveCtrl.Radio_ReportTime[1]		= 0;
    162          	Sts->Amp1OffCase_LTE			= Enable;
    163          	Sts->Amp1OffCase_LTE_A1			= Enable;
    164          	Sts->Fwd1InPwrOffset_LTE_A1		= 0;
    165          	Sts->Fwd1OutPwrOffset_LTE_A1 	= 0;
    166          	Sts->Rvs1OutPwrOffset_LTE_A1 	= 0;
    167          	Sts->Amp1OffCase_LTE_A2			= Enable;
    168          	Sts->Fwd1InPwrOffset_LTE_A2		= 0;
    169          	Sts->Fwd1OutPwrOffset_LTE_A2 	= 0;
    170          	Sts->Rvs1OutPwrOffset_LTE_A2 	= 0;
    171          	Sts->Band_Select_LTE_A1		   = __USE;
    172          	Sts->Band_Select_LTE_A2[0]     = __USE;
    173          	Sts->Band_Select_LTE_A2[1]     = 1;
    174          	Sts->Band_Select_LTE_A2[2]     = 0x70;
    175          
    176          
    177          	Sts->RvsALCLvl_2G 		= RvsHighLmt_2G; 
    178          	Sts->RvsALCLvl_3G 		= RvsHighLmt_2G; 
    179          	Sts->RvsALCLvl_LTE 		= RvsHighLmt_2G; 
    180          	Sts->RvsALCLvl_LTE_A1	= RvsHighLmt_2G; 
    181          	Sts->RvsALCLvl_LTE_A2 	= RvsHighLmt_2G; 
    182          	Sts->Rvs1ALCLvl_LTE		= RvsHighLmt_2G; 
    183          	Sts->Rvs1ALCLvl_LTE_A1	= RvsHighLmt_2G; 
    184          	Sts->Rvs1ALCLvl_LTE_A2 	= RvsHighLmt_2G; 
    185          
    186          	if(iRepeaterType == _TRIO_M)
    187          	{
    188          		Sts->DCOffSet = 1930;
    189          	}
    190          	else
    191          	{
    192          
    193          		Sts->DCOffSet = 1990;
    194          	}
    195          
    196          
    197          	Sts->FemtocellUseOnOff.LTE = __NOTUSE;
    198          	Sts->FemtocellUseOnOff.LTE_A1 = __NOTUSE;
    199          	Sts->FemtocellUseOnOff.LTE_A2 = __NOTUSE;
    200          
    201          	Sts->FemtocellUseOnOff.LTE_1= __NOTUSE;
    202          	Sts->FemtocellUseOnOff.LTE_A1_1 = __NOTUSE;
    203          	Sts->FemtocellUseOnOff.LTE_A2_1 = __NOTUSE;
    204          
    205          
    206          	tDnrSts->AutoReportPriod = 0x05;
    207          
    208          	tDnrSts->WaveCtrl.Radio_ReportPeriod[0] = 0x09;
    209          	tDnrSts->WaveCtrl.Radio_ReportPeriod[1] = 0x10;
    210          
    211          	Sts->WaveCtrl.AR_Mode[0] = 0x03;
    212          	Sts->WaveCtrl.AR_Mode[1] = 0x03;
    213          
    214          	SaveBackupData();
    215          	OS_EXIT_CRITICAL();
    216          }
    217          
    218          
    219          void DefaultTableSet(void)
    220          {
    221          	__Dnr_Sts *Sts = tDnrSts;
    222          	
    223          	INT32U cpu_sr;
    224          
    225          	OS_ENTER_CRITICAL();
    226          
    227          	Sts->FwdOutUpperLmt_3G[0]		= FwdHighLmt_3G; 
    228          	Sts->FwdOutUpperLmt_3G[1]		= 0; 
    229          	Sts->FwdOutLowerLmt_3G[0]		= FwdHighLmt_3G - 10; 
    230          	Sts->FwdOutLowerLmt_3G[1]		= 0; 
    231          	Sts->FwdGainSet_3G				= DefaultGain_3G; 
    232          	Sts->Rvs0GainSet_3G 			= DefaultGain_3G;
    233          	Sts->RvsGainBalance_3G			= DefaultGainBalance;
    234          
    235          	Sts->OverInAlarmLmt_3G			= FwdOverInSDAlmLmt_3G; 
    236          
    237          	Sts->FwdOutUpperLmt_2G[0]		= FwdHighLmt_2G; 
    238          	Sts->FwdOutUpperLmt_2G[1]		= 0; 
    239          	Sts->FwdOutLowerLmt_2G[0]		= FwdHighLmt_2G - 10; 
    240          	Sts->FwdOutLowerLmt_2G[1]		= 0; 
    241          	Sts->FwdGainSet_2G				= DefaultGain_2G;
    242          	Sts->Rvs0GainSet_2G 			= DefaultGain_2G;
    243          	Sts->RvsGainBalance_2G			= DefaultGainBalance;
    244          
    245          	Sts->OverInAlarmLmt_2G			= FwdOverInSDAlmLmt_2G; 
    246          
    247          	Sts->FwdOutUpperLmt_LTE[0]		= FwdHighLmt_LTE; 
    248          	Sts->FwdOutUpperLmt_LTE[1]		= 0;
    249          	Sts->FwdOutLowerLmt_LTE[0]		= FwdHighLmt_LTE - 10;
    250          	Sts->FwdOutLowerLmt_LTE[1]		= 0;
    251          	Sts->FwdGainSet_LTE 			= DefaultGain_LTE;
    252          	Sts->Rvs0GainSet_LTE			= DefaultGain_LTE; 
    253          	Sts->RvsGainBalance_LTE 		= DefaultGainBalance; 
    254          
    255          	Sts->OverInAlarmLmt_LTE 		= FwdOverInSDAlmLmt_LTE; 
    256          
    257          	Sts->FwdOutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
    258          	Sts->FwdOutUpperLmt_LTE_A1[1]	= 0;
    259          	Sts->FwdOutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 -10;
    260          	Sts->FwdOutLowerLmt_LTE_A1[1]	= 0;
    261          	Sts->FwdGainSet_LTE_A1			= DefaultGain_LTE_A;
    262          	Sts->Rvs0GainSet_LTE_A1 		= DefaultGain_LTE_A;
    263          	Sts->RvsGainBalance_LTE_A1		= DefaultGainBalance; 
    264          
    265          	Sts->OverInAlarmLmt_LTE_A1		= FwdOverInSDAlmLmt_LTE_A1; 
    266          
    267          	Sts->FwdOutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2;
    268          	Sts->FwdOutUpperLmt_LTE_A2[1]	= 0;
    269          	Sts->FwdOutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A2 -10;
    270          	Sts->FwdOutLowerLmt_LTE_A2[1]	= 0;
    271          	Sts->FwdGainSet_LTE_A2			= DefaultGain_LTE_A;
    272          	Sts->Rvs0GainSet_LTE_A2 		= DefaultGain_LTE_A;
    273          	Sts->RvsGainBalance_LTE_A2		= DefaultGainBalance; 
    274          
    275          	Sts->OverInAlarmLmt_LTE_A2		= FwdOverInSDAlmLmt_LTE_A2; 
    276          
    277          	Sts->Fwd1OutUpperLmt_LTE[0] 	= FwdHighLmt_LTE; 
    278          	Sts->Fwd1OutUpperLmt_LTE[1] 	= 0;
    279          	Sts->Fwd1OutLowerLmt_LTE[0] 	= FwdHighLmt_LTE - 10;
    280          	Sts->Fwd1OutLowerLmt_LTE[1] 	= 0;
    281          	Sts->Fwd1GainSet_LTE			= DefaultGain_LTE;
    282          	Sts->Rvs1GainSet_LTE			= DefaultGain_LTE; 
    283          	Sts->Rvs1GainBalance_LTE		= DefaultGainBalance;
    284          
    285          	Sts->Fwd1OutUpperLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1;
    286          	Sts->Fwd1OutUpperLmt_LTE_A1[1]	= 0;
    287          	Sts->Fwd1OutLowerLmt_LTE_A1[0]	= FwdHighLmt_LTE_A1 - 10;
    288          	Sts->Fwd1OutLowerLmt_LTE_A1[1]	= 0;
    289          	Sts->Fwd1GainSet_LTE_A1 		= DefaultGain_LTE_A;
    290          	Sts->Rvs1GainSet_LTE_A1 		= DefaultGain_LTE_A;
    291          	Sts->Rvs1GainBalance_LTE_A1 	= DefaultGainBalance; 
    292          
    293          	Sts->Fwd1OutUpperLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1;
    294          	Sts->Fwd1OutUpperLmt_LTE_A2[1]	= 0;
    295          	Sts->Fwd1OutLowerLmt_LTE_A2[0]	= FwdHighLmt_LTE_A1 - 10;
    296          	Sts->Fwd1OutLowerLmt_LTE_A2[1]	= 0;
    297          	Sts->Fwd1GainSet_LTE_A2 		= DefaultGain_LTE_A;
    298          	Sts->Rvs1GainSet_LTE_A2 		= DefaultGain_LTE_A;
    299          	Sts->Rvs1GainBalance_LTE_A2 	= DefaultGainBalance; 
    300          
    301          	Sts->AmpOffCase_2G				= Enable; 
    302          	Sts->AmpOffCase_LTE 			= Enable; 
    303          	Sts->AmpOffCase_3G				= Enable; 
    304          	Sts->AmpOffCase_LTE_A1			= Disable; 
    305          	Sts->AmpOffCase_LTE_A2			= Disable; 
    306          
    307          	Sts->LTE15MUse					= __NOTUSE; 
    308          
    309          	Sts->AGCOnOff_3G				= Enable; 
    310          	Sts->AGCOnOff_CDMALTE			= Enable; 
    311          	Sts->AGCOnOff_LTE_A_0			= Enable;
    312          	Sts->AGC1OnOff_LTE				= Enable;
    313          	Sts->AGCOnOff_LTE_A_1			= Enable;
    314          	
    315          	Sts->AGCMode_3G 				= _AGCAvgMode;
    316          	Sts->AGCMode_2G 				= _AGCAvgMode;
    317          	Sts->AGCMode_LTE				= _AGCPeakMode;
    318          	Sts->AGCMode_LTE_A1 			= _AGCPeakMode;
    319          	Sts->AGCMode_LTE_A2 			= _AGCPeakMode;
    320          	
    321          	Sts->AutoReportPriod			= 0;
    322          	Sts->AutoReportBasePer[0]		= 0;
    323          	Sts->AutoReportBasePer[1]		= 0;
    324          	Sts->TPTL_OnOff 				= Disable;
    325          	Sts->AlarmMask					= Enable;
    326          	Sts->VccDet_Lmt.Data			= 4200; 
    327          	Sts->ResetPeriodCountSet[0] 	= 1; 
    328          	Sts->ResetPeriodCountSet[1] 	= 0; 
    329          	Sts->ResetPeriodCountSet[2] 	= 0; 
    330          
    331          	Sts->WaveCtrl.RxMaxVal[0]				= 0x30;
    332          	Sts->WaveCtrl.RxMaxVal[1]				= 0x61;
    333          	Sts->WaveCtrl.RxMinVal[0]				= 0x39;
    334          	Sts->WaveCtrl.RxMinVal[1]				= 0x63;
    335          	Sts->WaveCtrl.TxMaxVal[0]				= 0x33;
    336          	Sts->WaveCtrl.TxMaxVal[1]				= 0x63;
    337          	Sts->WaveCtrl.TxMinVal[0]				= 0x62;
    338          	Sts->WaveCtrl.TxMinVal[1]				= 0x30;
    339          	Sts->WaveCtrl.EcIo						= 0x10; //-10
    340          	Sts->WaveCtrl.Radio_ReportTime[0]		= 0;
    341          	Sts->WaveCtrl.Radio_ReportTime[1]		= 0;
    342          	
    343          	Sts->Amp1OffCase_LTE				= Enable;
    344          	Sts->Amp1OffCase_LTE_A1 			= Disable;
    345          	Sts->Amp1OffCase_LTE_A2 			= Disable;
    346          	
    347          	Sts->Band_Select_LTE_A1 	   = __NOTUSE;
    348          	Sts->Band_Select_LTE_A2[0]	   = __NOTUSE;
    349          	Sts->Band_Select_LTE_A2[1]	   = 1;
    350          	Sts->Band_Select_LTE_A2[2]	   = 0x70;
    351          
    352          
    353          	Sts->RvsALCLvl_2G		= RvsHighLmt_2G; 
    354          	Sts->RvsALCLvl_3G		= RvsHighLmt_2G; 
    355          	Sts->RvsALCLvl_LTE		= RvsHighLmt_2G; 
    356          	Sts->RvsALCLvl_LTE_A1	= RvsHighLmt_2G; 
    357          	Sts->RvsALCLvl_LTE_A2	= RvsHighLmt_2G; 
    358          	Sts->Rvs1ALCLvl_LTE 	= RvsHighLmt_2G; 
    359          	Sts->Rvs1ALCLvl_LTE_A1	= RvsHighLmt_2G; 
    360          	Sts->Rvs1ALCLvl_LTE_A2	= RvsHighLmt_2G; 
    361          
    362          	Sts->FemtocellUseOnOff.LTE = __NOTUSE;
    363          	Sts->FemtocellUseOnOff.LTE_A1 = __NOTUSE;
    364          	Sts->FemtocellUseOnOff.LTE_A2 = __NOTUSE;
    365          
    366          	Sts->FemtocellUseOnOff.LTE_1= __NOTUSE;
    367          	Sts->FemtocellUseOnOff.LTE_A1_1 = __NOTUSE;
    368          	Sts->FemtocellUseOnOff.LTE_A2_1 = __NOTUSE;
    369          
    370          	tDnrSts->AutoReportPriod = 0x05;
    371          
    372          	tDnrSts->WaveCtrl.Radio_ReportPeriod[0] = 0x09;
    373          	tDnrSts->WaveCtrl.Radio_ReportPeriod[1] = 0x10;
    374          
    375          	Sts->WaveCtrl.AR_Mode[0] = 0x03;
    376          	Sts->WaveCtrl.AR_Mode[1] = 0x03;
    377          
    378          	SaveBackupData();
    379          	OS_EXIT_CRITICAL();
    380          }
    381          
    382          void Response_Table_DE(INT8U Comm,__ProtocolPtr *nPtr)
    383          {
    384          	INT8U TblID = 0;
    385          	INT8S tIndex = 0;
    386          
    387          	INT8S tlimit;
    388          	INT8U tsize;
    389          	INT32U tbllen = 0;		//, mlen = 0;
    390          	INT32U i = 0;
    391          
    392          
    393          	__WRCSSIO *Recv = nPtr->WRCSRecv;
    394          	__WRCSSIO *Send = nPtr->WRCSSend;
    395          
    396              __BODYFRAME *rBody = &Recv->BodyFrame[Recv->cBody];
    397              __BODYFRAME *sBody = &Send->BodyFrame[Recv->cBody];
    398          
    399          	TblID = rBody->SubData[0];
    400          	
    401          	INT8U tid[3] = {rBody->SubID[0], rBody->SubID[1], rBody->SubID[2]};
    402          
    403          	if( (tIndex = TableIndex(TblID)) == -1) return;
    404          
    405          	switch(TblID)	//command üũ
    406          	{
    407          		case Index_RvsOutPwr_CDMALTE 	:
    408          		case Index_FwdOutAvgPwr_LTE_A1 	:
    409          		case Index_FwdOutPeakPwr_LTE_A1	:
    410          		case Index_RvsOutPwr_LTE_A1 	:
    411          		case Index_RvsOutPwr_LTE_A2 	:
    412          		case Index_FwdOutAvgPwr_LTE_A2 	:
    413          		case Index_FwdOutPeakPwr_LTE_A2	:
    414          		case Index_FwdInPwr_LTE_A		:
    415          		case Index_RvsOutPwr_LTE_A 		:
    416          		case Index_FwdInPwr_3G 			:
    417          		case Index_Fwd1OutAvgPwr_LTE 	:
    418          		case Index_Fwd1OutPeakPwr_LTE	:
    419          		case Index_Rvs1InPwr_LTE 		:
    420          		case Index_FwdOutAvgPwr_LTE_A_1 :
    421          		{
    422          			__Dnr0OutputTblStr *TblStr;
    423          			
    424          			if( Comm == DDRTableSetQue)
    425          			{
    426          				INT32U cpu_sr;
    427          				OS_ENTER_CRITICAL();
    428          
    429          				{
    430          					EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
    431          
    432          					TblStr = &(tptr->Dnr0OutputTbl[tIndex]);
    433          					tlimit = TblStr->limit = rBody->SubData[1];
    434          					tsize = TblStr->nsize = rBody->SubData[2];
    435          
    436          					if( tsize > Dnr0OutputTBL_Size)  tsize = TblStr->nsize =  Dnr0OutputTBL_Size; 
    437          
    438          					tbllen = (tsize*2); // data type: int16!!
    439          
    440          					{
    441          						INT16U *dsptr = (INT16U *)TblStr->Data;
    442          						INT16U *stptr = (INT16U *)&rBody->SubData[3];
    443          						for(i = 0; i < tbllen/2 && i < (Dnr0OutputTBL_Size); i++)
    444          						{
    445          							dsptr[i] = swab16(stptr[i]);
    446          						}
    447          					}
    448          
    449          					WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
    450          				}
    451          				OS_EXIT_CRITICAL();
    452          			}
    453          			{
    454          				TblStr = &(vEE_TABLE1->Dnr0OutputTbl[tIndex]);
    455          
    456          				tlimit = TblStr->limit;
    457          				tsize  = TblStr->nsize;
    458          				if( tsize > Dnr0OutputTBL_Size)  tsize = TblStr->nsize =  Dnr0OutputTBL_Size; 
    459          				tbllen = (tsize*2); // data type: int16!!
    460          
    461          					
    462          				sBody->SubData[0] = TblID;
    463          				sBody->SubData[1] = tlimit;
    464          				sBody->SubData[2] = tsize;
    465          				{
    466          					INT16U *dsptr = (INT16U *)&sBody->SubData[3];
    467          					INT16U *stptr = (INT16U *)TblStr->Data;
    468          
    469          					for(i = 0; i < tbllen/2 && i < (Dnr0OutputTBL_Size); i++)
    470          					{
    471          						dsptr[i] = swab16(stptr[i]);
    472          					}
    473          				}
    474          			}
    475          		}
    476          		break;
    477          
    478          		case Index_FwdInPwr_CDMALTE		:
    479          		case Index_RvsOutPwr_3G			:
    480          		case Index_RvsInPwr_LTE_A_1		:
    481          		{
    482          			__Dnr1OutputTblStr *TblStr;
    483          			
    484          			if( Comm == DDRTableSetQue)
    485          			{
    486          				INT32U cpu_sr;
    487          				OS_ENTER_CRITICAL();
    488          
    489          				{
    490          					EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
    491          
    492          					TblStr = &(tptr->Dnr1OutputTbl[tIndex]);
    493          					tlimit = TblStr->limit = rBody->SubData[1];
    494          					tsize = TblStr->nsize = rBody->SubData[2];
    495          
    496          					if( tsize > Dnr1OutputTBL_Size)  tsize = TblStr->nsize =  Dnr1OutputTBL_Size; 
    497          
    498          					tbllen = (tsize*2); // data type: int16!!
    499          
    500          					{
    501          						INT16U *dsptr = (INT16U *)TblStr->Data;
    502          						INT16U *stptr = (INT16U *)&rBody->SubData[3];
    503          						for(i = 0; i < tbllen/2 && i < (Dnr1OutputTBL_Size); i++)
    504          						{
    505          							dsptr[i] = swab16(stptr[i]);
    506          						}
    507          					}
    508          
    509          					WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
    510          				}
    511          				OS_EXIT_CRITICAL();
    512          			}
    513          			{
    514          				TblStr = &(vEE_TABLE1->Dnr1OutputTbl[tIndex]);
    515          
    516          				tlimit = TblStr->limit;
    517          				tsize  = TblStr->nsize;
    518          				if( tsize > Dnr1OutputTBL_Size)  tsize = TblStr->nsize =  Dnr1OutputTBL_Size; 
    519          				tbllen = (tsize*2); // data type: int16!!
    520          
    521          					
    522          				sBody->SubData[0] = TblID;
    523          				sBody->SubData[1] = tlimit;
    524          				sBody->SubData[2] = tsize;
    525          				{
    526          					INT16U *dsptr = (INT16U *)&sBody->SubData[3];
    527          					INT16U *stptr = (INT16U *)TblStr->Data;
    528          
    529          					for(i = 0; i < tbllen/2 && i < (Dnr1OutputTBL_Size); i++)
    530          					{
    531          						dsptr[i] = swab16(stptr[i]);
    532          					}
    533          				}
    534          			}
    535          		}
    536          		break;
    537          
    538          		case Index_FwdOutAvgPwr_2G		:
    539          		case Index_FwdOutPeakPwr_2G 	:
    540          		case Index_RvsOutPwr_2G 		:
    541          		case Index_FwdOutAvgPwr_LTE 	:
    542          		case Index_FwdOutPeakPwr_LTE	:
    543          		case Index_RvsOutPwr_LTE 		:
    544          		case Index_FwdOutAvgPwr_CDMALTE 	:
    545          		case Index_FwdOutPeakPwr_CDMALTE :
    546          		case Index_RvsInPwr_CDMALTE		:
    547          		case Index_FwdOutAvgPwr_LTE_A 	:
    548          		case Index_FwdOutAvgPwr_3G 		:
    549          		case Index_FwdOutPeakPwr_3G 	:
    550          		case Index_RvsInPwr_3G 			:
    551          		{
    552          			__Svr0OutputTblStr *TblStr;
    553          			
    554          			if( Comm == DDRTableSetQue)
    555          			{
    556          				INT32U cpu_sr;
    557          				OS_ENTER_CRITICAL();
    558          
    559          				{
    560          					EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
    561          
    562          					TblStr = &(tptr->Svr0OutputTbl[tIndex]);
    563          					tlimit = TblStr->limit = rBody->SubData[1];
    564          					tsize = TblStr->nsize = rBody->SubData[2];
    565          
    566          					if( tsize > Svr0OutputTBL_Size)  tsize = TblStr->nsize =  Svr0OutputTBL_Size; 
    567          
    568          					tbllen = (tsize*2); // data type: int16!!
    569          
    570          					{
    571          						INT16U *dsptr = (INT16U *)TblStr->Data;
    572          						INT16U *stptr = (INT16U *)&rBody->SubData[3];
    573          						for(i = 0; i < tbllen/2 && i < (Svr0OutputTBL_Size); i++)
    574          						{
    575          							dsptr[i] = swab16(stptr[i]);
    576          						}
    577          					}
    578          
    579          					WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
    580          				}
    581          				OS_EXIT_CRITICAL();
    582          			}
    583          			{
    584          				TblStr = &(vEE_TABLE->Svr0OutputTbl[tIndex]);
    585          
    586          				tlimit = TblStr->limit;
    587          				tsize  = TblStr->nsize;
    588          				if( tsize > Svr0OutputTBL_Size)  tsize = TblStr->nsize =  Svr0OutputTBL_Size; 
    589          				tbllen = (tsize*2); // data type: int16!!
    590          
    591          					
    592          				sBody->SubData[0] = TblID;
    593          				sBody->SubData[1] = tlimit;
    594          				sBody->SubData[2] = tsize;
    595          				{
    596          					INT16U *dsptr = (INT16U *)&sBody->SubData[3];
    597          					INT16U *stptr = (INT16U *)TblStr->Data;
    598          
    599          					for(i = 0; i < tbllen/2 && i < (Svr0OutputTBL_Size); i++)
    600          					{
    601          						dsptr[i] = swab16(stptr[i]);
    602          					}
    603          				}
    604          			}
    605          		}
    606          		break;
    607          
    608          		
    609          		case Index_RvsInPwr_LTE_A		:
    610          		case Index_Fwd1InPwr_LTE 		:
    611          		case Index_Rvs1OutPwr_LTE 		:
    612          		case Index_Fwd1OutAvgPwr_LTE_A1 :
    613          		case Index_Fwd1OutPeakPwr_LTE_A1:
    614          		case Index_Fwd1OutAvgPwr_LTE_A2 :
    615          		case Index_Fwd1OutPeakPwr_LTE_A2:
    616          		case Index_Rvs1OutPwr_LTE_A1 	:
    617          		case Index_Rvs1OutPwr_LTE_A2 	:
    618          		case Index_FwdInPwr_LTE_A_1		:
    619          		case Index_RvsOutPwr_LTE_A_1 	:
    620          		{
    621          			__Svr1OutputTblStr *TblStr;
    622          			
    623          			if( Comm == DDRTableSetQue)
    624          			{
    625          				INT32U cpu_sr;
    626          				OS_ENTER_CRITICAL();
    627          
    628          				{
    629          					EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
    630          
    631          					TblStr = &(tptr->Svr1OutputTbl[tIndex]);
    632          					tlimit = TblStr->limit = rBody->SubData[1];
    633          					tsize = TblStr->nsize = rBody->SubData[2];
    634          
    635          					if( tsize > Svr1OutputTBL_Size)  tsize = TblStr->nsize =  Svr1OutputTBL_Size; 
    636          
    637          					tbllen = (tsize*2); // data type: int16!!
    638          
    639          					{
    640          						INT16U *dsptr = (INT16U *)TblStr->Data;
    641          						INT16U *stptr = (INT16U *)&rBody->SubData[3];
    642          						for(i = 0; i < tbllen/2 && i < (Svr1OutputTBL_Size); i++)
    643          						{
    644          							dsptr[i] = swab16(stptr[i]);
    645          						}
    646          					}
    647          
    648          					WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
    649          				}
    650          				OS_EXIT_CRITICAL();
    651          			}
    652          			{
    653          				TblStr = &(vEE_TABLE->Svr1OutputTbl[tIndex]);
    654          
    655          				tlimit = TblStr->limit;
    656          				tsize  = TblStr->nsize;
    657          				if( tsize > Svr1OutputTBL_Size)  tsize = TblStr->nsize =  Svr1OutputTBL_Size; 
    658          				tbllen = (tsize*2); // data type: int16!!
    659          
    660          					
    661          				sBody->SubData[0] = TblID;
    662          				sBody->SubData[1] = tlimit;
    663          				sBody->SubData[2] = tsize;
    664          				{
    665          					INT16U *dsptr = (INT16U *)&sBody->SubData[3];
    666          					INT16U *stptr = (INT16U *)TblStr->Data;
    667          
    668          					for(i = 0; i < tbllen/2 && i < (Svr1OutputTBL_Size); i++)
    669          					{
    670          						dsptr[i] = swab16(stptr[i]);
    671          					}
    672          				}
    673          			}
    674          		}
    675          		break;
    676          
    677          		case Index_RvsAttn2_2G 			:
    678          		case Index_RvsAttn3_2G 			:
    679          		case Index_RvsAttn2_LTE 		:
    680          		case Index_RvsAttn3_LTE 		:
    681          		case Index_FwdAttn1_CDMALTE 		:
    682          		case Index_FwdAttn1_LTE_A1 		:
    683          		case Index_FwdAttn2_LTE_A1 		:
    684          		case Index_RvsAttn1_LTE_A1 		:
    685          		case Index_RvsAttn2_LTE_A1 		:
    686          		case Index_RvsAttn3_LTE_A1		:
    687          		case Index_FwdAttn1_LTE_A2 		:
    688          		case Index_FwdAttn2_LTE_A2 		:
    689          		case Index_RvsAttn1_LTE_A2 		:
    690          		case Index_RvsAttn2_LTE_A2 		:
    691          		case Index_RvsAttn3_LTE_A2 		:
    692          		case Index_FwdAttn1_LTE_A 		:
    693          		case Index_FwdAttn1_3G 			:
    694          		case Index_FwdAttn2_3G 			:
    695          		case Index_RvsAttn3_3G 			:
    696          		case Index_RvsAttn4_3G 			:
    697          		case Index_Rvs1Attn1_LTE		:
    698          		case Index_Rvs1Attn2_LTE		:
    699          		case Index_RvsAttn1_LTE_A_1		:
    700          		{
    701          			__AttnOffsetTblStr *AttTblStr;
    702          
    703          			if( Comm == DDRTableSetQue)
    704          			{
    705          				INT32U cpu_sr;
    706          				OS_ENTER_CRITICAL();
    707          				{
    708          					SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
    709          
    710          					AttTblStr = &tptr->DnrAttnTbl[tIndex];
    711          
    712          					tlimit = AttTblStr->limit = rBody->SubData[1] = AttMaxLimit;
    713          					tsize = AttTblStr->nsize = rBody->SubData[2] = AttTBL_Size;
    714          					if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    715          
    716          					tbllen = (tsize*1); // data type: int16!!
    717          					{
    718          						INT8U *dsptr = (INT8U *)AttTblStr->Data;
    719          						INT8U *stptr = (INT8U *)&rBody->SubData[3];
    720          						
    721          						for(i = 0; i < tbllen && i < (AttTBL_Size); i++)
    722          						{
    723          							dsptr[i] = (stptr[i]);
    724          						}
    725          					}
    726          					WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
    727          				}
    728          				OS_EXIT_CRITICAL();
    729          			}
    730          			{
    731          				AttTblStr = &vSYS_TABLE->DnrAttnTbl[tIndex];
    732          
    733          
    734          				tlimit = AttTblStr->limit;
    735          				tsize = AttTblStr->nsize;
    736          				
    737          				if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    738          
    739          				tbllen = (tsize*1); // data type: int16!!
    740          
    741          				sBody->SubData[0] = TblID;
    742          				sBody->SubData[1] = tlimit;
    743          				sBody->SubData[2] = tsize;
    744          				{
    745          					INT8U *dsptr = (INT8U *)&sBody->SubData[3];
    746          					INT8U *stptr = (INT8U *)AttTblStr->Data;
    747          					
    748          					for(i = 0; i < tbllen ; i++)
    749          					{
    750          						dsptr[i] = stptr[i];
    751          					}
    752          				}
    753          			}
    754          		}			
    755          		break;
    756          
    757          		case Index_FwdAttn1_2G 			:
    758          		case Index_FwdAttn2_2G 			:
    759          		case Index_RvsAttn1_2G 			:
    760          		case Index_FwdAttn1_LTE 		:
    761          		case Index_FwdAttn2_LTE 		:
    762          		case Index_RvsAttn1_LTE 		:
    763          		case Index_RvsAttn1_CDMALTE  	:
    764          		case Index_RvsAttn1_LTE_A 		:
    765          		case Index_RvsAttn1_3G 			:
    766          		case Index_RvsAttn2_3G 			:
    767          		case Index_Fwd1Attn1_LTE	 	:
    768          		case Index_Fwd1Attn2_LTE	 	:
    769          		case Index_Rvs1Attn3_LTE	 	:
    770          		case Index_Rvs1Attn4_LTE	 	:
    771          		
    772          		case Index_Fwd1Attn1_LTE_A1 	:
    773          		case Index_Fwd1Attn2_LTE_A1		:
    774          		case Index_Rvs1Attn1_LTE_A1	 	:
    775          		case Index_Rvs1Attn2_LTE_A1 	:
    776          		case Index_Rvs1Attn3_LTE_A1 	:
    777          		case Index_Fwd1Attn1_LTE_A2 	:
    778          		case Index_Fwd1Attn2_LTE_A2		:
    779          		case Index_Rvs1Attn1_LTE_A2 	:
    780          		case Index_Rvs1Attn2_LTE_A2 	:
    781          		case Index_Rvs1Attn3_LTE_A2 	:
    782          		case Index_FwdAttn1_LTE_A_1 	:
    783          		{
    784          			__AttnOffsetTblStr *AttTblStr;
    785          
    786          			if( Comm == DDRTableSetQue)
    787          			{
    788          				INT32U cpu_sr;
    789          				OS_ENTER_CRITICAL();
    790          				{
    791          					EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr);
    792          					
    793          					AttTblStr = &tptr->SvrAttnTbl[tIndex];
    794          
    795          					tlimit = AttTblStr->limit = rBody->SubData[1] = AttMaxLimit;
    796          					tsize = AttTblStr->nsize = rBody->SubData[2] = AttTBL_Size;
    797          						
    798          					if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    799          
    800          					tbllen = (tsize*1); // data type: int16!!
    801          					{
    802          						INT8U *dsptr = (INT8U *)AttTblStr->Data;
    803          						INT8U *stptr = (INT8U *)&rBody->SubData[3];
    804          						
    805          						for(i = 0; i < tbllen && i < (AttTBL_Size); i++)
    806          						{
    807          							dsptr[i] = (stptr[i]);
    808          						}
    809          					}
    810          					WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
    811          				}
    812          				OS_EXIT_CRITICAL();
    813          			}
    814          			{
    815          
    816          				AttTblStr = &vEE_BACK1->SvrAttnTbl[tIndex];
    817          
    818          				tlimit = AttTblStr->limit;
    819          				tsize = AttTblStr->nsize;
    820          				
    821          				
    822          				if( tsize > AttTBL_Size)  tsize = AttTBL_Size; 
    823          
    824          				tbllen = (tsize*1); // data type: int16!!
    825          
    826          				sBody->SubData[0] = TblID;
    827          				sBody->SubData[1] = tlimit;
    828          				sBody->SubData[2] = tsize;
    829          				{
    830          					INT8U *dsptr = (INT8U *)&sBody->SubData[3];
    831          					INT8U *stptr = (INT8U *)AttTblStr->Data;
    832          					
    833          					for(i = 0; i < tbllen ; i++)
    834          					{
    835          						dsptr[i] = stptr[i];
    836          					}
    837          				}
    838          			}
    839          		}			
    840          		break;
    841          
    842          		case Index_FwdTempAttn_2G  		:
    843          		case Index_RvsTempAttn_2G  		:
    844          		case Index_FwdTempAttn_LTE 		:
    845          		case Index_RvsTempAttn_LTE 		:
    846          		case Index_FwdTempAttn_LTE_A1	:
    847          		case Index_RvsTempAttn_LTE_A1	:
    848          		case Index_FwdTempAttn_LTE_A2	:
    849          		case Index_RvsTempAttn_LTE_A2	:
    850          		case Index_FwdTempAttn_3G  		:
    851          		case Index_RvsTempAttn_3G		:
    852          		case Index_Fwd1TempAttn_LTE 	:
    853          		case Index_Rvs1TempAttn_LTE 	:
    854          		case Index_Fwd1TempAttn_LTE_A1 	:
    855          		case Index_Rvs1TempAttn_LTE_A1 	:
    856          		case Index_Fwd1TempAttn_LTE_A2 	:
    857          		case Index_Rvs1TempAttn_LTE_A2 	:	
    858          		{
    859          			__AttnTempTblStr *AttTblStr;
    860          
    861          			if( Comm == DDRTableSetQue)
    862          			{
    863          				INT32U cpu_sr;
    864          				OS_ENTER_CRITICAL();
    865          				{
    866          					SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
    867          					AttTblStr = &tptr->AttnTempTbl[tIndex];
    868          					tlimit = AttTblStr->limit = rBody->SubData[1] = TempMaxlimit;
    869          					tsize = AttTblStr->nsize = rBody->SubData[2]= TempTBL_Size;
    870          					if( tsize > TempTBL_Size)  tsize = AttTblStr->nsize = TempTBL_Size; 
    871          
    872          					tbllen = (tsize*1); // data type: int16!!
    873          					{
    874          						INT8U *dsptr = (INT8U *)AttTblStr->Data;
    875          						INT8U *stptr = (INT8U *)&rBody->SubData[3];
    876          						
    877          						for(i = 0; i < tbllen && i < (TempTBL_Size); i++)
    878          						{
    879          							dsptr[i] = (stptr[i]);
    880          						}
    881          					}
    882          					WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
    883          				}
    884          				OS_EXIT_CRITICAL();
    885          			}
    886          			{
    887          				AttTblStr = &vSYS_TABLE->AttnTempTbl[tIndex];
    888          
    889          				tlimit = AttTblStr->limit;
    890          				tsize = AttTblStr->nsize;
    891          				if( tsize > TempTBL_Size)  tsize = AttTblStr->nsize = TempTBL_Size; 
    892          
    893          				tbllen = (tsize*1); // data type: int16!!
    894          
    895          				sBody->SubData[0] = TblID;
    896          				sBody->SubData[1] = tlimit;
    897          				sBody->SubData[2] = tsize;
    898          				{
    899          					INT8U *dsptr = (INT8U *)&sBody->SubData[3];
    900          					INT8U *stptr = (INT8U *)AttTblStr->Data;
    901          					
    902          					for(i = 0; i < tbllen ; i++)
    903          					{
    904          						dsptr[i] = stptr[i];
    905          					}
    906          				}
    907          			}
    908          
    909          		}			
    910          		break;
    911          
    912          		default:
    913              	break;
    914          	}
    915          
    916          	GenBodyFrame(tid, (INT8U *)Send->BodyFrame[0].SubData, Send->BodyFrame[0].SubLength, Comm, nPtr, 0);
    917          	WRCS_ProDataAckTx(nPtr);
    918          }
    919          
    920          
    921          INT8S TableIndex(INT8U TblID)
    922          {
    923              INT8S tIndex = -1;
    924          
    925          	switch(TblID)
    926          	{
    927          	//Dnr0
    928          		case Index_RvsOutPwr_CDMALTE 	:	return Local_RvsOutPwr_CDMALTE; 
    929          		case Index_FwdOutAvgPwr_LTE_A1 	:	return Local_FwdOutAvgPwr_LTE_A1;
    930          		case Index_RvsOutPwr_LTE_A1 	:	return Local_RvsOutPwr_LTE_A1;
    931          		case Index_RvsOutPwr_LTE_A2 	:	return Local_RvsOutPwr_LTE_A2;
    932          		case Index_FwdOutAvgPwr_LTE_A2 	:	return Local_FwdOutAvgPwr_LTE_A2;
    933          		case Index_FwdInPwr_LTE_A		:	return Local_FwdInPwr_LTE_A;
    934          		case Index_RvsOutPwr_LTE_A 		:	return Local_RvsOutPwr_LTE_A; 
    935          		case Index_FwdInPwr_3G 			:	return Local_FwdInPwr_3G;
    936          		case Index_Fwd1OutAvgPwr_LTE 	:	return Local_Fwd1OutAvgPwr_LTE;
    937          		case Index_Rvs1InPwr_LTE 		:	return Local_Rvs1InPwr_LTE;
    938          		case Index_FwdOutAvgPwr_LTE_A_1 :	return Local_FwdOutAvgPwr_LTE_A_1;
    939          	//Dnr1
    940          		case Index_FwdInPwr_CDMALTE		:	return Local_FwdInPwr_CDMALTE;
    941          		case Index_RvsOutPwr_3G 		:	return Local_RvsOutPwr_3G;
    942          		case Index_RvsInPwr_LTE_A_1 	:	return Local_RvsInPwr_LTE_A_1;
    943          
    944          	//Svr0
    945          		case Index_FwdOutAvgPwr_2G		:	return Local_FwdOutAvgPwr_2G;
    946          		case Index_RvsOutPwr_2G 		:	return Local_RvsOutPwr_2G;
    947          		case Index_FwdOutAvgPwr_LTE 	:	return Local_FwdOutAvgPwr_LTE;
    948          		case Index_RvsOutPwr_LTE 		:	return Local_RvsOutPwr_LTE;
    949          		case Index_FwdOutAvgPwr_CDMALTE 	:	return Local_FwdOutAvgPwr_CDMALTE;
    950          		case Index_RvsInPwr_CDMALTE		:	return Local_RvsInPwr_CDMALTE;
    951          		case Index_FwdOutAvgPwr_LTE_A 	:	return Local_FwdOutAvgPwr_LTE_A;
    952          		case Index_FwdOutAvgPwr_3G 		:	return Local_FwdOutAvgPwr_3G; 
    953          		case Index_RvsInPwr_3G 			:	return Local_RvsInPwr_3G;
    954          		
    955          		case Index_RvsInPwr_LTE_A		:	return Local_RvsInPwr_LTE_A;
    956          		case Index_Fwd1InPwr_LTE 		:	return Local_Fwd1InPwr_LTE;
    957          		case Index_Rvs1OutPwr_LTE 		:	return Local_Rvs1OutPwr_LTE; 
    958          		case Index_Fwd1OutAvgPwr_LTE_A1 :	return Local_Fwd1OutAvgPwr_LTE_A1;
    959          		case Index_Fwd1OutAvgPwr_LTE_A2 :	return Local_Fwd1OutAvgPwr_LTE_A2;
    960          		case Index_Rvs1OutPwr_LTE_A1 	:	return Local_Rvs1OutPwr_LTE_A1;
    961          		case Index_Rvs1OutPwr_LTE_A2 	:	return Local_Rvs1OutPwr_LTE_A2;
    962          		case Index_FwdInPwr_LTE_A_1		:	return Local_FwdInPwr_LTE_A_1;
    963          		case Index_RvsOutPwr_LTE_A_1 	:	return Local_RvsOutPwr_LTE_A_1; 
    964          ///Dnr
    965          		case Index_RvsAttn2_2G 			:	return Local_RvsAttn2_2G; 
    966          		case Index_RvsAttn3_2G 			:	return Local_RvsAttn3_2G;
    967          		case Index_RvsAttn2_LTE 		:	return Local_RvsAttn2_LTE; 
    968          		case Index_RvsAttn3_LTE 		:	return Local_RvsAttn3_LTE;
    969          		case Index_FwdAttn1_CDMALTE 	:	return Local_FwdAttn1_CDMALTE;
    970          		case Index_FwdAttn1_LTE_A1 		:	return Local_FwdAttn1_LTE_A1;
    971          		case Index_FwdAttn2_LTE_A1 		:	return Local_FwdAttn2_LTE_A1;
    972          		case Index_RvsAttn1_LTE_A1 		:	return Local_RvsAttn1_LTE_A1;
    973          		case Index_RvsAttn2_LTE_A1 		:	return Local_RvsAttn2_LTE_A1;
    974          		case Index_RvsAttn3_LTE_A1		:	return Local_RvsAttn3_LTE_A1;	 
    975          		case Index_FwdAttn1_LTE_A2 		:	return Local_FwdAttn1_LTE_A2;
    976          		case Index_FwdAttn2_LTE_A2 		:	return Local_FwdAttn2_LTE_A2;
    977          		case Index_RvsAttn1_LTE_A2 		:	return Local_RvsAttn1_LTE_A2;
    978          		case Index_RvsAttn2_LTE_A2 		:	return Local_RvsAttn2_LTE_A2;
    979          		case Index_RvsAttn3_LTE_A2 		:	return Local_RvsAttn3_LTE_A2;
    980          		case Index_FwdAttn1_LTE_A 		:	return Local_FwdAttn1_LTE_A;
    981          		case Index_FwdAttn1_3G 			:	return Local_FwdAttn1_3G;
    982          		case Index_FwdAttn2_3G 			:	return Local_FwdAttn2_3G;
    983          		case Index_RvsAttn3_3G 			:	return Local_RvsAttn3_3G;
    984          		case Index_RvsAttn4_3G 			:	return Local_RvsAttn4_3G;
    985          		case Index_Rvs1Attn1_LTE		:	return Local_Rvs1Attn1_LTE;	 
    986          		case Index_Rvs1Attn2_LTE		:	return Local_Rvs1Attn2_LTE;
    987          		case Index_RvsAttn1_LTE_A_1		:	return Local_RvsAttn1_LTE_A_1;
    988          
    989          //Svr0
    990          		case Index_FwdAttn1_2G 			:	return Local_FwdAttn1_2G;
    991          		case Index_FwdAttn2_2G 			:	return Local_FwdAttn2_2G;
    992          		case Index_RvsAttn1_2G 			:	return Local_RvsAttn1_2G;
    993          		case Index_FwdAttn1_LTE 		:	return Local_FwdAttn1_LTE; 
    994          		case Index_FwdAttn2_LTE 		:	return Local_FwdAttn2_LTE;
    995          		case Index_RvsAttn1_LTE 		:	return Local_RvsAttn1_LTE;
    996          		case Index_RvsAttn1_CDMALTE 	:	return Local_RvsAttn1_CDMALTE;
    997          		case Index_RvsAttn1_LTE_A 		:	return Local_RvsAttn1_LTE_A;
    998          		case Index_RvsAttn1_3G 			:	return Local_RvsAttn1_3G;
    999          		case Index_RvsAttn2_3G 			:	return Local_RvsAttn2_3G;
   1000          		case Index_Fwd1Attn1_LTE	 	:	return Local_Fwd1Attn1_LTE;	
   1001          		case Index_Fwd1Attn2_LTE	 	:	return Local_Fwd1Attn2_LTE;
   1002          		case Index_Rvs1Attn3_LTE	 	:	return Local_Rvs1Attn3_LTE;
   1003          		case Index_Rvs1Attn4_LTE	 	:	return Local_Rvs1Attn4_LTE;
   1004          
   1005          		
   1006          //Svr1
   1007          		case Index_Fwd1Attn1_LTE_A1 	:	return Local_Fwd1Attn1_LTE_A1;
   1008          		case Index_Fwd1Attn2_LTE_A1		:	return Local_Fwd1Attn2_LTE_A1;
   1009          		case Index_Rvs1Attn1_LTE_A1	 	:	return Local_Rvs1Attn1_LTE_A1;
   1010          		case Index_Rvs1Attn2_LTE_A1 	:	return Local_Rvs1Attn2_LTE_A1;
   1011          		case Index_Rvs1Attn3_LTE_A1 	:	return Local_Rvs1Attn3_LTE_A1;
   1012          		case Index_Fwd1Attn1_LTE_A2 	:	return Local_Fwd1Attn1_LTE_A2;
   1013          		case Index_Fwd1Attn2_LTE_A2		:	return Local_Fwd1Attn2_LTE_A2;
   1014          		case Index_Rvs1Attn1_LTE_A2 	:	return Local_Rvs1Attn1_LTE_A2;
   1015          		case Index_Rvs1Attn2_LTE_A2 	:	return Local_Rvs1Attn2_LTE_A2;
   1016          		case Index_Rvs1Attn3_LTE_A2 	:	return Local_Rvs1Attn3_LTE_A2;
   1017          		case Index_FwdAttn1_LTE_A_1 	:	return Local_FwdAttn1_LTE_A_1;
   1018          
   1019          		case Index_FwdTempAttn_2G  		:	return Local_FwdTempAttn_2G; 
   1020          		case Index_RvsTempAttn_2G  		:	return Local_RvsTempAttn_2G; 
   1021          		case Index_FwdTempAttn_LTE 		:	return Local_FwdTempAttn_LTE; 
   1022          		case Index_RvsTempAttn_LTE 		:	return Local_RvsTempAttn_LTE;
   1023          		case Index_FwdTempAttn_LTE_A1	:	return Local_FwdTempAttn_LTE_A1;
   1024          		case Index_RvsTempAttn_LTE_A1	:	return Local_RvsTempAttn_LTE_A1;
   1025          		case Index_FwdTempAttn_LTE_A2	:	return Local_FwdTempAttn_LTE_A2;
   1026          		case Index_RvsTempAttn_LTE_A2	:	return Local_RvsTempAttn_LTE_A2;
   1027          		case Index_FwdTempAttn_3G  		:	return Local_FwdTempAttn_3G;
   1028          		case Index_RvsTempAttn_3G		:	return Local_RvsTempAttn_3G;
   1029          		case Index_Fwd1TempAttn_LTE 	:	return Local_Fwd1TempAttn_LTE; 
   1030          		case Index_Rvs1TempAttn_LTE 	:	return Local_Rvs1TempAttn_LTE;
   1031          		case Index_Fwd1TempAttn_LTE_A1 	:	return Local_Fwd1TempAttn_LTE_A1;
   1032          		case Index_Rvs1TempAttn_LTE_A1 	:	return Local_Rvs1TempAttn_LTE_A1;
   1033          		case Index_Fwd1TempAttn_LTE_A2 	:	return Local_Fwd1TempAttn_LTE_A2;
   1034          		case Index_Rvs1TempAttn_LTE_A2 	:	return Local_Rvs1TempAttn_LTE_A2;
   1035          	}
   1036          	return tIndex;
   1037          }
   1038          
   1039          INT8S TableLocation(INT8U TblID)
   1040          {
   1041              INT8S tIndex = -1;
   1042          
   1043          	switch(TblID)
   1044          	{
   1045          		case Index_RvsOutPwr_CDMALTE 	:
   1046          		case Index_FwdOutAvgPwr_LTE_A1 	:
   1047          		case Index_RvsOutPwr_LTE_A1 	:
   1048          		case Index_RvsOutPwr_LTE_A2 	:
   1049          		case Index_FwdOutAvgPwr_LTE_A2 	:
   1050          		case Index_FwdInPwr_LTE_A		:
   1051          		case Index_RvsOutPwr_LTE_A 		:
   1052          		case Index_FwdInPwr_3G 			:
   1053          		case Index_Fwd1OutAvgPwr_LTE 	:
   1054          		case Index_Rvs1InPwr_LTE 		:
   1055          		case Index_FwdOutAvgPwr_LTE_A_1 :
   1056          			tIndex = _DnrPwr0_Location;
   1057          		break;
   1058          
   1059          
   1060          	    case Index_FwdInPwr_CDMALTE     :
   1061          	    case Index_RvsOutPwr_3G 		:
   1062          	    case Index_RvsInPwr_LTE_A_1		:
   1063          			tIndex = _DnrPwr1_Location;
   1064          		break;
   1065          
   1066          		case Index_FwdOutAvgPwr_2G		:
   1067          		case Index_RvsOutPwr_2G 		:
   1068          		case Index_FwdOutAvgPwr_LTE 	:
   1069          		case Index_RvsOutPwr_LTE 		:
   1070          		case Index_FwdOutAvgPwr_CDMALTE	:
   1071          		case Index_RvsInPwr_CDMALTE		:
   1072          		case Index_FwdOutAvgPwr_LTE_A 	:
   1073          		case Index_FwdOutAvgPwr_3G 		:
   1074          		case Index_RvsInPwr_3G 			:
   1075          			tIndex = _SvrPwr0_Location;
   1076          		break;
   1077          
   1078          		case Index_RvsInPwr_LTE_A		:
   1079          		case Index_Fwd1InPwr_LTE 		:
   1080          		case Index_Rvs1OutPwr_LTE 		:
   1081          		case Index_Fwd1OutAvgPwr_LTE_A1 :
   1082          		case Index_Fwd1OutAvgPwr_LTE_A2 :
   1083          		case Index_Rvs1OutPwr_LTE_A1 	:
   1084          		case Index_Rvs1OutPwr_LTE_A2 	:
   1085          		case Index_FwdInPwr_LTE_A_1		:
   1086          		case Index_RvsOutPwr_LTE_A_1 	:
   1087          
   1088          			tIndex = _SvrPwr1_Location;
   1089          		break;
   1090          
   1091          		default:
   1092          			tIndex = _ETC_Location;
   1093          		break;
   1094          	}
   1095          
   1096          	return tIndex;
   1097          }
   1098          
   1099          
   1100          INT8S PwrTableLocation(INT8U TblID)
   1101          {
   1102              INT8S tIndex = -1;
   1103          
   1104          	switch(TblID)
   1105          	{
   1106          		case Index_FwdOutAvgPwr_3G		:
   1107          		case Index_FwdOutAvgPwr_2G		:
   1108          		case Index_FwdOutAvgPwr_LTE 	:
   1109          		case Index_FwdOutAvgPwr_LTE_A1	:
   1110          		case Index_FwdOutAvgPwr_LTE_A2	:
   1111          		case Index_Fwd1OutAvgPwr_LTE	:
   1112          		case Index_Fwd1OutAvgPwr_LTE_A1 :
   1113          		case Index_Fwd1OutAvgPwr_LTE_A2 :
   1114          		case Index_FwdOutAvgPwr_CDMALTE :
   1115          		case Index_FwdOutAvgPwr_LTE_A	:
   1116          		case Index_FwdOutAvgPwr_LTE_A_1 :
   1117          			tIndex = _FwdOutPwr_Location;
   1118          		break;
   1119          
   1120          
   1121          		case Index_FwdInPwr_3G 			:
   1122          		case Index_FwdInPwr_CDMALTE 	:
   1123          		case Index_FwdInPwr_LTE_A		:
   1124          		case Index_Fwd1InPwr_LTE		:
   1125          		case Index_FwdInPwr_LTE_A_1 	:
   1126          			tIndex = _FwdInPwr_Location;
   1127          		break;
   1128          
   1129          		case Index_RvsInPwr_CDMALTE 	:
   1130          		case Index_RvsInPwr_3G			:
   1131          		case Index_Rvs1InPwr_LTE		:
   1132          		case Index_RvsInPwr_LTE_A		:
   1133          		case Index_RvsInPwr_LTE_A_1 	:
   1134          			tIndex = _RvsInPwr_Location;
   1135          		break;
   1136          
   1137          
   1138          		case Index_RvsOutPwr_3G 		:
   1139          		case Index_RvsOutPwr_2G 		:
   1140          		case Index_RvsOutPwr_LTE		:
   1141          		case Index_RvsOutPwr_LTE_A1 	:
   1142          		case Index_RvsOutPwr_LTE_A2 	:
   1143          		case Index_Rvs1OutPwr_LTE		:
   1144          		case Index_Rvs1OutPwr_LTE_A1	:
   1145          		case Index_Rvs1OutPwr_LTE_A2	:
   1146          
   1147          		case Index_RvsOutPwr_CDMALTE 	:
   1148          		case Index_RvsOutPwr_LTE_A 		:
   1149          		case Index_RvsOutPwr_LTE_A_1	:
   1150          			tIndex = _RvsOutPwr_Location;
   1151          		break;
   1152          
   1153          		default:
   1154          		break;
   1155          	}
   1156          
   1157          	return tIndex;
   1158          }
   1159          
   1160          INT8S AttnTableLocation(INT8U TblID)
   1161          {
   1162              INT8S tIndex = -1;
   1163          
   1164          	switch(TblID)
   1165          	{
   1166          		case Index_RvsAttn2_2G 			:
   1167          		case Index_RvsAttn3_2G 			:
   1168          		case Index_RvsAttn2_LTE 		:
   1169          		case Index_RvsAttn3_LTE 		:
   1170          		case Index_FwdAttn1_CDMALTE 		:
   1171          		case Index_FwdAttn1_LTE_A1 		:
   1172          		case Index_FwdAttn2_LTE_A1 		:
   1173          		case Index_RvsAttn1_LTE_A1 		:
   1174          		case Index_RvsAttn2_LTE_A1 		:
   1175          		case Index_RvsAttn3_LTE_A1		:
   1176          		case Index_FwdAttn1_LTE_A2 		:
   1177          		case Index_FwdAttn2_LTE_A2 		:
   1178          		case Index_RvsAttn1_LTE_A2 		:
   1179          		case Index_RvsAttn2_LTE_A2 		:
   1180          		case Index_RvsAttn3_LTE_A2 		:
   1181          		case Index_FwdAttn1_LTE_A 		:
   1182          		case Index_FwdAttn1_3G 			:
   1183          		case Index_FwdAttn2_3G 			:
   1184          		case Index_RvsAttn3_3G 			:
   1185          		case Index_RvsAttn4_3G 			:
   1186          		case Index_Rvs1Attn1_LTE		:
   1187          		case Index_Rvs1Attn2_LTE		:
   1188          		case Index_RvsAttn1_LTE_A_1		:
   1189          			tIndex = _DnrAttn_Location;
   1190          		break;
   1191          
   1192          		case Index_FwdAttn1_2G 			:
   1193          		case Index_FwdAttn2_2G 			:
   1194          		case Index_RvsAttn1_2G 			:
   1195          		case Index_FwdAttn1_LTE 		:
   1196          		case Index_FwdAttn2_LTE 		:
   1197          		case Index_RvsAttn1_LTE 		:
   1198          		case Index_RvsAttn1_CDMALTE 		:
   1199          		case Index_RvsAttn1_LTE_A 		:
   1200          		case Index_RvsAttn1_3G 			:
   1201          		case Index_RvsAttn2_3G 			:
   1202          		case Index_Fwd1Attn1_LTE	 	:
   1203          		case Index_Fwd1Attn2_LTE	 	:
   1204          		case Index_Rvs1Attn3_LTE	 	:
   1205          		case Index_Rvs1Attn4_LTE	 	:
   1206          		case Index_Fwd1Attn1_LTE_A1 	:
   1207          		case Index_Fwd1Attn2_LTE_A1		:
   1208          		case Index_Rvs1Attn1_LTE_A1	 	:
   1209          		case Index_Rvs1Attn2_LTE_A1 	:
   1210          		case Index_Rvs1Attn3_LTE_A1 	:
   1211          		case Index_Fwd1Attn1_LTE_A2 	:
   1212          		case Index_Fwd1Attn2_LTE_A2		:
   1213          		case Index_Rvs1Attn1_LTE_A2 	:
   1214          		case Index_Rvs1Attn2_LTE_A2 	:
   1215          		case Index_Rvs1Attn3_LTE_A2 	:
   1216          		case Index_FwdAttn1_LTE_A_1 	:
   1217          			tIndex = _SvrAttn_Location;
   1218          		break;
   1219          		default:
   1220          		break;
   1221          	}
   1222          
   1223          	return tIndex;
   1224          }
   1225          
   1226          
   1227          
   1228          
   1229          void DefaultValueSet_Test(INT8U Value)
   1230          {
   1231          //	INT8U err = 0;
   1232          	INT32U cpu_sr;
   1233          	OS_ENTER_CRITICAL();
   1234          
   1235          	#ifdef __DefaultTbl
   1236          	switch(Value) //command u?
   1237          	{
   1238          		case TRIO_M_TBL :
   1239          			DefaultAttTable_TRIO_M();
   1240          			DefaultTempTable_TRIO_M();
   1241          //			DefaultPwrTable_TRIO_M();
   1242          			DefaultTableSet();
   1243          		break;
   1244          
   1245          		case TRIO_MM_TBL:
   1246          			DefaultAttTable_TRIO_MM();
   1247          			DefaultTempTable_TRIO_MM();
   1248          //			DefaultPwrTable_TRIO_MM();
   1249          			DefaultTableSet();
   1250          		break;
   1251          
   1252          		case Default_TBL:
   1253          			DefaultAttTableInit();
   1254          			DefaultTempTableInit();
   1255          			DefaultPwrTableInit();
   1256          			DefaultTableSet();
   1257          		break;
   1258          		default:
   1259          		break;
   1260          	}
   1261          	#endif
   1262          	OS_EXIT_CRITICAL();
   1263          }
   1264          
   1265          void DefaultAttTable_TRIO_M(void)
   1266          {
   1267          	INT32U cpu_sr;
   1268          
   1269          	int i = 0;
   1270          	
   1271          	OS_ENTER_CRITICAL();
   1272          	{
   1273          		__AttnOffsetTblStr *AttTblStr;
   1274          		SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   1275          
   1276          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_2G];
   1277          		AttTblStr->limit = AttMaxLimit;
   1278          		AttTblStr->nsize = 61;
   1279          		{
   1280          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1281          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_2G;
   1282          				
   1283          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1284          		}
   1285          
   1286          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_2G];
   1287          		AttTblStr->limit = AttMaxLimit;
   1288          		AttTblStr->nsize = 61;
   1289          		{
   1290          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1291          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_2G;
   1292          				
   1293          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1294          		}
   1295          
   1296          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE];
   1297          		AttTblStr->limit =  AttMaxLimit;
   1298          		AttTblStr->nsize = 61;
   1299          		{
   1300          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1301          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE;
   1302          				
   1303          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1304          		}
   1305          		
   1306          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE];
   1307          		AttTblStr->limit =  AttMaxLimit;
   1308          		AttTblStr->nsize = 61;
   1309          		{
   1310          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1311          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE;
   1312          				
   1313          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1314          		}
   1315          
   1316          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_CDMALTE];
   1317          		AttTblStr->limit =  AttMaxLimit;
   1318          		AttTblStr->nsize = 61;
   1319          		{
   1320          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1321          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_CDMALTE;
   1322          				
   1323          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1324          		}
   1325          
   1326          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A1];
   1327          		AttTblStr->limit =  AttMaxLimit;
   1328          		AttTblStr->nsize = 61;
   1329          		{
   1330          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1331          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE_A1;
   1332          				
   1333          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1334          		}
   1335          
   1336          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_LTE_A1];
   1337          		AttTblStr->limit =  AttMaxLimit;
   1338          		AttTblStr->nsize = 61;
   1339          		{
   1340          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1341          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn2_LTE_A1;
   1342          				
   1343          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1344          		}
   1345          
   1346          		
   1347          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn1_LTE_A1];
   1348          		AttTblStr->limit =  AttMaxLimit;
   1349          		AttTblStr->nsize = 61;
   1350          		{
   1351          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1352          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_LTE_A1;
   1353          				
   1354          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1355          		}
   1356          
   1357          
   1358          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE_A1];
   1359          		AttTblStr->limit =  AttMaxLimit;
   1360          		AttTblStr->nsize = 61;
   1361          		{
   1362          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1363          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1364          
   1365          		}
   1366          
   1367          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE_A1];
   1368          		AttTblStr->limit =  AttMaxLimit;
   1369          		AttTblStr->nsize = 61;
   1370          		{
   1371          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1372          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1373          
   1374          		}
   1375          
   1376          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A2];
   1377          		AttTblStr->limit =  AttMaxLimit;
   1378          		AttTblStr->nsize = 61;
   1379          		{
   1380          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1381          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE_A2;
   1382          				
   1383          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1384          		}
   1385          		
   1386          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_LTE_A2];
   1387          		AttTblStr->limit =  AttMaxLimit;
   1388          		AttTblStr->nsize = 61;
   1389          		{
   1390          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1391          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1392          		}
   1393          
   1394          
   1395          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn1_LTE_A2];
   1396          		AttTblStr->limit =  AttMaxLimit;
   1397          		AttTblStr->nsize = 61;
   1398          		{
   1399          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1400          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1401          		}
   1402          
   1403          
   1404          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE_A2];
   1405          		AttTblStr->limit =  AttMaxLimit;
   1406          		AttTblStr->nsize = 61;
   1407          		{
   1408          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1409          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn2_LTE_A2;
   1410          				
   1411          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1412          		}
   1413          
   1414          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE_A2];
   1415          		AttTblStr->limit =  AttMaxLimit;
   1416          		AttTblStr->nsize = 61;
   1417          		{
   1418          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1419          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn3_LTE_A2;
   1420          				
   1421          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1422          		}
   1423          
   1424          
   1425          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A];
   1426          		AttTblStr->limit =  AttMaxLimit;
   1427          		AttTblStr->nsize = 61;
   1428          		{
   1429          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1430          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE_A;
   1431          				
   1432          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1433          		}
   1434          
   1435          
   1436          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_3G];
   1437          		AttTblStr->limit =  AttMaxLimit;
   1438          		AttTblStr->nsize = 61;
   1439          		{
   1440          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1441          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1442          		}
   1443          
   1444          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_3G];
   1445          		AttTblStr->limit =  AttMaxLimit;
   1446          		AttTblStr->nsize = 61;
   1447          		{
   1448          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1449          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1450          		}
   1451          		
   1452          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_3G];
   1453          		AttTblStr->limit =  AttMaxLimit;
   1454          		AttTblStr->nsize = 61;
   1455          		{
   1456          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1457          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1458          		}
   1459          
   1460          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn4_3G];
   1461          		AttTblStr->limit =  AttMaxLimit;
   1462          		AttTblStr->nsize = 61;
   1463          		{
   1464          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1465          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1466          		}			
   1467          
   1468          
   1469          		WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   1470          	}
   1471          
   1472          
   1473          	{
   1474          		__AttnOffsetTblStr *AttTblStr;
   1475          		EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr);
   1476          
   1477          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn1_2G];
   1478          		AttTblStr->limit =  AttMaxLimit;
   1479          		AttTblStr->nsize = 61;
   1480          		{
   1481          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1482          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_2G;
   1483          				
   1484          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1485          		}	
   1486          
   1487          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn2_2G];
   1488          		AttTblStr->limit =  AttMaxLimit;
   1489          		AttTblStr->nsize = 61;
   1490          		{
   1491          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1492          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn2_2G;
   1493          				
   1494          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1495          		}	
   1496          
   1497          		
   1498          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_2G];
   1499          		AttTblStr->limit =  AttMaxLimit;
   1500          		AttTblStr->nsize = 61;
   1501          		{
   1502          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1503          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_2G;
   1504          				
   1505          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1506          		}	
   1507          
   1508          
   1509          		
   1510          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn1_LTE];
   1511          		AttTblStr->limit =  AttMaxLimit;
   1512          		AttTblStr->nsize = 61;
   1513          		{
   1514          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1515          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn1_LTE;
   1516          				
   1517          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1518          		}	
   1519          
   1520          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
   1521          
   1522          
   1523          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn2_LTE];
   1524          		AttTblStr->limit =  AttMaxLimit;
   1525          		AttTblStr->nsize = 61;
   1526          		{
   1527          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1528          			INT8U *stptr = (INT8U *)TRIO_M_FwdAttn2_LTE;
   1529          				
   1530          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1531          		}	
   1532          
   1533          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_LTE];
   1534          		AttTblStr->limit =  AttMaxLimit;
   1535          		AttTblStr->nsize = 61;
   1536          		{
   1537          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1538          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_LTE;
   1539          				
   1540          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1541          		}	
   1542          
   1543          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_CDMALTE];
   1544          		AttTblStr->limit =  AttMaxLimit;
   1545          		AttTblStr->nsize = 61;
   1546          		{
   1547          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1548          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_CDMALTE;
   1549          				
   1550          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1551          		}	
   1552          
   1553          		
   1554          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_LTE_A];
   1555          		AttTblStr->limit =  AttMaxLimit;
   1556          		AttTblStr->nsize = 61;
   1557          		{
   1558          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1559          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1560          		}	
   1561          
   1562          		
   1563          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_3G];
   1564          		AttTblStr->limit =  AttMaxLimit;
   1565          		AttTblStr->nsize = 61;
   1566          		{
   1567          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1568          			INT8U *stptr = (INT8U *)TRIO_M_RvsAttn1_WCDMA;
   1569          				
   1570          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1571          		}
   1572          
   1573          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn2_3G];
   1574          		AttTblStr->limit =  AttMaxLimit;
   1575          		AttTblStr->nsize = 61;
   1576          		{
   1577          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1578          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1579          		}	
   1580          
   1581          
   1582          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
   1583          
   1584          	}
   1585          
   1586          	OS_EXIT_CRITICAL();
   1587          }
   1588          
   1589          
   1590          
   1591          
   1592          void DefaultAttTable_TRIO_MM(void)
   1593          {
   1594          	INT32U cpu_sr;
   1595          
   1596          	int i = 0;
   1597          	
   1598          	OS_ENTER_CRITICAL();
   1599          	{
   1600          		__AttnOffsetTblStr *AttTblStr;
   1601          		SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   1602          
   1603          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_2G];
   1604          		AttTblStr->limit =  AttMaxLimit;
   1605          		AttTblStr->nsize = 61;
   1606          		{
   1607          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1608          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn2_2G;
   1609          				
   1610          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1611          		}
   1612          
   1613          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_2G];
   1614          		AttTblStr->limit =  AttMaxLimit;
   1615          		AttTblStr->nsize = 61;
   1616          		{
   1617          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1618          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1619          		}
   1620          
   1621          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE];
   1622          		AttTblStr->limit =  AttMaxLimit;
   1623          		AttTblStr->nsize = 61;
   1624          		{
   1625          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1626          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn2_LTE;
   1627          				
   1628          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1629          		}
   1630          		
   1631          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE];
   1632          		AttTblStr->limit =  AttMaxLimit;
   1633          		AttTblStr->nsize = 61;
   1634          		{
   1635          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1636          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn3_LTE;
   1637          				
   1638          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1639          		}
   1640          
   1641          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_CDMALTE];
   1642          		AttTblStr->limit =  AttMaxLimit;
   1643          		AttTblStr->nsize = 61;
   1644          		{
   1645          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1646          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_CDMALTE;
   1647          				
   1648          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1649          		}
   1650          
   1651          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A1];
   1652          		AttTblStr->limit =  AttMaxLimit;
   1653          		AttTblStr->nsize = 61;
   1654          		{
   1655          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1656          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1657          		}
   1658          
   1659          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_LTE_A1];
   1660          		AttTblStr->limit =  AttMaxLimit;
   1661          		AttTblStr->nsize = 61;
   1662          		{
   1663          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1664          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE_A1;
   1665          				
   1666          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1667          		}
   1668          
   1669          		
   1670          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn1_LTE_A1];
   1671          		AttTblStr->limit =  AttMaxLimit;
   1672          		AttTblStr->nsize = 61;
   1673          		{
   1674          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1675          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE_A1;
   1676          				
   1677          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1678          		}
   1679          
   1680          
   1681          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE_A1];
   1682          		AttTblStr->limit =  AttMaxLimit;
   1683          		AttTblStr->nsize = 61;
   1684          		{
   1685          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1686          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1687          		}
   1688          
   1689          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE_A1];
   1690          		AttTblStr->limit =  AttMaxLimit;
   1691          		AttTblStr->nsize = 61;
   1692          		{
   1693          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1694          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1695          		}
   1696          
   1697          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A2];
   1698          		AttTblStr->limit =  AttMaxLimit;
   1699          		AttTblStr->nsize = 61;
   1700          		{
   1701          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1702          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_LTE_A2;
   1703          				
   1704          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1705          		}
   1706          		
   1707          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_LTE_A2];
   1708          		AttTblStr->limit =  AttMaxLimit;
   1709          		AttTblStr->nsize = 61;
   1710          		{
   1711          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1712          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE_A2;
   1713          				
   1714          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1715          		}
   1716          
   1717          
   1718          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn1_LTE_A2];
   1719          		AttTblStr->limit =  AttMaxLimit;
   1720          		AttTblStr->nsize = 61;
   1721          		{
   1722          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1723          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE_A2;
   1724          				
   1725          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1726          		}
   1727          
   1728          
   1729          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn2_LTE_A2];
   1730          		AttTblStr->limit =  AttMaxLimit;
   1731          		AttTblStr->nsize = 61;
   1732          		{
   1733          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1734          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn2_LTE_A2;
   1735          				
   1736          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1737          		}
   1738          
   1739          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_LTE_A2];
   1740          		AttTblStr->limit =  AttMaxLimit;
   1741          		AttTblStr->nsize = 61;
   1742          		{
   1743          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1744          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn3_LTE_A2;
   1745          				
   1746          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1747          		}
   1748          
   1749          
   1750          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_LTE_A];
   1751          		AttTblStr->limit =  AttMaxLimit;
   1752          		AttTblStr->nsize = 61;
   1753          		{
   1754          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1755          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1756          		}
   1757          
   1758          
   1759          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn1_3G];
   1760          		AttTblStr->limit =  AttMaxLimit;
   1761          		AttTblStr->nsize = 61;
   1762          		{
   1763          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1764          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_WCDMA;
   1765          				
   1766          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1767          		}
   1768          
   1769          		AttTblStr = &tptr->DnrAttnTbl[Local_FwdAttn2_3G];
   1770          		AttTblStr->limit =  AttMaxLimit;
   1771          		AttTblStr->nsize = 61;
   1772          		{
   1773          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1774          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_WCDMA;
   1775          				
   1776          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1777          		}
   1778          		
   1779          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn3_3G];
   1780          		AttTblStr->limit =  AttMaxLimit;
   1781          		AttTblStr->nsize = 61;
   1782          		{
   1783          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1784          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1785          		}
   1786          
   1787          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn4_3G];
   1788          		AttTblStr->limit =  AttMaxLimit;
   1789          		AttTblStr->nsize = 61;
   1790          		{
   1791          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1792          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn4_WCDMA;
   1793          				
   1794          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1795          		}			
   1796          
   1797          		AttTblStr = &tptr->DnrAttnTbl[Local_Rvs1Attn1_LTE];
   1798          		AttTblStr->limit =  AttMaxLimit;
   1799          		AttTblStr->nsize = 61;
   1800          		{
   1801          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1802          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE_1;
   1803          				
   1804          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1805          		}	
   1806          
   1807          		AttTblStr = &tptr->DnrAttnTbl[Local_Rvs1Attn2_LTE];
   1808          		AttTblStr->limit =  AttMaxLimit;
   1809          		AttTblStr->nsize = 61;
   1810          		{
   1811          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1812          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn2_LTE_1;
   1813          				
   1814          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1815          		}	
   1816          
   1817          		AttTblStr = &tptr->DnrAttnTbl[Local_RvsAttn1_LTE_A_1];
   1818          		AttTblStr->limit =  AttMaxLimit;
   1819          		AttTblStr->nsize = 61;
   1820          		{
   1821          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1822          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1823          		}	
   1824          
   1825          		WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   1826          	}
   1827          
   1828          
   1829          	{
   1830          		__AttnOffsetTblStr *AttTblStr;
   1831          		EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr);
   1832          
   1833          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn1_2G];
   1834          		AttTblStr->limit =  AttMaxLimit;
   1835          		AttTblStr->nsize = 61;
   1836          		{
   1837          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1838          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_2G;
   1839          				
   1840          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1841          		}	
   1842          
   1843          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn2_2G];
   1844          		AttTblStr->limit =  AttMaxLimit;
   1845          		AttTblStr->nsize = 61;
   1846          		{
   1847          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1848          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_2G;
   1849          				
   1850          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1851          		}	
   1852          
   1853          		
   1854          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_2G];
   1855          		AttTblStr->limit =  AttMaxLimit;
   1856          		AttTblStr->nsize = 61;
   1857          		{
   1858          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1859          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_2G;
   1860          				
   1861          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1862          		}	
   1863          
   1864          
   1865          		
   1866          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn1_LTE];
   1867          		AttTblStr->limit =  AttMaxLimit;
   1868          		AttTblStr->nsize = 61;
   1869          		{
   1870          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1871          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_LTE;
   1872          				
   1873          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1874          		}	
   1875          
   1876          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
   1877          
   1878          
   1879          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn2_LTE];
   1880          		AttTblStr->limit =  AttMaxLimit;
   1881          		AttTblStr->nsize = 61;
   1882          		{
   1883          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1884          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE;
   1885          				
   1886          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1887          		}	
   1888          
   1889          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_LTE];
   1890          		AttTblStr->limit =  AttMaxLimit;
   1891          		AttTblStr->nsize = 61;
   1892          		{
   1893          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1894          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE;
   1895          				
   1896          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1897          		}	
   1898          
   1899          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_CDMALTE];
   1900          		AttTblStr->limit =  AttMaxLimit;
   1901          		AttTblStr->nsize = 61;
   1902          		{
   1903          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1904          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_CDMALTE;
   1905          				
   1906          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1907          		}	
   1908          
   1909          		
   1910          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_LTE_A];
   1911          		AttTblStr->limit =  AttMaxLimit;
   1912          		AttTblStr->nsize = 61;
   1913          		{
   1914          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1915          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1916          		}	
   1917          
   1918          		
   1919          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn1_3G];
   1920          		AttTblStr->limit =  AttMaxLimit;
   1921          		AttTblStr->nsize = 61;
   1922          		{
   1923          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1924          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1925          		}
   1926          
   1927          		AttTblStr = &tptr->SvrAttnTbl[Local_RvsAttn2_3G];
   1928          		AttTblStr->limit =  AttMaxLimit;
   1929          		AttTblStr->nsize = 61;
   1930          		{
   1931          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1932          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   1933          		}	
   1934          
   1935          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn1_LTE];
   1936          		AttTblStr->limit =  AttMaxLimit;
   1937          		AttTblStr->nsize = 61;
   1938          		{
   1939          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1940          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_LTE_1;
   1941          				
   1942          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1943          		}
   1944          
   1945          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn2_LTE];
   1946          		AttTblStr->limit =  AttMaxLimit;
   1947          		AttTblStr->nsize = 61;
   1948          		{
   1949          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1950          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE_1;
   1951          				
   1952          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1953          		}	
   1954          
   1955          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn3_LTE];
   1956          		AttTblStr->limit =  AttMaxLimit;
   1957          		AttTblStr->nsize = 61;
   1958          		{
   1959          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1960          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn3_LTE_1;
   1961          				
   1962          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1963          		}
   1964          
   1965          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn4_LTE];
   1966          		AttTblStr->limit =  AttMaxLimit;
   1967          		AttTblStr->nsize = 61;
   1968          		{
   1969          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1970          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn4_LTE_1;
   1971          				
   1972          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1973          		}	
   1974          
   1975          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn1_LTE_A1];
   1976          		AttTblStr->limit =  AttMaxLimit;
   1977          		AttTblStr->nsize = 61;
   1978          		{
   1979          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1980          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_LTE_A1_1;
   1981          				
   1982          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1983          		}	
   1984          
   1985          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn2_LTE_A1];
   1986          		AttTblStr->limit =  AttMaxLimit;
   1987          		AttTblStr->nsize = 61;
   1988          		{
   1989          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   1990          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE_A1_1;
   1991          				
   1992          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   1993          		}	
   1994          
   1995          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn1_LTE_A1];
   1996          		AttTblStr->limit =  AttMaxLimit;
   1997          		AttTblStr->nsize = 61;
   1998          		{
   1999          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2000          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE_A1_1;
   2001          				
   2002          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2003          		}	
   2004          		
   2005          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn2_LTE_A1];
   2006          		AttTblStr->limit =  AttMaxLimit;
   2007          		AttTblStr->nsize = 61;
   2008          		{
   2009          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2010          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn2_LTE_A1_1;
   2011          				
   2012          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2013          		}	
   2014          		
   2015          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn3_LTE_A1];
   2016          		AttTblStr->limit =  AttMaxLimit;
   2017          		AttTblStr->nsize = 61;
   2018          		{
   2019          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2020          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn3_LTE_A1_1;
   2021          				
   2022          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2023          		}	
   2024          //
   2025          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn1_LTE_A2];
   2026          		AttTblStr->limit =  AttMaxLimit;
   2027          		AttTblStr->nsize = 61;
   2028          		{
   2029          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2030          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn1_LTE_A2_1;
   2031          				
   2032          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2033          		}	
   2034          		
   2035          		AttTblStr = &tptr->SvrAttnTbl[Local_Fwd1Attn2_LTE_A2];
   2036          		AttTblStr->limit =  AttMaxLimit;
   2037          		AttTblStr->nsize = 61;
   2038          		{
   2039          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2040          			INT8U *stptr = (INT8U *)TRIO_MM_FwdAttn2_LTE_A2_1;
   2041          				
   2042          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2043          		}	
   2044          		
   2045          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn1_LTE_A2];
   2046          		AttTblStr->limit =  AttMaxLimit;
   2047          		AttTblStr->nsize = 61;
   2048          		{
   2049          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2050          			INT8U *stptr = (INT8U *)TRIO_MM_RvsAttn1_LTE_A2_1;
   2051          				
   2052          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2053          		}	
   2054          		
   2055          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn2_LTE_A2];
   2056          		AttTblStr->limit =  AttMaxLimit;
   2057          		AttTblStr->nsize = 61;
   2058          		{
   2059          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2060          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   2061          		}	
   2062          		
   2063          		AttTblStr = &tptr->SvrAttnTbl[Local_Rvs1Attn3_LTE_A2];
   2064          		AttTblStr->limit =  AttMaxLimit;
   2065          		AttTblStr->nsize = 61;
   2066          		{
   2067          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2068          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   2069          		}	
   2070          
   2071          
   2072          		AttTblStr = &tptr->SvrAttnTbl[Local_FwdAttn1_LTE_A_1];
   2073          		AttTblStr->limit =  AttMaxLimit;
   2074          		AttTblStr->nsize = 61;
   2075          		{
   2076          			INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2077          			for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   2078          		}	
   2079          
   2080          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
   2081          
   2082          	}
   2083          
   2084          	OS_EXIT_CRITICAL();
   2085          }
   2086          
   2087          
   2088          
   2089          
   2090          void DefaultTempTable_TRIO_M(void)
   2091          {
   2092          	INT32U i = 0;
   2093          
   2094          	__AttnTempTblStr *AttTblStr;
   2095          
   2096          	{
   2097          		INT32U cpu_sr;
   2098          		OS_ENTER_CRITICAL();
   2099          		{
   2100          			SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   2101          
   2102          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_2G];
   2103          			AttTblStr->limit = TempMaxlimit;
   2104          			AttTblStr->nsize = TempTBL_Size;
   2105          			{
   2106          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2107          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2108          				
   2109          //				INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_CDMA;
   2110          				
   2111          //				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2112          			}
   2113          
   2114          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_2G];
   2115          			AttTblStr->limit = TempMaxlimit;
   2116          			AttTblStr->nsize = TempTBL_Size;
   2117          			{
   2118          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2119          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2120          			}
   2121          
   2122          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE];
   2123          			AttTblStr->limit = TempMaxlimit;
   2124          			AttTblStr->nsize = TempTBL_Size;
   2125          			{
   2126          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2127          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2128          			}
   2129          
   2130          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE];
   2131          			AttTblStr->limit = TempMaxlimit;
   2132          			AttTblStr->nsize = TempTBL_Size;
   2133          			{
   2134          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2135          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);;
   2136          			}
   2137          
   2138          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A1];
   2139          			AttTblStr->limit = TempMaxlimit;
   2140          			AttTblStr->nsize = TempTBL_Size;
   2141          			{
   2142          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2143          				INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_LTE_A1;
   2144          					
   2145          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2146          			}
   2147          
   2148          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A2];
   2149          			AttTblStr->limit = TempMaxlimit;
   2150          			AttTblStr->nsize = TempTBL_Size;
   2151          			{
   2152          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2153          				INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_LTE_A2;
   2154          					
   2155          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2156          			}
   2157          
   2158          
   2159          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A1];
   2160          			AttTblStr->limit = TempMaxlimit;
   2161          			AttTblStr->nsize = TempTBL_Size;
   2162          			{
   2163          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2164          				INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_LTE_A1;
   2165          					
   2166          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2167          			}
   2168          
   2169          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A2];
   2170          			AttTblStr->limit = TempMaxlimit;
   2171          			AttTblStr->nsize = TempTBL_Size;
   2172          			{
   2173          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2174          				INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_LTE_A2;
   2175          					
   2176          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2177          			}
   2178          
   2179          
   2180          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_3G];
   2181          			AttTblStr->limit = TempMaxlimit;
   2182          			AttTblStr->nsize = TempTBL_Size;
   2183          			{
   2184          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2185          				INT8U *stptr = (INT8U *)TRIO_M_FwdTempAtt_WCDMA;
   2186          					
   2187          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2188          			}
   2189          
   2190          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_3G];
   2191          			AttTblStr->limit = TempMaxlimit;
   2192          			AttTblStr->nsize = TempTBL_Size;
   2193          			{
   2194          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2195          				INT8U *stptr = (INT8U *)TRIO_M_RvsTempAtt_WCDMA;
   2196          					
   2197          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2198          			}
   2199          
   2200          			WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   2201          		}
   2202          		OS_EXIT_CRITICAL();
   2203          	}
   2204          }
   2205          
   2206          
   2207          void DefaultTempTable_TRIO_MM(void)
   2208          {
   2209          	INT32U i = 0;
   2210          
   2211          	__AttnTempTblStr *AttTblStr;
   2212          
   2213          	{
   2214          		INT32U cpu_sr;
   2215          		OS_ENTER_CRITICAL();
   2216          		{
   2217          			SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   2218          
   2219          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_2G];
   2220          			AttTblStr->limit = TempMaxlimit;
   2221          			AttTblStr->nsize = TempTBL_Size;
   2222          			{
   2223          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2224          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_CDMA;
   2225          					
   2226          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2227          			}
   2228          
   2229          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_2G];
   2230          			AttTblStr->limit = TempMaxlimit;
   2231          			AttTblStr->nsize = TempTBL_Size;
   2232          			{
   2233          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2234          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_CDMA;
   2235          					
   2236          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2237          			}
   2238          
   2239          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE];
   2240          			AttTblStr->limit = TempMaxlimit;
   2241          			AttTblStr->nsize = TempTBL_Size;
   2242          			{
   2243          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2244          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE;
   2245          					
   2246          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2247          			}
   2248          
   2249          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE];
   2250          			AttTblStr->limit = TempMaxlimit;
   2251          			AttTblStr->nsize = TempTBL_Size;
   2252          			{
   2253          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2254          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE;
   2255          					
   2256          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2257          			}
   2258          
   2259          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A1];
   2260          			AttTblStr->limit = TempMaxlimit;
   2261          			AttTblStr->nsize = TempTBL_Size;
   2262          			{
   2263          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2264          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE_A1;
   2265          					
   2266          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2267          			}
   2268          
   2269          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_LTE_A2];
   2270          			AttTblStr->limit = TempMaxlimit;
   2271          			AttTblStr->nsize = TempTBL_Size;
   2272          			{
   2273          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2274          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE_A2;
   2275          					
   2276          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2277          			}
   2278          
   2279          
   2280          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A1];
   2281          			AttTblStr->limit = TempMaxlimit;
   2282          			AttTblStr->nsize = TempTBL_Size;
   2283          			{
   2284          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2285          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE_A1;
   2286          					
   2287          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2288          			}
   2289          
   2290          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_LTE_A2];
   2291          			AttTblStr->limit = TempMaxlimit;
   2292          			AttTblStr->nsize = TempTBL_Size;
   2293          			{
   2294          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2295          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE_A2;
   2296          					
   2297          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2298          			}
   2299          
   2300          
   2301          			AttTblStr = &tptr->AttnTempTbl[Local_FwdTempAttn_3G];
   2302          			AttTblStr->limit = TempMaxlimit;
   2303          			AttTblStr->nsize = TempTBL_Size;
   2304          			{
   2305          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2306          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_WCDMA;
   2307          					
   2308          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2309          			}
   2310          
   2311          			AttTblStr = &tptr->AttnTempTbl[Local_RvsTempAttn_3G];
   2312          			AttTblStr->limit = TempMaxlimit;
   2313          			AttTblStr->nsize = TempTBL_Size;
   2314          			{
   2315          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2316          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_WCDMA;
   2317          					
   2318          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2319          			}
   2320          ///
   2321          			AttTblStr = &tptr->AttnTempTbl[Local_Fwd1TempAttn_LTE];
   2322          			AttTblStr->limit = TempMaxlimit;
   2323          			AttTblStr->nsize = TempTBL_Size;
   2324          			{
   2325          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2326          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE_1;
   2327          					
   2328          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2329          			}
   2330          
   2331          			AttTblStr = &tptr->AttnTempTbl[Local_Rvs1TempAttn_LTE];
   2332          			AttTblStr->limit = TempMaxlimit;
   2333          			AttTblStr->nsize = TempTBL_Size;
   2334          			{
   2335          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2336          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE_1;
   2337          					
   2338          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2339          			}
   2340          
   2341          			AttTblStr = &tptr->AttnTempTbl[Local_Fwd1TempAttn_LTE_A1];
   2342          			AttTblStr->limit = TempMaxlimit;
   2343          			AttTblStr->nsize = TempTBL_Size;
   2344          			{
   2345          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2346          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE_A1_1;
   2347          					
   2348          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2349          			}
   2350          
   2351          			AttTblStr = &tptr->AttnTempTbl[Local_Fwd1TempAttn_LTE_A2];
   2352          			AttTblStr->limit = TempMaxlimit;
   2353          			AttTblStr->nsize = TempTBL_Size;
   2354          			{
   2355          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2356          				INT8U *stptr = (INT8U *)TRIO_MM_FwdTempAtt_LTE_A2_1;
   2357          					
   2358          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2359          			}
   2360          
   2361          
   2362          			AttTblStr = &tptr->AttnTempTbl[Local_Rvs1TempAttn_LTE_A1];
   2363          			AttTblStr->limit = TempMaxlimit;
   2364          			AttTblStr->nsize = TempTBL_Size;
   2365          			{
   2366          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2367          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE_A1_1;
   2368          					
   2369          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2370          			}
   2371          
   2372          			AttTblStr = &tptr->AttnTempTbl[Local_Rvs1TempAttn_LTE_A2];
   2373          			AttTblStr->limit = TempMaxlimit;
   2374          			AttTblStr->nsize = TempTBL_Size;
   2375          			{
   2376          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   2377          				INT8U *stptr = (INT8U *)TRIO_MM_RvsTempAtt_LTE_A2_1;
   2378          					
   2379          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = stptr[i];
   2380          			}
   2381          
   2382          
   2383          			WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   2384          		}
   2385          		OS_EXIT_CRITICAL();
   2386          	}
   2387          }
   2388          
   2389          
   2390          
   2391          void DefaultPwrTable_TRIO_M(void)
   2392          {
   2393          	INT32U i = 0;
   2394          
   2395          	{
   2396          		INT32U cpu_sr;
   2397          		OS_ENTER_CRITICAL();
   2398          
   2399          		{
   2400          			__Dnr0OutputTblStr *TblStr;
   2401          
   2402          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   2403          
   2404          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_CDMALTE]);
   2405          			TblStr->limit = 26*2;
   2406          			TblStr->nsize = 21;
   2407          
   2408          			{
   2409          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2410          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMALTE;
   2411          				
   2412          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2413          
   2414          			}
   2415          			
   2416          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdOutAvgPwr_LTE_A1]);
   2417          			TblStr->limit = 25*2;
   2418          			TblStr->nsize = 26;
   2419          
   2420          			{
   2421          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2422          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A1;
   2423          				
   2424          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2425          
   2426          			}
   2427          
   2428          
   2429          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A1]);
   2430          			TblStr->limit = 26*2;
   2431          			TblStr->nsize = 21;
   2432          			{
   2433          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2434          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A1;
   2435          				
   2436          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2437          
   2438          			}
   2439          
   2440          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A2]);
   2441          			TblStr->limit = 26*2;
   2442          			TblStr->nsize = 21;
   2443          			{
   2444          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2445          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A2;
   2446          				
   2447          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2448          
   2449          			}
   2450          
   2451          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdOutAvgPwr_LTE_A2]);
   2452          			TblStr->limit = 28*2;
   2453          			TblStr->nsize = 26;
   2454          			{
   2455          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2456          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A2;
   2457          				
   2458          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2459          
   2460          			}
   2461          			
   2462          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdInPwr_LTE_A]);
   2463          			TblStr->limit = -15*2;
   2464          			TblStr->nsize = 32;
   2465          			{
   2466          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2467          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_LTE_A;
   2468          				
   2469          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2470          
   2471          			}
   2472          
   2473          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A]);
   2474          			TblStr->limit = 26*2;
   2475          			TblStr->nsize = 21;
   2476          			{
   2477          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2478          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE_A;
   2479          				
   2480          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2481          
   2482          			}
   2483          
   2484          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdInPwr_3G]);
   2485          			TblStr->limit = -17*2;
   2486          			TblStr->nsize = 34;
   2487          			{
   2488          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2489          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_WCDMA;
   2490          				
   2491          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2492          			}
   2493          
   2494          
   2495          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   2496          		}
   2497          		
   2498          		{
   2499          			__Dnr1OutputTblStr *TblStr;
   2500          
   2501          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   2502          
   2503          			TblStr = &(tptr->Dnr1OutputTbl[Local_FwdInPwr_CDMALTE]);
   2504          			TblStr->limit = -4*2;
   2505          			TblStr->nsize = 47;
   2506          			{
   2507          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2508          				INT16U *stptr = (INT16U *)TRIO_M_FwdInPwr_CDMALTE;
   2509          				
   2510          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2511          			}
   2512          
   2513          
   2514          			TblStr = &(tptr->Dnr1OutputTbl[Local_RvsOutPwr_3G]);
   2515          			TblStr->limit = 26*2;
   2516          			TblStr->nsize = 58;
   2517          			{
   2518          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2519          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_WCDMA;
   2520          				
   2521          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2522          			}
   2523          
   2524          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   2525          		}
   2526          		
   2527          		{
   2528          			__Svr0OutputTblStr *TblStr;
   2529          
   2530          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   2531          
   2532          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_2G]);
   2533          			TblStr->limit = 22*2;
   2534          			TblStr->nsize = 26;
   2535          			{
   2536          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2537          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMA;
   2538          				
   2539          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2540          			}
   2541          
   2542          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsOutPwr_2G]);
   2543          			TblStr->limit = 26*2;
   2544          			TblStr->nsize = 21;
   2545          			{
   2546          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2547          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_CDMA;
   2548          				
   2549          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2550          			}
   2551          
   2552          
   2553          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_LTE]);
   2554          			TblStr->limit = 25*2;
   2555          			TblStr->nsize = 26;
   2556          			{
   2557          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2558          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE;
   2559          				
   2560          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2561          			}
   2562          
   2563          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsOutPwr_LTE]);
   2564          			TblStr->limit = 26*2;
   2565          			TblStr->nsize = 21;
   2566          			{
   2567          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2568          				INT16U *stptr = (INT16U *)TRIO_M_RvsOutPwr_LTE;
   2569          				
   2570          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2571          			}
   2572          
   2573          
   2574          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_CDMALTE]);
   2575          			TblStr->limit = 27*2;
   2576          			TblStr->nsize = 21;
   2577          			{
   2578          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2579          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_CDMALTE;
   2580          				
   2581          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2582          			}
   2583          
   2584          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsInPwr_CDMALTE]);
   2585          			TblStr->limit = -12*2;
   2586          			TblStr->nsize = 31;
   2587          			{
   2588          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2589          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_CDMALTE;
   2590          				
   2591          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2592          			}
   2593          
   2594          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_LTE_A]);
   2595          			TblStr->limit = 28*2;
   2596          			TblStr->nsize = 21;
   2597          			{
   2598          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2599          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_LTE_A;
   2600          				
   2601          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2602          			}
   2603          
   2604          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_3G]);
   2605          			TblStr->limit = 28*2;
   2606          			TblStr->nsize = 21;
   2607          			{
   2608          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2609          				INT16U *stptr = (INT16U *)TRIO_M_FwdOutPwr_WCDMA;
   2610          				
   2611          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2612          			}
   2613          
   2614          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsInPwr_3G]);
   2615          			TblStr->limit = -12*2;
   2616          			TblStr->nsize = 31;
   2617          			{
   2618          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2619          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_WCDMA;
   2620          				
   2621          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2622          			}
   2623          
   2624          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   2625          		}
   2626          		
   2627          		{
   2628          			__Svr1OutputTblStr *TblStr;
   2629          
   2630          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   2631          
   2632          			TblStr = &(tptr->Svr1OutputTbl[Local_RvsInPwr_LTE_A]);
   2633          			TblStr->limit = -12*2;
   2634          			TblStr->nsize = 39;
   2635          			{
   2636          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2637          				INT16U *stptr = (INT16U *)TRIO_M_RvsInPwr_LTE_A;
   2638          				
   2639          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2640          			}
   2641          
   2642          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   2643          		}
   2644          		
   2645          		OS_EXIT_CRITICAL();
   2646          	}
   2647          }
   2648          
   2649          
   2650          void DefaultPwrTable_TRIO_MM(void)
   2651          {
   2652          	INT32U i = 0;
   2653          
   2654          	{
   2655          		INT32U cpu_sr;
   2656          		OS_ENTER_CRITICAL();
   2657          
   2658          		{
   2659          			__Dnr0OutputTblStr *TblStr;
   2660          
   2661          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   2662          
   2663          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_CDMALTE]);
   2664          			TblStr->limit = 28*2;
   2665          			TblStr->nsize = 21;
   2666          
   2667          			{
   2668          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2669          //				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);;
   2670          #if 1
   2671          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_CDMALTE;
   2672          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2673          #endif
   2674          			}
   2675          			
   2676          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdOutAvgPwr_LTE_A1]);
   2677          			TblStr->limit = 25*2;
   2678          			TblStr->nsize = 26;
   2679          
   2680          			{
   2681          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2682          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A1;
   2683          				
   2684          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2685          
   2686          			}
   2687          
   2688          
   2689          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A1]);
   2690          			TblStr->limit = 26*2;
   2691          			TblStr->nsize = 21;
   2692          			{
   2693          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2694          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A1;
   2695          				
   2696          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2697          
   2698          			}
   2699          
   2700          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A2]);
   2701          			TblStr->limit = 26*2;
   2702          			TblStr->nsize = 21;
   2703          			{
   2704          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2705          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A2;
   2706          				
   2707          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2708          
   2709          			}
   2710          
   2711          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdOutAvgPwr_LTE_A2]);
   2712          			TblStr->limit = 28*2;
   2713          			TblStr->nsize = 26;
   2714          			{
   2715          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2716          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A2;
   2717          				
   2718          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2719          
   2720          			}
   2721          			
   2722          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdInPwr_LTE_A]);
   2723          			TblStr->limit = -15*2;
   2724          			TblStr->nsize = 32;
   2725          			{
   2726          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2727          				INT16U *stptr = (INT16U *)TRIO_MM_FwdInPwr_LTE_A;
   2728          				
   2729          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2730          
   2731          			}
   2732          
   2733          			TblStr = &(tptr->Dnr0OutputTbl[Local_RvsOutPwr_LTE_A]);
   2734          			TblStr->limit = 28*2;
   2735          			TblStr->nsize = 21;
   2736          			{
   2737          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2738          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A;
   2739          				
   2740          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2741          
   2742          			}
   2743          
   2744          
   2745          
   2746          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdInPwr_3G]);
   2747          			TblStr->limit = -17*2;
   2748          			TblStr->nsize = 34;
   2749          			{
   2750          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2751          				INT16U *stptr = (INT16U *)TRIO_MM_FwdInPwr_WCDMA;
   2752          				
   2753          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2754          
   2755          			}
   2756          
   2757          			TblStr = &(tptr->Dnr0OutputTbl[Local_Fwd1OutAvgPwr_LTE]);
   2758          			TblStr->limit = 27*2;
   2759          			TblStr->nsize = 23;
   2760          			{
   2761          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2762          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_1;
   2763          				
   2764          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2765          
   2766          			}
   2767          
   2768          
   2769          			TblStr = &(tptr->Dnr0OutputTbl[Local_Rvs1InPwr_LTE]);
   2770          			TblStr->limit = -12*2;
   2771          			TblStr->nsize = 31;
   2772          			{
   2773          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2774          				INT16U *stptr = (INT16U *)TRIO_MM_RvsInPwr_LTE_1;
   2775          				
   2776          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2777          
   2778          			}
   2779          
   2780          
   2781          			TblStr = &(tptr->Dnr0OutputTbl[Local_FwdOutAvgPwr_LTE_A_1]);
   2782          			TblStr->limit = 28*2;
   2783          			TblStr->nsize = 21;
   2784          			{
   2785          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2786          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A_1;
   2787          				
   2788          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2789          
   2790          			}
   2791          
   2792          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   2793          		}
   2794          		
   2795          		{
   2796          			__Dnr1OutputTblStr *TblStr;
   2797          
   2798          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   2799          
   2800          			TblStr = &(tptr->Dnr1OutputTbl[Local_FwdInPwr_CDMALTE]);
   2801          			TblStr->limit = -4*2;
   2802          			TblStr->nsize = 47;
   2803          			{
   2804          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2805          				INT16U *stptr = (INT16U *)TRIO_MM_FwdInPwr_CDMALTE;
   2806          				
   2807          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2808          			}
   2809          
   2810          
   2811          			TblStr = &(tptr->Dnr1OutputTbl[Local_RvsOutPwr_3G]);
   2812          			TblStr->limit = 26*2;
   2813          			TblStr->nsize = 58;
   2814          			{
   2815          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2816          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_WCDMA;
   2817          				
   2818          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2819          			}
   2820          
   2821          
   2822          			TblStr = &(tptr->Dnr1OutputTbl[Local_RvsInPwr_LTE_A_1]);
   2823          			TblStr->limit = -12*2;
   2824          			TblStr->nsize = 39;
   2825          			{
   2826          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2827          				INT16U *stptr = (INT16U *)TRIO_MM_RvsInPwr_LTE_A_1;
   2828          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2829          			}
   2830          			
   2831          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   2832          		}
   2833          		
   2834          		{
   2835          			__Svr0OutputTblStr *TblStr;
   2836          
   2837          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   2838          
   2839          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_2G]);
   2840          			TblStr->limit = 22*2;
   2841          			TblStr->nsize = 26;
   2842          			{
   2843          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2844          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_CDMA;
   2845          				
   2846          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2847          			}
   2848          
   2849          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsOutPwr_2G]);
   2850          			TblStr->limit = 26*2;
   2851          			TblStr->nsize = 21;
   2852          			{
   2853          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2854          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_CDMA;
   2855          				
   2856          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2857          			}
   2858          
   2859          
   2860          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_LTE]);
   2861          			TblStr->limit = 25*2;
   2862          			TblStr->nsize = 26;
   2863          			{
   2864          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2865          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE;
   2866          				
   2867          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2868          			}
   2869          
   2870          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsOutPwr_LTE]);
   2871          			TblStr->limit = 26*2;
   2872          			TblStr->nsize = 21;
   2873          			{
   2874          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2875          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE;
   2876          				
   2877          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2878          			}
   2879          
   2880          
   2881          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_CDMALTE]);
   2882          			TblStr->limit = 27*2;
   2883          			TblStr->nsize = 21;
   2884          			{
   2885          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2886          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_CDMALTE;
   2887          				
   2888          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2889          			}
   2890          
   2891          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsInPwr_CDMALTE]);
   2892          			TblStr->limit = -12*2;
   2893          			TblStr->nsize = 31;
   2894          			{
   2895          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2896          				INT16U *stptr = (INT16U *)TRIO_MM_RvsInPwr_CDMALTE;
   2897          				
   2898          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2899          			}
   2900          
   2901          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_LTE_A]);
   2902          			TblStr->limit = 28*2;
   2903          			TblStr->nsize = 21;
   2904          			{
   2905          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2906          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A;
   2907          				
   2908          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2909          			}
   2910          
   2911          			TblStr = &(tptr->Svr0OutputTbl[Local_FwdOutAvgPwr_3G]);
   2912          			TblStr->limit = 28*2;
   2913          			TblStr->nsize = 21;
   2914          			{
   2915          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2916          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_WCDMA;
   2917          				
   2918          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2919          			}
   2920          
   2921          			TblStr = &(tptr->Svr0OutputTbl[Local_RvsInPwr_3G]);
   2922          			TblStr->limit = -12*2;
   2923          			TblStr->nsize = 31;
   2924          			{
   2925          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2926          				INT16U *stptr = (INT16U *)TRIO_MM_RvsInPwr_WCDMA;
   2927          				
   2928          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2929          			}
   2930          
   2931          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   2932          		}
   2933          		
   2934          		{
   2935          			__Svr1OutputTblStr *TblStr;
   2936          
   2937          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   2938          
   2939          			TblStr = &(tptr->Svr1OutputTbl[Local_RvsInPwr_LTE_A]);
   2940          			TblStr->limit = -12*2;
   2941          			TblStr->nsize = 39;
   2942          			{
   2943          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2944          				INT16U *stptr = (INT16U *)TRIO_MM_RvsInPwr_LTE_A;
   2945          				
   2946          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2947          			}
   2948          
   2949          
   2950          			TblStr = &(tptr->Svr1OutputTbl[Local_Fwd1InPwr_LTE]);
   2951          			TblStr->limit = -4*2;
   2952          			TblStr->nsize = 47;
   2953          			{
   2954          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2955          				INT16U *stptr = (INT16U *)TRIO_MM_FwdInPwr_LTE_1;
   2956          				
   2957          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2958          			}
   2959          
   2960          			 TblStr = &(tptr->Svr1OutputTbl[Local_Rvs1OutPwr_LTE]);
   2961          			 TblStr->limit = 26*2;
   2962          			 TblStr->nsize = 67;
   2963          			 {
   2964          				 INT16U *dsptr = (INT16U *)TblStr->Data;
   2965          				 INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_1;
   2966          				 
   2967          				 for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2968          			 }
   2969          
   2970          			 TblStr = &(tptr->Svr1OutputTbl[Local_Fwd1OutAvgPwr_LTE_A1]);
   2971          			 TblStr->limit = 25*2;
   2972          			 TblStr->nsize = 26;
   2973          			 {
   2974          				 INT16U *dsptr = (INT16U *)TblStr->Data;
   2975          				 INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A1_1;
   2976          				 
   2977          				 for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2978          			 }
   2979          
   2980          
   2981          			TblStr = &(tptr->Svr1OutputTbl[Local_Fwd1OutAvgPwr_LTE_A2]);
   2982          			TblStr->limit = 28*2;
   2983          			TblStr->nsize = 26;
   2984          			{
   2985          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2986          				INT16U *stptr = (INT16U *)TRIO_MM_FwdOutPwr_LTE_A2_1;
   2987          				
   2988          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2989          			}
   2990          
   2991          			TblStr = &(tptr->Svr1OutputTbl[Local_Rvs1OutPwr_LTE_A1]);
   2992          			TblStr->limit = 26*2;
   2993          			TblStr->nsize = 21;
   2994          			{
   2995          				INT16U *dsptr = (INT16U *)TblStr->Data;
   2996          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A1_1;
   2997          				
   2998          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   2999          			}
   3000          
   3001          			TblStr = &(tptr->Svr1OutputTbl[Local_Rvs1OutPwr_LTE_A2]);
   3002          			TblStr->limit = 26*2;
   3003          			TblStr->nsize = 21;
   3004          			{
   3005          				INT16U *dsptr = (INT16U *)TblStr->Data;
   3006          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A2_1;
   3007          				
   3008          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   3009          			}
   3010          
   3011          			TblStr = &(tptr->Svr1OutputTbl[Local_FwdInPwr_LTE_A_1]);
   3012          			TblStr->limit = -15*2;
   3013          			TblStr->nsize = 32;
   3014          			{
   3015          				INT16U *dsptr = (INT16U *)TblStr->Data;
   3016          				INT16U *stptr = (INT16U *)TRIO_MM_FwdInPwr_LTE_A_1;
   3017          				
   3018          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   3019          			}
   3020          
   3021          			TblStr = &(tptr->Svr1OutputTbl[Local_RvsOutPwr_LTE_A_1]);
   3022          			TblStr->limit = 28*2;
   3023          			TblStr->nsize = 21;
   3024          			{
   3025          				INT16U *dsptr = (INT16U *)TblStr->Data;
   3026          				INT16U *stptr = (INT16U *)TRIO_MM_RvsOutPwr_LTE_A_1;
   3027          				
   3028          				for(i = 0; i < TblStr->nsize; i++) dsptr[i] = stptr[i];
   3029          			}
   3030          
   3031          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   3032          		}
   3033          		
   3034          		OS_EXIT_CRITICAL();
   3035          	}
   3036          }
   3037          
   3038          void DefaultAttTableInit(void)
   3039          {
   3040          	INT32U cpu_sr;
   3041          
   3042          	int i = 0;
   3043          	int j = 0;
   3044          
   3045          	j =j;
   3046          	OS_ENTER_CRITICAL();
   3047          	{
   3048          		__AttnOffsetTblStr *AttTblStr;
   3049          		SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   3050          
   3051          		for(j = 0; j < Local_DnrAttn_Max; j++) 
   3052          		{
   3053          			
   3054          			AttTblStr = &tptr->DnrAttnTbl[j];
   3055          			AttTblStr->limit = AttMaxLimit;
   3056          			AttTblStr->nsize = 61;
   3057          			{
   3058          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   3059          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   3060          			}
   3061          		}
   3062          
   3063          		WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   3064          	}
   3065          
   3066          
   3067          	{
   3068          		__AttnOffsetTblStr *AttTblStr;
   3069          		EE_BACK1 *tptr = (EE_BACK1 *)RoadBackuptobuffer(vEE_BACK1Addr);
   3070          
   3071          		for(j = 0; j < Local_Svr0Attn_Max; j++) 
   3072          		{
   3073          			
   3074          			AttTblStr = &tptr->SvrAttnTbl[j];
   3075          			AttTblStr->limit = AttMaxLimit;
   3076          			AttTblStr->nsize = 61;
   3077          			{
   3078          				INT8U *dsptr = (INT8U *)AttTblStr->Data;
   3079          				for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   3080          			}
   3081          		}
   3082          
   3083          		WriteBuffertoBackup(vEE_BACK1Addr, sizeof(EE_BACK1));
   3084          	}
   3085          
   3086          	OS_EXIT_CRITICAL();
   3087          }
   3088          
   3089          
   3090          
   3091          
   3092          void DefaultTempTableInit(void)
   3093          {
   3094          	INT32U i = 0;
   3095          	INT32U j = 0;
   3096          
   3097          	__AttnTempTblStr *AttTblStr;
   3098          
   3099          	j = j;
   3100          	{
   3101          		INT32U cpu_sr;
   3102          		OS_ENTER_CRITICAL();
   3103          		{
   3104          			SYS_TABLE *tptr = (SYS_TABLE *)RoadBackuptobuffer(__pSYSTAddr);
   3105          
   3106          			for(j = 0; j < Local_TempAttn_Max; j++) 
   3107          			{
   3108          				
   3109          				AttTblStr = &tptr->AttnTempTbl[j];
   3110          				AttTblStr->limit = TempMaxlimit;
   3111          				AttTblStr->nsize = TempTBL_Size;
   3112          				{
   3113          					INT8U *dsptr = (INT8U *)AttTblStr->Data;
   3114          					for(i = 0; i < AttTblStr->nsize; i++) dsptr[i] = (NULL);
   3115          				}
   3116          			}
   3117          
   3118          			WriteBuffertoBackup(__pSYSTAddr, sizeof(SYS_BACK)); 
   3119          		}
   3120          		OS_EXIT_CRITICAL();
   3121          	}
   3122          }
   3123          
   3124          
   3125          void DefaultPwrTableInit(void)
   3126          {
   3127          	INT32U i = 0;
   3128          	INT32U j = 0;
   3129          
   3130          	{
   3131          		INT32U cpu_sr;
   3132          		OS_ENTER_CRITICAL();
   3133          
   3134          		{
   3135          			__Dnr0OutputTblStr *TblStr;
   3136          
   3137          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   3138          
   3139          			for(j = 0; j < Local_DnrPwr0_Max; j++) 
   3140          			{
   3141          				
   3142          				TblStr = &(tptr->Dnr0OutputTbl[j]);
   3143          				TblStr->limit = 0;
   3144          				TblStr->nsize = Dnr0OutputTBL_Size;
   3145          				{
   3146          					INT16U *dsptr = (INT16U *)TblStr->Data;
   3147          					for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);
   3148          				}
   3149          			}
   3150          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   3151          		}
   3152          		
   3153          		{
   3154          			__Dnr1OutputTblStr *TblStr;
   3155          
   3156          			EE_TABLE1 *tptr = (EE_TABLE1 *)RoadBackuptobuffer(vEE_TABLE1Addr);
   3157          
   3158          			for(j = 0; j < Local_DnrPwr1_Max; j++) 
   3159          			{
   3160          				
   3161          				TblStr = &(tptr->Dnr1OutputTbl[j]);
   3162          				TblStr->limit = 0;
   3163          				TblStr->nsize = Dnr1OutputTBL_Size;
   3164          				{
   3165          					INT16U *dsptr = (INT16U *)TblStr->Data;
   3166          					for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);
   3167          				}
   3168          			}
   3169          			WriteBuffertoBackup(vEE_TABLE1Addr, sizeof(EE_TABLE1));
   3170          		}
   3171          		
   3172          		{
   3173          			__Svr0OutputTblStr *TblStr;
   3174          
   3175          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   3176          
   3177          			for(j = 0; j < Local_SvrPwr0_Max; j++) 
   3178          			{
   3179          				
   3180          				TblStr = &(tptr->Svr0OutputTbl[j]);
   3181          				TblStr->limit = 0;
   3182          				TblStr->nsize = Svr0OutputTBL_Size*2;
   3183          				{
   3184          					INT16U *dsptr = (INT16U *)TblStr->Data;
   3185          					for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);
   3186          				}
   3187          			}
   3188          
   3189          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   3190          		}
   3191          		
   3192          		{
   3193          			__Svr1OutputTblStr *TblStr;
   3194          
   3195          			EE_TABLE *tptr = (EE_TABLE *)RoadBackuptobuffer(vEE_TABLEAddr);
   3196          
   3197          			for(j = 0; j < Local_SvrPwr1_Max; j++) 
   3198          			{
   3199          				
   3200          				TblStr = &(tptr->Svr1OutputTbl[j]);
   3201          				TblStr->limit = 0;
   3202          				TblStr->nsize = Svr1OutputTBL_Size*2;
   3203          				{
   3204          					INT16U *dsptr = (INT16U *)TblStr->Data;
   3205          					for(i = 0; i < TblStr->nsize; i++) dsptr[i] = (NULL);
   3206          				}
   3207          			}
   3208          
   3209          
   3210          			WriteBuffertoBackup(vEE_TABLEAddr, sizeof(EE_TABLE));
   3211          		}
   3212          		
   3213          		OS_EXIT_CRITICAL();
   3214          	}
   3215          }
   3216          
   3217          
   3218          
   3219          ////////////////////////////////////////////////////////////////////////////////
   3220          // End of Source File
   3221          /////////////////////
   3222          

   Maximum stack usage in bytes:

     Function                 .cstack
     --------                 -------
     AttnTableLocation             0
     DefaultAttTableInit          24
     DefaultAttTable_TRIO_M       24
     DefaultAttTable_TRIO_MM      24
     DefaultPwrTableInit          24
     DefaultPwrTable_TRIO_M       24
     DefaultPwrTable_TRIO_MM      32
     DefaultTableSet              24
     DefaultTempTableInit         24
     DefaultTempTable_TRIO_M      24
     DefaultTempTable_TRIO_MM     24
     DefaultValueSet              24
     DefaultValueSet_Test         16
     PwrTableLocation              0
     Response_Table_DE            56
     TableIndex                    0
     TableLocation                 0


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     pBackupSem                     4
     FwdOutPwrTemp_LTE_A1          24
     RvsOutPwrTemp_LTE_A1          24
     FwdOutPwrTemp_LTE_A2          24
     RvsOutPwrTemp_LTE_A2          24
     TRIO_MM_FwdAttn1_2G         2240
     TRIO_MM_FwdAttn2_2G
     TRIO_MM_RvsAttn1_2G
     TRIO_MM_RvsAttn2_2G
     TRIO_MM_FwdAttn1_LTE
     TRIO_MM_FwdAttn2_LTE
     TRIO_MM_RvsAttn1_LTE
     TRIO_MM_RvsAttn2_LTE
     TRIO_MM_RvsAttn3_LTE
     TRIO_MM_FwdAttn1_CDMALTE
     TRIO_MM_RvsAttn1_CDMALTE
     TRIO_MM_FwdAttn2_LTE_A1
     TRIO_MM_RvsAttn1_LTE_A1
     TRIO_MM_FwdAttn1_LTE_A2
     TRIO_MM_FwdAttn2_LTE_A2
     TRIO_MM_RvsAttn1_LTE_A2
     TRIO_MM_RvsAttn2_LTE_A2
     TRIO_MM_RvsAttn3_LTE_A2
     TRIO_MM_FwdAttn1_WCDMA
     TRIO_MM_FwdAttn2_WCDMA
     TRIO_MM_RvsAttn4_WCDMA
     TRIO_MM_FwdAttn1_LTE_1
     TRIO_MM_FwdAttn2_LTE_1
     TRIO_MM_RvsAttn1_LTE_1
     TRIO_MM_RvsAttn2_LTE_1
     TRIO_MM_RvsAttn3_LTE_1
     TRIO_MM_RvsAttn4_LTE_1
     TRIO_MM_FwdAttn1_LTE_A1_1
     TRIO_MM_FwdAttn2_LTE_A1_1
     TRIO_MM_RvsAttn1_LTE_A1_1
     TRIO_MM_RvsAttn2_LTE_A1_1
     TRIO_MM_RvsAttn3_LTE_A1_1
     TRIO_MM_FwdAttn1_LTE_A2_1
     TRIO_MM_FwdAttn2_LTE_A2_1
     TRIO_MM_RvsAttn1_LTE_A2_1
     TRIO_MM_RvsAttn3_2G           64
     TRIO_MM_FwdAttn1_LTE_A1       64
     TRIO_MM_RvsAttn2_LTE_A1       64
     TRIO_MM_RvsAttn3_LTE_A1       64
     TRIO_MM_FwdAttn1_LTE_A        64
     TRIO_MM_RvsAttn1_LTE_A        64
     TRIO_MM_RvsAttn1_WCDMA        64
     TRIO_MM_RvsAttn2_WCDMA        64
     TRIO_MM_RvsAttn3_WCDMA        64
     TRIO_MM_FwdTempAtt_CDMA      384
     TRIO_MM_RvsTempAtt_CDMA
     TRIO_MM_FwdTempAtt_LTE
     TRIO_MM_RvsTempAtt_LTE
     TRIO_MM_FwdTempAtt_LTE_A1
     TRIO_MM_RvsTempAtt_LTE_A1
     TRIO_MM_FwdTempAtt_LTE_A2
     TRIO_MM_RvsTempAtt_LTE_A2
     TRIO_MM_FwdTempAtt_WCDMA
     TRIO_MM_RvsTempAtt_WCDMA
     TRIO_MM_FwdTempAtt_LTE_1
     TRIO_MM_RvsTempAtt_LTE_1
     TRIO_MM_FwdTempAtt_LTE_A1_1
     TRIO_MM_RvsTempAtt_LTE_A1_1
     TRIO_MM_FwdTempAtt_LTE_A2_1
     TRIO_MM_RvsTempAtt_LTE_A2_1
     TRIO_MM_RvsAttn2_LTE_A2_1     64
     TRIO_MM_RvsAttn3_LTE_A2_1     64
     TRIO_MM_FwdAttn1_LTE_A_1      64
     TRIO_MM_RvsAttn1_LTE_A_1      64
     TRIO_M_FwdTempAtt_CDMA        24
     TRIO_M_RvsTempAtt_CDMA        24
     TRIO_M_FwdTempAtt_LTE         24
     TRIO_M_RvsTempAtt_LTE         24
     TRIO_M_FwdTempAtt_LTE_A1     144
     TRIO_M_RvsTempAtt_LTE_A1
     TRIO_M_FwdTempAtt_LTE_A2
     TRIO_M_RvsTempAtt_LTE_A2
     TRIO_M_FwdTempAtt_WCDMA
     TRIO_M_RvsTempAtt_WCDMA
     TRIO_M_FwdAttn1_2G          1280
     TRIO_M_FwdAttn2_2G
     TRIO_M_RvsAttn1_2G
     TRIO_M_RvsAttn2_2G
     TRIO_M_RvsAttn3_2G
     TRIO_M_FwdAttn1_LTE
     TRIO_M_FwdAttn2_LTE
     TRIO_M_RvsAttn1_LTE
     TRIO_M_RvsAttn2_LTE
     TRIO_M_RvsAttn3_LTE
     TRIO_M_FwdAttn1_CDMALTE
     TRIO_M_RvsAttn1_CDMALTE
     TRIO_M_FwdAttn1_LTE_A1
     TRIO_M_FwdAttn2_LTE_A1
     TRIO_M_RvsAttn1_LTE_A1
     TRIO_M_FwdAttn1_LTE_A2
     TRIO_M_RvsAttn2_LTE_A2
     TRIO_M_RvsAttn3_LTE_A2
     TRIO_M_FwdAttn1_LTE_A
     TRIO_M_RvsAttn1_WCDMA
     TRIO_M_RvsAttn2_LTE_A1        64
     TRIO_M_RvsAttn3_LTE_A1        64
     TRIO_M_FwdAttn2_LTE_A2        64
     TRIO_M_RvsAttn1_LTE_A2        64
     TRIO_M_RvsAttn1_LTE_A         64
     TRIO_M_FwdAttn1_WCDMA         64
     TRIO_M_FwdAttn2_WCDMA         64
     TRIO_M_RvsAttn2_WCDMA         64
     TRIO_M_RvsAttn3_WCDMA         64
     TRIO_M_RvsAttn4_WCDMA         64
     TRIO_M_FwdOutPwr_CDMA       1156
     TRIO_M_RvsOutPwr_CDMA
     TRIO_M_FwdOutPwr_LTE
     TRIO_M_RvsOutPwr_LTE
     TRIO_M_FwdInPwr_CDMALTE
     TRIO_M_FwdOutPwr_CDMALTE
     TRIO_M_RvsInPwr_CDMALTE
     TRIO_M_RvsOutPwr_CDMALTE
     TRIO_M_FwdOutPwr_LTE_A1
     TRIO_M_RvsOutPwr_LTE_A1
     TRIO_M_FwdOutPwr_LTE_A2
     TRIO_M_RvsOutPwr_LTE_A2
     TRIO_M_FwdInPwr_LTE_A
     TRIO_M_FwdOutPwr_LTE_A
     TRIO_M_RvsInPwr_LTE_A
     TRIO_M_RvsOutPwr_LTE_A
     TRIO_M_FwdInPwr_WCDMA
     TRIO_M_FwdOutPwr_WCDMA
     TRIO_M_RvsInPwr_WCDMA
     TRIO_M_RvsOutPwr_WCDMA
     TRIO_MM_FwdOutPwr_CDMA      1924
     TRIO_MM_RvsOutPwr_CDMA
     TRIO_MM_FwdOutPwr_LTE
     TRIO_MM_RvsOutPwr_LTE
     TRIO_MM_FwdInPwr_CDMALTE
     TRIO_MM_FwdOutPwr_CDMALTE
     TRIO_MM_RvsInPwr_CDMALTE
     TRIO_MM_RvsOutPwr_CDMALTE
     TRIO_MM_FwdOutPwr_LTE_A1
     TRIO_MM_RvsOutPwr_LTE_A1
     TRIO_MM_FwdOutPwr_LTE_A2
     TRIO_MM_RvsOutPwr_LTE_A2
     TRIO_MM_FwdInPwr_LTE_A
     TRIO_MM_FwdOutPwr_LTE_A
     TRIO_MM_RvsInPwr_LTE_A
     TRIO_MM_RvsOutPwr_LTE_A
     TRIO_MM_FwdInPwr_WCDMA
     TRIO_MM_FwdOutPwr_WCDMA
     TRIO_MM_RvsInPwr_WCDMA
     TRIO_MM_RvsOutPwr_WCDMA
     TRIO_MM_FwdInPwr_LTE_1
     TRIO_MM_FwdOutPwr_LTE_1
     TRIO_MM_RvsInPwr_LTE_1
     TRIO_MM_RvsOutPwr_LTE_1
     TRIO_MM_FwdOutPwr_LTE_A1_1
     TRIO_MM_RvsOutPwr_LTE_A1_1
     TRIO_MM_FwdOutPwr_LTE_A2_1
     TRIO_MM_RvsOutPwr_LTE_A2_1
     TRIO_MM_FwdInPwr_LTE_A_1
     TRIO_MM_FwdOutPwr_LTE_A_1
     TRIO_MM_RvsInPwr_LTE_A_1
     TRIO_MM_RvsOutPwr_LTE_A_1
     DefaultValueSet              580
     ?Subroutine0                  44
     ??Subroutine2_0                8
     DefaultTableSet              464
     Response_Table_DE           1446
     TableIndex                   274
     TableLocation                150
     PwrTableLocation             152
     AttnTableLocation            106
     DefaultValueSet_Test          70
     DefaultAttTable_TRIO_M      1010
     ?Subroutine1                  26
     ??Subroutine3_0               18
     DefaultAttTable_TRIO_MM     1608
     DefaultTempTable_TRIO_M      336
     DefaultTempTable_TRIO_MM     544
     DefaultPwrTable_TRIO_M       804
     DefaultPwrTable_TRIO_MM     1258
     DefaultAttTableInit          130
     DefaultTempTableInit          68
     DefaultPwrTableInit          248
     ??DataTable1                   4
     ??DataTable1_1                 4
     ??DataTable2                   4
     ??DataTable2_1                 4
     ??DataTable2_2                 4
     ??DataTable2_3                 4
     ??DataTable2_4                 4
     ??DataTable2_5                 4
     ??DataTable2_6                 4
     ??DataTable2_7                 4
     ??DataTable2_8                 4
     ??DataTable2_9                 4
     ??DataTable2_10                4
     ??DataTable4                   4
     ??DataTable5                   4
     ??DataTable5_1                 4
     ??DataTable5_2                 4
     ??DataTable9                   4
     ??DataTable9_1                 4
     ??DataTable9_2                 4
     ??DataTable9_3                 4
     ??DataTable9_4                 4
     ??DataTable9_5                 4
     ??DataTable9_6                 4
     ??DataTable9_7                 4

 
     4 bytes in section .bss
 8 792 bytes in section .rodata
 9 444 bytes in section .text
 
 9 444 bytes of CODE  memory
 8 792 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none

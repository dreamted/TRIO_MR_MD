###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     02/Apr/2012  19:03:53 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\s #
#                    rc\stm32f10x_iwdg.c                                      #
#    Command line =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\s #
#                    rc\stm32f10x_iwdg.c -D NDEBUG -lcN                       #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\ -o    #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\       #
#                    --debug --endian=little --cpu=Cortex-M3 -e               #
#                    --warnings_are_errors --fpu=None --dlib_config           #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4\arm\INC\DLib_Config_Normal.h" -I                     #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\include\    #
#                    -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm3 #
#                    2\inc\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\l #
#                    ib_stm32\src\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uC-CPU\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uC-LIB\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uCOS-II\Ports\ -I D:\Project\TRIO\3.F_W\TRIO_appl_ #
#                    src_20120401\uCOS-II\Source\ -I                          #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\uC-Probe\   #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\arm\INC\" -Oh                                        #
#    List file    =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\stm32f #
#                    10x_iwdg.lst                                             #
#    Object file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\stm32f #
#                    10x_iwdg.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\src\stm32f10x_iwdg.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : stm32f10x_iwdg.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 09/29/2006
      5          * Description        : This file provides all the IWDG firmware functions.
      6          ********************************************************************************
      7          * History:
      8          * 05/21/2007: V0.3
      9          * 04/02/2007: V0.2
     10          * 02/05/2007: V0.1
     11          * 09/29/2006: V0.01
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *******************************************************************************/
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f10x_conf.h"
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* ---------------------- IWDG registers bit mask ------------------------ */
     27          
     28          /* Private macro -------------------------------------------------------------*/
     29          /* Private variables ---------------------------------------------------------*/
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          /*******************************************************************************
     34          * Function Name  : IWDG_WriteAccessCmd
     35          * Description    : Enables or disables write access to IWDG_PR and IWDG_RLR
     36          *                  registers.
     37          * Input          : - IWDG_WriteAccess: new state of write access to IWDG_PR and
     38          *                    IWDG_RLR registers.
     39          *                    This parameter can be one of the following values:
     40          *                       - IWDG_WriteAccess_Enable: Enable write access to 
     41          *                         IWDG_PR and IWDG_RLR registers
     42          *                       - IWDG_WriteAccess_Disable: Disable write access to
     43          *                         IWDG_PR and IWDG_RLR registers
     44          * Output         : None
     45          * Return         : None
     46          *******************************************************************************/
     47          void IWDG_WriteAccessCmd(u16 IWDG_WriteAccess)
     48          {
     49          	/* Check the parameters */
     50          	assert(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
     51          	IWDG->KR = IWDG_WriteAccess;
     52          }
     53          
     54          /*******************************************************************************
     55          * Function Name  : IWDG_SetPrescaler
     56          * Description    : Sets IWDG Prescaler value.
     57          * Input          : - IWDG_Prescaler: specifies the IWDG Prescaler value.
     58          *                    This parameter can be one of the following values:
     59          *                       - IWDG_Prescaler_4: IWDG prescaler set to 4
     60          *                       - IWDG_Prescaler_8: IWDG prescaler set to 8
     61          *                       - IWDG_Prescaler_16: IWDG prescaler set to 16
     62          *                       - IWDG_Prescaler_32: IWDG prescaler set to 32
     63          *                       - IWDG_Prescaler_64: IWDG prescaler set to 64
     64          *                       - IWDG_Prescaler_128: IWDG prescaler set to 128
     65          *                       - IWDG_Prescaler_256: IWDG prescaler set to 256
     66          * Output         : None
     67          * Return         : None
     68          *******************************************************************************/
     69          void IWDG_SetPrescaler(u8 IWDG_Prescaler)
     70          {
     71          	/* Check the parameters */
     72          	assert(IS_IWDG_PRESCALER(IWDG_Prescaler));
     73          	IWDG->PR = IWDG_Prescaler;
     74          }
     75          
     76          /*******************************************************************************
     77          * Function Name  : IWDG_SetReload
     78          * Description    : Sets IWDG Reload value.
     79          * Input          : - Reload: specifies the IWDG Reload value.
     80          *                    This parameter must be a number between 0 and 0x0FFF.
     81          * Output         : None
     82          * Return         : None
     83          *******************************************************************************/
     84          void IWDG_SetReload(u16 ms)
     85          {
     86          	// Check the parameters
     87          	IWDG->RLR = (((u32)ms * 625L)/(1000L)) & 0xFFF;
     88          }
     89          
     90          /*******************************************************************************
     91          * Function Name  : IWDG_ReloadCounter
     92          * Description    : Reloads IWDG counter with value defined in the reload register
     93          *                  (write access to IWDG_PR and IWDG_RLR registers disabled).
     94          * Input          : None
     95          * Output         : None
     96          * Return         : None
     97          *******************************************************************************/
     98          void IWDG_ReloadCounter(void)
     99          {
    100          	IWDG->KR = KR_Reload;
    101          }
    102          
    103          /*******************************************************************************
    104          * Function Name  : IWDG_Enable
    105          * Description    : Enables IWDG (write access to IWDG_PR and IWDG_RLR registers
    106          *                  disabled).
    107          * Input          : None
    108          * Output         : None
    109          * Return         : None
    110          *******************************************************************************/
    111          void IWDG_Enable(void)
    112          {
    113          	IWDG->KR = KR_Enable;
    114          }
    115          
    116          /*******************************************************************************
    117          * Function Name  : IWDG_GetFlagStatus
    118          * Description    : Checks whether the specified IWDG flag is set or not.
    119          * Input          : - IWDG_FLAG: specifies the flag to check.
    120          *                    This parameter can be one of the following values:
    121          *                       - IWDG_FLAG_PVU: Prescaler Value Update on going
    122          *                       - IWDG_FLAG_RVU: Reload Value Update on going
    123          * Output         : None
    124          * Return         : The new state of IWDG_FLAG (SET or RESET).
    125          *******************************************************************************/
    126          int IWDG_GetFlagStatus(u16 IWDG_FLAG)
    127          {
    128          	FlagStatus bitstatus = RESET;
    129          
    130          	// Check the parameters
    131          	// assert(IS_IWDG_FLAG(IWDG_FLAG));
    132          
    133          	if ((IWDG->SR & IWDG_FLAG) != (u32)RESET) 	bitstatus = SET;
    134          	else										bitstatus = RESET;
    135          	return bitstatus;
    136          }
    137          
    138          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     IWDG_Enable              0
     IWDG_GetFlagStatus       0
     IWDG_ReloadCounter       0
     IWDG_SetPrescaler        0
     IWDG_SetReload           0
     IWDG_WriteAccessCmd      0


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     IWDG_WriteAccessCmd    6
     IWDG_SetPrescaler     12
     IWDG_SetReload        28
     IWDG_ReloadCounter    10
     IWDG_Enable           10
     IWDG_GetFlagStatus    20
     ??DataTable2           4

 
 90 bytes in section .text
 
 90 bytes of CODE memory

Errors: none
Warnings: none

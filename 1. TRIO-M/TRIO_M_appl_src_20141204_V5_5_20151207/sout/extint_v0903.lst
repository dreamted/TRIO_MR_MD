###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     08/Mar/2013  15:30:14 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\dev\ex #
#                    tint\extint_v0903.c                                      #
#    Command line =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\dev\ex #
#                    tint\extint_v0903.c -D _MIMO_Type -D __2rd -D            #
#                    __PLLEnToggle -lcN D:\Project\TRIO\3.F_W\TRIO_appl_src_2 #
#                    0121212_V5_5\sout\ -o D:\Project\TRIO\3.F_W\TRIO_appl_sr #
#                    c_20121212_V5_5\sout\ --endian=little --cpu=Cortex-M3    #
#                    -e --warnings_are_errors --fpu=None --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\includ #
#                    e\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\ #
#                    lib_stm32\inc\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20 #
#                    121212_V5_5\lib_stm32\src\ -I                            #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uC-CPU #
#                    \ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\u #
#                    C-LIB\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V #
#                    5_5\uCOS-II\Ports\ -I D:\Project\TRIO\3.F_W\TRIO_appl_sr #
#                    c_20121212_V5_5\uCOS-II\Source\ -I                       #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\uC-Pro #
#                    be\ -Oh --use_c++_inline --require_prototypes            #
#    List file    =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\sout\e #
#                    xtint_v0903.lst                                          #
#    Object file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\sout\e #
#                    xtint_v0903.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.F_W\TRIO_appl_src_20121212_V5_5\dev\extint\extint_v0903.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : stm32f10x_exti.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 09/29/2006
      5          * Description        : This file provides all the EXTI firmware functions.
      6          ********************************************************************************
      7          * History:
      8          * 05/21/2007: V0.3
      9          * 04/02/2007: V0.2
     10          * 02/05/2007: V0.1
     11          * 09/29/2006: V0.01
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *******************************************************************************/
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f10x_conf.h"
     23          #include "extint_v0903.h"
     24          
     25          /* Private typedef -----------------------------------------------------------*/
     26          /* Private define ------------------------------------------------------------*/
     27          #define EXTI_LineNone    ((u32)0x00000)  /* No interrupt selected */
     28          
     29          /* Private macro -------------------------------------------------------------*/
     30          /* Private variables ---------------------------------------------------------*/
     31          /* Private function prototypes -----------------------------------------------*/
     32          /* Private functions ---------------------------------------------------------*/
     33          extern unsigned char USART1PutChar(unsigned char Data);
     34          
     35          void EXTI0_Init(void)
     36          {
     37          	INT8U tport = GPIO_PortSrcGPIOB;
     38          //	INT8U trigger = EXTI_RisingEdge;
     39          	
     40          	INT8U trigger = EXTI_FallingEdge;
     41          	// PORT SEL
     42          	NVIC_Init(EXTI0_IRQChannel, ENABLE);	
     43          	EXTI_Init(tport, GPIO_PinSrc12, trigger);
     44          }
     45          
     46          
     47          void EXTI1_Init(void)
     48          {
     49          	INT8U tport = GPIO_PortSrcGPIOB;
     50          //	INT8U trigger = EXTI_RisingEdge;
     51          	
     52          	INT8U trigger = EXTI_FallingEdge;
     53          	// PORT SEL
     54          	NVIC_Init(EXTI1_IRQChannel, ENABLE);	
     55          	EXTI_Init(tport, GPIO_PinSrc12, trigger);
     56          }
     57          
     58          
     59          void EXTI2_Init(void)
     60          {
     61          	INT8U tport = GPIO_PortSrcGPIOB;
     62          //	INT8U trigger = EXTI_RisingEdge;
     63          	
     64          	INT8U trigger = EXTI_FallingEdge;
     65          	// PORT SEL
     66          	NVIC_Init(EXTI2_IRQChannel, ENABLE);	
     67          	EXTI_Init(tport, GPIO_PinSrc12, trigger);
     68          
     69          	
     70          }
     71          
     72          void EXTI3_Init(void)
     73          {
     74          	INT8U tport = GPIO_PortSrcGPIOB;
     75          //	INT8U trigger = EXTI_RisingEdge;
     76          	
     77          	INT8U trigger = EXTI_FallingEdge;
     78          	// PORT SEL
     79          	NVIC_Init(EXTI3_IRQChannel, ENABLE);	
     80          	EXTI_Init(tport, GPIO_PinSrc12, trigger);
     81          	
     82          }
     83          
     84          void EXTI4_Init(void)
     85          {
     86          	INT8U tport = GPIO_PortSrcGPIOC;
     87          	INT8U trigger = EXTI_RisingEdge;
     88          	
     89          	// PORT SEL
     90          	NVIC_Init(EXTI4_IRQChannel, ENABLE);
     91          	EXTI_Init(tport, GPIO_PinSrc4, trigger);
     92          }
     93          
     94          void EXTI5_Init(void)
     95          {
     96          	INT8U tport = GPIO_PortSrcGPIOC;
     97          	INT8U trigger = EXTI_RisingEdge;
     98          	
     99          	// PORT SEL
    100          	NVIC_Init(EXTI9_5_IRQChannel, ENABLE);
    101          	EXTI_Init(tport, GPIO_PinSrc5, trigger);
    102          }
    103          
    104          void EXTI6_Init(void)
    105          {
    106          	INT8U tport = GPIO_PortSrcGPIOB;
    107          	INT8U trigger = EXTI_RisingEdge;
    108          	
    109          	// PORT SEL
    110          	NVIC_Init(EXTI9_5_IRQChannel, ENABLE);
    111          	EXTI_Init(tport, GPIO_PinSrc6, trigger);
    112          }
    113          
    114          /*******************************************************************************
    115          * Function Name  : EXTI7_Init
    116          * Description    : Initializes the EXTI peripheral according to the specified
    117          *                  parameters in the EXTI_InitStruct.
    118          * Input          : - tport   : pointer to a EXTI_InitTypeDef structure
    119          *                  - tpin    : 
    120          *				   - trigger :
    121          * Output         : None
    122          * Return         : None
    123          *******************************************************************************/
    124          #define EXTI7_PORT		GPIO_PortSrcGPIOA
    125          
    126          
    127          void EXTI7_Init(void)
    128          {
    129          	INT8U trigger = EXTI_RisingEdge;
    130          	
    131          	// PORT SEL
    132          	NVIC_Init(EXTI9_5_IRQChannel, ENABLE);
    133          	EXTI_Init(EXTI7_PORT, GPIO_PinSrc7, trigger);
    134          }
    135          
    136          #define EXTI12_PORT		GPIO_PortSrcGPIOB
    137          
    138          void EXTI12_Init(void)
    139          {
    140          //	INT8U trigger = EXTI_FallingEdge;
    141          //	INT8U trigger = EXTI_RisingEdge;
    142          	INT8U trigger = EXTI_Rising_FallingEdge;
    143          
    144          	// PORT SEL
    145          	NVIC_Init(EXTI15_10_IRQChannel, ENABLE);
    146          	EXTI_Init(EXTI12_PORT, GPIO_PinSrc12, trigger);
    147          }
    148          
    149          /*******************************************************************************
    150          * Function Name  : EXTI0_IRQHandler
    151          * Description    : This function handles External interrupt Line 0 request.
    152          * Input          : None
    153          * Output         : None
    154          * Return         : None
    155          *******************************************************************************/
    156          u32 CurrINT = 0;
    157          
    158          void EXTI0_IRQHandler(void)
    159          {
    160          	INT8U tpin = GPIO_PinSrc12;
    161          
    162          	OS_CPU_SR  cpu_sr;
    163          
    164          
    165          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    166          	OSIntNesting++;
    167          	OS_EXIT_CRITICAL();
    168          
    169          	if(EXTI_GetITStatus((1 << tpin)) != RESET)
    170          	{
    171          		EXTI->PR = (1 << tpin);
    172          	}
    173          	OSIntExit();	
    174          
    175          }
    176          
    177          
    178          /*******************************************************************************
    179          * Function Name  : EXTI1_IRQHandler
    180          * Description    : This function handles External interrupt Line 1 request.
    181          * Input          : None
    182          * Output         : None
    183          * Return         : None
    184          *******************************************************************************/
    185          void EXTI1_IRQHandler(void)
    186          {
    187          	INT8U tpin = GPIO_PinSrc12;
    188          
    189          	OS_CPU_SR  cpu_sr;
    190          
    191          
    192          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    193          	OSIntNesting++;
    194          	OS_EXIT_CRITICAL();
    195          
    196          	if(EXTI_GetITStatus((1 << tpin)) != RESET)
    197          	{
    198          		EXTI->PR = (1 << tpin);
    199          	}
    200          	OSIntExit();	
    201          }
    202          
    203          
    204          /*******************************************************************************
    205          * Function Name  : EXTI2_IRQHandler
    206          * Description    : This function handles External interrupt Line 2 request.
    207          * Input          : None
    208          * Output         : None
    209          * Return         : None
    210          *******************************************************************************/
    211          
    212          void EXTI2_IRQHandler(void)
    213          {
    214          	INT8U tpin = GPIO_PinSrc12;
    215          
    216          	OS_CPU_SR  cpu_sr;
    217          
    218          
    219          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    220          	OSIntNesting++;
    221          	OS_EXIT_CRITICAL();
    222          
    223          	if(EXTI_GetITStatus((1 << tpin)) != RESET)
    224          	{
    225          		EXTI->PR = (1 << tpin);
    226          	}
    227          	OSIntExit();	
    228          }
    229          //F_RESET_IN
    230          
    231          /*******************************************************************************
    232          * Function Name  : EXTI3_IRQHandler
    233          * Description    : This function handles External interrupt Line 3 request.
    234          * Input          : None
    235          * Output         : None
    236          * Return         : None
    237          *******************************************************************************/
    238          
    239          
    240          void EXTI3_IRQHandler(void)
    241          {
    242          	INT8U tpin = GPIO_PinSrc12;
    243          
    244          	OS_CPU_SR  cpu_sr;
    245          
    246          
    247          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    248          	OSIntNesting++;
    249          	OS_EXIT_CRITICAL();
    250          
    251          	if(EXTI_GetITStatus((1 << tpin)) != RESET)
    252          	{
    253          		EXTI->PR = (1 << tpin);
    254          	}
    255          	OSIntExit();	
    256          }
    257          
    258          
    259          
    260          /*******************************************************************************
    261          * Function Name  : EXTI4_IRQHandler
    262          * Description    : This function handles External interrupt Line 4 request.
    263          * Input          : None
    264          * Output         : None
    265          * Return         : None
    266          *******************************************************************************/
    267          void EXTI4_IRQHandler(void)
    268          {
    269          	INT8U tpin = GPIO_PinSrc12;
    270          
    271          	OS_CPU_SR  cpu_sr;
    272          
    273          
    274          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    275          	OSIntNesting++;
    276          	OS_EXIT_CRITICAL();
    277          
    278          	if(EXTI_GetITStatus((1 << tpin)) != RESET)
    279          	{
    280          		EXTI->PR = (1 << tpin);
    281          	}
    282          	OSIntExit();	
    283          }
    284          
    285          
    286          /*******************************************************************************
    287          * Function Name  : EXTI9_5_IRQHandler
    288          * Description    : This function handles External lines 9 to 5 interrupt request.
    289          * Input          : None
    290          * Output         : None
    291          * Return         : None
    292          *******************************************************************************/
    293          #define EXTI5_IN		GPIOA->IDR.Bit.IDR7
    294          void ResetStart(void);
    295          INT8U F_RESET_IN_Read(void);
    296          
    297          void EXTI9_5_IRQHandler(void)
    298          {
    299          	OS_CPU_SR  cpu_sr;
    300          
    301          
    302          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    303          	OSIntNesting++;
    304          	OS_EXIT_CRITICAL();
    305          
    306          	if(EXTI_GetITStatus((1 << GPIO_PinSrc5)) != RESET)
    307          	{
    308          		EXTI->PR = (1 << GPIO_PinSrc5);
    309          	}
    310          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc6)) != RESET)
    311          	{
    312          #if 1
    313          		if(F_RESET_IN_Read())	CurrINT = 1;		// High
    314          		else					CurrINT = 2;		// LOW
    315          
    316          		ResetStart();
    317          #endif
    318          
    319          
    320          		EXTI->PR = (1 << GPIO_PinSrc6);
    321          	}
    322          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc7)) != RESET)
    323          	{
    324          		EXTI->PR = (1 << GPIO_PinSrc7);
    325          
    326          	}
    327          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc8)) != RESET)
    328          	{
    329          		EXTI->PR = (1 << GPIO_PinSrc8);
    330          	}
    331          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc9)) != RESET)
    332          	{
    333          		EXTI->PR = (1 << GPIO_PinSrc9);
    334          	}
    335          
    336          	OSIntExit();												// Tell uC/OS-II that we are leaving the ISR
    337          }
    338          
    339          
    340          /*******************************************************************************
    341          * Function Name  : EXTI15_10_IRQHandler
    342          * Description    : This function handles External lines 15 to 10 interrupt request.
    343          * Input          : None
    344          * Output         : None
    345          * Return         : None
    346          *******************************************************************************/
    347          void EXTI15_10_IRQHandler(void)
    348          {
    349          	OS_CPU_SR  cpu_sr;
    350          
    351          
    352          	OS_ENTER_CRITICAL();										// Tell uC/OS-II that we are starting an ISR
    353          	OSIntNesting++;
    354          	OS_EXIT_CRITICAL();
    355          
    356          	if(EXTI_GetITStatus((1 << GPIO_PinSrc10)) != RESET)
    357          	{
    358          		EXTI->PR = (1 << GPIO_PinSrc10);
    359          	}
    360          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc11)) != RESET)
    361          	{
    362          		EXTI->PR = (1 << GPIO_PinSrc11);
    363          	}
    364          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc12)) != RESET)
    365          	{
    366          #if 0
    367          		if(F_RESET_IN_Read())  	CurrINT = 1;		// High
    368          		else 					CurrINT = 2;		// LOW
    369          
    370          		ResetStart();
    371          #endif
    372          		EXTI->PR = (1 << GPIO_PinSrc12);
    373          
    374          	}
    375          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc13)) != RESET)
    376          	{
    377          		EXTI->PR = (1 << GPIO_PinSrc13);
    378          	}
    379          	else if(EXTI_GetITStatus((1 << GPIO_PinSrc14)) != RESET)
    380          	{
    381          		EXTI->PR = (1 << GPIO_PinSrc14);
    382          	}
    383          
    384          	OSIntExit();												// Tell uC/OS-II that we are leaving the ISR
    385          }
    386          
    387          
    388          
    389          
    390          /* Configure EXTI Line9 to generate an interrupt on falling edge */  
    391          /**
    392          EXTI_InitStructure.EXTI_Line = EXTI_Line9;
    393          EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    394          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    395          EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    396          EXTI_Init(&EXTI_InitStructure);
    397          **/
    398          // Generate software interrupt: simulate a falling edge applied on EXTI line 9
    399          /********
    400          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    401          {
    402          	// Check the parameters
    403          	// assert(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
    404          	// assert(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
    405          	// assert(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
    406          	// assert(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
    407          	 
    408          	if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    409          	{
    410          	    *(u32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Mode)|= EXTI_InitStruct->EXTI_Line;
    411          
    412          	    // Clear Rising Falling edge configuration
    413          	    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    414          	    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    415          	    
    416          	    // Select the trigger for the selected external interrupts 
    417          	    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Rising_FallingEdge)
    418          	    {
    419          	      // Rising Falling edge
    420          	      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    421          	      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    422          	    }
    423          	    else
    424          	    {
    425          	    	*(u32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Trigger)|= EXTI_InitStruct->EXTI_Line;
    426          	    }
    427          	}
    428          	else
    429          	{
    430          		// Disable the selected external lines
    431          		// *(u32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Mode)&= ~EXTI_InitStruct->EXTI_Line;
    432          	}
    433          }
    434          ****/
    435          
    436          
    437          
    438          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/
    439          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     EXTI0_IRQHandler          8
     EXTI0_Init                8
     EXTI12_Init               8
     EXTI15_10_IRQHandler      8
     EXTI1_IRQHandler          8
     EXTI1_Init                8
     EXTI2_IRQHandler          8
     EXTI2_Init                8
     EXTI3_IRQHandler          8
     EXTI3_Init                8
     EXTI4_IRQHandler          8
     EXTI4_Init                8
     EXTI5_Init                8
     EXTI6_Init                8
     EXTI7_Init                8
     EXTI9_5_IRQHandler        8


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     EXTI0_Init              8
     ?Subroutine0            6
     ??Subroutine2_0        12
     EXTI1_Init              6
     EXTI2_Init              8
     EXTI3_Init              8
     EXTI4_Init             18
     EXTI5_Init             18
     EXTI6_Init             16
     EXTI7_Init             18
     EXTI12_Init            14
     CurrINT                 4
     EXTI0_IRQHandler        4
     ?Subroutine1           42
     EXTI1_IRQHandler        2
     EXTI2_IRQHandler        4
     EXTI3_IRQHandler        4
     EXTI4_IRQHandler        4
     EXTI9_5_IRQHandler    118
     EXTI15_10_IRQHandler  110
     ??DataTable2            4
     ??DataTable2_1          4
     ??DataTable2_2          4

 
   4 bytes in section .bss
 432 bytes in section .text
 
 432 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none

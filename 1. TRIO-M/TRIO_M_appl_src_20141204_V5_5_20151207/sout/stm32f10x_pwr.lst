###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     02/Apr/2012  19:03:59 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\s #
#                    rc\stm32f10x_pwr.c                                       #
#    Command line =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\s #
#                    rc\stm32f10x_pwr.c -D NDEBUG -lcN                        #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\ -o    #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\       #
#                    --debug --endian=little --cpu=Cortex-M3 -e               #
#                    --warnings_are_errors --fpu=None --dlib_config           #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4\arm\INC\DLib_Config_Normal.h" -I                     #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\include\    #
#                    -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm3 #
#                    2\inc\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\l #
#                    ib_stm32\src\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uC-CPU\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uC-LIB\ -I D:\Project\TRIO\3.F_W\TRIO_appl_src_201 #
#                    20401\uCOS-II\Ports\ -I D:\Project\TRIO\3.F_W\TRIO_appl_ #
#                    src_20120401\uCOS-II\Source\ -I                          #
#                    D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\uC-Probe\   #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench      #
#                    5.4\arm\INC\" -Oh                                        #
#    List file    =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\stm32f #
#                    10x_pwr.lst                                              #
#    Object file  =  D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\sout\stm32f #
#                    10x_pwr.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\3.F_W\TRIO_appl_src_20120401\lib_stm32\src\stm32f10x_pwr.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : stm32f10x_pwr.c
      3          * Author             : MCD Application Team
      4          * Date First Issued  : 09/29/2006
      5          * Description        : This file provides all the PWR firmware functions.
      6          ********************************************************************************
      7          * History:
      8          * 05/21/2007: V0.3
      9          * 04/02/2007: V0.2
     10          * 02/05/2007: V0.1
     11          * 09/29/2006: V0.01
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *******************************************************************************/
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f10x_conf.h"
     23          /* Private typedef -----------------------------------------------------------*/
     24          /* Private define ------------------------------------------------------------*/
     25          /* --------- PWR registers bit address in the alias region ---------- */
     26          #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
     27          
     28          /* --- CR Register ---*/
     29          /* Alias word address of DBP bit */
     30          #define CR_OFFSET                (PWR_OFFSET + 0x00)
     31          #define DBP_BitNumber            0x08
     32          #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
     33          
     34          /* Alias word address of PVDE bit */
     35          #define PVDE_BitNumber           0x04
     36          #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
     37          
     38          /* --- CSR Register ---*/
     39          /* Alias word address of EWUP bit */
     40          #define CSR_OFFSET               (PWR_OFFSET + 0x04)
     41          #define EWUP_BitNumber           0x08
     42          #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
     43          
     44          /* ------------------ PWR registers bit mask ------------------------ */
     45          /* CR register bit mask */
     46          #define CR_PDDS_Set              ((u32)0x00000002)
     47          #define CR_DS_Mask               ((u32)0xFFFFFFFC)
     48          #define CR_CWUF_Set              ((u32)0x00000004)
     49          #define CR_PLS_Mask              ((u32)0xFFFFFF1F)
     50          
     51          /* --------- Cortex System Control register bit mask ---------------- */
     52          /* Cortex System Control register address */
     53          #define SCB_SysCtrl              ((u32)0xE000ED10)
     54          /* SLEEPDEEP bit mask */
     55          #define SysCtrl_SLEEPDEEP_Set    ((u32)0x00000004)
     56          
     57          /* Private macro -------------------------------------------------------------*/
     58          /* Private variables ---------------------------------------------------------*/
     59          /* Private function prototypes -----------------------------------------------*/
     60          /* Private functions ---------------------------------------------------------*/
     61          
     62          /*******************************************************************************
     63          * Function Name  : PWR_DeInit
     64          * Description    : Deinitializes the PWR peripheral registers to their default
     65          *                  reset values.
     66          * Input          : None
     67          * Output         : None
     68          * Return         : None
     69          *******************************************************************************/
     70          void PWR_DeInit(void)
     71          {
     72            //RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
     73            //RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
     74          }
     75          
     76          /*******************************************************************************
     77          * Function Name  : PWR_PVDCmd
     78          * Description    : Enables or disables the Power Voltage Detector(PVD).
     79          * Input          : - NewState: new state of the PVD.
     80          *                    This parameter can be: ENABLE or DISABLE.
     81          * Output         : None
     82          * Return         : None
     83          *******************************************************************************/
     84          void PWR_PVDCmd(u32 NewState)
     85          {
     86              // Check the parameters
     87              assert(IS_FUNCTIONAL_STATE(NewState));
     88              *(vu32 *) CR_PVDE_BB = (u32)NewState;
     89          }
     90          
     91          /*******************************************************************************
     92          * Function Name  : PWR_PVDLevelConfig
     93          * Description    : Configures the voltage threshold detected by the Power Voltage
     94          *                  Detector(PVD).
     95          * Input          : - PWR_PVDLevel: specifies the PVD detection level
     96          *                    This parameter can be one of the following values:
     97          *                       - PWR_PVDLevel_2V2: PVD detection level set to 2.2V
     98          *                       - PWR_PVDLevel_2V3: PVD detection level set to 2.3V
     99          *                       - PWR_PVDLevel_2V4: PVD detection level set to 2.4V
    100          *                       - PWR_PVDLevel_2V5: PVD detection level set to 2.5V
    101          *                       - PWR_PVDLevel_2V6: PVD detection level set to 2.6V
    102          *                       - PWR_PVDLevel_2V7: PVD detection level set to 2.7V
    103          *                       - PWR_PVDLevel_2V8: PVD detection level set to 2.8V
    104          *                       - PWR_PVDLevel_2V9: PVD detection level set to 2.9V
    105          * Output         : None
    106          * Return         : None
    107          *******************************************************************************/
    108          void PWR_PVDLevelConfig(u32 PWR_PVDLevel)
    109          {
    110            u32 tmpreg = 0;
    111          
    112              /* Check the parameters */
    113              assert(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
    114          
    115              tmpreg = PWR->CR.Data;
    116          
    117              /* Clear PLS[7:5] bits */
    118              tmpreg &= CR_PLS_Mask;
    119          
    120              /* Set PLS[7:5] bits according to PWR_PVDLevel value */
    121              tmpreg |= PWR_PVDLevel;
    122          
    123              /* Store the new value */
    124              PWR->CR.Data = tmpreg;
    125          }
    126          
    127          /*******************************************************************************
    128          * Function Name  : PWR_WakeUpPinCmd
    129          * Description    : Enables or disables the WakeUp Pin functionality.
    130          * Input          : - NewState: new state of the WakeUp Pin functionality.
    131          *                    This parameter can be: ENABLE or DISABLE.
    132          * Output         : None
    133          * Return         : None
    134          *******************************************************************************/
    135          void PWR_WakeUpPinCmd(u32 NewState)
    136          {
    137              // Check the parameters
    138              assert(IS_FUNCTIONAL_STATE(NewState));
    139          
    140              *(vu32 *) CSR_EWUP_BB = (u32)NewState;
    141          }
    142          
    143          /*******************************************************************************
    144          * Function Name  : PWR_EnterSTOPMode
    145          * Description    : Enters STOP mode.
    146          * Input          : - PWR_Regulator: specifies the regulator state in STOP mode.
    147          *                    This parameter can be one of the following values:
    148          *                       - PWR_Regulator_ON: STOP mode with regulator ON
    149          *                       - PWR_Regulator_LowPower: STOP mode with
    150          *                         regulator in low power mode
    151          *                  - PWR_STOPEntry: specifies if STOP mode in entered with WFI or 
    152          *                    WFE instruction.
    153          *                    This parameter can be one of the following values:
    154          *                       - PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
    155          *                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
    156          * Output         : None
    157          * Return         : None
    158          *******************************************************************************/
    159          void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
    160          {
    161              u32 tmpreg = 0;
    162          
    163              /* Check the parameters */
    164              assert(IS_PWR_REGULATOR(PWR_Regulator));
    165              assert(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
    166            
    167              /* Select the regulator state in STOP mode ---------------------------------*/
    168              tmpreg = PWR->CR.Data;
    169          
    170              /* Clear PDDS and LPDS bits */
    171              tmpreg &= CR_DS_Mask;
    172          
    173              /* Set LPDS bit according to PWR_Regulator value */
    174              tmpreg |= PWR_Regulator;
    175          
    176              /* Store the new value */
    177              PWR->CR.Data = tmpreg;
    178          
    179            /* Set SLEEPDEEP bit of Cortex System Control Register */
    180            *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
    181            
    182            /* Select STOP mode entry --------------------------------------------------*/
    183            if(PWR_STOPEntry == PWR_STOPEntry_WFI)
    184            {   
    185                /* Request Wait For Interrupt */
    186                __WFI();
    187            }
    188            else
    189            {
    190                /* Request Wait For Event */
    191                __WFE();
    192            }
    193          }
    194          
    195          /*******************************************************************************
    196          * Function Name  : PWR_EnterSTANDBYMode
    197          * Description    : Enters STANDBY mode.
    198          * Input          : None
    199          * Output         : None
    200          * Return         : None
    201          *******************************************************************************/
    202          void PWR_EnterSTANDBYMode(void)
    203          {
    204              /* Clear Wake-up flag */
    205              PWR->CR.Data |= CR_CWUF_Set;
    206              
    207              /* Select STANDBY mode */
    208              PWR->CR.Data |= CR_PDDS_Set;
    209              
    210              /* Set SLEEPDEEP bit of Cortex System Control Register */
    211              *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
    212              
    213              /* Request Wait For Interrupt */
    214              __WFI();
    215          }
    216          
    217          /*******************************************************************************
    218          * Function Name  : PWR_GetFlagStatus
    219          * Description    : Checks whether the specified PWR flag is set or not.
    220          * Input          : - PWR_FLAG: specifies the flag to check.
    221          *                    This parameter can be one of the following values:
    222          *                       - PWR_FLAG_WU: Wake Up flag
    223          *                       - PWR_FLAG_SB: StandBy flag
    224          *                       - PWR_FLAG_PVDO: PVD Output
    225          * Output         : None
    226          * Return         : The new state of PWR_FLAG (SET or RESET).
    227          *******************************************************************************/
    228          FlagStatus PWR_GetFlagStatus(u32 PWR_FLAG)
    229          {
    230              FlagStatus bitstatus = RESET;
    231          
    232              if ((PWR->CSR.Data & PWR_FLAG) != (u32)RESET)
    233              {
    234                  bitstatus = SET;
    235              }
    236              else
    237              {
    238                  bitstatus = RESET;
    239              }
    240          
    241            /* Return the flag status */
    242            return bitstatus;
    243          }
    244          
    245          /*******************************************************************************
    246          * Function Name  : PWR_ClearFlag
    247          * Description    : Clears the PWR's pending flags.
    248          * Input          : - PWR_FLAG: specifies the flag to clear.
    249          *                    This parameter can be one of the following values:
    250          *                       - PWR_FLAG_WU: Wake Up flag
    251          *                       - PWR_FLAG_SB: StandBy flag
    252          * Output         : None
    253          * Return         : None
    254          *******************************************************************************/
    255          void PWR_ClearFlag(u32 PWR_FLAG)
    256          {
    257              /* Check the parameters */
    258              PWR->CR.Data |=  PWR_FLAG << 2;
    259          }
    260          
    261          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     PWR_ClearFlag             0
     PWR_DeInit                0
     PWR_EnterSTANDBYMode      8
     PWR_EnterSTOPMode         8
     PWR_GetFlagStatus         0
     PWR_PVDCmd                0
     PWR_PVDLevelConfig        0
     PWR_WakeUpPinCmd          0


   Section sizes:

     Function/Label       Bytes
     --------------       -----
     PWR_DeInit              2
     PWR_PVDCmd             12
     PWR_PVDLevelConfig     14
     PWR_WakeUpPinCmd       12
     PWR_EnterSTOPMode      40
     PWR_EnterSTANDBYMode   32
     PWR_GetFlagStatus      20
     PWR_ClearFlag          12
     ??DataTable4            4
     ??DataTable5            4

 
 152 bytes in section .text
 
 152 bytes of CODE memory

Errors: none
Warnings: none

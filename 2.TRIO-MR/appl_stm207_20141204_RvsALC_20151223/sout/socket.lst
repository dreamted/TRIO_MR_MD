###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     11/Aug/2012  17:25:21 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\dev\W3150A_v #
#                    1.0.6\socket.c                                           #
#    Command line =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\dev\W3150A_v #
#                    1.0.6\socket.c -lcN C:\user\project\FR-SSR\fw\appl_ssr_2 #
#                    0120717\sout\ -lB C:\user\project\FR-SSR\fw\appl_ssr_201 #
#                    20717\sout\ -o C:\user\project\FR-SSR\fw\appl_ssr_201207 #
#                    17\sout\ --endian=little --cpu=Cortex-M3 -e              #
#                    --require_prototypes --fpu=None --dlib_config            #
#                    "C:\compiler\ewarm 5.5\arm\INC\DLib_Config_Normal.h" -I  #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\include\ -I  #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_stm32\in #
#                    c\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_st #
#                    m32\src\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\ #
#                    uC-CPU\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\u #
#                    C-LIB\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\uC #
#                    OS-II\Ports\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120 #
#                    717\uCOS-II\Source\ -I C:\user\project\FR-SSR\fw\appl_ss #
#                    r_20120717\uC-Probe\ -I "C:\compiler\ewarm               #
#                    5.5\arm\INC\" -Oh                                        #
#    List file    =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\socket. #
#                    lst                                                      #
#    Object file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\socket. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\FR-SSR\fw\appl_ssr_20120717\dev\W3150A_v1.0.6\socket.c
      1          /*
      2           * (c)COPYRIGHT
      3           * ALL RIGHT RESERVED
      4           *
      5           * FileName : socket.c
      6           * Last update : April. 2008
      7           ---------------------------------------------------------------------------------------*/
      8          #include <stm32f10x_conf.h> 
      9          #include "types.h"
     10          #include "w3150a.h"
     11          #include "socket.h"
     12          
     13          unsigned long int (*dprintf)( const char *format, ... ) = USART1Printf;
     14          uint16 local_port;
     15          
     16          /*
     17          *********************************************************************
     18          This Socket function initialize the channel in perticular mode, and set the port
     19          and wait for W3150A+ done it.
     20          And the Parameters "s" is for socket number, "protocol" is for socket protocol,
     21          port is the source port for the socket and flag is the option for the socket.
     22          This function return 1 for sucess else 0.
     23          *********************************************************************
     24          */
     25          void setSHAR(uint32 nUSE, uint8 * addr);
     26          void getSHAR(uint32 nUSE, uint8 * addr);
     27          
     28          uint8 socket(uint32 nUSE, SOCKET s, uint8 protocol, uint16 port, uint8 flag)
     29          {
     30          	uint8 ret;
     31          #ifdef __DEF_IINCHIP_DBG__
     32          	dprintf("socket()\r\n");
     33          #endif
     34          	if ((protocol == Sn_MR_TCP) || (protocol == Sn_MR_UDP) || (protocol == Sn_MR_IPRAW) || (protocol == Sn_MR_MACRAW) || (protocol == Sn_MR_PPPOE))
     35          	{
     36          		close(nUSE, s);
     37          		IINCHIP_WRITE(nUSE, Sn_MR(nUSE, s), protocol | flag);
     38          		if (port != 0) {
     39          			IINCHIP_WRITE(nUSE, (Sn_PORT0(nUSE, s) + 0), (uint8)((port & 0xff00) >> 8));
     40          			IINCHIP_WRITE(nUSE, (Sn_PORT0(nUSE, s) + 1), (uint8)((port & 0x00ff) >> 0));
     41          		} else {
     42          			local_port++; // if don't set the source port, set local_port number.
     43          			IINCHIP_WRITE(nUSE, (Sn_PORT0(nUSE, s) + 0), (uint8)((local_port & 0xff00) >> 8));
     44          			IINCHIP_WRITE(nUSE, (Sn_PORT0(nUSE, s) + 1), (uint8)((local_port & 0x00ff) >> 0));
     45          		}
     46          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s), Sn_CR_OPEN); // run sockinit Sn_CR
     47          		/* +200804[woong]:wait to process the command... */
     48          		while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
     49          		/* ------- */
     50          		ret = 1;
     51          	}
     52          	else
     53          	{
     54          		ret = 0;
     55          	}
     56          #ifdef __DEF_IINCHIP_DBG__
     57          	dprintf("Sn_SR = %.2x , Protocol = %.2x\r\n", IINCHIP_READ(nUSE, Sn_SR(nUSE, s)), IINCHIP_READ(nUSE, Sn_MR(nUSE, s)));
     58          #endif
     59          	return ret;
     60          }
     61          /*
     62          *********************************************************************
     63          This function close the socket and parameter is "s" which represent the socket number
     64          *********************************************************************
     65          */
     66          
     67          void close(uint32 nUSE, SOCKET s)
     68          {
     69          #ifdef __DEF_IINCHIP_DBG__
     70          	dprintf("close()\r\n");
     71          #endif
     72          	IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s), Sn_CR_CLOSE);
     73          
     74          	/* +200804[woong]:wait to process the command... */
     75          	while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
     76          	/* ------- */
     77          
     78          	/* +2008.04[woong]: clear interrupt */	
     79          	#ifdef __DEF_IINCHIP_INT__
     80                /* m2008.04 [woong] : all clear */
     81          	       setISR(nUSE, s, 0x00);
     82          	#else
     83                /* m2008.04 [woong] : all clear */
     84          		IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), 0xFF);
     85          	#endif
     86          	
     87          }
     88          
     89          /*
     90          *********************************************************************
     91          This function established  the connection for the channel in passive (server) mode.
     92          This function waits for the request from the peer. The parameter "s" is the socket number
     93          This function return 1 for success else 0.
     94          *********************************************************************
     95          */
     96          
     97          uint8 listen(uint32 nUSE, SOCKET s)
     98          {
     99          	uint8 ret;
    100          #ifdef __DEF_IINCHIP_DBG__
    101          	dprintf("listen()\r\n");
    102          #endif
    103          	if (IINCHIP_READ(nUSE, Sn_SR(nUSE, s)) == SOCK_INIT)
    104          	{
    105          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_LISTEN);
    106          		/* +200804[woong]:wait to process the command... */
    107          		while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
    108          		/* ------- */
    109          		ret = 1;
    110          	}
    111          	else
    112          	{
    113          		ret = 0;
    114          #ifdef __DEF_IINCHIP_DBG__
    115          	dprintf("Fail[invalid ip,port]\r\n");
    116          #endif
    117          	}
    118          	return ret;
    119          }
    120          
    121          
    122          /*
    123          *********************************************************************
    124          This function established  the connection for the channel in Active (client) mode. 
    125          This function waits for the untill the connection is established. The parameter "s" is the socket number
    126          This function return 1 for success else 0.
    127          *********************************************************************
    128          */
    129          
    130          uint8 connect(uint32 nUSE, SOCKET s, uint8 * addr, uint16 port)
    131          {
    132          	uint8 ret;
    133          #ifdef __DEF_IINCHIP_DBG__
    134          	dprintf("connect()\r\n");
    135          #endif
    136          	if 
    137          		(
    138          			((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    139          		 	((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    140          		 	(port == 0x00) 
    141          		) 
    142           	{
    143           		ret = 0;
    144          #ifdef __DEF_IINCHIP_DBG__
    145          	dprintf("Fail[invalid ip,port]\r\n");
    146          #endif
    147          	}
    148          	else
    149          	{
    150          
    151          		ret = 1;
    152          		// set destination IP
    153          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 0), addr[0]);
    154          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 1), addr[1]);
    155          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 2), addr[2]);
    156          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 3), addr[3]);
    157          		IINCHIP_WRITE(nUSE, (Sn_DPORT0(nUSE, s) + 0),(uint8)((port & 0xff00) >> 8));
    158          		IINCHIP_WRITE(nUSE, (Sn_DPORT0(nUSE, s) + 1),(uint8)((port & 0x00ff) >> 0));
    159          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_CONNECT);
    160          		// wait for completion
    161          		while (IINCHIP_READ(nUSE, Sn_CR(nUSE, s)))
    162          		{
    163          			if (IINCHIP_READ(nUSE, Sn_SR(nUSE, s)) == SOCK_CLOSED)
    164          			{
    165          #ifdef __DEF_IINCHIP_DBG__
    166          			dprintf("SOCK_CLOSED.\r\n");
    167          #endif
    168          				ret = 0; break;
    169          			}
    170          		}
    171          	}
    172          
    173          	return ret;
    174          }
    175          
    176          
    177          /*
    178          *********************************************************************
    179          This function used for disconnect the socket and parameter is "s" which represent the socket number
    180          *********************************************************************
    181          */
    182          
    183          void disconnect(uint32 nUSE, SOCKET s)
    184          {
    185          #ifdef __DEF_IINCHIP_DBG__
    186          	dprintf("disconnect()\r\n");
    187          #endif
    188          	IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s), Sn_CR_DISCON);
    189          	/* +200804[woong]:wait to process the command... */
    190          	while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
    191          	/* ------- */
    192          }
    193          
    194          /*
    195          *********************************************************************
    196          This function used to send the data in TCP mode and the parameter "s" represents
    197          the socket number and "buf" a pointer to data and "len" is the data size to be send.
    198          This function return 1 for success else 0.
    199          *********************************************************************
    200          */
    201          
    202          uint16 send(uint32 nUSE, SOCKET s, const uint8 * buf, uint16 len)
    203          {
    204          	uint8 status=0;
    205          	uint16 ret=0;
    206          	uint16 freesize=0;
    207          #ifdef __DEF_IINCHIP_DBG__
    208          	dprintf("send()\r\n");
    209          #endif
    210          
    211          	if (len > getIINCHIP_TxMAX(nUSE, s)) ret = getIINCHIP_TxMAX(nUSE, s); // check size not to exceed MAX size.
    212          	else ret = len;
    213          
    214          	// if freebuf is available, start.
    215          	do 
    216          	{
    217          		freesize = getSn_TX_FSR(nUSE, s);
    218          		status = IINCHIP_READ(nUSE, Sn_SR(nUSE, s));
    219          		if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT)) {ret = 0; break;}
    220          #ifdef __DEF_IINCHIP_DBG__
    221          		dprintf("socket %d freesize(%d) empty or error\r\n", s, freesize);
    222          #endif
    223          	} while (freesize < ret);
    224          
    225          	// copy data
    226          	send_data_processing(nUSE, s, (uint8 *)buf, ret);
    227          	IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_SEND);
    228          	/* +200804[woong]:wait to process the command... */
    229          	while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
    230          	/* ------- */
    231          
    232          /* +2008.04 [woong] */	
    233          #ifdef __DEF_IINCHIP_INT__
    234          	while ( (getISR(s) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ) 
    235          #else
    236          	while ( (IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ) 
    237          #endif
    238          	{
    239          		/* m2008.04 [woong] : reduce code */
    240          		if ( IINCHIP_READ(nUSE, Sn_SR(nUSE, s)) == SOCK_CLOSED )
    241          		{
    242          #ifdef __DEF_IINCHIP_DBG__
    243          			dprintf("SOCK_CLOSED.\r\n");
    244          #endif
    245          			close(nUSE, s);
    246          			return 0;
    247          		}
    248            	}
    249          /* +2008.04 [woong] */	
    250          #ifdef __DEF_IINCHIP_INT__
    251            	setISR(nUSE, s, getISR(nUSE, s) & (~Sn_IR_SEND_OK));
    252          #else
    253          	IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), Sn_IR_SEND_OK);
    254          #endif
    255            	return ret;
    256          }
    257          
    258          
    259          /*
    260          *********************************************************************
    261          This function is an application I/F function which is used to receive the data in TCP mode.
    262          It continues to wait for data as much as the application wants to receive and the 
    263          parameter "s" represents the socket number and "buf" a pointer to copy the data
    264          to be received and "len" is the data size to be read. This function return received data size
    265          for success else -1.
    266          *********************************************************************
    267          */
    268          
    269          uint16 recv(uint32 nUSE, SOCKET s, uint8 * buf, uint16 len)
    270          {
    271          	uint16 ret=0;
    272          #ifdef __DEF_IINCHIP_DBG__
    273          	dprintf("recv()\r\n");
    274          #endif
    275          
    276          
    277          	if ( len > 0 )
    278          	{
    279          		recv_data_processing(nUSE, s, buf, len);
    280          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_RECV);
    281          		/* +200804[woong]:wait to process the command... */
    282          		while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
    283          		/* ------- */
    284          		ret = len;
    285          	}
    286          	return ret;
    287          }
    288          
    289          /*
    290          *********************************************************************
    291          This function is an application I/F function which is used to send the data for other then
    292          TCP mode. Unlike TCP transmission, The peer's destination address and the port is needed.
    293          and the parameter "s" represents the socket number and "buf" a pointer to the data 
    294          and "len" is the data size to send and addr is the peer's Destination IP address and port is
    295          the peer's destination port number. This function return send data size for success else -1.
    296          *********************************************************************
    297          */
    298          uint16 sendto(uint32 nUSE, SOCKET s, const uint8 * buf, uint16 len, uint8 * addr, uint16 port)
    299          {
    300          	uint16 ret = 0;
    301          	
    302          #ifdef __DEF_IINCHIP_DBG__
    303          	dprintf("sendto()\r\n");
    304          #endif
    305             if (len > getIINCHIP_TxMAX(nUSE, s)) ret = getIINCHIP_TxMAX(nUSE, s); // check size not to exceed MAX size.
    306             else ret = len;
    307          
    308          	if
    309          		(
    310          		 	((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    311          		 	((port == 0x00)) ||(ret == 0)
    312          		) 
    313           	{
    314           	  /* +2008.04 [woong] : added return value */
    315           	  ret = 0; 
    316          #ifdef __DEF_IINCHIP_DBG__
    317          	dprintf("%d Fail[%.2x.%.2x.%.2x.%.2x, %.d, %d]\r\n",s, addr[0], addr[1], addr[2], addr[3] , port, len);
    318          	dprintf("Fail[invalid ip,port]\r\n");
    319          #endif
    320          	}
    321          	else
    322          	{
    323          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s)    ),addr[0]);
    324          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 1),addr[1]);
    325          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 2),addr[2]);
    326          		IINCHIP_WRITE(nUSE, (Sn_DIPR0(nUSE, s) + 3),addr[3]);
    327          		
    328          		IINCHIP_WRITE(nUSE, (Sn_DPORT0(nUSE, s)    ),(uint8)((port & 0xff00) >> 8));
    329          		IINCHIP_WRITE(nUSE, (Sn_DPORT0(nUSE, s) + 1),(uint8)((port & 0x00ff) >> 0));
    330          
    331          		// copy data
    332          		send_data_processing(nUSE, s, (uint8 *)buf, ret);
    333          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_SEND);
    334          		/* +200804[woong]:wait to process the command... */
    335          		while(IINCHIP_READ(nUSE, Sn_CR(nUSE, s)));
    336          		/* ------- */
    337          		//USART1Printf("IINCHIP_READ(Sn_CR(s)) == %x \n", IINCHIP_READ(Sn_CR(s)));
    338          		
    339          /* +2008.04 [woong] */	
    340          #ifdef __DEF_IINCHIP_INT__
    341             		while ( (getISR(s) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ) 
    342          #else
    343          		{
    344          			uint32 cnt = 10;
    345          			while  ( (IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ){
    346          				if(cnt-- == 0) break;
    347          				OSTimeDly(10);
    348          			}
    349          		}
    350          #endif
    351          		{
    352          #ifdef __DEF_IINCHIP_INT__
    353                		if(getISR(s) & Sn_IR_TIMEOUT)
    354          #else
    355          			if(IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_TIMEOUT)
    356          #endif
    357          			{
    358          	dprintf("send fail. %x\r\n", IINCHIP_READ(nUSE, Sn_IR(nUSE, s)));
    359          
    360          #ifdef __DEF_IINCHIP_DBG__
    361          				dprintf("send fail.\r\n");
    362          #endif
    363          /* +2008.04 [woong]: clear interrupt */
    364          #ifdef __DEF_IINCHIP_INT__
    365                   		setISR(nUSE, s, getISR(nUSE, s) & ~(Sn_IR_SEND_OK | Sn_IR_TIMEOUT));  /* clear SEND_OK & TIMEOUT */
    366          #else
    367                   		IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
    368          
    369          #endif
    370          				return 0;
    371          			}
    372          		}
    373          
    374          /* +2008.04 [woong] */	
    375          #ifdef __DEF_IINCHIP_INT__
    376               	setISR(nUSE, s, getISR(nUSE, s) & (~Sn_IR_SEND_OK));
    377          #else
    378          		IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), Sn_IR_SEND_OK);
    379          #endif
    380          
    381          	}
    382          	return ret;
    383          }
    384          
    385          
    386          /*
    387          *********************************************************************
    388          This function is an application I/F function which is used to receive the data in other then
    389          TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle 
    390          the header as well. 
    391          The parameter "s" represents the socket number and "buf" a pointer to copy the data to be 
    392          received and "len" is the data size to read and and addr is a pointer to store the peer's 
    393          IP address and port is a pointer to store the peer's port number.
    394          This function return received data size for success else -1.
    395          *********************************************************************
    396          */
    397          uint16 recvfrom(uint32 nUSE, SOCKET s, uint8 *buf, uint16 len, uint8 *addr, uint16 *port)
    398          {
    399          	uint8 head[8];
    400          	uint16 data_len=0;
    401          	uint16 ptr = 0;
    402          #ifdef __DEF_IINCHIP_DBG__
    403          	dprintf("recvfrom()\r\n");
    404          #endif
    405          
    406          	if(len > 0)
    407          	{
    408          		ptr = IINCHIP_READ(nUSE, Sn_RX_RD0(nUSE, s));
    409          		ptr = ((ptr & 0x00ff) << 8) + IINCHIP_READ(nUSE, Sn_RX_RD0(nUSE, s) + 1);
    410          #ifdef __DEF_IINCHIP_DBG__
    411          		dprintf("ISR_RX: rd_ptr : %.4x\r\n", ptr);
    412          #endif
    413          		switch (IINCHIP_READ(nUSE, Sn_MR(nUSE, s)) & 0x07)
    414          		{
    415          			case Sn_MR_UDP :
    416          				read_data(nUSE, s, (uint8 *)ptr, head, 0x08);
    417          				ptr += 8;
    418          				// read peer's IP address, port number.
    419          				addr[0] = head[0];
    420          				addr[1] = head[1];
    421          				addr[2] = head[2];
    422          				addr[3] = head[3];
    423          				*port = head[4];
    424          				*port = (*port << 8) + head[5];
    425          				data_len = head[6];
    426          				data_len = (data_len << 8) + head[7];
    427          				
    428          #ifdef __DEF_IINCHIP_DBG__
    429          				dprintf("UDP msg arrived\r\n");
    430          				dprintf("source Port : %d\r\n", *port);
    431          				dprintf("source IP : %d.%d.%d.%d\r\n", addr[0], addr[1], addr[2], addr[3]);
    432          #endif
    433          
    434          				read_data(nUSE, s, (uint8 *)ptr, buf, data_len); // data copy.
    435          				ptr += data_len;
    436          
    437          	        	IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s)    ),(uint8)((ptr & 0xff00) >> 8));
    438          	        	IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s) + 1),(uint8)((ptr & 0x00ff)     ));
    439          			break;
    440          
    441          			case Sn_MR_IPRAW :
    442          				read_data(nUSE, s, (uint8 *)ptr, head, 0x06);
    443          				ptr += 6;
    444          
    445          				addr[0] = head[0];
    446          				addr[1] = head[1];
    447          				addr[2] = head[2];
    448          				addr[3] = head[3];
    449          				data_len = head[4];
    450          				data_len = (data_len << 8) + head[5];
    451          		
    452          #ifdef __DEF_IINCHIP_DBG__
    453          				dprintf("IP RAW msg arrived\r\n");
    454          				dprintf("source IP : %d.%d.%d.%d\r\n", addr[0], addr[1], addr[2], addr[3]);
    455          #endif
    456          				read_data(nUSE, s, (uint8 *)ptr, buf, data_len); // data copy.
    457          				ptr += data_len;
    458          
    459          		        IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s) + 0), (uint8)((ptr & 0xff00) >> 8));
    460          	            IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s) + 1), (uint8)(ptr & 0x00ff));
    461          			break;
    462          
    463          			case Sn_MR_MACRAW :
    464          				read_data(nUSE, s, (uint8*)ptr, head, 2);
    465          				ptr+=2;
    466          				data_len = head[0];
    467          				data_len = (data_len<<8) + head[1] - 2;
    468          
    469          				read_data(nUSE, s, (uint8*)ptr, buf, data_len);
    470          				ptr += data_len;
    471          				IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s) + 0), (uint8)((ptr & 0xff00) >> 8));
    472          				IINCHIP_WRITE(nUSE, (Sn_RX_RD0(nUSE, s) + 1), (uint8)(ptr & 0x00ff));
    473          				
    474          #ifdef __DEF_IINCHIP_DGB__
    475          			dprintf("MAC RAW msg arrived\r\n");
    476          			dprintf("dest mac=%.2X.%.2X.%.2X.%.2X.%.2X.%.2X\r\n",buf[0],buf[1],buf[2],buf[3],buf[4],buf[5]);
    477          			dprintf("src  mac=%.2X.%.2X.%.2X.%.2X.%.2X.%.2X\r\n",buf[6],buf[7],buf[8],buf[9],buf[10],buf[11]);
    478          			dprintf("type    =%.2X%.2X\r\n",buf[12],buf[13]); 
    479          #endif			
    480          			break;
    481          
    482          			default:
    483          			break;
    484          		}
    485          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s), Sn_CR_RECV);
    486          		/* +200804[woong]:wait to process the command... */
    487          		while(IINCHIP_READ(nUSE, Sn_CR(nUSE, s)));
    488          		/* ------- */
    489          	}
    490          #ifdef __DEF_IINCHIP_DBG__
    491          	dprintf("recvfrom() end ..\r\n");
    492          #endif
    493           	return data_len;
    494          }
    495          
    496          uint16 igmpsend(uint32 nUSE, SOCKET s, const uint8 *buf, uint16 len)
    497          {
    498          	uint8 status = 0;
    499          	uint16 ret = 0;
    500          	status = status;
    501          #ifdef __DEF_IINCHIP_DBG__
    502          	dprintf("igmpsend()\r\n");
    503          #endif
    504          	if (len > getIINCHIP_TxMAX(nUSE, s)) ret = getIINCHIP_TxMAX(nUSE, s); // check size not to exceed MAX size.
    505          	else ret = len;
    506          
    507          	if(ret == 0) 
    508           	{
    509          		#ifdef __DEF_IINCHIP_DBG__
    510          			dprintf("%d Fail[%d]\r\n",len);
    511          		#endif
    512          	}
    513          	else
    514          	{
    515          		// copy data
    516          		send_data_processing(nUSE, s, (uint8 *)buf, ret);
    517          		IINCHIP_WRITE(nUSE, Sn_CR(nUSE, s),Sn_CR_SEND);
    518          		/* +200804[woong]:wait to process the command... */
    519          		while( IINCHIP_READ(nUSE, Sn_CR(nUSE, s)) );
    520          		/* ------- */
    521          
    522          		#ifdef __DEF_IINCHIP_INT__
    523             			while ( (getISR(s) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ) 
    524          		#else
    525          	   		while ( (IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK ) 
    526          		#endif
    527          		{
    528          			status = IINCHIP_READ(nUSE, Sn_SR(nUSE, s));
    529          			
    530          			#ifdef __DEF_IINCHIP_INT__
    531                			if(getISR(nUSE, s) & Sn_IR_TIMEOUT)
    532          			#else
    533          	     		if(IINCHIP_READ(nUSE, Sn_IR(nUSE, s)) & Sn_IR_TIMEOUT)
    534          			#endif
    535          			{
    536          				#ifdef __DEF_IINCHIP_DBG__
    537          					dprintf("igmpsend fail.\r\n");
    538          				#endif
    539          			   /* in case of igmp, if send fails, then socket closed */
    540          			   /* if you want change, remove this code. */
    541          			   close(nUSE, s);
    542          			   /* ----- */
    543          			   
    544          				return 0;
    545          			}
    546          		}
    547          		/* +2008.04 [woong] */	
    548          		#ifdef __DEF_IINCHIP_INT__
    549               		setISR(nUSE, s, getISR(nUSE, s) & (~Sn_IR_SEND_OK));
    550          		#else
    551          	   		IINCHIP_WRITE(nUSE, Sn_IR(nUSE, s), Sn_IR_SEND_OK);
    552          		#endif
    553             }
    554          	return ret;
    555          }
    556          

   Maximum stack usage in bytes:

     Function   .cstack
     --------   -------
     close          16
     connect        24
     disconnect     16
     igmpsend       24
     listen         16
     recv           16
     recvfrom       56
     send           40
     sendto         32
     socket         24


   Section sizes:

     Function/Label                  Bytes
     --------------                  -----
     dprintf                            4
     local_port                         2
     socket                           144
     close                             46
     listen                            52
     connect                          180
     disconnect                        34
     send                             164
     recv                              50
     sendto                           260
     recvfrom                         326
     igmpsend                         132
     ??DataTable3                       4
     ??DataTable3_1                     4
     ??DataTable3_2                     4
     ??DataTable3_3                     4
     ?<Constant "send fail. %x\r\n">   16

 
     2 bytes in section .bss
     4 bytes in section .data
    16 bytes in section .rodata
 1 404 bytes in section .text
 
 1 404 bytes of CODE  memory
    16 bytes of CONST memory
     6 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.50.0.51878/W32 for ARM     23/Aug/2012  00:33:41 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\adcFunc #
#                    .c                                                       #
#    Command line =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\adcFunc #
#                    .c -lcN C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout #
#                    \ -lB C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\  #
#                    -o C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\     #
#                    --endian=little --cpu=Cortex-M3 -e --require_prototypes  #
#                    --fpu=None --dlib_config "C:\compiler\ewarm              #
#                    5.5\arm\INC\DLib_Config_Normal.h" -I                     #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\include\ -I  #
#                    C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_stm32\in #
#                    c\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\lib_st #
#                    m32\src\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\ #
#                    uC-CPU\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\u #
#                    C-LIB\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120717\uC #
#                    OS-II\Ports\ -I C:\user\project\FR-SSR\fw\appl_ssr_20120 #
#                    717\uCOS-II\Source\ -I C:\user\project\FR-SSR\fw\appl_ss #
#                    r_20120717\uC-Probe\ -I "C:\compiler\ewarm               #
#                    5.5\arm\INC\" -Oh                                        #
#    List file    =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\adcFunc #
#                    .lst                                                     #
#    Object file  =  C:\user\project\FR-SSR\fw\appl_ssr_20120717\sout\adcFunc #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\FR-SSR\fw\appl_ssr_20120717\code\adcFunc.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : stm32f10x_adc.c
      3          * Author             : MCD Application Team
      4          * Version            : V1.0
      5          * Date               : 10/08/2007
      6          * Description        : This file provides all the ADC firmware functions.
      7          ********************************************************************************/
      8          #define ADC_C
      9          
     10          // Includes ////////////////////////////////////////////////////////////////////
     11          #include "../include/main.h"
     12          
     13          #define ADC_AUTO_SCAN_ONE_TIME
     14          //#define ADC_AVER
     15          
     16          void ADCInit(int INT_EN)
     17          {
     18          	INT32U cpu_sr;
     19          	
     20          	ADC_TypeDef *ADCx = ADC1;
     21          
     22          	OS_ENTER_CRITICAL();
     23          
     24          	ADCIndex = 0;
     25          	ASTART = 0;
     26          
     27          	ADCx->SQR1.L = 0;	// 1EA
     28          	ADCx->SQR3.SQ1 = 0; // Start Zer0
     29          
     30          	NVIC_Init(ADC_IRQChannel, INT_EN);
     31          	
     32          	// ADC1 regular channel14 configuration
     33          	ADCx->SMPR1.Data = 0x00FFFFFF;		// ADC_SampleTime_239Cycles5
     34          	ADCx->SMPR2.Data = 0x3FFFFFFF;		// ADC_SampleTime_239Cycles5
     35          
     36          	// ADC1 configuration
     37          	ADCx->CR1.DUALMOD = __dMODE_INDEPENDENT;
     38          	ADCx->CR1.SCAN = DISABLE;
     39          	ADCx->CR1.EOCIE = INT_EN;		// interrupt enable
     40          	ADCx->CR2.CONT = DISABLE;
     41          	ADCx->CR2.ALIGN = __ALI_Right;
     42          	ADCx->CR2.EXTSEL = __SWSTART;
     43          	ADCx->CR2.DMAMODE = DISABLE;
     44          	ADCx->CR2.EXTTRIG = ENABLE;
     45          	ADCx->CR2.TSVREFE = ENABLE; 	// temperature sensor enable
     46          	ADCx->CR2.ADON = ENABLE;		// Enable ADC1
     47          
     48          	// Enable ADC1 reset calibaration register
     49          	{
     50          		INT16U rtry = 0xffff;
     51          	
     52          		ADCx->CR2.RSTCAL = SET;
     53          		while((rtry--) && ADCx->CR2.RSTCAL);
     54          	}
     55          	// Start ADC1 calibaration
     56          	{
     57          		INT16U rtry = 0xffff;
     58          	
     59          		ADCx->CR2.CAL = SET;
     60          		while((rtry--) && ADCx->CR2.CAL);
     61          	}
     62          	// Start ADC1 Software Conversion
     63          	OS_EXIT_CRITICAL();
     64          }
     65          
     66          INT8U ADC_CheckFinish(INT8U channel)
     67          {
     68          	//SerPtr->printf("c111: %d, ADCSTART = %d\n", channel, ADCSTART[channel]);
     69          	if(ADCSTART[channel] == ADCFINISH) return TRUE;
     70          	return FALSE;
     71          }
     72          
     73          void ADC_ChannelEnable(INT8U channel)
     74          {
     75          	ADCSTART[channel] = ADCIDLE;
     76          }
     77          
     78          
     79          /*******************************************************************************
     80          * Function Name  : ADC1_SWStart
     81          * Description    : get ADC Value directly(only case no_interrupt mode
     82          *                  group channel.
     83          * Input          : - channel: where x can be 1 or 2 to select the ADC channel
     84          * Output         : None
     85          * Return         : - direct ADCx channel 12 bit value
     86          *******************************************************************************/
     87          void ADC1_SWStart(void)
     88          {
     89          #ifdef ADC_AUTO_SCAN_ONE_TIME
     90          
     91              int i;
     92          
     93          	if(ADC1->CR1.EOCIE && ASTART == RESET)
     94          	{
     95          		for(i = 0; i < __ADCMAX ; i++)
     96          		{
     97          			ADCIndex++;
     98          			ADCIndex %= __ADCMAX;
     99          
    100          			if(((AdcEn >> ADCIndex) & 0x01) && ADCSTART[ADCIndex] == ADCIDLE)
    101          			{
    102          				ADC_WRCNT[ADCIndex] = 0;
    103          				ASTART = SET;
    104          
    105          				ADCSTART[ADCIndex] = ADCING;
    106          				ADC1->SQR3.SQ1 = ADCIndex;
    107          				ADC1->CR2.SWSTART = ENABLE;
    108          				break;
    109          			}
    110          		}
    111          	}
    112          
    113          #else    /////////////////////////////////////// #else(ADC_AUTO_SCAN_ONE_TIME)
    114          	int i = 0;
    115          
    116          #ifndef ADC_AVER
    117          	while(ASTART){ ForDelay(1); }
    118          #endif
    119          	if(ADC1->CR1.EOCIE)
    120          	{
    121          		for(i = 0; i < __ADCMAX	; i++)
    122          		{
    123          			ADCIndex++;
    124          			ADCIndex %= __ADCMAX;
    125          
    126          			if((AdcEn.Data >> ADCIndex) & 0x01 )
    127          			{
    128          #ifndef ADC_AVER
    129          				ADC_WRCNT[ADCIndex]++;
    130          				ADC_WRCNT[ADCIndex] %= __ADCAVR;
    131          #endif
    132          				break;
    133          			}
    134          		}
    135          		ADC1->SQR3.SQ1 = ADCIndex;
    136          		ADC1->CR2.SWSTART = ENABLE;
    137          	}
    138          #endif	/////////////////////////////////////// #endif(ADC_AUTO_SCAN_ONE_TIME)
    139          	
    140          }
    141          
    142          
    143          // Return Value는 1000배가 곱한 값이다. ex) 3.403[V]->3403 return 됨..
    144          // 12bit Value
    145          
    146          INT16U AdctoVolt33V(INT16U Data)
    147          {
    148          	INT32U RetVal;
    149          
    150          	RetVal = (((Data)*3300) / (1 << 12));
    151              return (INT16U)RetVal;
    152          }
    153          
    154          INT16U AdctoVolt5opamp(INT16U Data)
    155          {
    156          	INT32U  RetVal;
    157          
    158          	RetVal = ( (((INT32U)(Data)*3300)/665 )*(665 + 340))/(1 << 12);
    159          
    160              return (INT16U)RetVal;
    161          }
    162          
    163          void SwapData(INT16U *a, INT16U *b)
    164          {
    165          	INT16U temp = *a;
    166          
    167          	*a = *b;
    168          	
    169          	*b = temp;
    170          }
    171          
    172          
    173          //
    174          
    175          /*******************************************************************************
    176          * Function Name  : ADC_IRQHandler
    177          * Description    : 각 ADC값들을내림차순으로 정리하여, 낮은수치 몇개를 정리하여 높은수로만 평균값함..
    178          *				   GARBAGENO: 버리는 낮은 값들.. 1이면 낮은값 1개를 버린다.
    179          *
    180          *					이 함수는 인터럽트 내에서 average를 취하지 않을 때,
    181          *					메인 호출 함수 내에서 호출하여 사용한다.
    182          * Input          : - aptr: 각 Channel의 ADC DATA들...(ADC_AVR)
    183          * Output         : None
    184          * Return         : 높은수 값들의 평균값.
    185          * Example		 : ADC_DATA[ADC_Channel_0] = SelectSort(ADC_AVR[ADC_Channel_0]);
    186          *******************************************************************************/
    187          
    188          
    189          INT16U SelectSortMax(INT16U *aptr, INT16U nlen)
    190          {
    191          	int i, j ;
    192          
    193          	if(nlen > __ADCAVR) nlen = __ADCAVR;
    194          
    195          	for(i = 0 ; i < nlen - 1; i++)
    196          	{
    197          
    198          		for(j = i+1; j < nlen; j++ )
    199          		{
    200          			if(aptr[i] > aptr[j])
    201          			{
    202          				SwapData( &aptr[i] , &aptr[j]) ;
    203          			}
    204          		}
    205           	}
    206          	return aptr[nlen-1];
    207          }
    208          
    209          
    210          /*******************************************************************************
    211          * Function Name  : ADC_IRQHandler
    212          * Description    : 각 ADC값들을내림차순으로 정리하여, 낮은수치 몇개를 정리하여 높은수로만 평균값함..
    213          *				   GARBAGENO: 버리는 낮은 값들.. 1이면 낮은값 1개를 버린다.
    214          *
    215          *					이 함수는 인터럽트 내에서 average를 취하지 않을 때,
    216          *					메인 호출 함수 내에서 호출하여 사용한다.
    217          * Input          : - aptr: 각 Channel의 ADC DATA들...(ADC_AVR)
    218          * Output         : None
    219          * Return         : 높은수 값들의 평균값.
    220          * Example		 : ADC_DATA[ADC_Channel_0] = SelectSort(ADC_AVR[ADC_Channel_0]);
    221          *******************************************************************************/
    222          
    223          
    224          INT16U SelectSort(INT16U *aptr, INT16U MAXGARBAGENO, INT16U MINGARBAGENO, INT16U nlen)
    225          {
    226          	int sum = 0;
    227          	int i , j ;
    228          	INT32U sumtotal;
    229          	INT16U tbuf[__ADCAVR];
    230          
    231          	if(nlen > __ADCAVR) nlen = __ADCAVR;
    232          
    233          	for(i = 0; i < nlen; i++)
    234          	{
    235          		tbuf[i] = aptr[i];
    236          		sumtotal += aptr[i]; 
    237          	}
    238          
    239          	for(i = 0 ; i < nlen - 1; i++)
    240          	{
    241          
    242          		for(j = i+1; j < nlen; j++ )
    243          		{
    244          			if(tbuf[i] > tbuf[j])
    245          			{
    246          				SwapData( &tbuf[i] , &tbuf[j]) ;
    247          			}
    248          		}
    249           	}
    250          
    251          	for(i = MINGARBAGENO; i < nlen - MAXGARBAGENO; i++)
    252          	{
    253          		sum += tbuf[i];
    254          	}
    255          
    256          	return (INT16U)(sum/(nlen-MAXGARBAGENO-MINGARBAGENO));
    257          }
    258          
    259          
    260          /*******************************************************************************
    261          * Function Name  : ADC_IRQHandler
    262          * Description    : Enables or disables the selected ADC software start conversion .
    263          * Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
    264          *                  - NewState: new state of the selected ADC software start conversion.
    265          *                    This parameter can be: ENABLE or DISABLE.
    266          * Output         : None
    267          * Return         : None
    268          *******************************************************************************/
    269          
    270          void ADC_IRQHandler(void)
    271          {
    272          
    273          	INT32U cpu_sr;
    274          
    275          	CPU_CRITICAL_ENTER();										// Tell uC/OS-II that we are starting an ISR
    276          	OSIntNesting++;
    277          	CPU_CRITICAL_EXIT();
    278          #ifdef ADC_AUTO_SCAN_ONE_TIME
    279          
    280          	ADC_AVR[ADCIndex][ ADC_WRCNT[ADCIndex] ] = ADC1->DR;
    281          
    282          	if(++ADC_WRCNT[ADCIndex] >= __ADCAVR)
    283          	{
    284          		ADC_WRCNT[ADCIndex] = 0;
    285          		ADCSTART[ADCIndex] = ADCFINISH;
    286          		ASTART = FALSE;
    287          	}
    288          	else{
    289          		ADC1->CR2.SWSTART = ENABLE;
    290          	}
    291          
    292          #else /////////////////////////////////////// #else(ADC_AUTO_SCAN_ONE_TIME)
    293          
    294          	
    295          #ifdef ADC_AVER
    296          	// Get injected channel10 and channel11 converted value
    297          	ADC_SUM[ADCIndex] -= ADC_DATA[ADCIndex];
    298          	ADC_SUM[ADCIndex] += ADC1->DR;
    299          	ADC_DATA[ADCIndex] = ADC_SUM[ADCIndex]/__ADCAVR;
    300          #else
    301          	ADC_AVR[ADCIndex][ ADC_WRCNT[ADCIndex] ] = ADC1->DR;
    302          	ASTART = 0;
    303          #endif
    304          
    305          #endif /////////////////////////////////////// #endif(ADC_AUTO_SCAN_ONE_TIME)
    306          
    307          	OSIntExit();											// Tell uC/OS-II that we are leaving the ISR
    308          }
    309          
    310          
    311          
    312          
    313          int ReadEnvTempTable(int Adcvalue)
    314          {
    315          //#ifdef ADC_AVER
    316          	INT32S tmpx10 = AdctoVolt33V(Adcvalue);
    317          //#else
    318          //	INT32S tmpx10 = AdctoVolt33V(ADC_AVR[channel][0]);
    319          //#endif
    320          	tmpx10 = (tmpx10 - 500);
    321          
    322          	return tmpx10;	// 10배 값이 return 된다. 
    323          }
    324          
    325          
    326          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/
    327          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     ADC1_SWStart          16
     ADCInit               16
     ADC_ChannelEnable      0
     ADC_CheckFinish        0
     ADC_IRQHandler        16
     AdctoVolt33V           0
     AdctoVolt5opamp        0
     ReadEnvTempTable       0
     SelectSort           344
     SelectSortMax         32
     SwapData               0


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     AdcEn                4
     ADC_AVR_VALUE0     300
     ADC_AVR_VALUE1     300
     ADC_AVR_VALUE4     300
     ADC_AVR_VALUE5     300
     ADC_AVR_VALUE15    300
     ADC_DATA            32
     ADC_SUM             64
     ADCIndex           116
     ASTART
     ADCSTART
     ADC_WRCNT
     ADC_AVR
     ADCInit            196
     ADC_CheckFinish     18
     ADC_ChannelEnable   10
     ADC1_SWStart        88
     AdctoVolt33V        14
     ?Subroutine0         6
     AdctoVolt5opamp     20
     SwapData            10
     SelectSortMax       84
     SelectSort         146
     ADC_IRQHandler      84
     ReadEnvTempTable    24
     ??DataTable4         4
     ??DataTable4_1       4
     ??DataTable4_2       4
     ??DataTable4_3       4

 
 1 596 bytes in section .bss
   116 bytes in section .data
     4 bytes in section .rodata
   716 bytes in section .text
 
   716 bytes of CODE  memory
     4 bytes of CONST memory
 1 712 bytes of DATA  memory

Errors: none
Warnings: none

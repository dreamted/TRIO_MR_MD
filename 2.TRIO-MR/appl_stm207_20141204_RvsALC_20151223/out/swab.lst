###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     08/Feb/2018  09:40:04 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\code\swab.c                                       #
#    Command line =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\code\swab.c -lC D:\Project\TRIO\2.TRIO-MR\appl_st #
#                    m207_20141204_RvsALC_20151223\out\ -o                    #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\ --endian=little --cpu=Cortex-M3 -e           #
#                    --fpu=None --dlib_config "D:\Program Files (x86)\IAR     #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204 #
#                    _RvsALC_20151223\include\ -I                             #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\STM32F2xx_StdPeriph_Driver_v1212\ -I              #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\STM32F2xx_StdPeriph_Driver_v1212\inc\ -I          #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-CPU\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_ #
#                    20141204_RvsALC_20151223\uC-LIB\ -I                      #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uCOS-II\Ports\ -I D:\Project\TRIO\2.TRIO-MR\appl_ #
#                    stm207_20141204_RvsALC_20151223\uCOS-II\Source\ -I       #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-Probe\ -Oh --use_c++_inline                    #
#    List file    =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\swab.lst                                      #
#    Object file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\swab.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20151223\code\swab.c
      1          
      2          #include "../include/main.h"
      3          
      4           

   \                                 In section .text, align 2, keep-with-next
      5          unsigned short ___swab16(unsigned short x)
      6          {
      7          	unsigned short int __x = (x);
      8          	return ((unsigned short)((((unsigned short)(__x) & (unsigned short)0x00ffU) << 8) | (((unsigned short)(__x) & (unsigned short)0xff00U) >> 8) ));
   \                     ___swab16:
   \   00000000   0x....             B.N      ?Subroutine0
      9          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x0A01             LSRS     R1,R0,#+8
   \   00000002   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x4770             BX       LR               ;; return
     10          

   \                                 In section .text, align 2, keep-with-next
     11          unsigned int ___swab32(unsigned int x)
     12          {
     13          	unsigned int __x = (x);
     14          	return ((unsigned int)(
     15          				(((unsigned int)(__x) & (unsigned int)0x000000ffUL) << 24) |
     16          				(((unsigned int)(__x) & (unsigned int)0x0000ff00UL) <<  8) |
     17          				(((unsigned int)(__x) & (unsigned int)0x00ff0000UL) >>  8) |
     18          				(((unsigned int)(__x) & (unsigned int)0xff000000UL) >> 24) ));
   \                     ___swab32:
   \   00000000   0xF400 0x417F      AND      R1,R0,#0xFF00
   \   00000004   0x0209             LSLS     R1,R1,#+8
   \   00000006   0xEA41 0x6100      ORR      R1,R1,R0, LSL #+24
   \   0000000A   0x0A02             LSRS     R2,R0,#+8
   \   0000000C   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   00000010   0x4311             ORRS     R1,R2,R1
   \   00000012   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   00000016   0x4770             BX       LR               ;; return
     19          }
     20          
     21          /**
     22          unsigned long long ___swab64(unsigned long long x)
     23          {
     24          	unsigned long long __x = (x);
     25          	return ((unsigned long long)(
     26          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00000000000000ffULL) << 56) |
     27          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x000000000000ff00ULL) << 40) |
     28          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x0000000000ff0000ULL) << 24) |
     29          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00000000ff000000ULL) <<  8) |
     30          	    		(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x000000ff00000000ULL) >>  8) |
     31          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x0000ff0000000000ULL) >> 24) |
     32          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0x00ff000000000000ULL) >> 40) |
     33          				(unsigned long long)(((unsigned long long)(__x) & (unsigned long long)0xff00000000000000ULL) >> 56) ));
     34          }
     35          **/
     36          
     37          

   \                                 In section .text, align 2, keep-with-next
     38          unsigned short __fswab16(unsigned short x)
   \                     __fswab16:
   \   00000000   0xBF00             Nop      
     39          {
     40          	return __arch__swab16(x);
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          unsigned short __swab16p(unsigned short *x)
     44          {
     45          	return __arch__swab16p(x);
   \                     __swab16p:
   \   00000000   0x8800             LDRH     R0,[R0, #+0]
   \   00000002   0x....             B.N      ?Subroutine0
     46          }
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void __swab16s(unsigned short *addr)
     49          {
     50          	__arch__swab16s(addr);
   \                     __swab16s:
   \   00000000   0x8801             LDRH     R1,[R0, #+0]
   \   00000002   0x0A0A             LSRS     R2,R1,#+8
   \   00000004   0xEA42 0x2101      ORR      R1,R2,R1, LSL #+8
   \   00000008   0x8001             STRH     R1,[R0, #+0]
     51          }
   \   0000000A   0x4770             BX       LR               ;; return
     52          

   \                                 In section .text, align 2, keep-with-next
     53          unsigned int __fswab32(unsigned int x)
     54          {
     55          	return __arch__swab32(x);
   \                     __fswab32:
   \   00000000   0x....             B.N      ___swab32
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          unsigned int __swab32p(unsigned int *x)
     59          {
     60          	return __arch__swab32p(x);
   \                     __swab32p:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             B.N      ___swab32
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void __swab32s(unsigned int *addr)
     64          {
   \                     __swab32s:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     65          	__arch__swab32s(addr);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       ___swab32
   \   0000000A   0x6020             STR      R0,[R4, #+0]
     66          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     67          
     68          /**
     69          unsigned long long __fswab64(unsigned long long x)
     70          {
     71          
     72          	unsigned int h = x >> 32;
     73              unsigned int l = x & ((1ULL<<32)-1);
     74          
     75                  return (((unsigned long long)__swab32(l)) << 32) | ((unsigned long long)(__swab32(h)));
     76          }
     77          **/
     78          /**
     79          unsigned long long __swab64p(unsigned long long *x)
     80          {
     81          	return __arch__swab64p(x);
     82          }
     83          **/
     84          /**
     85          void __swab64s(unsigned long long *addr)
     86          {
     87          	__arch__swab64s(addr);
     88          }
     89          **/
     90          ////////////////////////////////////////////////////////////////////////////////
     91          // End of Source File
     92          /////////////////////
     93          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ___swab16
        0  ___swab32
        0  __fswab16
        0  __fswab32
             0 -> ___swab32
        0  __swab16p
        0  __swab16s
        0  __swab32p
             0 -> ___swab32
        8  __swab32s
             8 -> ___swab32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
       2  ___swab16
      24  ___swab32
       2  __fswab16
       2  __fswab32
       4  __swab16p
      12  __swab16s
       4  __swab32p
      14  __swab32s

 
 74 bytes in section .text
 
 74 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.21.1.52794/W32 for ARM     01/Dec/2012  04:07:05 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\a #
#                    a_Dtu.c                                                  #
#    Command line =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\a #
#                    a_Dtu.c -lC C:\user\project\FR-DB家屈\fw\appl_stm207_201 #
#                    21201\out\ -o C:\user\project\FR-DB家屈\fw\appl_stm207_2 #
#                    0121201\out\ --endian=little --cpu=Cortex-M3 -e          #
#                    --fpu=None --dlib_config "C:\compiler\ewarm              #
#                    6.2\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\includ #
#                    e\ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\ #
#                    STM32F2xx_StdPeriph_Driver_v1212\ -I                     #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\STM32F #
#                    2xx_StdPeriph_Driver_v1212\inc\ -I                       #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\uC-CPU #
#                    \ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\u #
#                    C-LIB\ -I C:\user\project\FR-DB家屈\fw\appl_stm207_20121 #
#                    201\uCOS-II\Ports\ -I C:\user\project\FR-DB家屈\fw\appl_ #
#                    stm207_20121201\uCOS-II\Source\ -I                       #
#                    C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\uC-Pro #
#                    be\ -Oh --use_c++_inline                                 #
#    List file    =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\out\aa #
#                    _Dtu.lst                                                 #
#    Object file  =  C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\out\aa #
#                    _Dtu.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\user\project\FR-DB家屈\fw\appl_stm207_20121201\code\aa_Dtu.c
      1          
      2          //=====================================================================//
      3          // DTU Comm
      4          //=====================================================================//
      5          #define SER4INT_C
      6          
      7          #include "../include/main.h"

   \                                 In section iram, align 4
   \   __absolute OS_STK Ser4TaskStk[300]
   \                     Ser4TaskStk:
   \   00000000                      DS8 1200

   \                                 In section .bss, align 4
   \   __absolute __ProtocolPtr DtuSerB
   \                     DtuSerB:
   \   00000000                      DS8 48

   \                                 In section .data, align 4
   \   __absolute INT8U DtuLinkFailCnt
   \                     DtuLinkFailCnt:
   \   00000000   00                 DC8 0
   \   __absolute INT8U DtuInitFlag
   \                     DtuInitFlag:
   \   00000001   00                 DC8 0
   \   __absolute INT8U Dtu_Idle
   \                     Dtu_Idle:
   \   00000002   01                 DC8 1
   \   00000003   00                 DC8 0
   \   __absolute __ProtocolPtr *DtuSer
   \                     DtuSer:
   \   00000004   ........           DC32 DtuSerB
   \   __absolute __F_MU_CTRL *DtuControl
   \                     DtuControl:
   \   00000008   ........           DC32 DtuControlB
   \   __absolute __F_MU_CTRL DtuControlB
   \                     DtuControlB:
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   __absolute SIO Sdtu
   \                     Sdtu:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000478   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000488   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000498   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000508   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000518   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000528   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000538   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000548   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000558   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000568   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000578   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000588   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000598   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000608   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000618   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000628   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000648   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000658   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000668   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000678   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000688   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000698   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000708   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000718   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000728   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000738   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000748   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000758   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000768   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000778   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000788   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000798   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000808   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000818   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000828   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000838   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000848   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   __absolute SIO Rdtu
   \                     Rdtu:
   \   00000850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000940   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000950   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000960   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000970   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000980   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000990   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F20   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F30   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F40   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F50   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F60   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
      8          
      9          //=======================================================================//
     10          // Library Function Code
     11          //=======================================================================//
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void Ser4Init(void)
     14          {
   \                     Ser4Init:
   \   00000000   10B5               PUSH     {R4,LR}
     15           	DtuSer->CheckByte = pUSART4.CheckByte;
   \   00000002   ........           LDR.W    R4,??DataTable7
   \   00000006   6068               LDR      R0,[R4, #+4]
   \   00000008   ........           LDR.W    R1,??DataTable7_1
   \   0000000C   4A68               LDR      R2,[R1, #+4]
   \   0000000E   0260               STR      R2,[R0, #+0]
     16          	DtuSer->RxGetByte = pUSART4.RxGetByte;
   \   00000010   8A68               LDR      R2,[R1, #+8]
   \   00000012   4260               STR      R2,[R0, #+4]
     17          	DtuSer->PutStr = pUSART4.PutStr;
   \   00000014   CA68               LDR      R2,[R1, #+12]
   \   00000016   8260               STR      R2,[R0, #+8]
     18          	DtuSer->TxCheckByte = pUSART4.TxCheckByte;
   \   00000018   CA69               LDR      R2,[R1, #+28]
   \   0000001A   0261               STR      R2,[R0, #+16]
     19          	DtuSer->BuffClear = pUSART4.BuffClear;
   \   0000001C   096A               LDR      R1,[R1, #+32]
   \   0000001E   4161               STR      R1,[R0, #+20]
     20          
     21          	DtuSer->TimerRx = TimerDtuRx;
   \   00000020   0521               MOVS     R1,#+5
   \   00000022   0183               STRH     R1,[R0, #+24]
     22          
     23          	DtuSer->Recv = &Rdtu;
   \   00000024   04F65001           ADDW     R1,R4,#+2128
   \   00000028   4162               STR      R1,[R0, #+36]
     24          	DtuSer->Send = &Sdtu;
   \   0000002A   04F23801           ADDW     R1,R4,#+56
   \   0000002E   8162               STR      R1,[R0, #+40]
     25          
     26          	DtuSer->OSSem = OSSemCreate(1);
   \   00000030   0120               MOVS     R0,#+1
   \   00000032   ........           BL       OSSemCreate
   \   00000036   6168               LDR      R1,[R4, #+4]
   \   00000038   0862               STR      R0,[R1, #+32]
     27          
     28          	DtuControl = &DtuControlB;
   \   0000003A   04F20C00           ADDW     R0,R4,#+12
   \   0000003E   A060               STR      R0,[R4, #+8]
     29          	// DTU Alarm
     30          	MuStatus->MuAlm.DtuLink_Alarm = _Alarm;
   \   00000040   ........           LDR.W    R0,??DataTable7_2
   \   00000044   0168               LDR      R1,[R0, #+0]
   \   00000046   91F85822           LDRB     R2,[R1, #+600]
   \   0000004A   42F08002           ORR      R2,R2,#0x80
   \   0000004E   81F85822           STRB     R2,[R1, #+600]
     31          	MuStatus->MuAlm.DtuSts_Alarm = _Alarm;
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   90F85812           LDRB     R1,[R0, #+600]
   \   00000058   41F04001           ORR      R1,R1,#0x40
   \   0000005C   80F85812           STRB     R1,[R0, #+600]
     32          	
     33          	OSTaskCreate(Ser4Task, (void *)DtuSer, (OS_STK *)&Ser4TaskStk[SER4_STK_SIZE - 1], DTU_PRIO);
   \   00000060   0423               MOVS     R3,#+4
   \   00000062   ........           LDR.W    R2,??DataTable7_3
   \   00000066   6168               LDR      R1,[R4, #+4]
   \   00000068   ........           LDR.W    R0,??DataTable7_4
   \   0000006C   BDE81040           POP      {R4,LR}
   \   00000070   ........           B.W      OSTaskCreate
     34          }
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void Ser4Task(void *pdata)
     37          {
   \                     Ser4Task:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   84B0               SUB      SP,SP,#+16
   \   00000006   0446               MOV      R4,R0
     38          	__ProtocolPtr *nPtr = (__ProtocolPtr *)pdata;
     39          
     40              nPtr = nPtr;
     41          	pdata = pdata;
     42          	OSTimeDly(100*DTU_PRIO);
   \   00000008   4FF4C870           MOV      R0,#+400
   \   0000000C   ........           BL       OSTimeDly
   \   00000010   ........           LDR.W    R5,??DataTable7_2
   \   00000014   ........           LDR.W    R8,??DataTable7_5
   \   00000018   ........           LDR.W    R9,??DataTable7_6
   \   0000001C   ........           LDR.W    R6,??DataTable7
   \   00000020   ........           LDR.W    R7,??DataTable7_7
   \   00000024   ........           LDR.W    R10,??DataTable7_8
   \   00000028   38E0               B.N      ??Ser4Task_0
     43          
     44          	while(1)
     45          	{
     46          		while(!DownLoadGiveupTimerSet(NULL) && (!tTestFlag) && (!DistFlag))
     47          		{
     48          			GetDtuCommand();
     49          
     50          			if((DtuInitFlag == 1)||(DtuInitFlag == 3))	DtuInitControl(nPtr);
   \                     ??Ser4Task_1:
   \   0000002A   03A8               ADD      R0,SP,#+12
   \   0000002C   4946               MOV      R1,R9
   \   0000002E   0322               MOVS     R2,#+3
   \   00000030   ........           BL       __aeabi_memcpy
   \   00000034   02A8               ADD      R0,SP,#+8
   \   00000036   4146               MOV      R1,R8
   \   00000038   0322               MOVS     R2,#+3
   \   0000003A   ........           BL       __aeabi_memcpy
     51          			else					SioDataAckTx(MyID, DtuID, (INT8U*)NULL, 0, StatusRQST, nPtr);
   \   0000003E   0194               STR      R4,[SP, #+4]
   \   00000040   2020               MOVS     R0,#+32
   \   00000042   0090               STR      R0,[SP, #+0]
   \   00000044   0023               MOVS     R3,#+0
   \   00000046   0022               MOVS     R2,#+0
   \   00000048   0399               LDR      R1,[SP, #+12]
   \   0000004A   0298               LDR      R0,[SP, #+8]
   \   0000004C   ........           BL       SioDataAckTx
     52          			
     53          			if(DtuLinkFailCnt++ > 5)
   \                     ??Ser4Task_2:
   \   00000050   3078               LDRB     R0,[R6, #+0]
   \   00000052   411C               ADDS     R1,R0,#+1
   \   00000054   3170               STRB     R1,[R6, #+0]
   \   00000056   0628               CMP      R0,#+6
   \   00000058   08D3               BCC.N    ??Ser4Task_3
     54          			{
     55          				DtuLinkFailCnt = 10;
   \   0000005A   0A20               MOVS     R0,#+10
   \   0000005C   3070               STRB     R0,[R6, #+0]
     56          				MuStatus->MuAlm.DtuLink_Alarm = _Alarm;
   \   0000005E   2868               LDR      R0,[R5, #+0]
   \   00000060   90F85812           LDRB     R1,[R0, #+600]
   \   00000064   41F08001           ORR      R1,R1,#0x80
   \   00000068   80F85812           STRB     R1,[R0, #+600]
     57          			}
     58          			
     59          			if(ProtocolCheck(nPtr, (Time1Sec*2L)))
   \                     ??Ser4Task_3:
   \   0000006C   4FF4FA61           MOV      R1,#+2000
   \   00000070   2046               MOV      R0,R4
   \   00000072   ........           BL       ProtocolCheck
   \   00000076   58B1               CBZ.N    R0,??Ser4Task_4
     60          			{
     61          				DtuProtocolComCheck(nPtr);
   \   00000078   2046               MOV      R0,R4
   \   0000007A   ........           BL       DtuProtocolComCheck
     62          				
     63          				DtuLinkFailCnt = 0;
   \   0000007E   0020               MOVS     R0,#+0
   \   00000080   3070               STRB     R0,[R6, #+0]
     64          				MuStatus->MuAlm.DtuLink_Alarm = _Normal;
   \   00000082   2868               LDR      R0,[R5, #+0]
   \   00000084   90F85812           LDRB     R1,[R0, #+600]
   \   00000088   01F07F01           AND      R1,R1,#0x7F
   \   0000008C   80F85812           STRB     R1,[R0, #+600]
     65          			}
     66          
     67          			EndDtuCommand();
   \                     ??Ser4Task_4:
   \   00000090   0120               MOVS     R0,#+1
   \   00000092   B070               STRB     R0,[R6, #+2]
     68          			
     69          			OSTimeDly(500L);
   \   00000094   4FF4FA70           MOV      R0,#+500
   \                     ??Ser4Task_5:
   \   00000098   ........           BL       OSTimeDly
   \                     ??Ser4Task_0:
   \   0000009C   0020               MOVS     R0,#+0
   \   0000009E   ........           BL       DownLoadGiveupTimerSet
   \   000000A2   78B9               CBNZ.N   R0,??Ser4Task_6
   \   000000A4   9AF80000           LDRB     R0,[R10, #+0]
   \   000000A8   3978               LDRB     R1,[R7, #+0]
   \   000000AA   0843               ORRS     R0,R1,R0
   \   000000AC   0AD1               BNE.N    ??Ser4Task_6
   \   000000AE   ........           BL       GetDtuCommand
   \   000000B2   7078               LDRB     R0,[R6, #+1]
   \   000000B4   0128               CMP      R0,#+1
   \   000000B6   01D0               BEQ.N    ??Ser4Task_7
   \   000000B8   0328               CMP      R0,#+3
   \   000000BA   B6D1               BNE.N    ??Ser4Task_1
   \                     ??Ser4Task_7:
   \   000000BC   2046               MOV      R0,R4
   \   000000BE   ........           BL       DtuInitControl
   \   000000C2   C5E7               B.N      ??Ser4Task_2
     70          		}
     71          		OSTimeDly(1000L);
   \                     ??Ser4Task_6:
   \   000000C4   4FF47A70           MOV      R0,#+1000
   \   000000C8   E6E7               B.N      ??Ser4Task_5
     72          	}
     73          }
     74          
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void DtuProtocolComCheck (__ProtocolPtr *nPtr)
     77          {
   \                     DtuProtocolComCheck:
   \   00000000   18B4               PUSH     {R3,R4}
     78          	INT8U	i = 0;
   \   00000002   0021               MOVS     R1,#+0
     79          	
     80          	SIO *Recv = nPtr->Recv;
   \   00000004   426A               LDR      R2,[R0, #+36]
     81          	
     82          	switch(Recv->Command) //command 眉农
   \   00000006   937A               LDRB     R3,[R2, #+10]
   \   00000008   903B               SUBS     R3,R3,#+144
   \   0000000A   022B               CMP      R3,#+2
   \   0000000C   1CD9               BLS.N    ??DtuProtocolComCheck_0
   \   0000000E   103B               SUBS     R3,R3,#+16
   \   00000010   03D0               BEQ.N    ??DtuProtocolComCheck_1
   \   00000012   5B1E               SUBS     R3,R3,#+1
   \   00000014   05D0               BEQ.N    ??DtuProtocolComCheck_2
   \   00000016   11BC               POP      {R0,R4}
   \   00000018   7047               BX       LR               ;; return
     83          	{
     84          		//-----------------------------------------------------------------------//
     85          		case StatusRSPS:
     86          			Dtu2Status((__F_MU_STS*)Recv->Data);
   \                     ??DtuProtocolComCheck_1:
   \   0000001A   02F10D00           ADD      R0,R2,#+13
   \   0000001E   12BC               POP      {R1,R4}
   \   00000020   ....               B.N      Dtu2Status
     87          		break;
     88          
     89          		case ControlRSPS:
     90          			if((DtuInitFlag == 1)||(DtuInitFlag == 3))
   \                     ??DtuProtocolComCheck_2:
   \   00000022   ........           LDR.W    R0,??DataTable7
   \   00000026   4378               LDRB     R3,[R0, #+1]
   \   00000028   012B               CMP      R3,#+1
   \   0000002A   01D0               BEQ.N    ??DtuProtocolComCheck_3
   \   0000002C   032B               CMP      R3,#+3
   \   0000002E   04D1               BNE.N    ??DtuProtocolComCheck_4
     91          			{
     92          				DtuInitFlag = 2;
   \                     ??DtuProtocolComCheck_3:
   \   00000030   0223               MOVS     R3,#+2
   \   00000032   4370               STRB     R3,[R0, #+1]
     93          				Sio_Crtl_Flag = 0;
   \   00000034   ........           LDR.W    R3,??DataTable7_9
   \   00000038   1970               STRB     R1,[R3, #+0]
     94          			}
     95          
     96          			for(i=0; i<5; i++)	DtuControl->ControlFlag.Data[i] = 0;
   \                     ??DtuProtocolComCheck_4:
   \   0000003A   8368               LDR      R3,[R0, #+8]
   \   0000003C   0024               MOVS     R4,#+0
   \   0000003E   CC54               STRB     R4,[R1, R3]
   \   00000040   491C               ADDS     R1,R1,#+1
   \   00000042   0529               CMP      R1,#+5
   \   00000044   F9D3               BCC.N    ??DtuProtocolComCheck_4
   \   00000046   E8E7               B.N      ??DtuProtocolComCheck_1
     97          			Dtu2Status((__F_MU_STS*)Recv->Data);
     98          		break;
     99          
    100          		case ResetRSPS:
    101          			//BypassFunction(PcSer, nPtr);
    102          		break;
    103          
    104          		//-----------------------------------------------------------------------//
    105          		case DownloadRSPS:
    106          		case DownDataRSPS:
    107          		case DownConfirmRSPS:
    108          			BypassFunction(PcSer, nPtr);
   \                     ??DtuProtocolComCheck_0:
   \   00000048   0146               MOV      R1,R0
   \   0000004A   ........           LDR.W    R0,??DataTable7_10
   \   0000004E   0068               LDR      R0,[R0, #+0]
   \   00000050   14BC               POP      {R2,R4}
   \   00000052   ........           B.W      BypassFunction
    109          		break;
    110          	}
    111          }
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void GetDtuCommand(void)
    114          {
   \                     GetDtuCommand:
   \   00000000   10B5               PUSH     {R4,LR}
    115          	while( !Dtu_Idle )	OSTimeDly(100);
   \   00000002   ........           LDR.W    R4,??DataTable7
   \   00000006   A078               LDRB     R0,[R4, #+2]
   \   00000008   28B9               CBNZ.N   R0,??GetDtuCommand_0
   \                     ??GetDtuCommand_1:
   \   0000000A   6420               MOVS     R0,#+100
   \   0000000C   ........           BL       OSTimeDly
   \   00000010   A078               LDRB     R0,[R4, #+2]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   F9D0               BEQ.N    ??GetDtuCommand_1
    116          	Dtu_Idle = 0;
   \                     ??GetDtuCommand_0:
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   A070               STRB     R0,[R4, #+2]
    117          }
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void EndDtuCommand(void)
    120          {
    121          	Dtu_Idle = 1;
   \                     EndDtuCommand:
   \   00000000   ........           LDR.W    R0,??DataTable7
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   8170               STRB     R1,[R0, #+2]
    122          }
   \   00000008   7047               BX       LR               ;; return
    123          
    124          //=======================================================================//

   \                                 In section .text, align 2, keep-with-next
    125          void Dtu2Status(__F_MU_STS *Ptr)
    126          {
   \                     Dtu2Status:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   0646               MOV      R6,R0
    127          	INT8U	i = 0;
    128          //	INT8U	HuID, BrID, RuID;
    129          	
    130          	__MU_STS	*Sts = MuStatus;
   \   00000006   ........           LDR.W    R0,??DataTable7_2
   \   0000000A   D0F800B0           LDR      R11,[R0, #+0]
    131          
    132          	for(i=0; i<sizeof(__F_MU_STS); i++)
   \   0000000E   0025               MOVS     R5,#+0
   \   00000010   3046               MOV      R0,R6
   \   00000012   ........           LDR.W    R1,??DataTable7_11
    133          	{
    134          		*((INT8U*)DtuStatus+i) = *((INT8U*)Ptr+i);
   \                     ??Dtu2Status_0:
   \   00000016   0A68               LDR      R2,[R1, #+0]
   \   00000018   10F8013B           LDRB     R3,[R0], #+1
   \   0000001C   AB54               STRB     R3,[R5, R2]
    135          	}
   \   0000001E   6D1C               ADDS     R5,R5,#+1
   \   00000020   752D               CMP      R5,#+117
   \   00000022   F8D3               BCC.N    ??Dtu2Status_0
    136          	
    137          	if(Sio_Crtl_Flag)	return;
   \   00000024   ........           LDR.W    R0,??DataTable7_9
   \   00000028   0078               LDRB     R0,[R0, #+0]
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   40F06381           BNE.W    ??Dtu2Status_1
    138          	//if(Nms_Crtl_Flag)	return;
    139          	
    140          	if(DtuInitFlag == 0)
   \   00000030   ........           LDR.W    R0,??DataTable7
   \   00000034   4178               LDRB     R1,[R0, #+1]
   \   00000036   59B9               CBNZ.N   R1,??Dtu2Status_2
    141          	{
    142          		if(Ptr->FpgaSts == _Normal)
   \   00000038   3179               LDRB     R1,[R6, #+4]
   \   0000003A   09B9               CBNZ.N   R1,??Dtu2Status_3
    143          		{
    144          			DtuInitFlag = 1;
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   4170               STRB     R1,[R0, #+1]
    145          		}
    146          		Sts->MuAlm.DtuSts_Alarm	= Ptr->FpgaSts;
   \                     ??Dtu2Status_3:
   \   00000040   3079               LDRB     R0,[R6, #+4]
   \   00000042   9BF85812           LDRB     R1,[R11, #+600]
   \   00000046   60F38611           BFI      R1,R0,#+6,#+1
   \   0000004A   8BF85812           STRB     R1,[R11, #+600]
   \   0000004E   52E1               B.N      ??Dtu2Status_1
    147          	}
    148          	else if(DtuInitFlag == 2)
   \                     ??Dtu2Status_2:
   \   00000050   0229               CMP      R1,#+2
   \   00000052   40F05081           BNE.W    ??Dtu2Status_1
    149          	{
    150          		//-----------------------------------------------------------------------//
    151          		Sts->DtuFpgaVer	= Ptr->FpgaVer;
   \   00000056   3078               LDRB     R0,[R6, #+0]
   \   00000058   8BF84C02           STRB     R0,[R11, #+588]
    152          		Sts->DtuVer	= Ptr->DtuVer;
   \   0000005C   7078               LDRB     R0,[R6, #+1]
   \   0000005E   8BF84D02           STRB     R0,[R11, #+589]
    153          		Sts->MuAlm.DtuSts_Alarm	= Ptr->FpgaSts;
   \   00000062   3079               LDRB     R0,[R6, #+4]
   \   00000064   9BF85812           LDRB     R1,[R11, #+600]
   \   00000068   60F38611           BFI      R1,R0,#+6,#+1
   \   0000006C   8BF85812           STRB     R1,[R11, #+600]
    154          		
    155          		for(i=0; i<MDTU_MAX; i++)
   \   00000070   0025               MOVS     R5,#+0
   \   00000072   3746               MOV      R7,R6
   \   00000074   B046               MOV      R8,R6
   \   00000076   D946               MOV      R9,R11
   \   00000078   ........           LDR.W    R10,??DataTable7_12
    156          		{
    157          			Sts->MdtuSts[i].Install			= Ptr->OpticAlarm[i].Sfp_Insert;
   \                     ??Dtu2Status_4:
   \   0000007C   7879               LDRB     R0,[R7, #+5]
   \   0000007E   00F00100           AND      R0,R0,#0x1
   \   00000082   89F86102           STRB     R0,[R9, #+609]
    158          
    159          			if(SysInfo->Hu_Install[i] != SYS_NOT_INST)
   \   00000086   09F26124           ADDW     R4,R9,#+609
   \   0000008A   DAF80000           LDR      R0,[R10, #+0]
   \   0000008E   2818               ADDS     R0,R5,R0
   \   00000090   4078               LDRB     R0,[R0, #+1]
   \   00000092   C0B1               CBZ.N    R0,??Dtu2Status_5
    160          			{
    161          				Sts->MdtuSts[i].Alarm.Pd_Alarm	= Ptr->OpticAlarm[i].Pd_Alarm;
   \   00000094   7879               LDRB     R0,[R7, #+5]
   \   00000096   8008               LSRS     R0,R0,#+2
   \   00000098   6178               LDRB     R1,[R4, #+1]
   \   0000009A   60F30001           BFI      R1,R0,#+0,#+1
   \   0000009E   6170               STRB     R1,[R4, #+1]
    162          				Sts->MdtuSts[i].Alarm.Ld_Alarm	= Ptr->OpticAlarm[i].Ld_Alarm;
   \   000000A0   7879               LDRB     R0,[R7, #+5]
   \   000000A2   4008               LSRS     R0,R0,#+1
   \   000000A4   60F34101           BFI      R1,R0,#+1,#+1
   \   000000A8   6170               STRB     R1,[R4, #+1]
    163          
    164          				Sts->MdtuSts[i].LD_Power		= OpConvert(Ptr->LD_Power[i])+Sts->MdtuSts[i].LD_Offset;
   \   000000AA   B8F90D00           LDRSH    R0,[R8, #+13]
   \   000000AE   ........           BL       OpConvert
   \   000000B2   617A               LDRB     R1,[R4, #+9]
   \   000000B4   0818               ADDS     R0,R1,R0
   \   000000B6   E070               STRB     R0,[R4, #+3]
    165          				Sts->MdtuSts[i].PD_Power		= OpConvert(Ptr->PD_Power[i])+Sts->MdtuSts[i].PD_Offset;
   \   000000B8   B8F91D00           LDRSH    R0,[R8, #+29]
   \   000000BC   ........           BL       OpConvert
   \   000000C0   217A               LDRB     R1,[R4, #+8]
   \   000000C2   0818               ADDS     R0,R1,R0
   \   000000C4   08E0               B.N      ??Dtu2Status_6
    166          			}
    167          			else
    168          			{
    169          				Sts->MdtuSts[i].Alarm.Pd_Alarm	= _Normal;
   \                     ??Dtu2Status_5:
   \   000000C6   6078               LDRB     R0,[R4, #+1]
   \   000000C8   00F0FE00           AND      R0,R0,#0xFE
   \   000000CC   6070               STRB     R0,[R4, #+1]
    170          				Sts->MdtuSts[i].Alarm.Ld_Alarm	= _Normal;
   \   000000CE   00F0FD00           AND      R0,R0,#0xFD
   \   000000D2   6070               STRB     R0,[R4, #+1]
    171          
    172          				Sts->MdtuSts[i].LD_Power		= 0;
   \   000000D4   0020               MOVS     R0,#+0
   \   000000D6   E070               STRB     R0,[R4, #+3]
    173          				Sts->MdtuSts[i].PD_Power		= 0;
   \                     ??Dtu2Status_6:
   \   000000D8   A070               STRB     R0,[R4, #+2]
    174          			}
    175          			
    176          			Sts->MdtuSts[i].BIP				= Ptr->BIP[i];
   \   000000DA   97F82D00           LDRB     R0,[R7, #+45]
   \   000000DE   A071               STRB     R0,[R4, #+6]
    177          		}
   \   000000E0   6D1C               ADDS     R5,R5,#+1
   \   000000E2   09F20A09           ADDW     R9,R9,#+10
   \   000000E6   08F10208           ADD      R8,R8,#+2
   \   000000EA   7F1C               ADDS     R7,R7,#+1
   \   000000EC   082D               CMP      R5,#+8
   \   000000EE   C5DB               BLT.N    ??Dtu2Status_4
    178          
    179          		//-----------------------------------------------------------------------//
    180          		/*
    181          		if(DistFlag)
    182          		{
    183          			HuID = DistTarID.HuID;
    184          			BrID = (DistTarID.RuID>>4)&0x0F;
    185          			RuID = 0;
    186          			if((DistType == MEA_TYPE)||(DistType == TAR_TYPE))
    187          			{
    188          				if(DistStep == 3)
    189          				{
    190          				//SerPtr->printf("\n Delay Update[%d]...%d\n",Ptr->Mea.MeaSts, Ptr->MeaResult);
    191          					if(DistTarID.RuID == 0xFF)
    192          							Sts->MeaResult				= Ptr->MeaResult;
    193          					else	Sts->MeaResult				= Ptr->MeaResult + RuBuf[HuID][BrID][RuID]->DL_Delay_21G;
    194          				}
    195          			}
    196          			else
    197          			{
    198          				if(DistStep == 5)
    199          				{
    200          					//SerPtr->printf("\n Delay Update[%d]...%d\n",Ptr->Mea.MeaSts, Ptr->MeaResult);
    201          					if(DistTarID.RuID == 0xFF)
    202          							DelaySts->DelayVal[HuID].Hu_Delay = Ptr->MeaResult;
    203          					else	DelaySts->DelayVal[HuID].Ru_Delay[BrID] = Ptr->MeaResult;
    204          				}
    205          			}
    206          		}
    207          		*/
    208          		Sts->MeaLoop				= Ptr->MeaLoop;
   \   000000F0   96F83700           LDRB     R0,[R6, #+55]
   \   000000F4   8BF8AC03           STRB     R0,[R11, #+940]
    209          		Sts->MeaSts					= Ptr->MeaSts;
   \   000000F8   96F83800           LDRB     R0,[R6, #+56]
   \   000000FC   8BF8AD03           STRB     R0,[R11, #+941]
    210          		Sts->MeaPath				= Ptr->MeaBranch;
   \   00000100   96F83900           LDRB     R0,[R6, #+57]
   \   00000104   8BF8A903           STRB     R0,[R11, #+937]
    211          
    212          #ifdef DIST_DEG
    213          		if(DistFlag)	
    214          			SerPtr->printf("\n Measure Status -> %x", Ptr->MeaSts);
    215          #endif
    216          
    217          		//-----------------------------------------------------------------------//
    218          		Sts->MdtuSts[0].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br0;
   \   00000108   96F83A00           LDRB     R0,[R6, #+58]
   \   0000010C   00F00100           AND      R0,R0,#0x1
   \   00000110   8BF86802           STRB     R0,[R11, #+616]
    219          		Sts->MdtuSts[1].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br1;
   \   00000114   96F83A00           LDRB     R0,[R6, #+58]
   \   00000118   C0F34000           UBFX     R0,R0,#+1,#+1
   \   0000011C   8BF87202           STRB     R0,[R11, #+626]
    220          		Sts->MdtuSts[2].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br2;
   \   00000120   96F83A00           LDRB     R0,[R6, #+58]
   \   00000124   C0F38000           UBFX     R0,R0,#+2,#+1
   \   00000128   8BF87C02           STRB     R0,[R11, #+636]
    221          		Sts->MdtuSts[3].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br3;
   \   0000012C   96F83A00           LDRB     R0,[R6, #+58]
   \   00000130   C0F3C000           UBFX     R0,R0,#+3,#+1
   \   00000134   8BF88602           STRB     R0,[R11, #+646]
    222          		Sts->MdtuSts[4].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br4;
   \   00000138   96F83A00           LDRB     R0,[R6, #+58]
   \   0000013C   C0F30010           UBFX     R0,R0,#+4,#+1
   \   00000140   8BF89002           STRB     R0,[R11, #+656]
    223          		Sts->MdtuSts[5].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br5;
   \   00000144   96F83A00           LDRB     R0,[R6, #+58]
   \   00000148   C0F34010           UBFX     R0,R0,#+5,#+1
   \   0000014C   8BF89A02           STRB     R0,[R11, #+666]
    224          		Sts->MdtuSts[6].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br6;
   \   00000150   96F83A00           LDRB     R0,[R6, #+58]
   \   00000154   C0F38010           UBFX     R0,R0,#+6,#+1
   \   00000158   8BF8A402           STRB     R0,[R11, #+676]
    225          		Sts->MdtuSts[7].OpticSum	= (INT8U)Ptr->OpticSum.Sum_Br7;
   \   0000015C   96F83A00           LDRB     R0,[R6, #+58]
   \   00000160   C009               LSRS     R0,R0,#+7
   \   00000162   8BF8AE02           STRB     R0,[R11, #+686]
    226          		//pUSART1.printf("\nOpticSum = %x Recv = %x ", Sts->MdtuSts[0].OpticSum, Ptr->OpticSum.Data);
    227          		
    228          		//-----------------------------------------------------------------------//
    229          		Sts->CfrSts[S_900M_PATH].DL_DgtPower	= Ptr->DL_DgtPower[F_S_900M_PATH];
   \   00000166   B6F83B00           LDRH     R0,[R6, #+59]
   \   0000016A   ABF85103           STRH     R0,[R11, #+849]
    230          		Sts->CfrSts[M_900M_PATH].DL_DgtPower	= Ptr->DL_DgtPower[F_M_900M_PATH];
   \   0000016E   B6F83D00           LDRH     R0,[R6, #+61]
   \   00000172   ABF85803           STRH     R0,[R11, #+856]
    231          		Sts->CfrSts[S_21G_PATH].DL_DgtPower		= Ptr->DL_DgtPower[F_S_21G_PATH];
   \   00000176   B6F83F00           LDRH     R0,[R6, #+63]
   \   0000017A   ABF84303           STRH     R0,[R11, #+835]
    232          		Sts->CfrSts[M_21G_PATH].DL_DgtPower		= Ptr->DL_DgtPower[F_M_21G_PATH];
   \   0000017E   B6F84100           LDRH     R0,[R6, #+65]
   \   00000182   ABF84A03           STRH     R0,[R11, #+842]
    233          		Sts->CfrSts[S_25G_PATH].DL_DgtPower		= Ptr->DL_DgtPower[F_S_25G_PATH];
   \   00000186   B6F84300           LDRH     R0,[R6, #+67]
   \   0000018A   ABF85F03           STRH     R0,[R11, #+863]
    234          		Sts->CfrSts[M_25G_PATH].DL_DgtPower		= Ptr->DL_DgtPower[F_M_25G_PATH];
   \   0000018E   B6F84500           LDRH     R0,[R6, #+69]
   \   00000192   ABF86603           STRH     R0,[R11, #+870]
    235          
    236          		Sts->CfrSts[M_900M_PATH].UL_DgtPower	= Ptr->UL_DgtPower[F_M_900M_PATH];
   \   00000196   B6F84900           LDRH     R0,[R6, #+73]
   \   0000019A   ABF85A03           STRH     R0,[R11, #+858]
    237          		Sts->CfrSts[S_900M_PATH].UL_DgtPower	= Ptr->UL_DgtPower[F_S_900M_PATH];
   \   0000019E   B6F84700           LDRH     R0,[R6, #+71]
   \   000001A2   ABF85303           STRH     R0,[R11, #+851]
    238          		Sts->CfrSts[S_21G_PATH].UL_DgtPower		= Ptr->UL_DgtPower[F_S_21G_PATH];
   \   000001A6   B6F84B00           LDRH     R0,[R6, #+75]
   \   000001AA   ABF84503           STRH     R0,[R11, #+837]
    239          		Sts->CfrSts[M_21G_PATH].UL_DgtPower		= Ptr->UL_DgtPower[F_M_21G_PATH];
   \   000001AE   B6F84D00           LDRH     R0,[R6, #+77]
   \   000001B2   ABF84C03           STRH     R0,[R11, #+844]
    240          		Sts->CfrSts[S_25G_PATH].UL_DgtPower		= Ptr->UL_DgtPower[F_S_25G_PATH];
   \   000001B6   B6F84F00           LDRH     R0,[R6, #+79]
   \   000001BA   ABF86103           STRH     R0,[R11, #+865]
    241          		Sts->CfrSts[M_25G_PATH].UL_DgtPower		= Ptr->UL_DgtPower[F_M_25G_PATH];
   \   000001BE   B6F85100           LDRH     R0,[R6, #+81]
   \   000001C2   ABF86803           STRH     R0,[R11, #+872]
    242          
    243          		//-----------------------------------------------------------------------//
    244          		Sts->CfrSts[S_900M_PATH].Cfr_OnOff		= Ptr->Cfr_OnOff.S_900M;
   \   000001C6   96F85300           LDRB     R0,[R6, #+83]
   \   000001CA   00F00100           AND      R0,R0,#0x1
   \   000001CE   8BF84E03           STRB     R0,[R11, #+846]
    245          		Sts->CfrSts[M_900M_PATH].Cfr_OnOff		= Ptr->Cfr_OnOff.M_900M;
   \   000001D2   96F85300           LDRB     R0,[R6, #+83]
   \   000001D6   C0F34000           UBFX     R0,R0,#+1,#+1
   \   000001DA   8BF85503           STRB     R0,[R11, #+853]
    246          		Sts->CfrSts[S_21G_PATH].Cfr_OnOff 		= Ptr->Cfr_OnOff.S_21G;
   \   000001DE   96F85300           LDRB     R0,[R6, #+83]
   \   000001E2   C0F38000           UBFX     R0,R0,#+2,#+1
   \   000001E6   8BF84003           STRB     R0,[R11, #+832]
    247          		Sts->CfrSts[M_21G_PATH].Cfr_OnOff 		= Ptr->Cfr_OnOff.M_21G;
   \   000001EA   96F85300           LDRB     R0,[R6, #+83]
   \   000001EE   C0F3C000           UBFX     R0,R0,#+3,#+1
   \   000001F2   8BF84703           STRB     R0,[R11, #+839]
    248          		Sts->CfrSts[S_25G_PATH].Cfr_OnOff 		= Ptr->Cfr_OnOff.S_25G;
   \   000001F6   96F85300           LDRB     R0,[R6, #+83]
   \   000001FA   C0F30010           UBFX     R0,R0,#+4,#+1
   \   000001FE   8BF85C03           STRB     R0,[R11, #+860]
    249          		Sts->CfrSts[M_25G_PATH].Cfr_OnOff 		= Ptr->Cfr_OnOff.M_25G;
   \   00000202   96F85300           LDRB     R0,[R6, #+83]
   \   00000206   C0F34010           UBFX     R0,R0,#+5,#+1
   \   0000020A   8BF86303           STRB     R0,[R11, #+867]
    250          
    251          		//-----------------------------------------------------------------------//
    252          		Sts->CfrSts[S_900M_PATH].Cfr_Select.Data	= Ptr->Cfr_Select[F_S_900M_PATH].Data;
   \   0000020E   96F85400           LDRB     R0,[R6, #+84]
   \   00000212   8BF84F03           STRB     R0,[R11, #+847]
    253          		Sts->CfrSts[M_900M_PATH].Cfr_Select.Data	= Ptr->Cfr_Select[F_M_900M_PATH].Data;
   \   00000216   96F85500           LDRB     R0,[R6, #+85]
   \   0000021A   8BF85603           STRB     R0,[R11, #+854]
    254          		Sts->CfrSts[S_21G_PATH].Cfr_Select.Data		= Ptr->Cfr_Select[F_S_21G_PATH].Data;
   \   0000021E   96F85600           LDRB     R0,[R6, #+86]
   \   00000222   8BF84103           STRB     R0,[R11, #+833]
    255          		Sts->CfrSts[M_21G_PATH].Cfr_Select.Data		= Ptr->Cfr_Select[F_M_21G_PATH].Data;
   \   00000226   96F85700           LDRB     R0,[R6, #+87]
   \   0000022A   8BF84803           STRB     R0,[R11, #+840]
    256          		Sts->CfrSts[S_25G_PATH].Cfr_Select.Data		= Ptr->Cfr_Select[F_S_25G_PATH].Data;
   \   0000022E   96F85800           LDRB     R0,[R6, #+88]
   \   00000232   8BF85D03           STRB     R0,[R11, #+861]
    257          		Sts->CfrSts[M_25G_PATH].Cfr_Select.Data		= Ptr->Cfr_Select[F_M_25G_PATH].Data;
   \   00000236   96F85900           LDRB     R0,[R6, #+89]
   \   0000023A   8BF86403           STRB     R0,[R11, #+868]
    258          
    259          		//-----------------------------------------------------------------------//
    260          		Sts->CfrSts[S_900M_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_S_900M_PATH];
   \   0000023E   96F85A00           LDRB     R0,[R6, #+90]
   \   00000242   8BF85003           STRB     R0,[R11, #+848]
    261          		Sts->CfrSts[M_900M_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_M_900M_PATH];
   \   00000246   96F85B00           LDRB     R0,[R6, #+91]
   \   0000024A   8BF85703           STRB     R0,[R11, #+855]
    262          		Sts->CfrSts[S_21G_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_S_21G_PATH];
   \   0000024E   96F85C00           LDRB     R0,[R6, #+92]
   \   00000252   8BF84203           STRB     R0,[R11, #+834]
    263          		Sts->CfrSts[M_21G_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_M_21G_PATH];
   \   00000256   96F85D00           LDRB     R0,[R6, #+93]
   \   0000025A   8BF84903           STRB     R0,[R11, #+841]
    264          		Sts->CfrSts[S_25G_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_S_25G_PATH];
   \   0000025E   96F85E00           LDRB     R0,[R6, #+94]
   \   00000262   8BF85E03           STRB     R0,[R11, #+862]
    265          		Sts->CfrSts[M_25G_PATH].Cfr_Threshold	= Ptr->Cfr_Threshold[F_M_25G_PATH];
   \   00000266   96F85F00           LDRB     R0,[R6, #+95]
   \   0000026A   8BF86503           STRB     R0,[R11, #+869]
    266          
    267          		//-----------------------------------------------------------------------//
    268          		// TDD
    269          		Sts->TDD_Type				= Ptr->TDD_Type;
   \   0000026E   96F86400           LDRB     R0,[R6, #+100]
   \   00000272   8BF82F03           STRB     R0,[R11, #+815]
    270          		Sts->DL_Sync_Fix			= Ptr->DL_Sync_Fix;
   \   00000276   96F86500           LDRB     R0,[R6, #+101]
   \   0000027A   8BF83003           STRB     R0,[R11, #+816]
    271          		Sts->UL_Sync_Fix			= Ptr->UL_Sync_Fix;
   \   0000027E   96F86600           LDRB     R0,[R6, #+102]
   \   00000282   8BF83103           STRB     R0,[R11, #+817]
    272          		Sts->DL_Start_Adj[0]		= Ptr->DL_Start_Adj[0];
   \   00000286   96F86700           LDRB     R0,[R6, #+103]
   \   0000028A   8BF83203           STRB     R0,[R11, #+818]
    273          		Sts->DL_Start_Adj[1]		= Ptr->DL_Start_Adj[1];
   \   0000028E   96F86800           LDRB     R0,[R6, #+104]
   \   00000292   8BF83303           STRB     R0,[R11, #+819]
    274          		Sts->DL_End_Adj[0]			= Ptr->DL_End_Adj[0];
   \   00000296   96F86900           LDRB     R0,[R6, #+105]
   \   0000029A   8BF83403           STRB     R0,[R11, #+820]
    275          		Sts->DL_End_Adj[1]			= Ptr->DL_End_Adj[1];
   \   0000029E   96F86A00           LDRB     R0,[R6, #+106]
   \   000002A2   8BF83503           STRB     R0,[R11, #+821]
    276          		Sts->UL_Start_Adj[0]		= Ptr->UL_Start_Adj[0];
   \   000002A6   96F86B00           LDRB     R0,[R6, #+107]
   \   000002AA   8BF83603           STRB     R0,[R11, #+822]
    277          		Sts->UL_Start_Adj[1]		= Ptr->UL_Start_Adj[1];
   \   000002AE   96F86C00           LDRB     R0,[R6, #+108]
   \   000002B2   8BF83703           STRB     R0,[R11, #+823]
    278          		Sts->UL_End_Adj[0]			= Ptr->UL_End_Adj[0];
   \   000002B6   96F86D00           LDRB     R0,[R6, #+109]
   \   000002BA   8BF83803           STRB     R0,[R11, #+824]
    279          		Sts->UL_End_Adj[1]			= Ptr->UL_End_Adj[1];
   \   000002BE   96F86E00           LDRB     R0,[R6, #+110]
   \   000002C2   8BF83903           STRB     R0,[R11, #+825]
    280          		Sts->Noise_Threshold[0]		= Ptr->Noise_Threshold[0];
   \   000002C6   96F86F00           LDRB     R0,[R6, #+111]
   \   000002CA   8BF83A03           STRB     R0,[R11, #+826]
    281          		Sts->Noise_Threshold[1]		= Ptr->Noise_Threshold[1];
   \   000002CE   96F87000           LDRB     R0,[R6, #+112]
   \   000002D2   8BF83B03           STRB     R0,[R11, #+827]
    282          		Sts->Signal_Threshold[0]	= Ptr->Signal_Threshold[0];
   \   000002D6   96F87100           LDRB     R0,[R6, #+113]
   \   000002DA   8BF83C03           STRB     R0,[R11, #+828]
    283          		Sts->Signal_Threshold[1]	= Ptr->Signal_Threshold[1];
   \   000002DE   96F87200           LDRB     R0,[R6, #+114]
   \   000002E2   8BF83D03           STRB     R0,[R11, #+829]
    284          		Sts->Signal_Threshold[2]	= Ptr->Signal_Threshold[2];
   \   000002E6   96F87300           LDRB     R0,[R6, #+115]
   \   000002EA   8BF83E03           STRB     R0,[R11, #+830]
    285          		Sts->Signal_Threshold[3]	= Ptr->Signal_Threshold[3];
   \   000002EE   96F87400           LDRB     R0,[R6, #+116]
   \   000002F2   8BF83F03           STRB     R0,[R11, #+831]
   \                     ??Dtu2Status_1:
   \   000002F6   BDE8F18F           POP      {R0,R4-R11,PC}   ;; return
    286          
    287          	}
    288          }
    289          
    290          //=======================================================================//

   \                                 In section .text, align 2, keep-with-next
    291          void DtuInitControl(__ProtocolPtr *toPtr)
    292          {
   \                     DtuInitControl:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0446               MOV      R4,R0
    293          	INT8U	i = 0, TemVal = 0;
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0022               MOVS     R2,#+0
    294          
    295          	__MU_STS	*Sts = MuStatus;
   \   0000000A   ....               LDR.N    R0,??DataTable7_2
   \   0000000C   0068               LDR      R0,[R0, #+0]
    296          
    297          	//-----------------------------------------------------------------------//
    298          	if(DtuInitFlag == 1)	// 檬扁拳 矫俊父 荤侩...
   \   0000000E   ....               LDR.N    R5,??DataTable7
   \   00000010   6B78               LDRB     R3,[R5, #+1]
   \   00000012   012B               CMP      R3,#+1
   \   00000014   0ED1               BNE.N    ??DtuInitControl_0
    299          	{
    300          		DtuControl->ControlFlag.Data[0] = 0x07;
   \   00000016   AB68               LDR      R3,[R5, #+8]
   \   00000018   0726               MOVS     R6,#+7
   \   0000001A   1E70               STRB     R6,[R3, #+0]
    301          		DtuControl->ControlFlag.Data[1] = 0x7F;
   \   0000001C   AB68               LDR      R3,[R5, #+8]
   \   0000001E   7F26               MOVS     R6,#+127
   \   00000020   5E70               STRB     R6,[R3, #+1]
    302          		DtuControl->ControlFlag.Data[2] = 0x3F;
   \   00000022   AB68               LDR      R3,[R5, #+8]
   \   00000024   3F26               MOVS     R6,#+63
   \   00000026   9E70               STRB     R6,[R3, #+2]
    303          		DtuControl->ControlFlag.Data[3] = 0x1F;
   \   00000028   AB68               LDR      R3,[R5, #+8]
   \   0000002A   1F26               MOVS     R6,#+31
   \   0000002C   DE70               STRB     R6,[R3, #+3]
    304          		DtuControl->ControlFlag.Data[4] = 0xFF;
   \   0000002E   AB68               LDR      R3,[R5, #+8]
   \   00000030   FF26               MOVS     R6,#+255
   \   00000032   1E71               STRB     R6,[R3, #+4]
    305          	}
    306          		
    307          	for(i=0; i<5; i++)
    308          		TemVal += DtuControl->ControlFlag.Data[i];
   \                     ??DtuInitControl_0:
   \   00000034   AB68               LDR      R3,[R5, #+8]
   \   00000036   CE5C               LDRB     R6,[R1, R3]
   \   00000038   B218               ADDS     R2,R6,R2
   \   0000003A   D2B2               UXTB     R2,R2
   \   0000003C   491C               ADDS     R1,R1,#+1
   \   0000003E   0529               CMP      R1,#+5
   \   00000040   F8D3               BCC.N    ??DtuInitControl_0
    309          	
    310          	if(TemVal != 0)
   \   00000042   ....               LDR.N    R6,??DataTable7_5
   \   00000044   ....               LDR.N    R1,??DataTable7_6
   \   00000046   002A               CMP      R2,#+0
   \   00000048   00F00381           BEQ.W    ??DtuInitControl_1
    311          	{
    312          		//-----------------------------------------------------------------------//
    313          		DtuControl->MeaLoop				= _F_OFF;
   \   0000004C   0122               MOVS     R2,#+1
   \   0000004E   5A71               STRB     R2,[R3, #+5]
    314          		DtuControl->MeaBranch			= 0;
   \   00000050   AA68               LDR      R2,[R5, #+8]
   \   00000052   0023               MOVS     R3,#+0
   \   00000054   9371               STRB     R3,[R2, #+6]
    315          
    316          		//-----------------------------------------------------------------------//
    317          		DtuControl->OpticSum.Sum_Br0	= Sts->MdtuSts[0].OpticSum;
   \   00000056   AA68               LDR      R2,[R5, #+8]
   \   00000058   90F86832           LDRB     R3,[R0, #+616]
   \   0000005C   D779               LDRB     R7,[R2, #+7]
   \   0000005E   63F30007           BFI      R7,R3,#+0,#+1
   \   00000062   D771               STRB     R7,[R2, #+7]
    318          		DtuControl->OpticSum.Sum_Br1	= Sts->MdtuSts[1].OpticSum;
   \   00000064   AA68               LDR      R2,[R5, #+8]
   \   00000066   00F26823           ADDW     R3,R0,#+616
   \   0000006A   9F7A               LDRB     R7,[R3, #+10]
   \   0000006C   92F807C0           LDRB     R12,[R2, #+7]
   \   00000070   67F3410C           BFI      R12,R7,#+1,#+1
   \   00000074   82F807C0           STRB     R12,[R2, #+7]
    319          		DtuControl->OpticSum.Sum_Br2	= Sts->MdtuSts[2].OpticSum;
   \   00000078   AA68               LDR      R2,[R5, #+8]
   \   0000007A   1F7D               LDRB     R7,[R3, #+20]
   \   0000007C   92F807C0           LDRB     R12,[R2, #+7]
   \   00000080   67F3820C           BFI      R12,R7,#+2,#+1
   \   00000084   82F807C0           STRB     R12,[R2, #+7]
    320          		DtuControl->OpticSum.Sum_Br3	= Sts->MdtuSts[3].OpticSum;
   \   00000088   AA68               LDR      R2,[R5, #+8]
   \   0000008A   9B7F               LDRB     R3,[R3, #+30]
   \   0000008C   D779               LDRB     R7,[R2, #+7]
   \   0000008E   63F3C307           BFI      R7,R3,#+3,#+1
   \   00000092   D771               STRB     R7,[R2, #+7]
    321          		DtuControl->OpticSum.Sum_Br4	= Sts->MdtuSts[4].OpticSum;
   \   00000094   AA68               LDR      R2,[R5, #+8]
   \   00000096   90F89032           LDRB     R3,[R0, #+656]
   \   0000009A   D779               LDRB     R7,[R2, #+7]
   \   0000009C   63F30417           BFI      R7,R3,#+4,#+1
   \   000000A0   D771               STRB     R7,[R2, #+7]
    322          		DtuControl->OpticSum.Sum_Br5	= Sts->MdtuSts[5].OpticSum;
   \   000000A2   AA68               LDR      R2,[R5, #+8]
   \   000000A4   00F29023           ADDW     R3,R0,#+656
   \   000000A8   9F7A               LDRB     R7,[R3, #+10]
   \   000000AA   92F807C0           LDRB     R12,[R2, #+7]
   \   000000AE   67F3451C           BFI      R12,R7,#+5,#+1
   \   000000B2   82F807C0           STRB     R12,[R2, #+7]
    323          		DtuControl->OpticSum.Sum_Br6	= Sts->MdtuSts[6].OpticSum;
   \   000000B6   AA68               LDR      R2,[R5, #+8]
   \   000000B8   1F7D               LDRB     R7,[R3, #+20]
   \   000000BA   92F807C0           LDRB     R12,[R2, #+7]
   \   000000BE   67F3861C           BFI      R12,R7,#+6,#+1
   \   000000C2   82F807C0           STRB     R12,[R2, #+7]
    324          		DtuControl->OpticSum.Sum_Br7	= Sts->MdtuSts[7].OpticSum;
   \   000000C6   AA68               LDR      R2,[R5, #+8]
   \   000000C8   9B7F               LDRB     R3,[R3, #+30]
   \   000000CA   D779               LDRB     R7,[R2, #+7]
   \   000000CC   63F3C717           BFI      R7,R3,#+7,#+1
   \   000000D0   D771               STRB     R7,[R2, #+7]
    325          					
    326          		//-----------------------------------------------------------------------//
    327          		DtuControl->Cfr_OnOff.S_900M	= Sts->CfrSts[S_900M_PATH].Cfr_OnOff;
   \   000000D2   AB68               LDR      R3,[R5, #+8]
   \   000000D4   00F22F32           ADDW     R2,R0,#+815
   \   000000D8   D77F               LDRB     R7,[R2, #+31]
   \   000000DA   93F808C0           LDRB     R12,[R3, #+8]
   \   000000DE   67F3000C           BFI      R12,R7,#+0,#+1
   \   000000E2   83F808C0           STRB     R12,[R3, #+8]
    328          		DtuControl->Cfr_OnOff.M_900M	= Sts->CfrSts[M_900M_PATH].Cfr_OnOff;
   \   000000E6   AF68               LDR      R7,[R5, #+8]
   \   000000E8   00F25033           ADDW     R3,R0,#+848
   \   000000EC   93F805C0           LDRB     R12,[R3, #+5]
   \   000000F0   97F808E0           LDRB     LR,[R7, #+8]
   \   000000F4   6CF3410E           BFI      LR,R12,#+1,#+1
   \   000000F8   87F808E0           STRB     LR,[R7, #+8]
    329          		DtuControl->Cfr_OnOff.S_21G		= Sts->CfrSts[S_21G_PATH].Cfr_OnOff;
   \   000000FC   AF68               LDR      R7,[R5, #+8]
   \   000000FE   92F811C0           LDRB     R12,[R2, #+17]
   \   00000102   97F808E0           LDRB     LR,[R7, #+8]
   \   00000106   6CF3820E           BFI      LR,R12,#+2,#+1
   \   0000010A   87F808E0           STRB     LR,[R7, #+8]
    330          		DtuControl->Cfr_OnOff.M_21G		= Sts->CfrSts[M_21G_PATH].Cfr_OnOff;
   \   0000010E   AF68               LDR      R7,[R5, #+8]
   \   00000110   92F818C0           LDRB     R12,[R2, #+24]
   \   00000114   97F808E0           LDRB     LR,[R7, #+8]
   \   00000118   6CF3C30E           BFI      LR,R12,#+3,#+1
   \   0000011C   87F808E0           STRB     LR,[R7, #+8]
    331          		DtuControl->Cfr_OnOff.S_25G		= Sts->CfrSts[S_25G_PATH].Cfr_OnOff;
   \   00000120   AF68               LDR      R7,[R5, #+8]
   \   00000122   93F80CC0           LDRB     R12,[R3, #+12]
   \   00000126   97F808E0           LDRB     LR,[R7, #+8]
   \   0000012A   6CF3041E           BFI      LR,R12,#+4,#+1
   \   0000012E   87F808E0           STRB     LR,[R7, #+8]
    332          		DtuControl->Cfr_OnOff.M_25G		= Sts->CfrSts[M_25G_PATH].Cfr_OnOff;
   \   00000132   AF68               LDR      R7,[R5, #+8]
   \   00000134   93F813C0           LDRB     R12,[R3, #+19]
   \   00000138   97F808E0           LDRB     LR,[R7, #+8]
   \   0000013C   6CF3451E           BFI      LR,R12,#+5,#+1
   \   00000140   87F808E0           STRB     LR,[R7, #+8]
    333          		
    334          		//-----------------------------------------------------------------------//
    335          		DtuControl->Cfr_Select[F_S_900M_PATH]	= Sts->CfrSts[S_900M_PATH].Cfr_Select;
   \   00000144   AF68               LDR      R7,[R5, #+8]
   \   00000146   90F84FC3           LDRB     R12,[R0, #+847]
   \   0000014A   87F809C0           STRB     R12,[R7, #+9]
    336          		DtuControl->Cfr_Select[F_M_900M_PATH]	= Sts->CfrSts[M_900M_PATH].Cfr_Select;
   \   0000014E   AF68               LDR      R7,[R5, #+8]
   \   00000150   90F856C3           LDRB     R12,[R0, #+854]
   \   00000154   87F80AC0           STRB     R12,[R7, #+10]
    337          		DtuControl->Cfr_Select[F_S_21G_PATH]	= Sts->CfrSts[S_21G_PATH].Cfr_Select;
   \   00000158   AF68               LDR      R7,[R5, #+8]
   \   0000015A   90F841C3           LDRB     R12,[R0, #+833]
   \   0000015E   87F80BC0           STRB     R12,[R7, #+11]
    338          		DtuControl->Cfr_Select[F_M_21G_PATH]	= Sts->CfrSts[M_21G_PATH].Cfr_Select;
   \   00000162   AF68               LDR      R7,[R5, #+8]
   \   00000164   90F848C3           LDRB     R12,[R0, #+840]
   \   00000168   87F80CC0           STRB     R12,[R7, #+12]
    339          		DtuControl->Cfr_Select[F_S_25G_PATH]	= Sts->CfrSts[S_25G_PATH].Cfr_Select;
   \   0000016C   AF68               LDR      R7,[R5, #+8]
   \   0000016E   90F85DC3           LDRB     R12,[R0, #+861]
   \   00000172   87F80DC0           STRB     R12,[R7, #+13]
    340          		DtuControl->Cfr_Select[F_M_25G_PATH]	= Sts->CfrSts[M_25G_PATH].Cfr_Select;
   \   00000176   AF68               LDR      R7,[R5, #+8]
   \   00000178   90F864C3           LDRB     R12,[R0, #+868]
   \   0000017C   87F80EC0           STRB     R12,[R7, #+14]
    341          
    342          		//-----------------------------------------------------------------------//
    343          		DtuControl->Cfr_Threshold[F_S_900M_PATH]	= Sts->CfrSts[S_900M_PATH].Cfr_Threshold;
   \   00000180   AF68               LDR      R7,[R5, #+8]
   \   00000182   90F850C3           LDRB     R12,[R0, #+848]
   \   00000186   87F80FC0           STRB     R12,[R7, #+15]
    344          		DtuControl->Cfr_Threshold[F_M_900M_PATH]	= Sts->CfrSts[M_900M_PATH].Cfr_Threshold;
   \   0000018A   AF68               LDR      R7,[R5, #+8]
   \   0000018C   93F807C0           LDRB     R12,[R3, #+7]
   \   00000190   87F810C0           STRB     R12,[R7, #+16]
    345          		DtuControl->Cfr_Threshold[F_S_21G_PATH]	= Sts->CfrSts[S_21G_PATH].Cfr_Threshold;
   \   00000194   AF68               LDR      R7,[R5, #+8]
   \   00000196   92F813C0           LDRB     R12,[R2, #+19]
   \   0000019A   87F811C0           STRB     R12,[R7, #+17]
    346          		DtuControl->Cfr_Threshold[F_M_21G_PATH]	= Sts->CfrSts[M_21G_PATH].Cfr_Threshold;
   \   0000019E   AF68               LDR      R7,[R5, #+8]
   \   000001A0   92F81AC0           LDRB     R12,[R2, #+26]
   \   000001A4   87F812C0           STRB     R12,[R7, #+18]
    347          		DtuControl->Cfr_Threshold[F_S_25G_PATH]	= Sts->CfrSts[S_25G_PATH].Cfr_Threshold;
   \   000001A8   AF68               LDR      R7,[R5, #+8]
   \   000001AA   93F80EC0           LDRB     R12,[R3, #+14]
   \   000001AE   87F813C0           STRB     R12,[R7, #+19]
    348          		DtuControl->Cfr_Threshold[F_M_25G_PATH]	= Sts->CfrSts[M_25G_PATH].Cfr_Threshold;
   \   000001B2   AF68               LDR      R7,[R5, #+8]
   \   000001B4   5B7D               LDRB     R3,[R3, #+21]
   \   000001B6   3B75               STRB     R3,[R7, #+20]
    349          		
    350          		//-----------------------------------------------------------------------//
    351          		// TDD
    352          		DtuControl->TDD_Type			= Sts->TDD_Type;
   \   000001B8   AB68               LDR      R3,[R5, #+8]
   \   000001BA   90F82F03           LDRB     R0,[R0, #+815]
   \   000001BE   5876               STRB     R0,[R3, #+25]
    353          		DtuControl->DL_Sync_Fix			= Sts->DL_Sync_Fix;
   \   000001C0   A868               LDR      R0,[R5, #+8]
   \   000001C2   5378               LDRB     R3,[R2, #+1]
   \   000001C4   8376               STRB     R3,[R0, #+26]
    354          		DtuControl->UL_Sync_Fix			= Sts->UL_Sync_Fix;
   \   000001C6   A868               LDR      R0,[R5, #+8]
   \   000001C8   9378               LDRB     R3,[R2, #+2]
   \   000001CA   C376               STRB     R3,[R0, #+27]
    355          		DtuControl->DL_Start_Adj[0]		= Sts->DL_Start_Adj[0];
   \   000001CC   A868               LDR      R0,[R5, #+8]
   \   000001CE   D378               LDRB     R3,[R2, #+3]
   \   000001D0   0377               STRB     R3,[R0, #+28]
    356          		DtuControl->DL_Start_Adj[1]		= Sts->DL_Start_Adj[1];
   \   000001D2   A868               LDR      R0,[R5, #+8]
   \   000001D4   1379               LDRB     R3,[R2, #+4]
   \   000001D6   4377               STRB     R3,[R0, #+29]
    357          		DtuControl->DL_End_Adj[0]		= Sts->DL_End_Adj[0];
   \   000001D8   A868               LDR      R0,[R5, #+8]
   \   000001DA   5379               LDRB     R3,[R2, #+5]
   \   000001DC   8377               STRB     R3,[R0, #+30]
    358          		DtuControl->DL_End_Adj[1]		= Sts->DL_End_Adj[1];
   \   000001DE   A868               LDR      R0,[R5, #+8]
   \   000001E0   9379               LDRB     R3,[R2, #+6]
   \   000001E2   C377               STRB     R3,[R0, #+31]
    359          		DtuControl->UL_Start_Adj[0]		= Sts->UL_Start_Adj[0];
   \   000001E4   A868               LDR      R0,[R5, #+8]
   \   000001E6   D379               LDRB     R3,[R2, #+7]
   \   000001E8   80F82030           STRB     R3,[R0, #+32]
    360          		DtuControl->UL_Start_Adj[1]		= Sts->UL_Start_Adj[1];
   \   000001EC   A868               LDR      R0,[R5, #+8]
   \   000001EE   137A               LDRB     R3,[R2, #+8]
   \   000001F0   80F82130           STRB     R3,[R0, #+33]
    361          		DtuControl->UL_End_Adj[0]		= Sts->UL_End_Adj[0];
   \   000001F4   A868               LDR      R0,[R5, #+8]
   \   000001F6   537A               LDRB     R3,[R2, #+9]
   \   000001F8   80F82230           STRB     R3,[R0, #+34]
    362          		DtuControl->UL_End_Adj[1]		= Sts->UL_End_Adj[1];
   \   000001FC   A868               LDR      R0,[R5, #+8]
   \   000001FE   937A               LDRB     R3,[R2, #+10]
   \   00000200   80F82330           STRB     R3,[R0, #+35]
    363          		DtuControl->Noise_Threshold[0]	= Sts->Noise_Threshold[0];
   \   00000204   A868               LDR      R0,[R5, #+8]
   \   00000206   D37A               LDRB     R3,[R2, #+11]
   \   00000208   80F82430           STRB     R3,[R0, #+36]
    364          		DtuControl->Noise_Threshold[1]	= Sts->Noise_Threshold[1];
   \   0000020C   A868               LDR      R0,[R5, #+8]
   \   0000020E   137B               LDRB     R3,[R2, #+12]
   \   00000210   80F82530           STRB     R3,[R0, #+37]
    365          		DtuControl->Signal_Threshold[0]	= Sts->Signal_Threshold[0];
   \   00000214   A868               LDR      R0,[R5, #+8]
   \   00000216   537B               LDRB     R3,[R2, #+13]
   \   00000218   80F82630           STRB     R3,[R0, #+38]
    366          		DtuControl->Signal_Threshold[1]	= Sts->Signal_Threshold[1];
   \   0000021C   A868               LDR      R0,[R5, #+8]
   \   0000021E   937B               LDRB     R3,[R2, #+14]
   \   00000220   80F82730           STRB     R3,[R0, #+39]
    367          		DtuControl->Signal_Threshold[2]	= Sts->Signal_Threshold[2];
   \   00000224   A868               LDR      R0,[R5, #+8]
   \   00000226   D37B               LDRB     R3,[R2, #+15]
   \   00000228   80F82830           STRB     R3,[R0, #+40]
    368          		DtuControl->Signal_Threshold[3]	= Sts->Signal_Threshold[3];
   \   0000022C   A868               LDR      R0,[R5, #+8]
   \   0000022E   127C               LDRB     R2,[R2, #+16]
   \   00000230   80F82920           STRB     R2,[R0, #+41]
   \   00000234   03A8               ADD      R0,SP,#+12
   \   00000236   0322               MOVS     R2,#+3
   \   00000238   ........           BL       __aeabi_memcpy
   \   0000023C   02A8               ADD      R0,SP,#+8
   \   0000023E   3146               MOV      R1,R6
   \   00000240   0322               MOVS     R2,#+3
   \   00000242   ........           BL       __aeabi_memcpy
    369          
    370          		//-----------------------------------------------------------------------//
    371          		SioDataAckTx(MyID, DtuID, (INT8U*)DtuControl, sizeof(__F_MU_CTRL), ControlRQST, toPtr);
   \   00000246   0194               STR      R4,[SP, #+4]
   \   00000248   2120               MOVS     R0,#+33
   \   0000024A   0090               STR      R0,[SP, #+0]
   \   0000024C   2A23               MOVS     R3,#+42
   \   0000024E   AA68               LDR      R2,[R5, #+8]
   \   00000250   0FE0               B.N      ??DtuInitControl_2
    372          
    373          		//SioDataAckTx(MyID, DtuID, (INT8U*)DtuControl, sizeof(__F_MU_CTRL), ControlRQST, PcSer);
    374          	}
    375          	else
    376          	{
    377          		DtuInitFlag = 2;
   \                     ??DtuInitControl_1:
   \   00000252   0220               MOVS     R0,#+2
   \   00000254   6870               STRB     R0,[R5, #+1]
   \   00000256   03A8               ADD      R0,SP,#+12
   \   00000258   0322               MOVS     R2,#+3
   \   0000025A   ........           BL       __aeabi_memcpy
   \   0000025E   02A8               ADD      R0,SP,#+8
   \   00000260   3146               MOV      R1,R6
   \   00000262   0322               MOVS     R2,#+3
   \   00000264   ........           BL       __aeabi_memcpy
    378          		SioDataAckTx(MyID, DtuID, (INT8U*)NULL, 0, StatusRQST, toPtr);
   \   00000268   0194               STR      R4,[SP, #+4]
   \   0000026A   2020               MOVS     R0,#+32
   \   0000026C   0090               STR      R0,[SP, #+0]
   \   0000026E   0023               MOVS     R3,#+0
   \   00000270   0022               MOVS     R2,#+0
   \                     ??DtuInitControl_2:
   \   00000272   0399               LDR      R1,[SP, #+12]
   \   00000274   0298               LDR      R0,[SP, #+8]
   \   00000276   ........           BL       SioDataAckTx
    379          	}
    380          }
   \   0000027A   05B0               ADD      SP,SP,#+20
   \   0000027C   F0BD               POP      {R4-R7,PC}       ;; return
    381          
    382          //=======================================================================//

   \                                 In section .text, align 2, keep-with-next
    383          INT8S OpConvert(INT16S OptVal)
    384          {
    385          	INT8S	RetVal = -50;
    386          	INT8S	Round;
    387          	INT16S	iVal;
    388          
    389          	if(OptVal < -500)	return	RetVal;
   \                     OpConvert:
   \   00000000   ....               LDR.N    R1,??DataTable7_13  ;; 0xfffffe0c
   \   00000002   8842               CMP      R0,R1
   \   00000004   02DA               BGE.N    ??OpConvert_0
   \   00000006   6FF03100           MVN      R0,#+49
   \   0000000A   7047               BX       LR
    390          	
    391          	iVal = abs(OptVal%10);
   \                     ??OpConvert_0:
   \   0000000C   0146               MOV      R1,R0
   \   0000000E   0A22               MOVS     R2,#+10
   \   00000010   91FBF2F2           SDIV     R2,R1,R2
   \   00000014   02EB8203           ADD      R3,R2,R2, LSL #+2
   \   00000018   B1EB4302           SUBS     R2,R1,R3, LSL #+1
   \   0000001C   48BF               IT       MI 
   \   0000001E   5242               RSBMI    R2,R2,#+0
   \   00000020   12B2               SXTH     R2,R2
    392          //	SerPtr->printf("\n %d -> %d  / ", OptVal, iVal);
    393          
    394          	if((iVal == 9)||(iVal == 8)||(iVal == 7)||(iVal == 4)||(iVal == 3))
   \   00000022   092A               CMP      R2,#+9
   \   00000024   07D0               BEQ.N    ??OpConvert_1
   \   00000026   082A               CMP      R2,#+8
   \   00000028   05D0               BEQ.N    ??OpConvert_1
   \   0000002A   072A               CMP      R2,#+7
   \   0000002C   03D0               BEQ.N    ??OpConvert_1
   \   0000002E   042A               CMP      R2,#+4
   \   00000030   01D0               BEQ.N    ??OpConvert_1
   \   00000032   032A               CMP      R2,#+3
   \   00000034   05D1               BNE.N    ??OpConvert_2
    395          	{
    396          		if(OptVal >= 0)	Round = 1;
   \                     ??OpConvert_1:
   \   00000036   0028               CMP      R0,#+0
   \   00000038   4CBF               ITE      MI 
   \   0000003A   4FF0FF30           MOVMI    R0,#-1
   \   0000003E   0120               MOVPL    R0,#+1
   \   00000040   00E0               B.N      ??OpConvert_3
    397          		else			Round = -1;
    398          	}
    399          	else	Round = 0;
   \                     ??OpConvert_2:
   \   00000042   0020               MOVS     R0,#+0
    400          
    401          //	SerPtr->printf(" Round = %d  / ", Round);
    402          
    403          	RetVal = (OptVal/5) + Round;
    404          
    405          	return	RetVal;
   \                     ??OpConvert_3:
   \   00000044   0522               MOVS     R2,#+5
   \   00000046   91FBF2F1           SDIV     R1,R1,R2
   \   0000004A   4018               ADDS     R0,R0,R1
   \   0000004C   40B2               SXTB     R0,R0
   \   0000004E   7047               BX       LR               ;; return
    406          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     DtuLinkFailCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     pUSART4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   ........           DC32     MuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     Ser4TaskStk+0x4AC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   ........           DC32     Ser4Task

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   ........           DC32     MyID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   ........           DC32     DtuID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   ........           DC32     DistFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   ........           DC32     tTestFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   ........           DC32     Sio_Crtl_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   ........           DC32     PcSer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   ........           DC32     DtuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   ........           DC32     SysInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0CFEFFFF           DC32     0xfffffe0c
    407          
    408          
    409          //=======================================================================//
    410          // End of Source File
    411          //=======================================================================//
    412          
    413          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     Dtu2Status              40
     DtuInitControl          40
     DtuProtocolComCheck      8
     EndDtuCommand            0
     GetDtuCommand            8
     OpConvert                0
     Ser4Init                 8
     Ser4Task                48


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     Ser4TaskStk         1200
     DtuSerB               48
     DtuLinkFailCnt      4200
     DtuInitFlag
     Dtu_Idle
     DtuSer
     DtuControl
     DtuControlB
     Sdtu
     Rdtu
     Ser4Init             116
     Ser4Task             202
     DtuProtocolComCheck   86
     GetDtuCommand         28
     EndDtuCommand         10
     Dtu2Status           762
     DtuInitControl       638
     OpConvert             80
     ??DataTable7           4
     ??DataTable7_1         4
     ??DataTable7_2         4
     ??DataTable7_3         4
     ??DataTable7_4         4
     ??DataTable7_5         4
     ??DataTable7_6         4
     ??DataTable7_7         4
     ??DataTable7_8         4
     ??DataTable7_9         4
     ??DataTable7_10        4
     ??DataTable7_11        4
     ??DataTable7_12        4
     ??DataTable7_13        4

 
    48 bytes in section .bss
 4 200 bytes in section .data
 1 978 bytes in section .text
 1 200 bytes in section iram
 
 1 978 bytes of CODE memory
 5 448 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     08/Feb/2018  09:39:45 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\dev\adf411x\adf411x.c                             #
#    Command line =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\dev\adf411x\adf411x.c -lC                         #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\ -o D:\Project\TRIO\2.TRIO-MR\appl_stm207_201 #
#                    41204_RvsALC_20151223\out\ --endian=little               #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\include\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207 #
#                    _20141204_RvsALC_20151223\STM32F2xx_StdPeriph_Driver_v12 #
#                    12\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_Rv #
#                    sALC_20151223\STM32F2xx_StdPeriph_Driver_v1212\inc\ -I   #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-CPU\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_ #
#                    20141204_RvsALC_20151223\uC-LIB\ -I                      #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uCOS-II\Ports\ -I D:\Project\TRIO\2.TRIO-MR\appl_ #
#                    stm207_20141204_RvsALC_20151223\uCOS-II\Source\ -I       #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-Probe\ -Oh --use_c++_inline                    #
#    List file    =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\adf411x.lst                                   #
#    Object file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\adf411x.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20151223\dev\adf411x\adf411x.c
      1          /*******************************************************************************
      2           *
      3           * This module contains the function HMS39C7092 original source file, a function
      4           * whole things  initializations - global, include function and so on
      5           *
      6           *
      7           * Note that this function is called before the data segments are
      8           * initialized, this means that this function cannot rely on the
      9           * values of global or static variables.
     10           *
     11           *
     12           * Copyright 2006- bizistyle(bgyoon@hanafos.com) All rights reserved.
     13           * - used for LMX2306/LMX2316/LMX411x
     14           
     15           * $Revision: 0.1 $
     16           * $Revision date: 2006.08.__
     17           *
     18            ******************************************************************************/
     19          #define PLL_C
     20           
     21          #include "../include/main.h"

   \                                 In section .bss, align 4
   \   __absolute INT32U dReffreq[2]
   \                     dReffreq:
   \   00000000                      DS8 8
   \   __absolute INT32U dStep[2]
   \                     dStep:
   \   00000008                      DS8 8
   \   __absolute INT32U dPre[2]
   \                     dPre:
   \   00000010                      DS8 8
     22          
     23          #define	__PRE		32
     24          
     25          //#define	Pll232x_debug
     26          
     27          #define CLKDELAY	ForDelay(10)
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void SetPllClk(INT8U Path)
     30          {
     31          	     if(Path == 0)	PLL_CLK = SET;
   \                     SetPllClk:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2801             CMPNE    R0,#+1
     32          	else if(Path == 1)	PLL_CLK = SET;
   \   00000006   0xD104             BNE.N    ??SetPllClk_0
   \   00000008   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000010   0x6001             STR      R1,[R0, #+0]
     33          }
   \                     ??SetPllClk_0:
   \   00000012   0x4770             BX       LR               ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void RstPllClk(INT8U Path)
     36          {
     37          	     if(Path == 0)	PLL_CLK = RESET;
   \                     RstPllClk:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2801             CMPNE    R0,#+1
     38          	else if(Path == 1)	PLL_CLK = RESET;
   \   00000006   0xD104             BNE.N    ??RstPllClk_0
   \   00000008   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xF021 0x0180      BIC      R1,R1,#0x80
   \   00000010   0x6001             STR      R1,[R0, #+0]
     39          }
   \                     ??RstPllClk_0:
   \   00000012   0x4770             BX       LR               ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void SetPllData(INT8U Path)
     42          {
   \                     SetPllData:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     43          	CLKDELAY;	
   \   00000004   0x200A             MOVS     R0,#+10
   \   00000006   0x.... 0x....      BL       ForDelay
     44          	     if(Path == 0)	PLL_DATA = SET;
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2C01             CMPNE    R4,#+1
     45          	else if(Path == 1)	PLL_DATA = SET;
   \   00000010   0xD104             BNE.N    ??SetPllData_0
   \   00000012   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     46          }
   \                     ??SetPllData_0:
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void RstPllData(INT8U Path)
     49          {
   \                     RstPllData:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     50          	CLKDELAY;	
   \   00000004   0x200A             MOVS     R0,#+10
   \   00000006   0x.... 0x....      BL       ForDelay
     51          	     if(Path == 0) 	PLL_DATA = RESET;
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2C01             CMPNE    R4,#+1
     52          	else if(Path == 1)	PLL_DATA = RESET;
   \   00000010   0xD104             BNE.N    ??RstPllData_0
   \   00000012   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xF021 0x0110      BIC      R1,R1,#0x10
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     53          }
   \                     ??RstPllData_0:
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     54          
     55          ////////////////////////////////////////////////////

   \                                 In section .text, align 2, keep-with-next
     56          void SetPllEn(INT8U Path)
     57          {
     58          #if 0
     59          	     if(Path == 0)	PLLEN_LTE_A2 = SET;
     60          	else if(Path == 1)	PLLEN_LTE_A2_1 = SET;
     61          #endif
     62          #if 1
     63          	     if(Path == 0)	PLLEN_LTE_A2 = RESET;
   \                     SetPllEn:
   \   00000000   0xB920             CBNZ.N   R0,??SetPllEn_0
   \   00000002   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40020814
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF021 0x0140      BIC      R1,R1,#0x40
   \   0000000A   0xE005             B.N      ??SetPllEn_1
     64          	else if(Path == 1)	PLLEN_LTE = RESET;
   \                     ??SetPllEn_0:
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD104             BNE.N    ??SetPllEn_2
   \   00000010   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF421 0x7180      BIC      R1,R1,#0x100
   \                     ??SetPllEn_1:
   \   00000018   0x6001             STR      R1,[R0, #+0]
     65          #endif	
     66          
     67          }
   \                     ??SetPllEn_2:
   \   0000001A   0x4770             BX       LR               ;; return
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void RstPllEn(INT8U Path)
     70          {
     71          #if 0
     72          	     if(Path == 0)	PLLEN_LTE_A2 = RESET;
     73          	else if(Path == 1)	PLLEN_LTE_A2_1 = RESET;
     74          #endif
     75          #if 1
     76          	     if(Path == 0)	PLLEN_LTE_A2 = SET;
   \                     RstPllEn:
   \   00000000   0xB920             CBNZ.N   R0,??RstPllEn_0
   \   00000002   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40020814
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0xF041 0x0140      ORR      R1,R1,#0x40
   \   0000000A   0xE006             B.N      ??RstPllEn_1
     77          	else if(Path == 1)	PLLEN_LTE = SET;
   \                     ??RstPllEn_0:
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD105             BNE.N    ??RstPllEn_2
   \   00000010   0x....             LDR.N    R0,??DataTable7  ;; 0x40020414
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF44F 0x7280      MOV      R2,#+256
   \   00000018   0x4311             ORRS     R1,R2,R1
   \                     ??RstPllEn_1:
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     78          #endif	
     79          
     80          }
   \                     ??RstPllEn_2:
   \   0000001C   0x4770             BX       LR               ;; return
     81          
     82          //rfrq: Reference Freq,  dRatio: dRatio, PR: Devide Prescaler

   \                                 In section .text, align 2, keep-with-next
     83          void Pll411xInit(INT32U rfrq, INT32U dRatio, INT8U Path)
     84          {
     85          	dReffreq[Path] = rfrq;
   \                     Pll411xInit:
   \   00000000   0x....             LDR.N    R3,??DataTable7_2
   \   00000002   0xF843 0x0022      STR      R0,[R3, R2, LSL #+2]
     86          	dStep[Path] = dRatio;
   \   00000006   0xEB03 0x0282      ADD      R2,R3,R2, LSL #+2
   \   0000000A   0x6091             STR      R1,[R2, #+8]
     87          	dPre[Path] = rfrq/dRatio;
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0x6110             STR      R0,[R2, #+16]
     88          }
   \   00000012   0x4770             BX       LR               ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void Pll411x_Output(INT32U fvco, INT8U Path)
     91          {
   \                     Pll411x_Output:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4688             MOV      R8,R1
     92          	INT32U tMsb = (1 << 23);
     93          	INT32U i = 0;
     94          
     95           	SetpPCA9555SDAOutMode();
   \   00000008   0x.... 0x....      BL       SetpPCA9555SDAOutMode
   \   0000000C   0x....             LDR.N    R0,??DataTable7_2
   \   0000000E   0xEB00 0x0088      ADD      R0,R0,R8, LSL #+2
   \   00000012   0x6881             LDR      R1,[R0, #+8]
   \   00000014   0xFBB5 0xF1F1      UDIV     R1,R5,R1
     96          
     97          //	SerPtr->printf("\nfvco[%u], dStep[%d], dPre[%d]", fvco,dStep[Path],dPre[Path]);
     98          	
     99          	fvco = fvco/dStep[Path];	// 1.8Ghz = 18000 -> 1800000000
    100          	{
    101          		_RCounterReg RCounter;
    102          		_NCounterReg NCounter;
    103          		_FUNCReg Func;
    104          
    105          		RCounter.Data = 0;				// init
    106          		NCounter.Data = 0;				// init
    107          		Func.Data = 0;
    108          
    109          		// Reference Counter
    110          		RCounter.Bit.C = __RCounter;
    111          		RCounter.Bit.R = dPre[Path];	// RefFreq / FreqStep
    112          		RCounter.Bit.DLY = 0;			//RCounter.Bit.DLY = 1;
   \   00000018   0x6900             LDR      R0,[R0, #+16]
   \   0000001A   0xF64F 0x72FC      MOVW     R2,#+65532
   \   0000001E   0xEA02 0x0580      AND      R5,R2,R0, LSL #+2
    113          
    114          		// AB Counter
    115          		NCounter.Bit.C = __NCounter;
    116          		NCounter.Bit.A = fvco%__PRE;
    117          		NCounter.Bit.B = fvco/__PRE;
    118          		NCounter.Bit.CPGAIN = 0;	// NCounter.Bit.CPGAIN = 1;
   \   00000022   0xF001 0x001F      AND      R0,R1,#0x1F
   \   00000026   0x....             LDR.N    R2,??DataTable7_3  ;; 0x1fff00
   \   00000028   0xEA02 0x01C1      AND      R1,R2,R1, LSL #+3
   \   0000002C   0xEA41 0x0080      ORR      R0,R1,R0, LSL #+2
   \   00000030   0xF040 0x0701      ORR      R7,R0,#0x1
    119          
    120          		// Function
    121          		Func.Bit.C = __FUNCSet;
    122          		Func.Bit.LD = __LDDIG;
    123          		Func.Bit.POL = __POS;//__NEG;
    124          		Func.Bit.CUR1SET = 7;
    125          		Func.Bit.CUR2SET = 7;
    126          		Func.Bit.PLVALUE = PreScl;
   \   00000034   0x....             LDR.N    R6,??DataTable7_4  ;; 0x9f8092
    127          		
    128          		#ifdef Pll232x_debug
    129          		{
    130          			SerPtr->printf("\nR Counter: %03x \n", RCounter.Grp.tot & 0xffffff);
    131          			SerPtr->printf("N Counter: %03x \n", NCounter.Grp.tot & 0xffffff);
    132          			SerPtr->printf("F Counter: %03x \n", Func.Grp.tot & 0xffffff);
    133          		}
    134          		#endif
    135          
    136          		// R Counter Program modes
    137          
    138          		SetPllEn(Path);
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       SetPllEn
    139          		ForDelay(20);
   \   0000003C   0x2014             MOVS     R0,#+20
   \   0000003E   0x.... 0x....      BL       ForDelay
    140          		RstPllEn(Path);
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0x.... 0x....      BL       RstPllEn
    141          		ForDelay(20);
   \   00000048   0x2014             MOVS     R0,#+20
   \   0000004A   0x.... 0x....      BL       ForDelay
    142          
    143          		for(i = 0; i < 24; i++)			
   \   0000004E   0x2418             MOVS     R4,#+24
    144          		{	
    145          			if(RCounter.Grp.tot & tMsb)	SetPllData(Path);
   \                     ??Pll411x_Output_0:
   \   00000050   0x0228             LSLS     R0,R5,#+8
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0xD502             BPL.N    ??Pll411x_Output_1
   \   00000056   0x.... 0x....      BL       SetPllData
   \   0000005A   0xE001             B.N      ??Pll411x_Output_2
    146          			else						RstPllData(Path);
   \                     ??Pll411x_Output_1:
   \   0000005C   0x.... 0x....      BL       RstPllData
    147          
    148          			RCounter.Grp.tot <<= 1;
   \                     ??Pll411x_Output_2:
   \   00000060   0x0068             LSLS     R0,R5,#+1
   \   00000062   0xF360 0x0517      BFI      R5,R0,#+0,#+24
    149          			SetPllClk(Path);
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       SetPllClk
    150          			
    151          //			ForDelay(20);
    152          			RstPllClk(Path);
   \   0000006C   0x4640             MOV      R0,R8
   \   0000006E   0x.... 0x....      BL       RstPllClk
    153          			
    154          //			ForDelay(20);
    155          		}	
   \   00000072   0x1E64             SUBS     R4,R4,#+1
   \   00000074   0xD1EC             BNE.N    ??Pll411x_Output_0
    156          		
    157          		ForDelay(20);
   \   00000076   0x2014             MOVS     R0,#+20
   \   00000078   0x.... 0x....      BL       ForDelay
    158          		SetPllEn(Path);
   \   0000007C   0x4640             MOV      R0,R8
   \   0000007E   0x.... 0x....      BL       SetPllEn
    159          		ForDelay(20);///
   \   00000082   0x2014             MOVS     R0,#+20
   \   00000084   0x.... 0x....      BL       ForDelay
    160          
    161          		// AB Counter Program modes	(5bit)
    162          		RstPllEn(Path);
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x.... 0x....      BL       RstPllEn
    163          	//	ForDelay(20);
    164          	
    165          		ForDelay(20);
   \   0000008E   0x2014             MOVS     R0,#+20
   \   00000090   0x.... 0x....      BL       ForDelay
    166          		for(i = 0; i < 24; i++) 		
   \   00000094   0x2518             MOVS     R5,#+24
    167          		{	
    168          			if(NCounter.Grp.tot & tMsb)	SetPllData(Path);
   \                     ??Pll411x_Output_3:
   \   00000096   0x0238             LSLS     R0,R7,#+8
   \   00000098   0x4640             MOV      R0,R8
   \   0000009A   0xD502             BPL.N    ??Pll411x_Output_4
   \   0000009C   0x.... 0x....      BL       SetPllData
   \   000000A0   0xE001             B.N      ??Pll411x_Output_5
    169          			else					 	RstPllData(Path);
   \                     ??Pll411x_Output_4:
   \   000000A2   0x.... 0x....      BL       RstPllData
    170          
    171          			NCounter.Grp.tot <<= 1; 
   \                     ??Pll411x_Output_5:
   \   000000A6   0x0078             LSLS     R0,R7,#+1
   \   000000A8   0xF360 0x0717      BFI      R7,R0,#+0,#+24
    172          			SetPllClk(Path);
   \   000000AC   0x4640             MOV      R0,R8
   \   000000AE   0x.... 0x....      BL       SetPllClk
    173          //			ForDelay(20);
    174          			RstPllClk(Path);
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x.... 0x....      BL       RstPllClk
    175          //			ForDelay(20);
    176          		}		
   \   000000B8   0x1E6D             SUBS     R5,R5,#+1
   \   000000BA   0xD1EC             BNE.N    ??Pll411x_Output_3
    177          
    178          		
    179          		ForDelay(20);////
   \   000000BC   0x2014             MOVS     R0,#+20
   \   000000BE   0x.... 0x....      BL       ForDelay
    180          		SetPllEn(Path);
   \   000000C2   0x4640             MOV      R0,R8
   \   000000C4   0x.... 0x....      BL       SetPllEn
    181          		
    182          		// Func Program modes	(5bit)
    183          		
    184          		ForDelay(20);///
   \   000000C8   0x2014             MOVS     R0,#+20
   \   000000CA   0x.... 0x....      BL       ForDelay
    185          		RstPllEn(Path);
   \   000000CE   0x4640             MOV      R0,R8
   \   000000D0   0x.... 0x....      BL       RstPllEn
    186          		ForDelay(20);///a
   \   000000D4   0x2014             MOVS     R0,#+20
   \   000000D6   0x.... 0x....      BL       ForDelay
    187          		for(i = 0; i < 24; i++) 		
   \   000000DA   0x2518             MOVS     R5,#+24
    188          		{	
    189          			if(Func.Grp.tot & tMsb) 	SetPllData(Path);
   \                     ??Pll411x_Output_6:
   \   000000DC   0x0230             LSLS     R0,R6,#+8
   \   000000DE   0x4640             MOV      R0,R8
   \   000000E0   0xD502             BPL.N    ??Pll411x_Output_7
   \   000000E2   0x.... 0x....      BL       SetPllData
   \   000000E6   0xE001             B.N      ??Pll411x_Output_8
    190          			else						RstPllData(Path);
   \                     ??Pll411x_Output_7:
   \   000000E8   0x.... 0x....      BL       RstPllData
    191          		
    192          			Func.Grp.tot <<= 1; 
   \                     ??Pll411x_Output_8:
   \   000000EC   0x0070             LSLS     R0,R6,#+1
   \   000000EE   0xF360 0x0617      BFI      R6,R0,#+0,#+24
    193          			SetPllClk(Path);
   \   000000F2   0x4640             MOV      R0,R8
   \   000000F4   0x.... 0x....      BL       SetPllClk
    194          			
    195          //			ForDelay(20);//
    196          			RstPllClk(Path);
   \   000000F8   0x4640             MOV      R0,R8
   \   000000FA   0x.... 0x....      BL       RstPllClk
    197          //			ForDelay(20);///
    198          		}		
   \   000000FE   0x1E6D             SUBS     R5,R5,#+1
   \   00000100   0xD1EC             BNE.N    ??Pll411x_Output_6
    199          		
    200          		ForDelay(20);///
   \   00000102   0x2014             MOVS     R0,#+20
   \   00000104   0x.... 0x....      BL       ForDelay
    201          		SetPllEn(Path);
   \   00000108   0x4640             MOV      R0,R8
   \   0000010A   0x.... 0x....      BL       SetPllEn
    202          		ForDelay(20); //
   \   0000010E   0x2014             MOVS     R0,#+20
   \   00000110   0x.... 0x....      BL       ForDelay
    203          		RstPllEn(Path);
   \   00000114   0x4640             MOV      R0,R8
   \   00000116   0x.... 0x....      BL       RstPllEn
    204          		ForDelay(20);  //
   \   0000011A   0x2014             MOVS     R0,#+20
   \   0000011C   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000120   0x.... 0x....      B.W      ForDelay
    205          
    206          	}
    207          	////////////////////////////////////////////////////////////	
    208          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40020414         DC32     0x40020414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40020814         DC32     0x40020814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     dReffreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x001FFF00         DC32     0x1fff00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x009F8092         DC32     0x9f8092
    209          
    210          ////////////////////////////////////////////////////////////////////////////////
    211          // End of Source File
    212          /////////////////////
    213          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Pll411xInit
       24  Pll411x_Output
              0 -> ForDelay
             24 -> ForDelay
             24 -> RstPllClk
             24 -> RstPllData
             24 -> RstPllEn
             24 -> SetPllClk
             24 -> SetPllData
             24 -> SetPllEn
             24 -> SetpPCA9555SDAOutMode
        0  RstPllClk
        8  RstPllData
              8 -> ForDelay
        0  RstPllEn
        0  SetPllClk
        8  SetPllData
              8 -> ForDelay
        0  SetPllEn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
      20  Pll411xInit
     292  Pll411x_Output
      20  RstPllClk
      30  RstPllData
      30  RstPllEn
      20  SetPllClk
      30  SetPllData
      28  SetPllEn
      24  dReffreq
          dStep
          dPre

 
  24 bytes in section .bss
 490 bytes in section .text
 
 490 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none

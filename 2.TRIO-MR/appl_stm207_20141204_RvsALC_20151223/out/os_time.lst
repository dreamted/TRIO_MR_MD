###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     08/Feb/2018  09:39:59 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uCOS-II\Source\os_time.c                          #
#    Command line =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uCOS-II\Source\os_time.c -lC                      #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\ -o D:\Project\TRIO\2.TRIO-MR\appl_stm207_201 #
#                    41204_RvsALC_20151223\out\ --endian=little               #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.0\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\include\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207 #
#                    _20141204_RvsALC_20151223\STM32F2xx_StdPeriph_Driver_v12 #
#                    12\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_Rv #
#                    sALC_20151223\STM32F2xx_StdPeriph_Driver_v1212\inc\ -I   #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-CPU\ -I D:\Project\TRIO\2.TRIO-MR\appl_stm207_ #
#                    20141204_RvsALC_20151223\uC-LIB\ -I                      #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uCOS-II\Ports\ -I D:\Project\TRIO\2.TRIO-MR\appl_ #
#                    stm207_20141204_RvsALC_20151223\uCOS-II\Source\ -I       #
#                    D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\uC-Probe\ -Oh --use_c++_inline                    #
#    List file    =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\os_time.lst                                   #
#    Object file  =  D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20 #
#                    151223\out\os_time.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\TRIO\2.TRIO-MR\appl_stm207_20141204_RvsALC_20151223\uCOS-II\Source\os_time.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                             TIME MANAGEMENT
      6          *
      7          *                          (c) Copyright 1992-2007, Jean J. Labrosse, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_TIME.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.85
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          
     26          #include <ucos_ii.h>
     27          #endif
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                DELAY TASK 'n' TICKS   (n from 0 to 65535)
     32          *
     33          * Description: This function is called to delay execution of the currently running task until the
     34          *              specified number of system ticks expires.  This, of course, directly equates to delaying
     35          *              the current task for some time to expire.  No delay will result If the specified delay is
     36          *              0.  If the specified delay is greater than 0 then, a context switch will result.
     37          *
     38          * Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
     39          *                        Note that by specifying 0, the task will not be delayed.
     40          *
     41          * Returns    : none
     42          *********************************************************************************************************
     43          */
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void  OSTimeDly (INT16U ticks)
     46          {
   \                     OSTimeDly:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
     47              INT8U      y;
     48          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     49              OS_CPU_SR  cpu_sr = 0;
     50          #endif
     51          
     52          
     53          
     54              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xB9D0             CBNZ.N   R0,??OSTimeDly_0
     55                  return;
     56              }
     57              if (ticks > 0) {                             /* 0 means no delay!                                  */
   \   0000000A   0xB1CC             CBZ.N    R4,??OSTimeDly_0
     58                  OS_ENTER_CRITICAL();
   \   0000000C   0x.... 0x....      BL       OS_CPU_SR_Save
     59                  y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   \   00000010   0x....             LDR.N    R1,??DataTable4_1
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xF201 0x021A      ADDW     R2,R1,#+26
   \   00000018   0x7993             LDRB     R3,[R2, #+6]
     60                  OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   \   0000001A   0x....             LDR.N    R5,??DataTable4_2
   \   0000001C   0x5D5E             LDRB     R6,[R3, R5]
   \   0000001E   0x79D7             LDRB     R7,[R2, #+7]
   \   00000020   0x43BE             BICS     R6,R6,R7
   \   00000022   0x555E             STRB     R6,[R3, R5]
     61                  if (OSRdyTbl[y] == 0) {
   \   00000024   0xD105             BNE.N    ??OSTimeDly_1
     62                      OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   \   00000026   0x....             LDR.N    R3,??DataTable4_3
   \   00000028   0x781D             LDRB     R5,[R3, #+0]
   \   0000002A   0x7A12             LDRB     R2,[R2, #+8]
   \   0000002C   0xEA25 0x0202      BIC      R2,R5,R2
   \   00000030   0x701A             STRB     R2,[R3, #+0]
     63                  }
     64                  OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   \                     ??OSTimeDly_1:
   \   00000032   0x834C             STRH     R4,[R1, #+26]
     65                  OS_EXIT_CRITICAL();
   \   00000034   0x.... 0x....      BL       OS_CPU_SR_Restore
     66                  OS_Sched();                              /* Find next task to run!                             */
   \   00000038   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   0000003C   0x.... 0x....      B.W      OS_Sched
     67              }
   \                     ??OSTimeDly_0:
   \   00000040   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     68          }
     69          /*$PAGE*/
     70          /*
     71          *********************************************************************************************************
     72          *                                     DELAY TASK FOR SPECIFIED TIME
     73          *
     74          * Description: This function is called to delay execution of the currently running task until some time
     75          *              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
     76          *              MILLISECONDS instead of ticks.
     77          *
     78          * Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
     79          *              minutes   specifies the number of minutes (max. 59)
     80          *              seconds   specifies the number of seconds (max. 59)
     81          *              milli     specifies the number of milliseconds (max. 999)
     82          *
     83          * Returns    : OS_ERR_NONE
     84          *              OS_ERR_TIME_INVALID_MINUTES
     85          *              OS_ERR_TIME_INVALID_SECONDS
     86          *              OS_ERR_TIME_INVALID_MS
     87          *              OS_ERR_TIME_ZERO_DLY
     88          *              OS_ERR_TIME_DLY_ISR
     89          *
     90          * Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
     91          *              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
     92          *              set to 0.  The actual delay is rounded to the nearest tick.
     93          *********************************************************************************************************
     94          */
     95          
     96          #if OS_TIME_DLY_HMSM_EN > 0

   \                                 In section .text, align 2, keep-with-next
     97          INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
     98          {
   \                     OSTimeDlyHMSM:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     99              INT32U ticks;
    100              INT16U loops;
    101          
    102          
    103              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \   00000002   0x....             LDR.N    R4,??DataTable4
   \   00000004   0x7824             LDRB     R4,[R4, #+0]
   \   00000006   0xB10C             CBZ.N    R4,??OSTimeDlyHMSM_0
    104                  return (OS_ERR_TIME_DLY_ISR);
   \   00000008   0x2055             MOVS     R0,#+85
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    105              }
    106          #if OS_ARG_CHK_EN > 0
    107              if (hours == 0) {
    108                  if (minutes == 0) {
    109                      if (seconds == 0) {
    110                          if (ms == 0) {
    111                              return (OS_ERR_TIME_ZERO_DLY);
    112                          }
    113                      }
    114                  }
    115              }
    116              if (minutes > 59) {
    117                  return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    118              }
    119              if (seconds > 59) {
    120                  return (OS_ERR_TIME_INVALID_SECONDS);
    121              }
    122              if (ms > 999) {
    123                  return (OS_ERR_TIME_INVALID_MS);
    124              }
    125          #endif
    126                                                           /* Compute the total number of clock ticks required.. */
    127                                                           /* .. (rounded to the nearest tick)                   */
    128              ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    129                    + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   \                     ??OSTimeDlyHMSM_0:
   \   0000000C   0xF44F 0x747A      MOV      R4,#+1000
   \   00000010   0xF44F 0x6561      MOV      R5,#+3600
   \   00000014   0xEBC1 0x1601      RSB      R6,R1,R1, LSL #+4
   \   00000018   0x00B1             LSLS     R1,R6,#+2
   \   0000001A   0xFB05 0x1000      MLA      R0,R5,R0,R1
   \   0000001E   0x1810             ADDS     R0,R2,R0
   \   00000020   0xFB04 0xF103      MUL      R1,R4,R3
   \   00000024   0xFBB1 0xF1F4      UDIV     R1,R1,R4
   \   00000028   0xFB04 0x1000      MLA      R0,R4,R0,R1
    130              loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   \   0000002C   0x0C04             LSRS     R4,R0,#+16
    131              ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    132              OSTimeDly((INT16U)ticks);
   \   0000002E   0xB280             UXTH     R0,R0
   \   00000030   0x.... 0x....      BL       OSTimeDly
   \   00000034   0xB15C             CBZ.N    R4,??OSTimeDlyHMSM_1
    133              while (loops > 0) {
    134                  OSTimeDly((INT16U)32768u);
   \                     ??OSTimeDlyHMSM_2:
   \   00000036   0xF44F 0x4000      MOV      R0,#+32768
   \   0000003A   0x.... 0x....      BL       OSTimeDly
    135                  OSTimeDly((INT16U)32768u);
   \   0000003E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000042   0x.... 0x....      BL       OSTimeDly
    136                  loops--;
   \   00000046   0x1E64             SUBS     R4,R4,#+1
   \   00000048   0xB2A4             UXTH     R4,R4
   \   0000004A   0x2C00             CMP      R4,#+0
   \   0000004C   0xD1F3             BNE.N    ??OSTimeDlyHMSM_2
    137              }
    138              return (OS_ERR_NONE);
   \                     ??OSTimeDlyHMSM_1:
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
    139          }
    140          #endif
    141          /*$PAGE*/
    142          /*
    143          *********************************************************************************************************
    144          *                                         RESUME A DELAYED TASK
    145          *
    146          * Description: This function is used resume a task that has been delayed through a call to either
    147          *              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
    148          *              task that is waiting for an event with timeout.  This would make the task look
    149          *              like a timeout occurred.
    150          *
    151          *              Also, you cannot resume a task that has called OSTimeDlyHMSM() with a combined time that
    152          *              exceeds 65535 clock ticks.  In other words, if the clock tick runs at 100 Hz then, you will
    153          *              not be able to resume a delayed task that called OSTimeDlyHMSM(0, 10, 55, 350) or higher:
    154          *
    155          *                  (10 Minutes * 60 + 55 Seconds + 0.35) * 100 ticks/second.
    156          *
    157          * Arguments  : prio                      specifies the priority of the task to resume
    158          *
    159          * Returns    : OS_ERR_NONE               Task has been resumed
    160          *              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
    161          *                                        (i.e. >= OS_LOWEST_PRIO)
    162          *              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
    163          *              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a Mutex.
    164          *********************************************************************************************************
    165          */
    166          
    167          #if OS_TIME_DLY_RESUME_EN > 0

   \                                 In section .text, align 2, keep-with-next
    168          INT8U  OSTimeDlyResume (INT8U prio)
    169          {
   \                     OSTimeDlyResume:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    170              OS_TCB    *ptcb;
    171          #if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    172              OS_CPU_SR  cpu_sr = 0;
    173          #endif
    174          
    175          
    176          
    177              if (prio >= OS_LOWEST_PRIO) {
   \   00000004   0x2C1F             CMP      R4,#+31
   \   00000006   0xD301             BCC.N    ??OSTimeDlyResume_0
    178                  return (OS_ERR_PRIO_INVALID);
   \   00000008   0x202A             MOVS     R0,#+42
   \   0000000A   0xBD10             POP      {R4,PC}
    179              }
    180              OS_ENTER_CRITICAL();
   \                     ??OSTimeDlyResume_0:
   \   0000000C   0x.... 0x....      BL       OS_CPU_SR_Save
    181              ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   \   00000010   0x....             LDR.N    R1,??DataTable4_4
   \   00000012   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
    182              if (ptcb == (OS_TCB *)0) {
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xBF18             IT       NE 
   \   0000001A   0x2901             CMPNE    R1,#+1
    183                  OS_EXIT_CRITICAL();
    184                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    185              }
    186              if (ptcb == OS_TCB_RESERVED) {
   \   0000001C   0xD103             BNE.N    ??OSTimeDlyResume_1
    187                  OS_EXIT_CRITICAL();
   \   0000001E   0x.... 0x....      BL       OS_CPU_SR_Restore
    188                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   \   00000022   0x2043             MOVS     R0,#+67
   \   00000024   0xBD10             POP      {R4,PC}
    189              }
    190              if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   \                     ??OSTimeDlyResume_1:
   \   00000026   0x8B4A             LDRH     R2,[R1, #+26]
   \   00000028   0xB91A             CBNZ.N   R2,??OSTimeDlyResume_2
    191                  OS_EXIT_CRITICAL();
   \   0000002A   0x.... 0x....      BL       OS_CPU_SR_Restore
    192                  return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   \   0000002E   0x2050             MOVS     R0,#+80
   \   00000030   0xBD10             POP      {R4,PC}
    193              }
    194          
    195              ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   \                     ??OSTimeDlyResume_2:
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x834A             STRH     R2,[R1, #+26]
    196              if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   \   00000036   0xF201 0x011A      ADDW     R1,R1,#+26
   \   0000003A   0x788A             LDRB     R2,[R1, #+2]
   \   0000003C   0x2337             MOVS     R3,#+55
   \   0000003E   0x421A             TST      R2,R3
   \   00000040   0xD005             BEQ.N    ??OSTimeDlyResume_3
    197                  ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   \   00000042   0x788A             LDRB     R2,[R1, #+2]
   \   00000044   0xF002 0x02C8      AND      R2,R2,#0xC8
   \   00000048   0x708A             STRB     R2,[R1, #+2]
    198                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0xE000             B.N      ??OSTimeDlyResume_4
    199              } else {
    200                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   \                     ??OSTimeDlyResume_3:
   \   0000004E   0x2200             MOVS     R2,#+0
   \                     ??OSTimeDlyResume_4:
   \   00000050   0x70CA             STRB     R2,[R1, #+3]
    201              }
    202              if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   \   00000052   0x788A             LDRB     R2,[R1, #+2]
   \   00000054   0x0712             LSLS     R2,R2,#+28
   \   00000056   0xD410             BMI.N    ??OSTimeDlyResume_5
    203                  OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   \   00000058   0x....             LDR.N    R2,??DataTable4_3
   \   0000005A   0x7813             LDRB     R3,[R2, #+0]
   \   0000005C   0x7A0C             LDRB     R4,[R1, #+8]
   \   0000005E   0x4323             ORRS     R3,R4,R3
   \   00000060   0x7013             STRB     R3,[R2, #+0]
   \   00000062   0x798A             LDRB     R2,[R1, #+6]
   \   00000064   0x....             LDR.N    R3,??DataTable4_2
   \   00000066   0x5CD4             LDRB     R4,[R2, R3]
   \   00000068   0x79C9             LDRB     R1,[R1, #+7]
   \   0000006A   0x4321             ORRS     R1,R1,R4
   \   0000006C   0x54D1             STRB     R1,[R2, R3]
    204                  OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    205                  OS_EXIT_CRITICAL();
   \   0000006E   0x.... 0x....      BL       OS_CPU_SR_Restore
    206                  OS_Sched();                                            /* See if this is new highest priority  */
   \   00000072   0x.... 0x....      BL       OS_Sched
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xBD10             POP      {R4,PC}
    207              } else {
    208                  OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
   \                     ??OSTimeDlyResume_5:
   \   0000007A   0x.... 0x....      BL       OS_CPU_SR_Restore
    209              }
    210              return (OS_ERR_NONE);
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xBD10             POP      {R4,PC}          ;; return
    211          }
    212          #endif
    213          /*$PAGE*/
    214          /*
    215          *********************************************************************************************************
    216          *                                         GET CURRENT SYSTEM TIME
    217          *
    218          * Description: This function is used by your application to obtain the current value of the 32-bit
    219          *              counter which keeps track of the number of clock ticks.
    220          *
    221          * Arguments  : none
    222          *
    223          * Returns    : The current value of OSTime
    224          *********************************************************************************************************
    225          */
    226          
    227          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    228          INT32U  OSTimeGet (void)
    229          {
   \                     OSTimeGet:
   \   00000000   0xB510             PUSH     {R4,LR}
    230              INT32U     ticks;
    231          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    232              OS_CPU_SR  cpu_sr = 0;
    233          #endif
    234          
    235          
    236          
    237              OS_ENTER_CRITICAL();
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
    238              ticks = OSTime;
   \   00000006   0x....             LDR.N    R1,??DataTable4_5
   \   00000008   0x680C             LDR      R4,[R1, #+0]
    239              OS_EXIT_CRITICAL();
   \   0000000A   0x.... 0x....      BL       OS_CPU_SR_Restore
    240              return (ticks);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    241          }
    242          #endif
    243          
    244          /*
    245          *********************************************************************************************************
    246          *                                            SET SYSTEM CLOCK
    247          *
    248          * Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
    249          *
    250          * Arguments  : ticks      specifies the new value that OSTime needs to take.
    251          *
    252          * Returns    : none
    253          *********************************************************************************************************
    254          */
    255          
    256          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    257          void  OSTimeSet (INT32U ticks)
    258          {
   \                     OSTimeSet:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    259          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    260              OS_CPU_SR  cpu_sr = 0;
    261          #endif
    262          
    263          
    264          
    265              OS_ENTER_CRITICAL();
   \   00000004   0x.... 0x....      BL       OS_CPU_SR_Save
    266              OSTime = ticks;
   \   00000008   0x....             LDR.N    R1,??DataTable4_5
   \   0000000A   0x600C             STR      R4,[R1, #+0]
    267              OS_EXIT_CRITICAL();
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      OS_CPU_SR_Restore
    268          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     OSRdyTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     OSRdyGrp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     OSTCBPrioTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     OSTime
    269          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  OSTimeDly
             24 -> OS_CPU_SR_Restore
             24 -> OS_CPU_SR_Save
              0 -> OS_Sched
       16  OSTimeDlyHMSM
             16 -> OSTimeDly
        8  OSTimeDlyResume
              8 -> OS_CPU_SR_Restore
              8 -> OS_CPU_SR_Save
              8 -> OS_Sched
        8  OSTimeGet
              8 -> OS_CPU_SR_Restore
              8 -> OS_CPU_SR_Save
        8  OSTimeSet
              0 -> OS_CPU_SR_Restore
              8 -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      66  OSTimeDly
      82  OSTimeDlyHMSM
     130  OSTimeDlyResume
      18  OSTimeGet
      20  OSTimeSet

 
 340 bytes in section .text
 
 340 bytes of CODE memory

Errors: none
Warnings: none
